{
    "sourceFile": "TEXT.txt",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1760156370143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1760156370143,
            "name": "Commit-0",
            "content": "// server/signaling.js\r\nconst express = require(\"express\");\r\nconst http = require(\"http\");\r\nconst { Server } = require(\"socket.io\");\r\nconst { v4: uuidv4 } = require(\"uuid\");\r\n\r\nconst app = express();\r\nconst server = http.createServer(app);\r\n\r\nconst io = new Server(server, {\r\n  cors: {\r\n    origin: \"https://connectify-hub.vercel.app\",\r\n    methods: [\"GET\", \"POST\"],\r\n  },\r\n});\r\n\r\napp.get(\"/\", (req, res) => res.send(\"🚀 Signaling server is running!\"));\r\n\r\n// -------------------------\r\n// In-memory waiting queue\r\n// -------------------------\r\nlet waitingUsers = [];\r\n\r\n// -------------------------\r\n// Socket connection\r\n// -------------------------\r\nio.on(\"connection\", (socket) => {\r\n  console.log(\"✅ User connected:\", socket.id);\r\n\r\n  // -------------------------\r\n  // Start Looking / Matchmaking\r\n  // -------------------------\r\n  socket.on(\"start-looking\", (userInfo = {}) => {\r\n    const { gender, country, age, name, filterGender = \"\", filterCountry = \"\" } = userInfo;\r\n    socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n    socket.partnerId = null;\r\n\r\n    // Find a compatible partner\r\n    const index = waitingUsers.findIndex((other) => {\r\n      if (!other.connected || !other.userData) return false;\r\n\r\n      const my = socket.userData;\r\n      const their = other.userData;\r\n\r\n      const mutualMatch =\r\n        (!their.filterGender || their.filterGender === my.gender) &&\r\n        (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n        (!my.filterGender || my.filterGender === their.gender) &&\r\n        (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n\r\n      return mutualMatch;\r\n    });\r\n\r\n    if (index !== -1) {\r\n      const partner = waitingUsers.splice(index, 1)[0];\r\n      const roomId = uuidv4();\r\n\r\n      socket.join(roomId);\r\n      partner.join(roomId);\r\n\r\n      // Link partners\r\n      socket.partnerId = partner.id;\r\n      partner.partnerId = socket.id;\r\n\r\n      // Emit matched event to both\r\n      partner.emit(\"matched\", {\r\n        roomId,\r\n        partnerId: socket.id,\r\n        isOfferer: true,\r\n        partnerName: socket.userData?.name || \"Stranger\",\r\n        partnerAge: socket.userData?.age || \"Unknown\",\r\n        partnerCountry: socket.userData?.country || \"Unknown\",\r\n      });\r\n\r\n      socket.emit(\"matched\", {\r\n        roomId,\r\n        partnerId: partner.id,\r\n        isOfferer: false,\r\n        partnerName: partner.userData?.name || \"Stranger\",\r\n        partnerAge: partner.userData?.age || \"Unknown\",\r\n        partnerCountry: partner.userData?.country || \"Unknown\",\r\n      });\r\n\r\n      console.log(`🤝 Matched ${socket.id} ↔ ${partner.id} in ${roomId}`);\r\n    } else {\r\n      waitingUsers.push(socket);\r\n      console.log(`🕒 ${socket.id} waiting...`);\r\n    }\r\n  });\r\n\r\n  // -------------------------\r\n  // Leave / Skip / End\r\n  // -------------------------\r\n  socket.on(\"leave-room\", (roomId) => {\r\n    socket.leave(roomId);\r\n    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n    socket.partnerId = null;\r\n  });\r\n\r\n  socket.on(\"skip\", () => {\r\n    console.log(`⏭️ ${socket.id} skipped`);\r\n    if (socket.partnerId) {\r\n      const partnerSocket = io.sockets.sockets.get(socket.partnerId);\r\n      if (partnerSocket) {\r\n        partnerSocket.emit(\"partner-left\", { partnerId: socket.id });\r\n        partnerSocket.partnerId = null;\r\n      }\r\n    }\r\n    socket.partnerId = null;\r\n    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n    socket.emit(\"start-looking\", socket.userData);\r\n  });\r\n\r\n // -------------------------\r\n// WebRTC Signaling\r\n// -------------------------\r\nsocket.on(\"join-room\", (roomId) => {\r\n  console.log(`📡 ${socket.id} joined WebRTC room ${roomId}`);\r\n  socket.join(roomId);\r\n  socket.emit(\"joined-room\", roomId); // ✅ Important: notify client\r\n});\r\n\r\nsocket.on(\"offer\", ({ offer, roomId }) =>\r\n  socket.to(roomId).emit(\"offer\", { offer, sender: socket.id })\r\n);\r\n\r\nsocket.on(\"answer\", ({ answer, roomId }) =>\r\n  socket.to(roomId).emit(\"answer\", { answer, sender: socket.id })\r\n);\r\n\r\nsocket.on(\"ice-candidate\", ({ candidate, roomId }) =>\r\n  socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id })\r\n);\r\n\r\n\r\n  // -------------------------\r\n  // Chat / Messaging\r\n  // -------------------------\r\n  socket.on(\"send-message\", (msg) => {\r\n    const { roomId } = msg;\r\n    socket.to(roomId).emit(\"receive-message\", msg);\r\n  });\r\n\r\n  socket.on(\"typing\", ({ roomId, sender }) =>\r\n    socket.to(roomId).emit(\"typing\", { sender })\r\n  );\r\n\r\n  socket.on(\"message-status\", ({ roomId, messageId, status }) =>\r\n    socket.to(roomId).emit(\"message-status-update\", { messageId, status })\r\n  );\r\n\r\n  socket.on(\"edit-message\", ({ roomId, messageId, content }) =>\r\n    socket\r\n      .to(roomId)\r\n      .emit(\"receive-message\", { id: messageId, content, type: \"text\", edited: true })\r\n  );\r\n\r\n  socket.on(\"delete-message\", ({ roomId, messageId }) =>\r\n    socket.to(roomId).emit(\"message-deleted\", { messageId })\r\n  );\r\n\r\n  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) =>\r\n    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user })\r\n  );\r\n\r\n  // -------------------------\r\n  // Disconnect / Page Refresh / Tab Close\r\n  // -------------------------\r\n  socket.on(\"disconnect\", (reason) => {\r\n    console.log(`❌ User disconnected: ${socket.id} (${reason})`);\r\n    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n\r\n    if (socket.partnerId) {\r\n      const partnerSocket = io.sockets.sockets.get(socket.partnerId);\r\n      if (partnerSocket) {\r\n        partnerSocket.emit(\"partner-left\", { partnerId: socket.id });\r\n        partnerSocket.partnerId = null;\r\n      }\r\n    }\r\n\r\n    socket.partnerId = null;\r\n  });\r\n});\r\n\r\n// -------------------------\r\n// Start Server\r\n// -------------------------\r\nconst PORT = process.env.PORT || 3001;\r\nserver.listen(PORT, () => console.log(`🚀 Signaling server running on port ${PORT}`));\r\n"
        }
    ]
}