{
    "sourceFile": "features/RoomChat/services/roomSocketService.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1758898616961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758906520234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,127 @@\n+import { io, Socket } from \"socket.io-client\";\r\n+import { v4 as uuidv4 } from \"uuid\";\r\n+\r\n+// ✅ Update to your deployed signaling server or use env variable\r\n+const SOCKET_URL =\r\n+  process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n+\r\n+let socket: Socket | null = null;\r\n+\r\n+/** Connect to the room socket server and return the socket instance */\r\n+export const connectRoomSocket = (): Socket => {\r\n+  if (!socket) {\r\n+    socket = io(SOCKET_URL, { transports: [\"websocket\"] });\r\n+\r\n+    socket.on(\"connect\", () => {\r\n+      console.log(\"✅ Connected to room server:\", socket.id);\r\n+    });\r\n+\r\n+    socket.on(\"disconnect\", (reason) => {\r\n+      console.log(\"❌ Disconnected from room server:\", reason);\r\n+    });\r\n+  }\r\n+  return socket;\r\n+};\r\n+\r\n+/** Disconnect and clean up the room socket connection */\r\n+export const disconnectRoomSocket = (): void => {\r\n+  if (socket) {\r\n+    socket.disconnect();\r\n+    socket = null;\r\n+  }\r\n+};\r\n+\r\n+/** Get the active socket instance (may be null if not connected) */\r\n+export const getRoomSocket = (): Socket | null => socket;\r\n+\r\n+// -------------------------------------------------\r\n+// ⚡ Room Operations\r\n+// -------------------------------------------------\r\n+\r\n+export interface Room {\r\n+  id: string;\r\n+  name: string;\r\n+  topic: string;\r\n+  description?: string;\r\n+  hasPassword: boolean;\r\n+  password?: string | null;\r\n+  users?: { id: string; userInfo: any }[];\r\n+}\r\n+\r\n+/** Create a new room */\r\n+export const createRoom = (room: Room): void => {\r\n+  socket?.emit(\"create-room\", room);\r\n+};\r\n+\r\n+/** Request a list of rooms from the server */\r\n+export const listRooms = (): void => {\r\n+  socket?.emit(\"list-rooms\");\r\n+};\r\n+\r\n+/** Join a room (dynamic) */\r\n+export const joinRoom = (roomId: string): void => {\r\n+  socket?.emit(\"join-room-dynamic\", { roomId });\r\n+};\r\n+\r\n+/** Leave a room */\r\n+export const leaveRoom = (roomId: string): void => {\r\n+  socket?.emit(\"leave-room\", { roomId });\r\n+};\r\n+\r\n+// -------------------------------------------------\r\n+// 💬 Messaging\r\n+// -------------------------------------------------\r\n+\r\n+export interface RoomMessage {\r\n+  id: string;\r\n+  text: string;\r\n+  user: string | undefined;\r\n+  timestamp: string;\r\n+}\r\n+\r\n+/** Send a text message to a room */\r\n+export const sendRoomMessage = (roomId: string, text: string): void => {\r\n+  const message: RoomMessage = {\r\n+    id: uuidv4(),\r\n+    text,\r\n+    user: socket?.id,\r\n+    timestamp: new Date().toISOString(),\r\n+  };\r\n+  socket?.emit(\"room-message\", { roomId, ...message });\r\n+};\r\n+\r\n+/** Subscribe to incoming room messages */\r\n+export const onRoomMessage = (callback: (msg: RoomMessage) => void): void => {\r\n+  socket?.off(\"room-message\").on(\"room-message\", callback);\r\n+};\r\n+\r\n+// -------------------------------------------------\r\n+// 🎥 WebRTC Signaling\r\n+// -------------------------------------------------\r\n+\r\n+/** Send WebRTC offer to a peer inside a room */\r\n+export const sendRoomOffer = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  offer: RTCSessionDescriptionInit\r\n+): void => {\r\n+  socket?.emit(\"room-offer\", { to, roomId, offer });\r\n+};\r\n+\r\n+/** Send WebRTC answer to a peer inside a room */\r\n+export const sendRoomAnswer = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  answer: RTCSessionDescriptionInit\r\n+): void => {\r\n+  socket?.emit(\"room-answer\", { to, roomId, answer });\r\n+};\r\n+\r\n+/** Send ICE candidate to a peer inside a room */\r\n+export const sendRoomIce = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  candidate: RTCIceCandidateInit\r\n+): void => {\r\n+  socket?.emit(\"room-ice\", { to, roomId, candidate });\r\n+};\r\n"
                },
                {
                    "date": 1758906582679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,127 @@\n+import { io, Socket } from \"socket.io-client\";\r\n+import { v4 as uuidv4 } from \"uuid\";\r\n+\r\n+// ✅ Update to your deployed signaling server or use env variable\r\n+const SOCKET_URL =\r\n+  process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n+\r\n+let socket: Socket | null = null;\r\n+\r\n+/** Connect to the room socket server and return the socket instance */\r\n+export const connectRoomSocket = (): Socket => {\r\n+  if (!socket) {\r\n+    socket = io(SOCKET_URL, { transports: [\"websocket\"] });\r\n+\r\n+    socket.on(\"connect\", () => {\r\n+      console.log(\"✅ Connected to room server:\", socket!.id);\r\n+    });\r\n+\r\n+    socket.on(\"disconnect\", (reason) => {\r\n+      console.log(\"❌ Disconnected from room server:\", reason);\r\n+    });\r\n+  }\r\n+  return socket;\r\n+};\r\n+\r\n+/** Disconnect and clean up the room socket connection */\r\n+export const disconnectRoomSocket = (): void => {\r\n+  if (socket) {\r\n+    socket.disconnect();\r\n+    socket = null;\r\n+  }\r\n+};\r\n+\r\n+/** Get the active socket instance (may be null if not connected) */\r\n+export const getRoomSocket = (): Socket | null => socket;\r\n+\r\n+// -------------------------------------------------\r\n+// ⚡ Room Operations\r\n+// -------------------------------------------------\r\n+\r\n+export interface Room {\r\n+  id: string;\r\n+  name: string;\r\n+  topic: string;\r\n+  description?: string;\r\n+  hasPassword: boolean;\r\n+  password?: string | null;\r\n+  users?: { id: string; userInfo: any }[];\r\n+}\r\n+\r\n+/** Create a new room */\r\n+export const createRoom = (room: Room): void => {\r\n+  socket?.emit(\"create-room\", room);\r\n+};\r\n+\r\n+/** Request a list of rooms from the server */\r\n+export const listRooms = (): void => {\r\n+  socket?.emit(\"list-rooms\");\r\n+};\r\n+\r\n+/** Join a room (dynamic) */\r\n+export const joinRoom = (roomId: string): void => {\r\n+  socket?.emit(\"join-room-dynamic\", { roomId });\r\n+};\r\n+\r\n+/** Leave a room */\r\n+export const leaveRoom = (roomId: string): void => {\r\n+  socket?.emit(\"leave-room\", { roomId });\r\n+};\r\n+\r\n+// -------------------------------------------------\r\n+// 💬 Messaging\r\n+// -------------------------------------------------\r\n+\r\n+export interface RoomMessage {\r\n+  id: string;\r\n+  text: string;\r\n+  user: string | undefined;\r\n+  timestamp: string;\r\n+}\r\n+\r\n+/** Send a text message to a room */\r\n+export const sendRoomMessage = (roomId: string, text: string): void => {\r\n+  const message: RoomMessage = {\r\n+    id: uuidv4(),\r\n+    text,\r\n+    user: socket?.id,\r\n+    timestamp: new Date().toISOString(),\r\n+  };\r\n+  socket?.emit(\"room-message\", { roomId, ...message });\r\n+};\r\n+\r\n+/** Subscribe to incoming room messages */\r\n+export const onRoomMessage = (callback: (msg: RoomMessage) => void): void => {\r\n+  socket?.off(\"room-message\").on(\"room-message\", callback);\r\n+};\r\n+\r\n+// -------------------------------------------------\r\n+// 🎥 WebRTC Signaling\r\n+// -------------------------------------------------\r\n+\r\n+/** Send WebRTC offer to a peer inside a room */\r\n+export const sendRoomOffer = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  offer: RTCSessionDescriptionInit\r\n+): void => {\r\n+  socket?.emit(\"room-offer\", { to, roomId, offer });\r\n+};\r\n+\r\n+/** Send WebRTC answer to a peer inside a room */\r\n+export const sendRoomAnswer = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  answer: RTCSessionDescriptionInit\r\n+): void => {\r\n+  socket?.emit(\"room-answer\", { to, roomId, answer });\r\n+};\r\n+\r\n+/** Send ICE candidate to a peer inside a room */\r\n+export const sendRoomIce = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  candidate: RTCIceCandidateInit\r\n+): void => {\r\n+  socket?.emit(\"room-ice\", { to, roomId, candidate });\r\n+};\r\n"
                },
                {
                    "date": 1760156647015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,329 +1,126 @@\n import { io, Socket } from \"socket.io-client\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n \r\n-// ✅ Update to your deployed signaling server or use env variable\r\n-const SOCKET_URL =\r\n-  process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n+// ✅ Use your signaling server URL\r\n+const SOCKET_URL = process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n \r\n+// Single socket instance for /rooms namespace\r\n let socket: Socket | null = null;\r\n \r\n-/** Connect to the room socket server and return the socket instance */\r\n+/** Connect to the room socket server (namespace /rooms) */\r\n export const connectRoomSocket = (): Socket => {\r\n   if (!socket) {\r\n-    socket = io(SOCKET_URL, { transports: [\"websocket\"] });\r\n+    socket = io(`${SOCKET_URL}/rooms`, {\r\n+      transports: [\"websocket\"],\r\n+    });\r\n \r\n     socket.on(\"connect\", () => {\r\n-      console.log(\"✅ Connected to room server:\", socket!.id);\r\n+      console.log(\"✅ Connected to /rooms server:\", socket!.id);\r\n     });\r\n \r\n     socket.on(\"disconnect\", (reason) => {\r\n-      console.log(\"❌ Disconnected from room server:\", reason);\r\n+      console.log(\"❌ Disconnected from /rooms server:\", reason);\r\n     });\r\n   }\r\n   return socket;\r\n };\r\n \r\n-/** Disconnect and clean up the room socket connection */\r\n+/** Disconnect from room server */\r\n export const disconnectRoomSocket = (): void => {\r\n   if (socket) {\r\n     socket.disconnect();\r\n     socket = null;\r\n   }\r\n };\r\n \r\n-/** Get the active socket instance (may be null if not connected) */\r\n+/** Get current socket instance */\r\n export const getRoomSocket = (): Socket | null => socket;\r\n \r\n // -------------------------------------------------\r\n // ⚡ Room Operations\r\n // -------------------------------------------------\r\n-\r\n export interface Room {\r\n   id: string;\r\n   name: string;\r\n   topic: string;\r\n   description?: string;\r\n   hasPassword: boolean;\r\n   password?: string | null;\r\n-  users?: { id: string; userInfo: any }[];\r\n+  users?: { socketId: string; userInfo: any }[];\r\n }\r\n \r\n-/** Create a new room */\r\n-export const createRoom = (room: Room): void => {\r\n-  socket?.emit(\"create-room\", room);\r\n+/** Join a room */\r\n+export const joinRoom = (roomId: string, user: any): void => {\r\n+  socket?.emit(\"join-room\", { roomId, user });\r\n };\r\n \r\n-/** Request a list of rooms from the server */\r\n-export const listRooms = (): void => {\r\n-  socket?.emit(\"list-rooms\");\r\n-};\r\n-\r\n-/** Join a room (dynamic) */\r\n-export const joinRoom = (roomId: string): void => {\r\n-  socket?.emit(\"join-room-dynamic\", { roomId });\r\n-};\r\n-\r\n /** Leave a room */\r\n-export const leaveRoom = (roomId: string): void => {\r\n-  socket?.emit(\"leave-room\", { roomId });\r\n+export const leaveRoom = (roomId: string, userId: string): void => {\r\n+  socket?.emit(\"leave-room\", { roomId, userId });\r\n };\r\n \r\n // -------------------------------------------------\r\n // 💬 Messaging\r\n // -------------------------------------------------\r\n-\r\n export interface RoomMessage {\r\n   id: string;\r\n   text: string;\r\n   user: string | undefined;\r\n   timestamp: string;\r\n }\r\n \r\n-/** Send a text message to a room */\r\n+/** Send a message to the room */\r\n export const sendRoomMessage = (roomId: string, text: string): void => {\r\n   const message: RoomMessage = {\r\n     id: uuidv4(),\r\n     text,\r\n     user: socket?.id,\r\n     timestamp: new Date().toISOString(),\r\n   };\r\n-  socket?.emit(\"room-message\", { roomId, ...message });\r\n+  socket?.emit(\"send-message\", { roomId, message });\r\n };\r\n \r\n-/** Subscribe to incoming room messages */\r\n+/** Listen for incoming room messages */\r\n export const onRoomMessage = (callback: (msg: RoomMessage) => void): void => {\r\n-  socket?.off(\"room-message\").on(\"room-message\", callback);\r\n+  socket?.off(\"receive-message\").on(\"receive-message\", (data) => {\r\n+    callback(data.message);\r\n+  });\r\n };\r\n \r\n // -------------------------------------------------\r\n-// 🎥 WebRTC Signaling\r\n+// ⌨️ Typing indicator\r\n // -------------------------------------------------\r\n-\r\n-/** Send WebRTC offer to a peer inside a room */\r\n-export const sendRoomOffer = (\r\n-  to: string,\r\n-  roomId: string,\r\n-  offer: RTCSessionDescriptionInit\r\n-): void => {\r\n-  socket?.emit(\"room-offer\", { to, roomId, offer });\r\n+export const sendTyping = (roomId: string, userId: string): void => {\r\n+  socket?.emit(\"typing\", { roomId, userId });\r\n };\r\n \r\n-/** Send WebRTC answer to a peer inside a room */\r\n-export const sendRoomAnswer = (\r\n-  to: string,\r\n-  roomId: string,\r\n-  answer: RTCSessionDescriptionInit\r\n-): void => {\r\n-  socket?.emit(\"room-answer\", { to, roomId, answer });\r\n+export const onTyping = (callback: (data: any) => void): void => {\r\n+  socket?.off(\"typing\").on(\"typing\", callback);\r\n };\r\n \r\n-/** Send ICE candidate to a peer inside a room */\r\n-export const sendRoomIce = (\r\n-  to: string,\r\n-  roomId: string,\r\n-  candidate: RTCIceCandidateInit\r\n-): void => {\r\n-  socket?.emit(\"room-ice\", { to, roomId, candidate });\r\n-};\r\n-import { io, Socket } from \"socket.io-client\";\r\n-import { v4 as uuidv4 } from \"uuid\";\r\n-\r\n-// ✅ Update to your deployed signaling server or use env variable\r\n-const SOCKET_URL =\r\n-  process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n-\r\n-let socket: Socket | null = null;\r\n-\r\n-/** Connect to the room socket server and return the socket instance */\r\n-export const connectRoomSocket = (): Socket => {\r\n-  if (!socket) {\r\n-    socket = io(SOCKET_URL, { transports: [\"websocket\"] });\r\n-\r\n-    socket.on(\"connect\", () => {\r\n-      console.log(\"✅ Connected to room server:\", socket.id);\r\n-    });\r\n-\r\n-    socket.on(\"disconnect\", (reason) => {\r\n-      console.log(\"❌ Disconnected from room server:\", reason);\r\n-    });\r\n-  }\r\n-  return socket;\r\n-};\r\n-\r\n-/** Disconnect and clean up the room socket connection */\r\n-export const disconnectRoomSocket = (): void => {\r\n-  if (socket) {\r\n-    socket.disconnect();\r\n-    socket = null;\r\n-  }\r\n-};\r\n-\r\n-/** Get the active socket instance (may be null if not connected) */\r\n-export const getRoomSocket = (): Socket | null => socket;\r\n-\r\n // -------------------------------------------------\r\n-// ⚡ Room Operations\r\n-// -------------------------------------------------\r\n-\r\n-export interface Room {\r\n-  id: string;\r\n-  name: string;\r\n-  topic: string;\r\n-  description?: string;\r\n-  hasPassword: boolean;\r\n-  password?: string | null;\r\n-  users?: { id: string; userInfo: any }[];\r\n-}\r\n-\r\n-/** Create a new room */\r\n-export const createRoom = (room: Room): void => {\r\n-  socket?.emit(\"create-room\", room);\r\n-};\r\n-\r\n-/** Request a list of rooms from the server */\r\n-export const listRooms = (): void => {\r\n-  socket?.emit(\"list-rooms\");\r\n-};\r\n-\r\n-/** Join a room (dynamic) */\r\n-export const joinRoom = (roomId: string): void => {\r\n-  socket?.emit(\"join-room-dynamic\", { roomId });\r\n-};\r\n-\r\n-/** Leave a room */\r\n-export const leaveRoom = (roomId: string): void => {\r\n-  socket?.emit(\"leave-room\", { roomId });\r\n-};\r\n-\r\n-// -------------------------------------------------\r\n-// 💬 Messaging\r\n-// -------------------------------------------------\r\n-\r\n-export interface RoomMessage {\r\n-  id: string;\r\n-  text: string;\r\n-  user: string | undefined;\r\n-  timestamp: string;\r\n-}\r\n-\r\n-/** Send a text message to a room */\r\n-export const sendRoomMessage = (roomId: string, text: string): void => {\r\n-  const message: RoomMessage = {\r\n-    id: uuidv4(),\r\n-    text,\r\n-    user: socket?.id,\r\n-    timestamp: new Date().toISOString(),\r\n-  };\r\n-  socket?.emit(\"room-message\", { roomId, ...message });\r\n-};\r\n-\r\n-/** Subscribe to incoming room messages */\r\n-export const onRoomMessage = (callback: (msg: RoomMessage) => void): void => {\r\n-  socket?.off(\"room-message\").on(\"room-message\", callback);\r\n-};\r\n-\r\n-// -------------------------------------------------\r\n // 🎥 WebRTC Signaling\r\n // -------------------------------------------------\r\n-\r\n-/** Send WebRTC offer to a peer inside a room */\r\n export const sendRoomOffer = (\r\n   to: string,\r\n   roomId: string,\r\n   offer: RTCSessionDescriptionInit\r\n ): void => {\r\n   socket?.emit(\"room-offer\", { to, roomId, offer });\r\n };\r\n \r\n-/** Send WebRTC answer to a peer inside a room */\r\n export const sendRoomAnswer = (\r\n   to: string,\r\n   roomId: string,\r\n   answer: RTCSessionDescriptionInit\r\n ): void => {\r\n   socket?.emit(\"room-answer\", { to, roomId, answer });\r\n };\r\n \r\n-/** Send ICE candidate to a peer inside a room */\r\n export const sendRoomIce = (\r\n   to: string,\r\n   roomId: string,\r\n   candidate: RTCIceCandidateInit\r\n ): void => {\r\n   socket?.emit(\"room-ice\", { to, roomId, candidate });\r\n };\r\n-import { io, Socket } from \"socket.io-client\";\r\n-import { v4 as uuidv4 } from \"uuid\";\r\n-\r\n-const SOCKET_URL = process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n-\r\n-let socket: Socket | null = null;\r\n-\r\n-export const connectRoomSocket = () => {\r\n-  if (!socket) {\r\n-    socket = io(SOCKET_URL, { transports: [\"websocket\"] });\r\n-\r\n-    socket.on(\"connect\", () => {\r\n-      console.log(\"✅ Connected to room server:\", socket?.id);\r\n-    });\r\n-\r\n-    socket.on(\"disconnect\", () => {\r\n-      console.log(\"❌ Disconnected from room server\");\r\n-    });\r\n-  }\r\n-};\r\n-\r\n-export const disconnectRoomSocket = () => {\r\n-  socket?.disconnect();\r\n-  socket = null;\r\n-};\r\n-\r\n-export const getRoomSocket = () => socket;\r\n-\r\n-// --- Room Operations ---\r\n-\r\n-export const createRoom = (room: any) => {\r\n-  socket?.emit(\"create-room\", room);\r\n-};\r\n-\r\n-export const listRooms = () => {\r\n-  socket?.emit(\"list-rooms\");\r\n-};\r\n-\r\n-export const joinRoom = (roomId: string) => {\r\n-  socket?.emit(\"join-room-dynamic\", { roomId });\r\n-};\r\n-\r\n-export const leaveRoom = (roomId: string) => {\r\n-  socket?.emit(\"leave-room\", { roomId });\r\n-};\r\n-\r\n-// --- Messaging ---\r\n-\r\n-export const sendRoomMessage = (roomId: string, text: string) => {\r\n-  const message = {\r\n-    id: uuidv4(),\r\n-    text,\r\n-    user: socket?.id,\r\n-    timestamp: new Date().toISOString(),\r\n-  };\r\n-  socket?.emit(\"room-message\", { roomId, ...message });\r\n-};\r\n-\r\n-export const onRoomMessage = (callback: (msg: any) => void) => {\r\n-  socket?.off(\"room-message\").on(\"room-message\", callback);\r\n-};\r\n-\r\n-// --- WebRTC ---\r\n-\r\n-export const sendRoomOffer = (to: string, roomId: string, offer: RTCSessionDescriptionInit) => {\r\n-  socket?.emit(\"room-offer\", { to, roomId, offer });\r\n-};\r\n-\r\n-export const sendRoomAnswer = (to: string, roomId: string, answer: RTCSessionDescriptionInit) => {\r\n-  socket?.emit(\"room-answer\", { to, roomId, answer });\r\n-};\r\n-\r\n-export const sendRoomIce = (to: string, roomId: string, candidate: RTCIceCandidateInit) => {\r\n-  socket?.emit(\"room-ice\", { to, roomId, candidate });\r\n-};\r\n"
                },
                {
                    "date": 1760156716875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,13 @@\n import { io, Socket } from \"socket.io-client\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n \r\n-// ✅ Use your signaling server URL\r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n \r\n // Single socket instance for /rooms namespace\r\n let socket: Socket | null = null;\r\n \r\n-/** Connect to the room socket server (namespace /rooms) */\r\n+/** Connect to /rooms namespace */\r\n export const connectRoomSocket = (): Socket => {\r\n   if (!socket) {\r\n     socket = io(`${SOCKET_URL}/rooms`, {\r\n       transports: [\"websocket\"],\r\n@@ -24,21 +23,21 @@\n   }\r\n   return socket;\r\n };\r\n \r\n-/** Disconnect from room server */\r\n+/** Disconnect socket */\r\n export const disconnectRoomSocket = (): void => {\r\n   if (socket) {\r\n     socket.disconnect();\r\n     socket = null;\r\n   }\r\n };\r\n \r\n-/** Get current socket instance */\r\n+/** Get current socket */\r\n export const getRoomSocket = (): Socket | null => socket;\r\n \r\n // -------------------------------------------------\r\n-// ⚡ Room Operations\r\n+// Room Operations\r\n // -------------------------------------------------\r\n export interface Room {\r\n   id: string;\r\n   name: string;\r\n@@ -48,29 +47,26 @@\n   password?: string | null;\r\n   users?: { socketId: string; userInfo: any }[];\r\n }\r\n \r\n-/** Join a room */\r\n export const joinRoom = (roomId: string, user: any): void => {\r\n   socket?.emit(\"join-room\", { roomId, user });\r\n };\r\n \r\n-/** Leave a room */\r\n export const leaveRoom = (roomId: string, userId: string): void => {\r\n   socket?.emit(\"leave-room\", { roomId, userId });\r\n };\r\n \r\n // -------------------------------------------------\r\n-// 💬 Messaging\r\n+// Messaging\r\n // -------------------------------------------------\r\n export interface RoomMessage {\r\n   id: string;\r\n   text: string;\r\n   user: string | undefined;\r\n   timestamp: string;\r\n }\r\n \r\n-/** Send a message to the room */\r\n export const sendRoomMessage = (roomId: string, text: string): void => {\r\n   const message: RoomMessage = {\r\n     id: uuidv4(),\r\n     text,\r\n@@ -79,17 +75,16 @@\n   };\r\n   socket?.emit(\"send-message\", { roomId, message });\r\n };\r\n \r\n-/** Listen for incoming room messages */\r\n export const onRoomMessage = (callback: (msg: RoomMessage) => void): void => {\r\n   socket?.off(\"receive-message\").on(\"receive-message\", (data) => {\r\n     callback(data.message);\r\n   });\r\n };\r\n \r\n // -------------------------------------------------\r\n-// ⌨️ Typing indicator\r\n+// Typing\r\n // -------------------------------------------------\r\n export const sendTyping = (roomId: string, userId: string): void => {\r\n   socket?.emit(\"typing\", { roomId, userId });\r\n };\r\n@@ -98,9 +93,9 @@\n   socket?.off(\"typing\").on(\"typing\", callback);\r\n };\r\n \r\n // -------------------------------------------------\r\n-// 🎥 WebRTC Signaling\r\n+// WebRTC\r\n // -------------------------------------------------\r\n export const sendRoomOffer = (\r\n   to: string,\r\n   roomId: string,\r\n"
                },
                {
                    "date": 1760158834544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,121 +1,115 @@\n-import { io, Socket } from \"socket.io-client\";\r\n-import { v4 as uuidv4 } from \"uuid\";\r\n+import { useEffect, useRef, useState } from \"react\";\r\n+import { getRoomSocket, sendRoomOffer, sendRoomAnswer, sendRoomIce } from \"../services/roomSocketService\";\r\n \r\n-const SOCKET_URL = process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n+interface PeersMap {\r\n+  [peerId: string]: RTCPeerConnection;\r\n+}\r\n \r\n-// Single socket instance for /rooms namespace\r\n-let socket: Socket | null = null;\r\n+interface RemoteStreamsMap {\r\n+  [peerId: string]: MediaStream;\r\n+}\r\n \r\n-/** Connect to /rooms namespace */\r\n-export const connectRoomSocket = (): Socket => {\r\n-  if (!socket) {\r\n-    socket = io(`${SOCKET_URL}/rooms`, {\r\n-      transports: [\"websocket\"],\r\n-    });\r\n+export default function useRoomWebRTC(localStream: MediaStream | null, roomId: string) {\r\n+  const [remoteStreams, setRemoteStreams] = useState<RemoteStreamsMap>({});\r\n+  const peerConnections = useRef<PeersMap>({});\r\n+  const socket = getRoomSocket();\r\n \r\n-    socket.on(\"connect\", () => {\r\n-      console.log(\"✅ Connected to /rooms server:\", socket!.id);\r\n-    });\r\n+  /** ---- Create a new peer connection ---- */\r\n+  const createPeerConnection = (peerId: string) => {\r\n+    if (!localStream) return null;\r\n+    if (peerConnections.current[peerId]) return peerConnections.current[peerId];\r\n \r\n-    socket.on(\"disconnect\", (reason) => {\r\n-      console.log(\"❌ Disconnected from /rooms server:\", reason);\r\n+    const pc = new RTCPeerConnection({\r\n+      iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }],\r\n     });\r\n-  }\r\n-  return socket;\r\n-};\r\n \r\n-/** Disconnect socket */\r\n-export const disconnectRoomSocket = (): void => {\r\n-  if (socket) {\r\n-    socket.disconnect();\r\n-    socket = null;\r\n-  }\r\n-};\r\n+    // Add local tracks\r\n+    localStream.getTracks().forEach((track) => pc.addTrack(track, localStream));\r\n \r\n-/** Get current socket */\r\n-export const getRoomSocket = (): Socket | null => socket;\r\n+    // Remote tracks\r\n+    pc.ontrack = (event) => {\r\n+      setRemoteStreams((prev) => ({\r\n+        ...prev,\r\n+        [peerId]: event.streams[0],\r\n+      }));\r\n+    };\r\n \r\n-// -------------------------------------------------\r\n-// Room Operations\r\n-// -------------------------------------------------\r\n-export interface Room {\r\n-  id: string;\r\n-  name: string;\r\n-  topic: string;\r\n-  description?: string;\r\n-  hasPassword: boolean;\r\n-  password?: string | null;\r\n-  users?: { socketId: string; userInfo: any }[];\r\n-}\r\n+    // ICE candidates\r\n+    pc.onicecandidate = (event) => {\r\n+      if (event.candidate) sendRoomIce(peerId, roomId, event.candidate);\r\n+    };\r\n \r\n-export const joinRoom = (roomId: string, user: any): void => {\r\n-  socket?.emit(\"join-room\", { roomId, user });\r\n-};\r\n+    peerConnections.current[peerId] = pc;\r\n+    return pc;\r\n+  };\r\n \r\n-export const leaveRoom = (roomId: string, userId: string): void => {\r\n-  socket?.emit(\"leave-room\", { roomId, userId });\r\n-};\r\n+  /** ---- Remove a peer connection ---- */\r\n+  const removePeerConnection = (peerId: string) => {\r\n+    const pc = peerConnections.current[peerId];\r\n+    if (pc) {\r\n+      pc.close();\r\n+      delete peerConnections.current[peerId];\r\n+      setRemoteStreams((prev) => {\r\n+        const updated = { ...prev };\r\n+        delete updated[peerId];\r\n+        return updated;\r\n+      });\r\n+    }\r\n+  };\r\n \r\n-// -------------------------------------------------\r\n-// Messaging\r\n-// -------------------------------------------------\r\n-export interface RoomMessage {\r\n-  id: string;\r\n-  text: string;\r\n-  user: string | undefined;\r\n-  timestamp: string;\r\n-}\r\n-\r\n-export const sendRoomMessage = (roomId: string, text: string): void => {\r\n-  const message: RoomMessage = {\r\n-    id: uuidv4(),\r\n-    text,\r\n-    user: socket?.id,\r\n-    timestamp: new Date().toISOString(),\r\n+  /** ---- Close all peers ---- */\r\n+  const closeAllPeers = () => {\r\n+    Object.values(peerConnections.current).forEach((pc) => pc.close());\r\n+    peerConnections.current = {};\r\n+    setRemoteStreams({});\r\n   };\r\n-  socket?.emit(\"send-message\", { roomId, message });\r\n-};\r\n \r\n-export const onRoomMessage = (callback: (msg: RoomMessage) => void): void => {\r\n-  socket?.off(\"receive-message\").on(\"receive-message\", (data) => {\r\n-    callback(data.message);\r\n-  });\r\n-};\r\n+  /** ---- Socket listeners ---- */\r\n+  useEffect(() => {\r\n+    if (!socket || !roomId) return;\r\n \r\n-// -------------------------------------------------\r\n-// Typing\r\n-// -------------------------------------------------\r\n-export const sendTyping = (roomId: string, userId: string): void => {\r\n-  socket?.emit(\"typing\", { roomId, userId });\r\n-};\r\n+    // When a new offer is received\r\n+    const handleOffer = async ({ from, offer }: { from: string; offer: RTCSessionDescriptionInit }) => {\r\n+      const pc = createPeerConnection(from);\r\n+      if (!pc) return;\r\n \r\n-export const onTyping = (callback: (data: any) => void): void => {\r\n-  socket?.off(\"typing\").on(\"typing\", callback);\r\n-};\r\n+      await pc.setRemoteDescription(new RTCSessionDescription(offer));\r\n+      const answer = await pc.createAnswer();\r\n+      await pc.setLocalDescription(answer);\r\n+      sendRoomAnswer(from, roomId, answer);\r\n+    };\r\n \r\n-// -------------------------------------------------\r\n-// WebRTC\r\n-// -------------------------------------------------\r\n-export const sendRoomOffer = (\r\n-  to: string,\r\n-  roomId: string,\r\n-  offer: RTCSessionDescriptionInit\r\n-): void => {\r\n-  socket?.emit(\"room-offer\", { to, roomId, offer });\r\n-};\r\n+    // When an answer is received\r\n+    const handleAnswer = async ({ from, answer }: { from: string; answer: RTCSessionDescriptionInit }) => {\r\n+      const pc = peerConnections.current[from];\r\n+      if (!pc) return;\r\n+      await pc.setRemoteDescription(new RTCSessionDescription(answer));\r\n+    };\r\n \r\n-export const sendRoomAnswer = (\r\n-  to: string,\r\n-  roomId: string,\r\n-  answer: RTCSessionDescriptionInit\r\n-): void => {\r\n-  socket?.emit(\"room-answer\", { to, roomId, answer });\r\n-};\r\n+    // When ICE candidate is received\r\n+    const handleIce = async ({ from, candidate }: { from: string; candidate: RTCIceCandidateInit }) => {\r\n+      const pc = peerConnections.current[from];\r\n+      if (!pc || !candidate) return;\r\n+      await pc.addIceCandidate(new RTCIceCandidate(candidate));\r\n+    };\r\n \r\n-export const sendRoomIce = (\r\n-  to: string,\r\n-  roomId: string,\r\n-  candidate: RTCIceCandidateInit\r\n-): void => {\r\n-  socket?.emit(\"room-ice\", { to, roomId, candidate });\r\n-};\r\n+    socket.on(\"room-offer\", handleOffer);\r\n+    socket.on(\"room-answer\", handleAnswer);\r\n+    socket.on(\"room-ice\", handleIce);\r\n+\r\n+    return () => {\r\n+      socket.off(\"room-offer\", handleOffer);\r\n+      socket.off(\"room-answer\", handleAnswer);\r\n+      socket.off(\"room-ice\", handleIce);\r\n+      closeAllPeers();\r\n+    };\r\n+  }, [socket, roomId, localStream]);\r\n+\r\n+  return {\r\n+    remoteStreams,\r\n+    peerConnections: peerConnections.current,\r\n+    createPeerConnection,\r\n+    removePeerConnection,\r\n+    closeAllPeers,\r\n+  };\r\n+}\r\n"
                },
                {
                    "date": 1760158899343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,115 +1,121 @@\n-import { useEffect, useRef, useState } from \"react\";\r\n-import { getRoomSocket, sendRoomOffer, sendRoomAnswer, sendRoomIce } from \"../services/roomSocketService\";\r\n+import { io, Socket } from \"socket.io-client\";\r\n+import { v4 as uuidv4 } from \"uuid\";\r\n \r\n-interface PeersMap {\r\n-  [peerId: string]: RTCPeerConnection;\r\n-}\r\n+const SOCKET_URL = process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n \r\n-interface RemoteStreamsMap {\r\n-  [peerId: string]: MediaStream;\r\n-}\r\n+// Single socket instance for /rooms namespace\r\n+let socket: Socket | null = null;\r\n \r\n-export default function useRoomWebRTC(localStream: MediaStream | null, roomId: string) {\r\n-  const [remoteStreams, setRemoteStreams] = useState<RemoteStreamsMap>({});\r\n-  const peerConnections = useRef<PeersMap>({});\r\n-  const socket = getRoomSocket();\r\n+/** Connect to /rooms namespace */\r\n+export const connectRoomSocket = (): Socket => {\r\n+  if (!socket) {\r\n+    socket = io(`${SOCKET_URL}/rooms`, {\r\n+      transports: [\"websocket\"],\r\n+    });\r\n \r\n-  /** ---- Create a new peer connection ---- */\r\n-  const createPeerConnection = (peerId: string) => {\r\n-    if (!localStream) return null;\r\n-    if (peerConnections.current[peerId]) return peerConnections.current[peerId];\r\n+    socket.on(\"connect\", () => {\r\n+      console.log(\"✅ Connected to /rooms server:\", socket!.id);\r\n+    });\r\n \r\n-    const pc = new RTCPeerConnection({\r\n-      iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }],\r\n+    socket.on(\"disconnect\", (reason) => {\r\n+      console.log(\"❌ Disconnected from /rooms server:\", reason);\r\n     });\r\n+  }\r\n+  return socket;\r\n+};\r\n \r\n-    // Add local tracks\r\n-    localStream.getTracks().forEach((track) => pc.addTrack(track, localStream));\r\n+/** Disconnect socket */\r\n+export const disconnectRoomSocket = (): void => {\r\n+  if (socket) {\r\n+    socket.disconnect();\r\n+    socket = null;\r\n+  }\r\n+};\r\n \r\n-    // Remote tracks\r\n-    pc.ontrack = (event) => {\r\n-      setRemoteStreams((prev) => ({\r\n-        ...prev,\r\n-        [peerId]: event.streams[0],\r\n-      }));\r\n-    };\r\n+/** Get current socket */\r\n+export const getRoomSocket = (): Socket | null => socket;\r\n \r\n-    // ICE candidates\r\n-    pc.onicecandidate = (event) => {\r\n-      if (event.candidate) sendRoomIce(peerId, roomId, event.candidate);\r\n-    };\r\n+// -------------------------------------------------\r\n+// Room Operations\r\n+// -------------------------------------------------\r\n+export interface Room {\r\n+  id: string;\r\n+  name: string;\r\n+  topic: string;\r\n+  description?: string;\r\n+  hasPassword: boolean;\r\n+  password?: string | null;\r\n+  users?: { socketId: string; userInfo: any }[];\r\n+}\r\n \r\n-    peerConnections.current[peerId] = pc;\r\n-    return pc;\r\n-  };\r\n+export const joinRoom = (roomId: string, user: any): void => {\r\n+  socket?.emit(\"join-room\", { roomId, user });\r\n+};\r\n \r\n-  /** ---- Remove a peer connection ---- */\r\n-  const removePeerConnection = (peerId: string) => {\r\n-    const pc = peerConnections.current[peerId];\r\n-    if (pc) {\r\n-      pc.close();\r\n-      delete peerConnections.current[peerId];\r\n-      setRemoteStreams((prev) => {\r\n-        const updated = { ...prev };\r\n-        delete updated[peerId];\r\n-        return updated;\r\n-      });\r\n-    }\r\n-  };\r\n+export const leaveRoom = (roomId: string, userId: string): void => {\r\n+  socket?.emit(\"leave-room\", { roomId, userId });\r\n+};\r\n \r\n-  /** ---- Close all peers ---- */\r\n-  const closeAllPeers = () => {\r\n-    Object.values(peerConnections.current).forEach((pc) => pc.close());\r\n-    peerConnections.current = {};\r\n-    setRemoteStreams({});\r\n+// -------------------------------------------------\r\n+// Messaging\r\n+// -------------------------------------------------\r\n+export interface RoomMessage {\r\n+  id: string;\r\n+  text: string;\r\n+  user: string | undefined;\r\n+  timestamp: string;\r\n+}\r\n+\r\n+export const sendRoomMessage = (roomId: string, text: string): void => {\r\n+  const message: RoomMessage = {\r\n+    id: uuidv4(),\r\n+    text,\r\n+    user: socket?.id,\r\n+    timestamp: new Date().toISOString(),\r\n   };\r\n+  socket?.emit(\"send-message\", { roomId, message });\r\n+};\r\n \r\n-  /** ---- Socket listeners ---- */\r\n-  useEffect(() => {\r\n-    if (!socket || !roomId) return;\r\n+export const onRoomMessage = (callback: (msg: RoomMessage) => void): void => {\r\n+  socket?.off(\"receive-message\").on(\"receive-message\", (data) => {\r\n+    callback(data.message);\r\n+  });\r\n+};\r\n \r\n-    // When a new offer is received\r\n-    const handleOffer = async ({ from, offer }: { from: string; offer: RTCSessionDescriptionInit }) => {\r\n-      const pc = createPeerConnection(from);\r\n-      if (!pc) return;\r\n+// -------------------------------------------------\r\n+// Typing\r\n+// -------------------------------------------------\r\n+export const sendTyping = (roomId: string, userId: string): void => {\r\n+  socket?.emit(\"typing\", { roomId, userId });\r\n+};\r\n \r\n-      await pc.setRemoteDescription(new RTCSessionDescription(offer));\r\n-      const answer = await pc.createAnswer();\r\n-      await pc.setLocalDescription(answer);\r\n-      sendRoomAnswer(from, roomId, answer);\r\n-    };\r\n+export const onTyping = (callback: (data: any) => void): void => {\r\n+  socket?.off(\"typing\").on(\"typing\", callback);\r\n+};\r\n \r\n-    // When an answer is received\r\n-    const handleAnswer = async ({ from, answer }: { from: string; answer: RTCSessionDescriptionInit }) => {\r\n-      const pc = peerConnections.current[from];\r\n-      if (!pc) return;\r\n-      await pc.setRemoteDescription(new RTCSessionDescription(answer));\r\n-    };\r\n+// -------------------------------------------------\r\n+// WebRTC\r\n+// -------------------------------------------------\r\n+export const sendRoomOffer = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  offer: RTCSessionDescriptionInit\r\n+): void => {\r\n+  socket?.emit(\"room-offer\", { to, roomId, offer });\r\n+};\r\n \r\n-    // When ICE candidate is received\r\n-    const handleIce = async ({ from, candidate }: { from: string; candidate: RTCIceCandidateInit }) => {\r\n-      const pc = peerConnections.current[from];\r\n-      if (!pc || !candidate) return;\r\n-      await pc.addIceCandidate(new RTCIceCandidate(candidate));\r\n-    };\r\n+export const sendRoomAnswer = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  answer: RTCSessionDescriptionInit\r\n+): void => {\r\n+  socket?.emit(\"room-answer\", { to, roomId, answer });\r\n+};\r\n \r\n-    socket.on(\"room-offer\", handleOffer);\r\n-    socket.on(\"room-answer\", handleAnswer);\r\n-    socket.on(\"room-ice\", handleIce);\r\n-\r\n-    return () => {\r\n-      socket.off(\"room-offer\", handleOffer);\r\n-      socket.off(\"room-answer\", handleAnswer);\r\n-      socket.off(\"room-ice\", handleIce);\r\n-      closeAllPeers();\r\n-    };\r\n-  }, [socket, roomId, localStream]);\r\n-\r\n-  return {\r\n-    remoteStreams,\r\n-    peerConnections: peerConnections.current,\r\n-    createPeerConnection,\r\n-    removePeerConnection,\r\n-    closeAllPeers,\r\n-  };\r\n-}\r\n+export const sendRoomIce = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  candidate: RTCIceCandidateInit\r\n+): void => {\r\n+  socket?.emit(\"room-ice\", { to, roomId, candidate });\r\n+};\r\n"
                },
                {
                    "date": 1760191650998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,194 @@\n+import { io, Socket } from \"socket.io-client\";\r\n+import { v4 as uuidv4 } from \"uuid\";\r\n+\r\n+// -------------------------------------------------\r\n+// Constants\r\n+// -------------------------------------------------\r\n+const SOCKET_URL =\r\n+  process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n+\r\n+const NAMESPACE = \"/rooms\";\r\n+\r\n+// -------------------------------------------------\r\n+// Socket Singleton\r\n+// -------------------------------------------------\r\n+let socket: Socket | null = null;\r\n+\r\n+/** Initialize and connect to the /rooms namespace */\r\n+export const connectRoomSocket = (): Socket => {\r\n+  if (socket && socket.connected) return socket;\r\n+\r\n+  socket = io(`${SOCKET_URL}${NAMESPACE}`, {\r\n+    transports: [\"websocket\"],\r\n+    reconnection: true,\r\n+    reconnectionAttempts: 5,\r\n+    reconnectionDelay: 1000,\r\n+  });\r\n+\r\n+  // --- Lifecycle Events ---\r\n+  socket.on(\"connect\", () => {\r\n+    console.log(`✅ Connected to ${NAMESPACE} as ${socket!.id}`);\r\n+  });\r\n+\r\n+  socket.on(\"disconnect\", (reason) => {\r\n+    console.warn(`❌ Disconnected from ${NAMESPACE}:`, reason);\r\n+  });\r\n+\r\n+  socket.on(\"connect_error\", (err) => {\r\n+    console.error(`⚠️ Connection error (${NAMESPACE}):`, err.message);\r\n+  });\r\n+\r\n+  return socket;\r\n+};\r\n+\r\n+/** Disconnect and cleanup */\r\n+export const disconnectRoomSocket = (): void => {\r\n+  if (socket) {\r\n+    socket.removeAllListeners();\r\n+    socket.disconnect();\r\n+    socket = null;\r\n+    console.log(`🔌 Disconnected cleanly from ${NAMESPACE}`);\r\n+  }\r\n+};\r\n+\r\n+/** Get the active socket instance */\r\n+export const getRoomSocket = (): Socket | null => socket;\r\n+\r\n+// -------------------------------------------------\r\n+// Interfaces\r\n+// -------------------------------------------------\r\n+export interface RoomUser {\r\n+  socketId: string;\r\n+  userInfo: {\r\n+    name?: string;\r\n+    avatar?: string;\r\n+    country?: string;\r\n+    [key: string]: any;\r\n+  };\r\n+}\r\n+\r\n+export interface Room {\r\n+  id: string;\r\n+  name: string;\r\n+  topic: string;\r\n+  description?: string;\r\n+  hasPassword: boolean;\r\n+  password?: string | null;\r\n+  users?: RoomUser[];\r\n+}\r\n+\r\n+export interface RoomMessage {\r\n+  id: string;\r\n+  text: string;\r\n+  userId: string;\r\n+  username?: string;\r\n+  timestamp: string;\r\n+}\r\n+\r\n+// -------------------------------------------------\r\n+// Room Events\r\n+// -------------------------------------------------\r\n+export const joinRoom = (roomId: string, user: RoomUser[\"userInfo\"]): void => {\r\n+  socket?.emit(\"join-room\", { roomId, user });\r\n+};\r\n+\r\n+export const leaveRoom = (roomId: string, userId: string): void => {\r\n+  socket?.emit(\"leave-room\", { roomId, userId });\r\n+};\r\n+\r\n+// Listen for room user updates (optional helper)\r\n+export const onRoomUsersUpdate = (\r\n+  callback: (users: RoomUser[]) => void\r\n+): void => {\r\n+  socket?.off(\"room-users\").on(\"room-users\", callback);\r\n+};\r\n+\r\n+// -------------------------------------------------\r\n+// Messaging\r\n+// -------------------------------------------------\r\n+export const sendRoomMessage = (\r\n+  roomId: string,\r\n+  text: string,\r\n+  userId?: string,\r\n+  username?: string\r\n+): void => {\r\n+  if (!socket?.connected) {\r\n+    console.warn(\"⚠️ Cannot send message: Socket not connected\");\r\n+    return;\r\n+  }\r\n+\r\n+  const message: RoomMessage = {\r\n+    id: uuidv4(),\r\n+    text: text.trim(),\r\n+    userId: userId || socket.id!,\r\n+    username,\r\n+    timestamp: new Date().toISOString(),\r\n+  };\r\n+\r\n+  socket.emit(\"send-message\", { roomId, message });\r\n+};\r\n+\r\n+export const onRoomMessage = (callback: (msg: RoomMessage) => void): void => {\r\n+  socket?.off(\"receive-message\").on(\"receive-message\", (data) => {\r\n+    if (data?.message) callback(data.message);\r\n+  });\r\n+};\r\n+\r\n+// -------------------------------------------------\r\n+// Typing Events\r\n+// -------------------------------------------------\r\n+export const sendTyping = (roomId: string, userId: string): void => {\r\n+  socket?.emit(\"typing\", { roomId, userId });\r\n+};\r\n+\r\n+export const onTyping = (\r\n+  callback: (data: { roomId: string; userId: string }) => void\r\n+): void => {\r\n+  socket?.off(\"typing\").on(\"typing\", callback);\r\n+};\r\n+\r\n+// -------------------------------------------------\r\n+// WebRTC Signaling\r\n+// -------------------------------------------------\r\n+export const sendRoomOffer = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  offer: RTCSessionDescriptionInit\r\n+): void => {\r\n+  socket?.emit(\"room-offer\", { to, roomId, offer });\r\n+};\r\n+\r\n+export const sendRoomAnswer = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  answer: RTCSessionDescriptionInit\r\n+): void => {\r\n+  socket?.emit(\"room-answer\", { to, roomId, answer });\r\n+};\r\n+\r\n+export const sendRoomIce = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  candidate: RTCIceCandidateInit\r\n+): void => {\r\n+  socket?.emit(\"room-ice\", { to, roomId, candidate });\r\n+};\r\n+\r\n+// --- Incoming signaling listeners ---\r\n+export const onRoomOffer = (\r\n+  callback: (data: { from: string; offer: RTCSessionDescriptionInit }) => void\r\n+): void => {\r\n+  socket?.off(\"room-offer\").on(\"room-offer\", callback);\r\n+};\r\n+\r\n+export const onRoomAnswer = (\r\n+  callback: (data: { from: string; answer: RTCSessionDescriptionInit }) => void\r\n+): void => {\r\n+  socket?.off(\"room-answer\").on(\"room-answer\", callback);\r\n+};\r\n+\r\n+export const onRoomIce = (\r\n+  callback: (data: { from: string; candidate: RTCIceCandidateInit }) => void\r\n+): void => {\r\n+  socket?.off(\"room-ice\").on(\"room-ice\", callback);\r\n+};\r\n"
                },
                {
                    "date": 1760191651219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,125 +191,4 @@\n   callback: (data: { from: string; candidate: RTCIceCandidateInit }) => void\r\n ): void => {\r\n   socket?.off(\"room-ice\").on(\"room-ice\", callback);\r\n };\r\n-import { io, Socket } from \"socket.io-client\";\r\n-import { v4 as uuidv4 } from \"uuid\";\r\n-\r\n-const SOCKET_URL = process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n-\r\n-// Single socket instance for /rooms namespace\r\n-let socket: Socket | null = null;\r\n-\r\n-/** Connect to /rooms namespace */\r\n-export const connectRoomSocket = (): Socket => {\r\n-  if (!socket) {\r\n-    socket = io(`${SOCKET_URL}/rooms`, {\r\n-      transports: [\"websocket\"],\r\n-    });\r\n-\r\n-    socket.on(\"connect\", () => {\r\n-      console.log(\"✅ Connected to /rooms server:\", socket!.id);\r\n-    });\r\n-\r\n-    socket.on(\"disconnect\", (reason) => {\r\n-      console.log(\"❌ Disconnected from /rooms server:\", reason);\r\n-    });\r\n-  }\r\n-  return socket;\r\n-};\r\n-\r\n-/** Disconnect socket */\r\n-export const disconnectRoomSocket = (): void => {\r\n-  if (socket) {\r\n-    socket.disconnect();\r\n-    socket = null;\r\n-  }\r\n-};\r\n-\r\n-/** Get current socket */\r\n-export const getRoomSocket = (): Socket | null => socket;\r\n-\r\n-// -------------------------------------------------\r\n-// Room Operations\r\n-// -------------------------------------------------\r\n-export interface Room {\r\n-  id: string;\r\n-  name: string;\r\n-  topic: string;\r\n-  description?: string;\r\n-  hasPassword: boolean;\r\n-  password?: string | null;\r\n-  users?: { socketId: string; userInfo: any }[];\r\n-}\r\n-\r\n-export const joinRoom = (roomId: string, user: any): void => {\r\n-  socket?.emit(\"join-room\", { roomId, user });\r\n-};\r\n-\r\n-export const leaveRoom = (roomId: string, userId: string): void => {\r\n-  socket?.emit(\"leave-room\", { roomId, userId });\r\n-};\r\n-\r\n-// -------------------------------------------------\r\n-// Messaging\r\n-// -------------------------------------------------\r\n-export interface RoomMessage {\r\n-  id: string;\r\n-  text: string;\r\n-  user: string | undefined;\r\n-  timestamp: string;\r\n-}\r\n-\r\n-export const sendRoomMessage = (roomId: string, text: string): void => {\r\n-  const message: RoomMessage = {\r\n-    id: uuidv4(),\r\n-    text,\r\n-    user: socket?.id,\r\n-    timestamp: new Date().toISOString(),\r\n-  };\r\n-  socket?.emit(\"send-message\", { roomId, message });\r\n-};\r\n-\r\n-export const onRoomMessage = (callback: (msg: RoomMessage) => void): void => {\r\n-  socket?.off(\"receive-message\").on(\"receive-message\", (data) => {\r\n-    callback(data.message);\r\n-  });\r\n-};\r\n-\r\n-// -------------------------------------------------\r\n-// Typing\r\n-// -------------------------------------------------\r\n-export const sendTyping = (roomId: string, userId: string): void => {\r\n-  socket?.emit(\"typing\", { roomId, userId });\r\n-};\r\n-\r\n-export const onTyping = (callback: (data: any) => void): void => {\r\n-  socket?.off(\"typing\").on(\"typing\", callback);\r\n-};\r\n-\r\n-// -------------------------------------------------\r\n-// WebRTC\r\n-// -------------------------------------------------\r\n-export const sendRoomOffer = (\r\n-  to: string,\r\n-  roomId: string,\r\n-  offer: RTCSessionDescriptionInit\r\n-): void => {\r\n-  socket?.emit(\"room-offer\", { to, roomId, offer });\r\n-};\r\n-\r\n-export const sendRoomAnswer = (\r\n-  to: string,\r\n-  roomId: string,\r\n-  answer: RTCSessionDescriptionInit\r\n-): void => {\r\n-  socket?.emit(\"room-answer\", { to, roomId, answer });\r\n-};\r\n-\r\n-export const sendRoomIce = (\r\n-  to: string,\r\n-  roomId: string,\r\n-  candidate: RTCIceCandidateInit\r\n-): void => {\r\n-  socket?.emit(\"room-ice\", { to, roomId, candidate });\r\n-};\r\n"
                }
            ],
            "date": 1758898616961,
            "name": "Commit-0",
            "content": "import { io, Socket } from \"socket.io-client\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst SOCKET_URL = process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n\r\nlet socket: Socket | null = null;\r\n\r\nexport const connectRoomSocket = () => {\r\n  if (!socket) {\r\n    socket = io(SOCKET_URL, { transports: [\"websocket\"] });\r\n\r\n    socket.on(\"connect\", () => {\r\n      console.log(\"✅ Connected to room server:\", socket?.id);\r\n    });\r\n\r\n    socket.on(\"disconnect\", () => {\r\n      console.log(\"❌ Disconnected from room server\");\r\n    });\r\n  }\r\n};\r\n\r\nexport const disconnectRoomSocket = () => {\r\n  socket?.disconnect();\r\n  socket = null;\r\n};\r\n\r\nexport const getRoomSocket = () => socket;\r\n\r\n// --- Room Operations ---\r\n\r\nexport const createRoom = (room: any) => {\r\n  socket?.emit(\"create-room\", room);\r\n};\r\n\r\nexport const listRooms = () => {\r\n  socket?.emit(\"list-rooms\");\r\n};\r\n\r\nexport const joinRoom = (roomId: string) => {\r\n  socket?.emit(\"join-room-dynamic\", { roomId });\r\n};\r\n\r\nexport const leaveRoom = (roomId: string) => {\r\n  socket?.emit(\"leave-room\", { roomId });\r\n};\r\n\r\n// --- Messaging ---\r\n\r\nexport const sendRoomMessage = (roomId: string, text: string) => {\r\n  const message = {\r\n    id: uuidv4(),\r\n    text,\r\n    user: socket?.id,\r\n    timestamp: new Date().toISOString(),\r\n  };\r\n  socket?.emit(\"room-message\", { roomId, ...message });\r\n};\r\n\r\nexport const onRoomMessage = (callback: (msg: any) => void) => {\r\n  socket?.off(\"room-message\").on(\"room-message\", callback);\r\n};\r\n\r\n// --- WebRTC ---\r\n\r\nexport const sendRoomOffer = (to: string, roomId: string, offer: RTCSessionDescriptionInit) => {\r\n  socket?.emit(\"room-offer\", { to, roomId, offer });\r\n};\r\n\r\nexport const sendRoomAnswer = (to: string, roomId: string, answer: RTCSessionDescriptionInit) => {\r\n  socket?.emit(\"room-answer\", { to, roomId, answer });\r\n};\r\n\r\nexport const sendRoomIce = (to: string, roomId: string, candidate: RTCIceCandidateInit) => {\r\n  socket?.emit(\"room-ice\", { to, roomId, candidate });\r\n};\r\n"
        }
    ]
}