{
    "sourceFile": "features/RoomChat/services/roomSocketService.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1758898616961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758906520234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,127 @@\n+import { io, Socket } from \"socket.io-client\";\r\n+import { v4 as uuidv4 } from \"uuid\";\r\n+\r\n+// ✅ Update to your deployed signaling server or use env variable\r\n+const SOCKET_URL =\r\n+  process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n+\r\n+let socket: Socket | null = null;\r\n+\r\n+/** Connect to the room socket server and return the socket instance */\r\n+export const connectRoomSocket = (): Socket => {\r\n+  if (!socket) {\r\n+    socket = io(SOCKET_URL, { transports: [\"websocket\"] });\r\n+\r\n+    socket.on(\"connect\", () => {\r\n+      console.log(\"✅ Connected to room server:\", socket.id);\r\n+    });\r\n+\r\n+    socket.on(\"disconnect\", (reason) => {\r\n+      console.log(\"❌ Disconnected from room server:\", reason);\r\n+    });\r\n+  }\r\n+  return socket;\r\n+};\r\n+\r\n+/** Disconnect and clean up the room socket connection */\r\n+export const disconnectRoomSocket = (): void => {\r\n+  if (socket) {\r\n+    socket.disconnect();\r\n+    socket = null;\r\n+  }\r\n+};\r\n+\r\n+/** Get the active socket instance (may be null if not connected) */\r\n+export const getRoomSocket = (): Socket | null => socket;\r\n+\r\n+// -------------------------------------------------\r\n+// ⚡ Room Operations\r\n+// -------------------------------------------------\r\n+\r\n+export interface Room {\r\n+  id: string;\r\n+  name: string;\r\n+  topic: string;\r\n+  description?: string;\r\n+  hasPassword: boolean;\r\n+  password?: string | null;\r\n+  users?: { id: string; userInfo: any }[];\r\n+}\r\n+\r\n+/** Create a new room */\r\n+export const createRoom = (room: Room): void => {\r\n+  socket?.emit(\"create-room\", room);\r\n+};\r\n+\r\n+/** Request a list of rooms from the server */\r\n+export const listRooms = (): void => {\r\n+  socket?.emit(\"list-rooms\");\r\n+};\r\n+\r\n+/** Join a room (dynamic) */\r\n+export const joinRoom = (roomId: string): void => {\r\n+  socket?.emit(\"join-room-dynamic\", { roomId });\r\n+};\r\n+\r\n+/** Leave a room */\r\n+export const leaveRoom = (roomId: string): void => {\r\n+  socket?.emit(\"leave-room\", { roomId });\r\n+};\r\n+\r\n+// -------------------------------------------------\r\n+// 💬 Messaging\r\n+// -------------------------------------------------\r\n+\r\n+export interface RoomMessage {\r\n+  id: string;\r\n+  text: string;\r\n+  user: string | undefined;\r\n+  timestamp: string;\r\n+}\r\n+\r\n+/** Send a text message to a room */\r\n+export const sendRoomMessage = (roomId: string, text: string): void => {\r\n+  const message: RoomMessage = {\r\n+    id: uuidv4(),\r\n+    text,\r\n+    user: socket?.id,\r\n+    timestamp: new Date().toISOString(),\r\n+  };\r\n+  socket?.emit(\"room-message\", { roomId, ...message });\r\n+};\r\n+\r\n+/** Subscribe to incoming room messages */\r\n+export const onRoomMessage = (callback: (msg: RoomMessage) => void): void => {\r\n+  socket?.off(\"room-message\").on(\"room-message\", callback);\r\n+};\r\n+\r\n+// -------------------------------------------------\r\n+// 🎥 WebRTC Signaling\r\n+// -------------------------------------------------\r\n+\r\n+/** Send WebRTC offer to a peer inside a room */\r\n+export const sendRoomOffer = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  offer: RTCSessionDescriptionInit\r\n+): void => {\r\n+  socket?.emit(\"room-offer\", { to, roomId, offer });\r\n+};\r\n+\r\n+/** Send WebRTC answer to a peer inside a room */\r\n+export const sendRoomAnswer = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  answer: RTCSessionDescriptionInit\r\n+): void => {\r\n+  socket?.emit(\"room-answer\", { to, roomId, answer });\r\n+};\r\n+\r\n+/** Send ICE candidate to a peer inside a room */\r\n+export const sendRoomIce = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  candidate: RTCIceCandidateInit\r\n+): void => {\r\n+  socket?.emit(\"room-ice\", { to, roomId, candidate });\r\n+};\r\n"
                },
                {
                    "date": 1758906582679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,127 @@\n+import { io, Socket } from \"socket.io-client\";\r\n+import { v4 as uuidv4 } from \"uuid\";\r\n+\r\n+// ✅ Update to your deployed signaling server or use env variable\r\n+const SOCKET_URL =\r\n+  process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n+\r\n+let socket: Socket | null = null;\r\n+\r\n+/** Connect to the room socket server and return the socket instance */\r\n+export const connectRoomSocket = (): Socket => {\r\n+  if (!socket) {\r\n+    socket = io(SOCKET_URL, { transports: [\"websocket\"] });\r\n+\r\n+    socket.on(\"connect\", () => {\r\n+      console.log(\"✅ Connected to room server:\", socket!.id);\r\n+    });\r\n+\r\n+    socket.on(\"disconnect\", (reason) => {\r\n+      console.log(\"❌ Disconnected from room server:\", reason);\r\n+    });\r\n+  }\r\n+  return socket;\r\n+};\r\n+\r\n+/** Disconnect and clean up the room socket connection */\r\n+export const disconnectRoomSocket = (): void => {\r\n+  if (socket) {\r\n+    socket.disconnect();\r\n+    socket = null;\r\n+  }\r\n+};\r\n+\r\n+/** Get the active socket instance (may be null if not connected) */\r\n+export const getRoomSocket = (): Socket | null => socket;\r\n+\r\n+// -------------------------------------------------\r\n+// ⚡ Room Operations\r\n+// -------------------------------------------------\r\n+\r\n+export interface Room {\r\n+  id: string;\r\n+  name: string;\r\n+  topic: string;\r\n+  description?: string;\r\n+  hasPassword: boolean;\r\n+  password?: string | null;\r\n+  users?: { id: string; userInfo: any }[];\r\n+}\r\n+\r\n+/** Create a new room */\r\n+export const createRoom = (room: Room): void => {\r\n+  socket?.emit(\"create-room\", room);\r\n+};\r\n+\r\n+/** Request a list of rooms from the server */\r\n+export const listRooms = (): void => {\r\n+  socket?.emit(\"list-rooms\");\r\n+};\r\n+\r\n+/** Join a room (dynamic) */\r\n+export const joinRoom = (roomId: string): void => {\r\n+  socket?.emit(\"join-room-dynamic\", { roomId });\r\n+};\r\n+\r\n+/** Leave a room */\r\n+export const leaveRoom = (roomId: string): void => {\r\n+  socket?.emit(\"leave-room\", { roomId });\r\n+};\r\n+\r\n+// -------------------------------------------------\r\n+// 💬 Messaging\r\n+// -------------------------------------------------\r\n+\r\n+export interface RoomMessage {\r\n+  id: string;\r\n+  text: string;\r\n+  user: string | undefined;\r\n+  timestamp: string;\r\n+}\r\n+\r\n+/** Send a text message to a room */\r\n+export const sendRoomMessage = (roomId: string, text: string): void => {\r\n+  const message: RoomMessage = {\r\n+    id: uuidv4(),\r\n+    text,\r\n+    user: socket?.id,\r\n+    timestamp: new Date().toISOString(),\r\n+  };\r\n+  socket?.emit(\"room-message\", { roomId, ...message });\r\n+};\r\n+\r\n+/** Subscribe to incoming room messages */\r\n+export const onRoomMessage = (callback: (msg: RoomMessage) => void): void => {\r\n+  socket?.off(\"room-message\").on(\"room-message\", callback);\r\n+};\r\n+\r\n+// -------------------------------------------------\r\n+// 🎥 WebRTC Signaling\r\n+// -------------------------------------------------\r\n+\r\n+/** Send WebRTC offer to a peer inside a room */\r\n+export const sendRoomOffer = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  offer: RTCSessionDescriptionInit\r\n+): void => {\r\n+  socket?.emit(\"room-offer\", { to, roomId, offer });\r\n+};\r\n+\r\n+/** Send WebRTC answer to a peer inside a room */\r\n+export const sendRoomAnswer = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  answer: RTCSessionDescriptionInit\r\n+): void => {\r\n+  socket?.emit(\"room-answer\", { to, roomId, answer });\r\n+};\r\n+\r\n+/** Send ICE candidate to a peer inside a room */\r\n+export const sendRoomIce = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  candidate: RTCIceCandidateInit\r\n+): void => {\r\n+  socket?.emit(\"room-ice\", { to, roomId, candidate });\r\n+};\r\n"
                }
            ],
            "date": 1758898616961,
            "name": "Commit-0",
            "content": "import { io, Socket } from \"socket.io-client\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst SOCKET_URL = process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n\r\nlet socket: Socket | null = null;\r\n\r\nexport const connectRoomSocket = () => {\r\n  if (!socket) {\r\n    socket = io(SOCKET_URL, { transports: [\"websocket\"] });\r\n\r\n    socket.on(\"connect\", () => {\r\n      console.log(\"✅ Connected to room server:\", socket?.id);\r\n    });\r\n\r\n    socket.on(\"disconnect\", () => {\r\n      console.log(\"❌ Disconnected from room server\");\r\n    });\r\n  }\r\n};\r\n\r\nexport const disconnectRoomSocket = () => {\r\n  socket?.disconnect();\r\n  socket = null;\r\n};\r\n\r\nexport const getRoomSocket = () => socket;\r\n\r\n// --- Room Operations ---\r\n\r\nexport const createRoom = (room: any) => {\r\n  socket?.emit(\"create-room\", room);\r\n};\r\n\r\nexport const listRooms = () => {\r\n  socket?.emit(\"list-rooms\");\r\n};\r\n\r\nexport const joinRoom = (roomId: string) => {\r\n  socket?.emit(\"join-room-dynamic\", { roomId });\r\n};\r\n\r\nexport const leaveRoom = (roomId: string) => {\r\n  socket?.emit(\"leave-room\", { roomId });\r\n};\r\n\r\n// --- Messaging ---\r\n\r\nexport const sendRoomMessage = (roomId: string, text: string) => {\r\n  const message = {\r\n    id: uuidv4(),\r\n    text,\r\n    user: socket?.id,\r\n    timestamp: new Date().toISOString(),\r\n  };\r\n  socket?.emit(\"room-message\", { roomId, ...message });\r\n};\r\n\r\nexport const onRoomMessage = (callback: (msg: any) => void) => {\r\n  socket?.off(\"room-message\").on(\"room-message\", callback);\r\n};\r\n\r\n// --- WebRTC ---\r\n\r\nexport const sendRoomOffer = (to: string, roomId: string, offer: RTCSessionDescriptionInit) => {\r\n  socket?.emit(\"room-offer\", { to, roomId, offer });\r\n};\r\n\r\nexport const sendRoomAnswer = (to: string, roomId: string, answer: RTCSessionDescriptionInit) => {\r\n  socket?.emit(\"room-answer\", { to, roomId, answer });\r\n};\r\n\r\nexport const sendRoomIce = (to: string, roomId: string, candidate: RTCIceCandidateInit) => {\r\n  socket?.emit(\"room-ice\", { to, roomId, candidate });\r\n};\r\n"
        }
    ]
}