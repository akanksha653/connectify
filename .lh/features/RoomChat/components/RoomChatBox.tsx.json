{
    "sourceFile": "features/RoomChat/components/RoomChatBox.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1760188338000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760267537932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,166 +1,32 @@\n-\"use client\";\r\n+// features/RoomSystem/components/RoomChatBox.tsx\r\n+import React, { useState } from \"react\";\r\n+import { useRoomChat } from \"../hooks/useRoomChat\";\r\n \r\n-import React, { useEffect, useRef, useState } from \"react\";\r\n+export default function RoomChatBox({ roomId }: { roomId: string }) {\r\n+  const { messages, send, loadMore } = useRoomChat(roomId);\r\n+  const [text, setText] = useState(\"\");\r\n \r\n-interface Message {\r\n-  id: string;\r\n-  user: string;\r\n-  text: string;\r\n-  edited?: boolean;\r\n-  reactions?: { [user: string]: string };\r\n-}\r\n-\r\n-interface Props {\r\n-  socket: any;\r\n-  roomId: string;\r\n-  userName: string;\r\n-}\r\n-\r\n-export default function ChatBox({ socket, roomId, userName }: Props) {\r\n-  const [messages, setMessages] = useState<Message[]>([]);\r\n-  const [input, setInput] = useState(\"\");\r\n-  const [typingUsers, setTypingUsers] = useState<string[]>([]);\r\n-  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n-  const typingTimeout = useRef<NodeJS.Timeout | null>(null);\r\n-\r\n-  // Scroll to bottom if near bottom\r\n-  const scrollToBottom = () => {\r\n-    if (!messagesEndRef.current) return;\r\n-    const el = messagesEndRef.current.parentElement;\r\n-    if (!el) return;\r\n-    const nearBottom = el.scrollHeight - el.scrollTop - el.clientHeight < 100;\r\n-    if (nearBottom) messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n+  const onSend = () => {\r\n+    if (!text.trim()) return;\r\n+    send({ senderId: \"me\", senderName: \"Me\", content: text, type: \"text\", timestamp: Date.now() });\r\n+    setText(\"\");\r\n   };\r\n \r\n-  useEffect(() => scrollToBottom(), [messages]);\r\n-\r\n-  // Socket listeners\r\n-  useEffect(() => {\r\n-    if (!socket) return;\r\n-\r\n-    const handleRoomMessage = (msg: Message) => setMessages((prev) => [...prev, msg]);\r\n-    const handleTyping = ({ sender }: { sender: string }) => {\r\n-      setTypingUsers((prev) => (prev.includes(sender) ? prev : [...prev, sender]));\r\n-      if (typingTimeout.current) clearTimeout(typingTimeout.current);\r\n-      typingTimeout.current = setTimeout(() => {\r\n-        setTypingUsers((prev) => prev.filter((u) => u !== sender));\r\n-        typingTimeout.current = null;\r\n-      }, 2000);\r\n-    };\r\n-    const handleEdit = ({ messageId, content }: any) =>\r\n-      setMessages((prev) =>\r\n-        prev.map((m) => (m.id === messageId ? { ...m, text: content, edited: true } : m))\r\n-      );\r\n-    const handleDelete = ({ messageId }: any) => setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n-    const handleReact = ({ messageId, user: reactionUser, reaction }: any) =>\r\n-      setMessages((prev) =>\r\n-        prev.map((m) =>\r\n-          m.id === messageId\r\n-            ? { ...m, reactions: { ...(m.reactions || {}), [reactionUser]: reaction } }\r\n-            : m\r\n-        )\r\n-      );\r\n-\r\n-    socket.on(\"room-message\", handleRoomMessage);\r\n-    socket.on(\"typing\", handleTyping);\r\n-    socket.on(\"edit-message\", handleEdit);\r\n-    socket.on(\"delete-message\", handleDelete);\r\n-    socket.on(\"react-message\", handleReact);\r\n-\r\n-    return () => {\r\n-      socket.off(\"room-message\", handleRoomMessage);\r\n-      socket.off(\"typing\", handleTyping);\r\n-      socket.off(\"edit-message\", handleEdit);\r\n-      socket.off(\"delete-message\", handleDelete);\r\n-      socket.off(\"react-message\", handleReact);\r\n-    };\r\n-  }, [socket]);\r\n-\r\n-  const sendMessage = () => {\r\n-    const text = input.trim();\r\n-    if (!text) return;\r\n-    const msg: Message = { id: crypto.randomUUID(), user: userName, text, reactions: {} };\r\n-    socket.emit(\"room-message\", { roomId, ...msg });\r\n-    setMessages((prev) => [...prev, msg]);\r\n-    setInput(\"\");\r\n-  };\r\n-\r\n-  const handleTypingInput = (text: string) => {\r\n-    setInput(text);\r\n-    if (!socket) return;\r\n-    socket.emit(\"typing\", { roomId, sender: userName });\r\n-  };\r\n-\r\n-  const editMessage = (id: string) => {\r\n-    const newText = prompt(\"Edit your message:\");\r\n-    if (!newText) return;\r\n-    socket.emit(\"edit-message\", { roomId, messageId: id, content: newText });\r\n-    setMessages((prev) => prev.map((m) => (m.id === id ? { ...m, text: newText, edited: true } : m)));\r\n-  };\r\n-\r\n-  const deleteMessage = (id: string) => {\r\n-    if (!confirm(\"Delete this message?\")) return;\r\n-    socket.emit(\"delete-message\", { roomId, messageId: id });\r\n-    setMessages((prev) => prev.filter((m) => m.id !== id));\r\n-  };\r\n-\r\n-  const reactMessage = (id: string, reaction: string) => {\r\n-    socket.emit(\"react-message\", { roomId, messageId: id, reaction, user: userName });\r\n-  };\r\n-\r\n   return (\r\n-    <div className=\"flex flex-col h-full border rounded p-2 bg-white dark:bg-neutral-900\">\r\n-      <div className=\"flex-1 overflow-y-auto mb-2 space-y-2\">\r\n+    <div className=\"p-2 border rounded h-80 flex flex-col\">\r\n+      <button onClick={() => loadMore()} className=\"mb-2 text-sm\">Load more</button>\r\n+      <div className=\"flex-1 overflow-auto space-y-2\">\r\n         {messages.map((m) => (\r\n-          <div key={m.id} className=\"text-sm flex flex-col gap-1\">\r\n-            <div className=\"flex items-center justify-between\">\r\n-              <strong>{m.user}:</strong>\r\n-              {m.user === userName && (\r\n-                <div className=\"flex gap-1\">\r\n-                  <button onClick={() => editMessage(m.id)} className=\"text-xs text-blue-500 hover:underline\">Edit</button>\r\n-                  <button onClick={() => deleteMessage(m.id)} className=\"text-xs text-red-500 hover:underline\">Delete</button>\r\n-                </div>\r\n-              )}\r\n-            </div>\r\n-            <span>\r\n-              {m.text} {m.edited && <em className=\"text-gray-400\">(edited)</em>}\r\n-            </span>\r\n-            {m.reactions && (\r\n-              <div className=\"flex gap-1 text-xs flex-wrap\">\r\n-                {Object.entries(m.reactions).map(([user, react]) => (\r\n-                  <span key={user} className=\"bg-gray-200 dark:bg-neutral-700 px-1 rounded\">\r\n-                    {react} <strong>{user}</strong>\r\n-                  </span>\r\n-                ))}\r\n-                <button onClick={() => reactMessage(m.id, \"‚ù§Ô∏è\")}>‚ù§Ô∏è</button>\r\n-                <button onClick={() => reactMessage(m.id, \"üòÇ\")}>üòÇ</button>\r\n-                <button onClick={() => reactMessage(m.id, \"üî•\")}>üî•</button>\r\n-              </div>\r\n-            )}\r\n+          <div key={m.id} className=\"p-2 border rounded\">\r\n+            <div className=\"text-xs text-gray-500\">{m.senderName} ‚Ä¢ {new Date(m.timestamp).toLocaleTimeString()}</div>\r\n+            <div>{m.content}</div>\r\n           </div>\r\n         ))}\r\n-        {typingUsers.length > 0 && (\r\n-          <p className=\"text-xs italic text-gray-500\">{typingUsers.join(\", \")} typing...</p>\r\n-        )}\r\n-        <div ref={messagesEndRef} />\r\n       </div>\r\n-\r\n-      <div className=\"flex gap-2\">\r\n-        <input\r\n-          type=\"text\"\r\n-          value={input}\r\n-          onChange={(e) => handleTypingInput(e.target.value)}\r\n-          onKeyDown={(e) => e.key === \"Enter\" && sendMessage()}\r\n-          className=\"flex-1 px-3 py-2 rounded border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-800 text-neutral-900 dark:text-white\"\r\n-          placeholder=\"Type a message...\"\r\n-        />\r\n-        <button\r\n-          onClick={sendMessage}\r\n-          className=\"px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded\"\r\n-        >\r\n-          Send\r\n-        </button>\r\n+      <div className=\"mt-2 flex gap-2\">\r\n+        <input value={text} onChange={(e) => setText(e.target.value)} placeholder=\"Message...\" className=\"flex-1 border p-2\" />\r\n+        <button onClick={onSend} className=\"bg-blue-600 text-white px-3 rounded\">Send</button>\r\n       </div>\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1760267761008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n   const [text, setText] = useState(\"\");\r\n \r\n   const onSend = () => {\r\n     if (!text.trim()) return;\r\n-    send({ senderId: \"me\", senderName: \"Me\", content: text, type: \"text\", timestamp: Date.now() });\r\n+    send({ senderId: \"me\", senderName: \"Me\", content: text, type: \"text\" });\r\n     setText(\"\");\r\n   };\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1760267867549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,32 +1,45 @@\n // features/RoomSystem/components/RoomChatBox.tsx\r\n-import React, { useState } from \"react\";\r\n+import React, { useState, useRef } from \"react\";\r\n import { useRoomChat } from \"../hooks/useRoomChat\";\r\n \r\n export default function RoomChatBox({ roomId }: { roomId: string }) {\r\n-  const { messages, send, loadMore } = useRoomChat(roomId);\r\n+  const { messages, send, sendFile } = useRoomChat(roomId);\r\n   const [text, setText] = useState(\"\");\r\n+  const fileRef = useRef<HTMLInputElement | null>(null);\r\n \r\n   const onSend = () => {\r\n     if (!text.trim()) return;\r\n     send({ senderId: \"me\", senderName: \"Me\", content: text, type: \"text\" });\r\n     setText(\"\");\r\n   };\r\n \r\n+  const onFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    const file = e.target.files?.[0];\r\n+    if (!file) return;\r\n+    await sendFile(file, \"Me\");\r\n+    if (fileRef.current) fileRef.current.value = \"\";\r\n+  };\r\n+\r\n   return (\r\n-    <div className=\"p-2 border rounded h-80 flex flex-col\">\r\n-      <button onClick={() => loadMore()} className=\"mb-2 text-sm\">Load more</button>\r\n-      <div className=\"flex-1 overflow-auto space-y-2\">\r\n+    <div className=\"flex flex-col h-80 border rounded p-2\">\r\n+      <div className=\"flex-1 overflow-auto space-y-2 mb-2\">\r\n         {messages.map((m) => (\r\n-          <div key={m.id} className=\"p-2 border rounded\">\r\n-            <div className=\"text-xs text-gray-500\">{m.senderName} ‚Ä¢ {new Date(m.timestamp).toLocaleTimeString()}</div>\r\n-            <div>{m.content}</div>\r\n+          <div key={m.id} className=\"border rounded p-2\">\r\n+            <div className=\"text-xs text-gray-500\">{m.senderName}</div>\r\n+            {m.type === \"file\" ? (\r\n+              <a href={m.content} target=\"_blank\" className=\"text-blue-600\">{m.fileName || \"file\"}</a>\r\n+            ) : (\r\n+              <div>{m.content}</div>\r\n+            )}\r\n           </div>\r\n         ))}\r\n       </div>\r\n-      <div className=\"mt-2 flex gap-2\">\r\n-        <input value={text} onChange={(e) => setText(e.target.value)} placeholder=\"Message...\" className=\"flex-1 border p-2\" />\r\n+\r\n+      <div className=\"flex gap-2\">\r\n+        <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} placeholder=\"Message...\" className=\"flex-1 border p-2 rounded\" />\r\n         <button onClick={onSend} className=\"bg-blue-600 text-white px-3 rounded\">Send</button>\r\n+        <input ref={fileRef} type=\"file\" onChange={onFileChange} className=\"border rounded p-1\" />\r\n       </div>\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1760267888966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,45 +1,32 @@\n // features/RoomSystem/components/RoomChatBox.tsx\r\n-import React, { useState, useRef } from \"react\";\r\n+import React, { useState } from \"react\";\r\n import { useRoomChat } from \"../hooks/useRoomChat\";\r\n \r\n export default function RoomChatBox({ roomId }: { roomId: string }) {\r\n-  const { messages, send, sendFile } = useRoomChat(roomId);\r\n+  const { messages, send, loadMore } = useRoomChat(roomId);\r\n   const [text, setText] = useState(\"\");\r\n-  const fileRef = useRef<HTMLInputElement | null>(null);\r\n \r\n   const onSend = () => {\r\n     if (!text.trim()) return;\r\n     send({ senderId: \"me\", senderName: \"Me\", content: text, type: \"text\" });\r\n     setText(\"\");\r\n   };\r\n \r\n-  const onFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n-    const file = e.target.files?.[0];\r\n-    if (!file) return;\r\n-    await sendFile(file, \"Me\");\r\n-    if (fileRef.current) fileRef.current.value = \"\";\r\n-  };\r\n-\r\n   return (\r\n-    <div className=\"flex flex-col h-80 border rounded p-2\">\r\n-      <div className=\"flex-1 overflow-auto space-y-2 mb-2\">\r\n+    <div className=\"p-2 border rounded h-80 flex flex-col\">\r\n+      <button onClick={() => loadMore()} className=\"mb-2 text-sm\">Load more</button>\r\n+      <div className=\"flex-1 overflow-auto space-y-2\">\r\n         {messages.map((m) => (\r\n-          <div key={m.id} className=\"border rounded p-2\">\r\n-            <div className=\"text-xs text-gray-500\">{m.senderName}</div>\r\n-            {m.type === \"file\" ? (\r\n-              <a href={m.content} target=\"_blank\" className=\"text-blue-600\">{m.fileName || \"file\"}</a>\r\n-            ) : (\r\n-              <div>{m.content}</div>\r\n-            )}\r\n+          <div key={m.id} className=\"p-2 border rounded\">\r\n+            <div className=\"text-xs text-gray-500\">{m.senderName} ‚Ä¢ {new Date(m.timestamp).toLocaleTimeString()}</div>\r\n+            <div>{m.content}</div>\r\n           </div>\r\n         ))}\r\n       </div>\r\n-\r\n-      <div className=\"flex gap-2\">\r\n-        <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} placeholder=\"Message...\" className=\"flex-1 border p-2 rounded\" />\r\n+      <div className=\"mt-2 flex gap-2\">\r\n+        <input value={text} onChange={(e) => setText(e.target.value)} placeholder=\"Message...\" className=\"flex-1 border p-2\" />\r\n         <button onClick={onSend} className=\"bg-blue-600 text-white px-3 rounded\">Send</button>\r\n-        <input ref={fileRef} type=\"file\" onChange={onFileChange} className=\"border rounded p-1\" />\r\n       </div>\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1760268135823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,32 +1,45 @@\n // features/RoomSystem/components/RoomChatBox.tsx\r\n-import React, { useState } from \"react\";\r\n+import React, { useState, useRef } from \"react\";\r\n import { useRoomChat } from \"../hooks/useRoomChat\";\r\n \r\n export default function RoomChatBox({ roomId }: { roomId: string }) {\r\n-  const { messages, send, loadMore } = useRoomChat(roomId);\r\n+  const { messages, send, sendFile } = useRoomChat(roomId);\r\n   const [text, setText] = useState(\"\");\r\n+  const fileRef = useRef<HTMLInputElement | null>(null);\r\n \r\n   const onSend = () => {\r\n     if (!text.trim()) return;\r\n     send({ senderId: \"me\", senderName: \"Me\", content: text, type: \"text\" });\r\n     setText(\"\");\r\n   };\r\n \r\n+  const onFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    const file = e.target.files?.[0];\r\n+    if (!file) return;\r\n+    await sendFile(file, \"Me\");\r\n+    if (fileRef.current) fileRef.current.value = \"\";\r\n+  };\r\n+\r\n   return (\r\n-    <div className=\"p-2 border rounded h-80 flex flex-col\">\r\n-      <button onClick={() => loadMore()} className=\"mb-2 text-sm\">Load more</button>\r\n-      <div className=\"flex-1 overflow-auto space-y-2\">\r\n+    <div className=\"flex flex-col h-80 border rounded p-2\">\r\n+      <div className=\"flex-1 overflow-auto space-y-2 mb-2\">\r\n         {messages.map((m) => (\r\n-          <div key={m.id} className=\"p-2 border rounded\">\r\n-            <div className=\"text-xs text-gray-500\">{m.senderName} ‚Ä¢ {new Date(m.timestamp).toLocaleTimeString()}</div>\r\n-            <div>{m.content}</div>\r\n+          <div key={m.id} className=\"border rounded p-2\">\r\n+            <div className=\"text-xs text-gray-500\">{m.senderName}</div>\r\n+            {m.type === \"file\" ? (\r\n+              <a href={m.content} target=\"_blank\" className=\"text-blue-600\">{m.fileName || \"file\"}</a>\r\n+            ) : (\r\n+              <div>{m.content}</div>\r\n+            )}\r\n           </div>\r\n         ))}\r\n       </div>\r\n-      <div className=\"mt-2 flex gap-2\">\r\n-        <input value={text} onChange={(e) => setText(e.target.value)} placeholder=\"Message...\" className=\"flex-1 border p-2\" />\r\n+\r\n+      <div className=\"flex gap-2\">\r\n+        <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} placeholder=\"Message...\" className=\"flex-1 border p-2 rounded\" />\r\n         <button onClick={onSend} className=\"bg-blue-600 text-white px-3 rounded\">Send</button>\r\n+        <input ref={fileRef} type=\"file\" onChange={onFileChange} className=\"border rounded p-1\" />\r\n       </div>\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1760268267911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,12 @@\n-// features/RoomSystem/components/RoomChatBox.tsx\r\n import React, { useState, useRef } from \"react\";\r\n import { useRoomChat } from \"../hooks/useRoomChat\";\r\n+import type { Message } from \"../utils/roomTypes\";\r\n \r\n export default function RoomChatBox({ roomId }: { roomId: string }) {\r\n   const { messages, send, sendFile } = useRoomChat(roomId);\r\n   const [text, setText] = useState(\"\");\r\n-  const fileRef = useRef<HTMLInputElement | null>(null);\r\n+  const fileRef = useRef<HTMLInputElement>(null);\r\n \r\n   const onSend = () => {\r\n     if (!text.trim()) return;\r\n     send({ senderId: \"me\", senderName: \"Me\", content: text, type: \"text\" });\r\n@@ -15,31 +15,62 @@\n \r\n   const onFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n     const file = e.target.files?.[0];\r\n     if (!file) return;\r\n+\r\n+    // sendFile expects File + senderName\r\n     await sendFile(file, \"Me\");\r\n-    if (fileRef.current) fileRef.current.value = \"\";\r\n+\r\n+    // reset input\r\n+    if (fileRef.current) {\r\n+      fileRef.current.value = \"\";\r\n+    }\r\n   };\r\n \r\n   return (\r\n     <div className=\"flex flex-col h-80 border rounded p-2\">\r\n       <div className=\"flex-1 overflow-auto space-y-2 mb-2\">\r\n-        {messages.map((m) => (\r\n+        {messages.map((m: Message) => (\r\n           <div key={m.id} className=\"border rounded p-2\">\r\n             <div className=\"text-xs text-gray-500\">{m.senderName}</div>\r\n-            {m.type === \"file\" ? (\r\n-              <a href={m.content} target=\"_blank\" className=\"text-blue-600\">{m.fileName || \"file\"}</a>\r\n+            {m.type === \"file\" && m.content ? (\r\n+              <a\r\n+                href={m.content}\r\n+                target=\"_blank\"\r\n+                rel=\"noopener noreferrer\"\r\n+                className=\"text-blue-600 underline\"\r\n+              >\r\n+                {m.content.split(\"/\").pop() || \"file\"}\r\n+              </a>\r\n             ) : (\r\n               <div>{m.content}</div>\r\n             )}\r\n           </div>\r\n         ))}\r\n       </div>\r\n \r\n       <div className=\"flex gap-2\">\r\n-        <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} placeholder=\"Message...\" className=\"flex-1 border p-2 rounded\" />\r\n-        <button onClick={onSend} className=\"bg-blue-600 text-white px-3 rounded\">Send</button>\r\n-        <input ref={fileRef} type=\"file\" onChange={onFileChange} className=\"border rounded p-1\" />\r\n+        <input\r\n+          type=\"text\"\r\n+          value={text}\r\n+          onChange={(e) => setText(e.target.value)}\r\n+          placeholder=\"Message...\"\r\n+          className=\"flex-1 border p-2 rounded\"\r\n+          onKeyDown={(e) => {\r\n+            if (e.key === \"Enter\") onSend();\r\n+          }}\r\n+        />\r\n+        <button onClick={onSend} className=\"bg-blue-600 text-white px-3 rounded\">\r\n+          Send\r\n+        </button>\r\n+        <input\r\n+          ref={fileRef}\r\n+          type=\"file\"\r\n+          onChange={onFileChange}\r\n+          className=\"border rounded p-1\"\r\n+          placeholder=\"Attach file\"\r\n+          title=\"Attach file\"\r\n+        />\r\n       </div>\r\n     </div>\r\n   );\r\n }\r\n"
                }
            ],
            "date": 1760188338000,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n\r\ninterface Message {\r\n  id: string;\r\n  user: string;\r\n  text: string;\r\n  edited?: boolean;\r\n  reactions?: { [user: string]: string };\r\n}\r\n\r\ninterface Props {\r\n  socket: any;\r\n  roomId: string;\r\n  userName: string;\r\n}\r\n\r\nexport default function ChatBox({ socket, roomId, userName }: Props) {\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [typingUsers, setTypingUsers] = useState<string[]>([]);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const typingTimeout = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  // Scroll to bottom if near bottom\r\n  const scrollToBottom = () => {\r\n    if (!messagesEndRef.current) return;\r\n    const el = messagesEndRef.current.parentElement;\r\n    if (!el) return;\r\n    const nearBottom = el.scrollHeight - el.scrollTop - el.clientHeight < 100;\r\n    if (nearBottom) messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => scrollToBottom(), [messages]);\r\n\r\n  // Socket listeners\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n\r\n    const handleRoomMessage = (msg: Message) => setMessages((prev) => [...prev, msg]);\r\n    const handleTyping = ({ sender }: { sender: string }) => {\r\n      setTypingUsers((prev) => (prev.includes(sender) ? prev : [...prev, sender]));\r\n      if (typingTimeout.current) clearTimeout(typingTimeout.current);\r\n      typingTimeout.current = setTimeout(() => {\r\n        setTypingUsers((prev) => prev.filter((u) => u !== sender));\r\n        typingTimeout.current = null;\r\n      }, 2000);\r\n    };\r\n    const handleEdit = ({ messageId, content }: any) =>\r\n      setMessages((prev) =>\r\n        prev.map((m) => (m.id === messageId ? { ...m, text: content, edited: true } : m))\r\n      );\r\n    const handleDelete = ({ messageId }: any) => setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n    const handleReact = ({ messageId, user: reactionUser, reaction }: any) =>\r\n      setMessages((prev) =>\r\n        prev.map((m) =>\r\n          m.id === messageId\r\n            ? { ...m, reactions: { ...(m.reactions || {}), [reactionUser]: reaction } }\r\n            : m\r\n        )\r\n      );\r\n\r\n    socket.on(\"room-message\", handleRoomMessage);\r\n    socket.on(\"typing\", handleTyping);\r\n    socket.on(\"edit-message\", handleEdit);\r\n    socket.on(\"delete-message\", handleDelete);\r\n    socket.on(\"react-message\", handleReact);\r\n\r\n    return () => {\r\n      socket.off(\"room-message\", handleRoomMessage);\r\n      socket.off(\"typing\", handleTyping);\r\n      socket.off(\"edit-message\", handleEdit);\r\n      socket.off(\"delete-message\", handleDelete);\r\n      socket.off(\"react-message\", handleReact);\r\n    };\r\n  }, [socket]);\r\n\r\n  const sendMessage = () => {\r\n    const text = input.trim();\r\n    if (!text) return;\r\n    const msg: Message = { id: crypto.randomUUID(), user: userName, text, reactions: {} };\r\n    socket.emit(\"room-message\", { roomId, ...msg });\r\n    setMessages((prev) => [...prev, msg]);\r\n    setInput(\"\");\r\n  };\r\n\r\n  const handleTypingInput = (text: string) => {\r\n    setInput(text);\r\n    if (!socket) return;\r\n    socket.emit(\"typing\", { roomId, sender: userName });\r\n  };\r\n\r\n  const editMessage = (id: string) => {\r\n    const newText = prompt(\"Edit your message:\");\r\n    if (!newText) return;\r\n    socket.emit(\"edit-message\", { roomId, messageId: id, content: newText });\r\n    setMessages((prev) => prev.map((m) => (m.id === id ? { ...m, text: newText, edited: true } : m)));\r\n  };\r\n\r\n  const deleteMessage = (id: string) => {\r\n    if (!confirm(\"Delete this message?\")) return;\r\n    socket.emit(\"delete-message\", { roomId, messageId: id });\r\n    setMessages((prev) => prev.filter((m) => m.id !== id));\r\n  };\r\n\r\n  const reactMessage = (id: string, reaction: string) => {\r\n    socket.emit(\"react-message\", { roomId, messageId: id, reaction, user: userName });\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-full border rounded p-2 bg-white dark:bg-neutral-900\">\r\n      <div className=\"flex-1 overflow-y-auto mb-2 space-y-2\">\r\n        {messages.map((m) => (\r\n          <div key={m.id} className=\"text-sm flex flex-col gap-1\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <strong>{m.user}:</strong>\r\n              {m.user === userName && (\r\n                <div className=\"flex gap-1\">\r\n                  <button onClick={() => editMessage(m.id)} className=\"text-xs text-blue-500 hover:underline\">Edit</button>\r\n                  <button onClick={() => deleteMessage(m.id)} className=\"text-xs text-red-500 hover:underline\">Delete</button>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <span>\r\n              {m.text} {m.edited && <em className=\"text-gray-400\">(edited)</em>}\r\n            </span>\r\n            {m.reactions && (\r\n              <div className=\"flex gap-1 text-xs flex-wrap\">\r\n                {Object.entries(m.reactions).map(([user, react]) => (\r\n                  <span key={user} className=\"bg-gray-200 dark:bg-neutral-700 px-1 rounded\">\r\n                    {react} <strong>{user}</strong>\r\n                  </span>\r\n                ))}\r\n                <button onClick={() => reactMessage(m.id, \"‚ù§Ô∏è\")}>‚ù§Ô∏è</button>\r\n                <button onClick={() => reactMessage(m.id, \"üòÇ\")}>üòÇ</button>\r\n                <button onClick={() => reactMessage(m.id, \"üî•\")}>üî•</button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n        {typingUsers.length > 0 && (\r\n          <p className=\"text-xs italic text-gray-500\">{typingUsers.join(\", \")} typing...</p>\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      <div className=\"flex gap-2\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => handleTypingInput(e.target.value)}\r\n          onKeyDown={(e) => e.key === \"Enter\" && sendMessage()}\r\n          className=\"flex-1 px-3 py-2 rounded border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-800 text-neutral-900 dark:text-white\"\r\n          placeholder=\"Type a message...\"\r\n        />\r\n        <button\r\n          onClick={sendMessage}\r\n          className=\"px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded\"\r\n        >\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}