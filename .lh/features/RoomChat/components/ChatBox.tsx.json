{
    "sourceFile": "features/RoomChat/components/ChatBox.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1758899058825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758899573553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,10 @@\n interface Message {\r\n   id: string;\r\n   user: string;\r\n   text: string;\r\n+  edited?: boolean;\r\n+  reactions?: { [user: string]: string };\r\n }\r\n \r\n interface Props {\r\n   socket: any;\r\n@@ -16,55 +18,175 @@\n \r\n export default function ChatBox({ socket, roomId, userName }: Props) {\r\n   const [messages, setMessages] = useState<Message[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n+  const [typingUsers, setTypingUsers] = useState<string[]>([]);\r\n   const messagesEndRef = useRef<HTMLDivElement>(null);\r\n+  const typingTimeout = useRef<NodeJS.Timeout | null>(null);\r\n \r\n+  // Scroll to bottom on new message\r\n   useEffect(() => {\r\n+    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n+  }, [messages]);\r\n+\r\n+  // Listen to socket events\r\n+  useEffect(() => {\r\n     if (!socket) return;\r\n \r\n+    // Receive new messages\r\n     socket.on(\"room-message\", (msg: Message) => {\r\n       setMessages((prev) => [...prev, msg]);\r\n     });\r\n \r\n+    // Typing indicator\r\n+    socket.on(\"typing\", ({ sender }: { sender: string }) => {\r\n+      setTypingUsers((prev) => {\r\n+        if (!prev.includes(sender)) return [...prev, sender];\r\n+        return prev;\r\n+      });\r\n+\r\n+      // Remove typing after 2s\r\n+      setTimeout(() => {\r\n+        setTypingUsers((prev) => prev.filter((u) => u !== sender));\r\n+      }, 2000);\r\n+    });\r\n+\r\n+    // Message edits\r\n+    socket.on(\"edit-message\", ({ messageId, content }: any) => {\r\n+      setMessages((prev) =>\r\n+        prev.map((m) =>\r\n+          m.id === messageId ? { ...m, text: content, edited: true } : m\r\n+        )\r\n+      );\r\n+    });\r\n+\r\n+    // Message deletions\r\n+    socket.on(\"delete-message\", ({ messageId }: any) => {\r\n+      setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n+    });\r\n+\r\n+    // Reactions\r\n+    socket.on(\r\n+      \"react-message\",\r\n+      ({ messageId, user: reactionUser, reaction }: any) => {\r\n+        setMessages((prev) =>\r\n+          prev.map((m) => {\r\n+            if (m.id === messageId) {\r\n+              return {\r\n+                ...m,\r\n+                reactions: { ...(m.reactions || {}), [reactionUser]: reaction },\r\n+              };\r\n+            }\r\n+            return m;\r\n+          })\r\n+        );\r\n+      }\r\n+    );\r\n+\r\n     return () => {\r\n       socket.off(\"room-message\");\r\n+      socket.off(\"typing\");\r\n+      socket.off(\"edit-message\");\r\n+      socket.off(\"delete-message\");\r\n+      socket.off(\"react-message\");\r\n     };\r\n   }, [socket]);\r\n \r\n-  useEffect(() => {\r\n-    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n-  }, [messages]);\r\n-\r\n+  // Send message\r\n   const sendMessage = () => {\r\n     if (!input.trim()) return;\r\n \r\n     const msg: Message = {\r\n       id: crypto.randomUUID(),\r\n       user: userName,\r\n       text: input.trim(),\r\n+      reactions: {},\r\n     };\r\n \r\n     socket.emit(\"room-message\", { roomId, ...msg });\r\n     setMessages((prev) => [...prev, msg]);\r\n     setInput(\"\");\r\n   };\r\n \r\n+  // Handle typing\r\n+  const handleTyping = (text: string) => {\r\n+    setInput(text);\r\n+    if (!socket) return;\r\n+\r\n+    socket.emit(\"typing\", { roomId, sender: userName });\r\n+\r\n+    if (typingTimeout.current) clearTimeout(typingTimeout.current);\r\n+    typingTimeout.current = setTimeout(() => {\r\n+      // Stop typing indicator after delay\r\n+      typingTimeout.current = null;\r\n+    }, 2000);\r\n+  };\r\n+\r\n+  // Edit message\r\n+  const editMessage = (id: string) => {\r\n+    const newText = prompt(\"Edit your message:\");\r\n+    if (!newText) return;\r\n+    socket.emit(\"edit-message\", { roomId, messageId: id, content: newText });\r\n+    setMessages((prev) =>\r\n+      prev.map((m) => (m.id === id ? { ...m, text: newText, edited: true } : m))\r\n+    );\r\n+  };\r\n+\r\n+  // Delete message\r\n+  const deleteMessage = (id: string) => {\r\n+    if (!confirm(\"Delete this message?\")) return;\r\n+    socket.emit(\"delete-message\", { roomId, messageId: id });\r\n+    setMessages((prev) => prev.filter((m) => m.id !== id));\r\n+  };\r\n+\r\n+  // React to message\r\n+  const reactMessage = (id: string, reaction: string) => {\r\n+    socket.emit(\"react-message\", { roomId, messageId: id, reaction, user: userName });\r\n+  };\r\n+\r\n   return (\r\n     <div className=\"flex flex-col h-full border rounded p-2 bg-white dark:bg-neutral-900\">\r\n       <div className=\"flex-1 overflow-y-auto mb-2\">\r\n         {messages.map((m) => (\r\n-          <p key={m.id} className=\"mb-1 text-sm\">\r\n-            <strong>{m.user}:</strong> {m.text}\r\n+          <div key={m.id} className=\"mb-1 text-sm flex flex-col gap-1\">\r\n+            <div className=\"flex items-center justify-between\">\r\n+              <strong>{m.user}:</strong>\r\n+              {m.user === userName && (\r\n+                <div className=\"flex gap-1\">\r\n+                  <button onClick={() => editMessage(m.id)} className=\"text-xs text-blue-500\">Edit</button>\r\n+                  <button onClick={() => deleteMessage(m.id)} className=\"text-xs text-red-500\">Delete</button>\r\n+                </div>\r\n+              )}\r\n+            </div>\r\n+            <span>\r\n+              {m.text} {m.edited && <em className=\"text-gray-400\">(edited)</em>}\r\n+            </span>\r\n+            {m.reactions && (\r\n+              <div className=\"flex gap-1 text-xs\">\r\n+                {Object.entries(m.reactions).map(([user, react]) => (\r\n+                  <span key={user}>\r\n+                    {react} <strong>{user}</strong>\r\n+                  </span>\r\n+                ))}\r\n+                <button onClick={() => reactMessage(m.id, \"‚ù§Ô∏è\")}>‚ù§Ô∏è</button>\r\n+                <button onClick={() => reactMessage(m.id, \"üòÇ\")}>üòÇ</button>\r\n+                <button onClick={() => reactMessage(m.id, \"üî•\")}>üî•</button>\r\n+              </div>\r\n+            )}\r\n+          </div>\r\n+        ))}\r\n+        {typingUsers.length > 0 && (\r\n+          <p className=\"text-xs italic text-gray-500\">\r\n+            {typingUsers.join(\", \")} typing...\r\n           </p>\r\n-        ))}\r\n+        )}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n       <div className=\"flex gap-2\">\r\n         <input\r\n           type=\"text\"\r\n           value={input}\r\n-          onChange={(e) => setInput(e.target.value)}\r\n+          onChange={(e) => handleTyping(e.target.value)}\r\n           onKeyDown={(e) => e.key === \"Enter\" && sendMessage()}\r\n           className=\"flex-1 px-3 py-2 rounded border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-800 text-neutral-900 dark:text-white\"\r\n           placeholder=\"Type a message...\"\r\n         />\r\n"
                }
            ],
            "date": 1758899058824,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n\r\ninterface Message {\r\n  id: string;\r\n  user: string;\r\n  text: string;\r\n}\r\n\r\ninterface Props {\r\n  socket: any;\r\n  roomId: string;\r\n  userName: string;\r\n}\r\n\r\nexport default function ChatBox({ socket, roomId, userName }: Props) {\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n\r\n    socket.on(\"room-message\", (msg: Message) => {\r\n      setMessages((prev) => [...prev, msg]);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"room-message\");\r\n    };\r\n  }, [socket]);\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  const sendMessage = () => {\r\n    if (!input.trim()) return;\r\n\r\n    const msg: Message = {\r\n      id: crypto.randomUUID(),\r\n      user: userName,\r\n      text: input.trim(),\r\n    };\r\n\r\n    socket.emit(\"room-message\", { roomId, ...msg });\r\n    setMessages((prev) => [...prev, msg]);\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-full border rounded p-2 bg-white dark:bg-neutral-900\">\r\n      <div className=\"flex-1 overflow-y-auto mb-2\">\r\n        {messages.map((m) => (\r\n          <p key={m.id} className=\"mb-1 text-sm\">\r\n            <strong>{m.user}:</strong> {m.text}\r\n          </p>\r\n        ))}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      <div className=\"flex gap-2\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyDown={(e) => e.key === \"Enter\" && sendMessage()}\r\n          className=\"flex-1 px-3 py-2 rounded border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-800 text-neutral-900 dark:text-white\"\r\n          placeholder=\"Type a message...\"\r\n        />\r\n        <button\r\n          onClick={sendMessage}\r\n          className=\"px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded\"\r\n        >\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}