{
    "sourceFile": "features/RoomChat/hooks/useRoomSocket.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1758898655460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758906475682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,22 @@\n-import { useEffect, useRef, useState } from \"react\";\r\n-import { connectRoomSocket, disconnectRoomSocket, getRoomSocket } from \"../services/roomSocketService\";\r\n+import { useEffect, useState } from \"react\";\r\n+import type { Socket } from \"socket.io-client\";\r\n+import {\r\n+  connectRoomSocket,\r\n+  disconnectRoomSocket,\r\n+  getRoomSocket,\r\n+} from \"../services/roomSocketService\";\r\n \r\n export default function useRoomSocket() {\r\n-  const [socket, setSocket] = useState<any>(null);\r\n+  const [socket, setSocket] = useState<Socket | null>(null);\r\n \r\n   useEffect(() => {\r\n-    connectRoomSocket();\r\n-    const s = getRoomSocket();\r\n+    // Establish connection\r\n+    const s = connectRoomSocket(); // Prefer connectRoomSocket() to return the socket\r\n     setSocket(s);\r\n \r\n     return () => {\r\n+      // Clean up connection on unmount\r\n       disconnectRoomSocket();\r\n       setSocket(null);\r\n     };\r\n   }, []);\r\n"
                },
                {
                    "date": 1758985284114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,23 +2,24 @@\n import type { Socket } from \"socket.io-client\";\r\n import {\r\n   connectRoomSocket,\r\n   disconnectRoomSocket,\r\n-  getRoomSocket,\r\n } from \"../services/roomSocketService\";\r\n \r\n-export default function useRoomSocket() {\r\n+export default function useRoomSocket(): Socket | null {\r\n   const [socket, setSocket] = useState<Socket | null>(null);\r\n \r\n   useEffect(() => {\r\n-    // Establish connection\r\n-    const s = connectRoomSocket(); // Prefer connectRoomSocket() to return the socket\r\n+    // Connect to the room socket\r\n+    const s = connectRoomSocket();\r\n     setSocket(s);\r\n \r\n+    // Clean up on unmount\r\n     return () => {\r\n-      // Clean up connection on unmount\r\n-      disconnectRoomSocket();\r\n-      setSocket(null);\r\n+      if (s) {\r\n+        disconnectRoomSocket();\r\n+        setSocket(null);\r\n+      }\r\n     };\r\n   }, []);\r\n \r\n   return socket;\r\n"
                },
                {
                    "date": 1760156235068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,123 @@\n-import { useEffect, useState } from \"react\";\r\n-import type { Socket } from \"socket.io-client\";\r\n-import {\r\n-  connectRoomSocket,\r\n-  disconnectRoomSocket,\r\n-} from \"../services/roomSocketService\";\r\n+// features/RoomChat/services/roomSocketService.ts\r\n+import { io, Socket } from \"socket.io-client\";\r\n+import { v4 as uuidv4 } from \"uuid\";\r\n \r\n-export default function useRoomSocket(): Socket | null {\r\n-  const [socket, setSocket] = useState<Socket | null>(null);\r\n+// ✅ Use your signaling server URL\r\n+const SOCKET_URL =\r\n+  process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n \r\n-  useEffect(() => {\r\n-    // Connect to the room socket\r\n-    const s = connectRoomSocket();\r\n-    setSocket(s);\r\n+// Single socket instance for /rooms namespace\r\n+let socket: Socket | null = null;\r\n \r\n-    // Clean up on unmount\r\n-    return () => {\r\n-      if (s) {\r\n-        disconnectRoomSocket();\r\n-        setSocket(null);\r\n-      }\r\n-    };\r\n-  }, []);\r\n+/** Connect to the room socket server (namespace /rooms) */\r\n+export const connectRoomSocket = (): Socket => {\r\n+  if (!socket) {\r\n+    socket = io(`${SOCKET_URL}/rooms`, {\r\n+      transports: [\"websocket\"],\r\n+    });\r\n \r\n+    socket.on(\"connect\", () => {\r\n+      console.log(\"✅ Connected to room server:\", socket!.id);\r\n+    });\r\n+\r\n+    socket.on(\"disconnect\", (reason) => {\r\n+      console.log(\"❌ Disconnected from room server:\", reason);\r\n+    });\r\n+  }\r\n   return socket;\r\n+};\r\n+\r\n+/** Disconnect from room server */\r\n+export const disconnectRoomSocket = (): void => {\r\n+  if (socket) {\r\n+    socket.disconnect();\r\n+    socket = null;\r\n+  }\r\n+};\r\n+\r\n+/** Get current socket instance */\r\n+export const getRoomSocket = (): Socket | null => socket;\r\n+\r\n+// -------------------------------------------------\r\n+// ⚡ Room Operations\r\n+// -------------------------------------------------\r\n+export interface Room {\r\n+  id: string;\r\n+  name: string;\r\n+  topic: string;\r\n+  description?: string;\r\n+  hasPassword: boolean;\r\n+  password?: string | null;\r\n+  users?: { socketId: string; userInfo: any }[];\r\n }\r\n+\r\n+/** Join a room */\r\n+export const joinRoom = (roomId: string, user: any): void => {\r\n+  socket?.emit(\"join-room\", { roomId, user });\r\n+};\r\n+\r\n+/** Leave a room */\r\n+export const leaveRoom = (roomId: string, userId: string): void => {\r\n+  socket?.emit(\"leave-room\", { roomId, userId });\r\n+};\r\n+\r\n+/** Send a room message */\r\n+export interface RoomMessage {\r\n+  id: string;\r\n+  text: string;\r\n+  user: string | undefined;\r\n+  timestamp: string;\r\n+}\r\n+\r\n+export const sendRoomMessage = (roomId: string, text: string): void => {\r\n+  const message: RoomMessage = {\r\n+    id: uuidv4(),\r\n+    text,\r\n+    user: socket?.id,\r\n+    timestamp: new Date().toISOString(),\r\n+  };\r\n+  socket?.emit(\"send-message\", { roomId, message });\r\n+};\r\n+\r\n+/** Listen for messages */\r\n+export const onRoomMessage = (callback: (msg: RoomMessage) => void): void => {\r\n+  socket?.off(\"receive-message\").on(\"receive-message\", (data) => {\r\n+    callback(data.message);\r\n+  });\r\n+};\r\n+\r\n+/** Typing indicator */\r\n+export const sendTyping = (roomId: string, userId: string): void => {\r\n+  socket?.emit(\"typing\", { roomId, userId });\r\n+};\r\n+\r\n+export const onTyping = (callback: (data: any) => void): void => {\r\n+  socket?.off(\"typing\").on(\"typing\", callback);\r\n+};\r\n+\r\n+// -------------------------------------------------\r\n+// 🎥 WebRTC Signaling\r\n+// -------------------------------------------------\r\n+export const sendRoomOffer = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  offer: RTCSessionDescriptionInit\r\n+): void => {\r\n+  socket?.emit(\"room-offer\", { to, roomId, offer });\r\n+};\r\n+\r\n+export const sendRoomAnswer = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  answer: RTCSessionDescriptionInit\r\n+): void => {\r\n+  socket?.emit(\"room-answer\", { to, roomId, answer });\r\n+};\r\n+\r\n+export const sendRoomIce = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  candidate: RTCIceCandidateInit\r\n+): void => {\r\n+  socket?.emit(\"room-ice\", { to, roomId, candidate });\r\n+};\r\n"
                },
                {
                    "date": 1760156706709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,123 +1,27 @@\n-// features/RoomChat/services/roomSocketService.ts\r\n-import { io, Socket } from \"socket.io-client\";\r\n-import { v4 as uuidv4 } from \"uuid\";\r\n+import { useEffect, useState } from \"react\";\r\n+import type { Socket } from \"socket.io-client\";\r\n+import {\r\n+  connectRoomSocket,\r\n+  disconnectRoomSocket,\r\n+} from \"../services/roomSocketService\";\r\n \r\n-// ✅ Use your signaling server URL\r\n-const SOCKET_URL =\r\n-  process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n+/** React hook to manage /rooms socket connection */\r\n+export default function useRoomSocket(): Socket | null {\r\n+  const [socket, setSocket] = useState<Socket | null>(null);\r\n \r\n-// Single socket instance for /rooms namespace\r\n-let socket: Socket | null = null;\r\n+  useEffect(() => {\r\n+    // Connect to /rooms namespace\r\n+    const s = connectRoomSocket();\r\n+    setSocket(s);\r\n \r\n-/** Connect to the room socket server (namespace /rooms) */\r\n-export const connectRoomSocket = (): Socket => {\r\n-  if (!socket) {\r\n-    socket = io(`${SOCKET_URL}/rooms`, {\r\n-      transports: [\"websocket\"],\r\n-    });\r\n+    // Cleanup on unmount\r\n+    return () => {\r\n+      if (s) {\r\n+        disconnectRoomSocket();\r\n+        setSocket(null);\r\n+      }\r\n+    };\r\n+  }, []);\r\n \r\n-    socket.on(\"connect\", () => {\r\n-      console.log(\"✅ Connected to room server:\", socket!.id);\r\n-    });\r\n-\r\n-    socket.on(\"disconnect\", (reason) => {\r\n-      console.log(\"❌ Disconnected from room server:\", reason);\r\n-    });\r\n-  }\r\n   return socket;\r\n-};\r\n-\r\n-/** Disconnect from room server */\r\n-export const disconnectRoomSocket = (): void => {\r\n-  if (socket) {\r\n-    socket.disconnect();\r\n-    socket = null;\r\n-  }\r\n-};\r\n-\r\n-/** Get current socket instance */\r\n-export const getRoomSocket = (): Socket | null => socket;\r\n-\r\n-// -------------------------------------------------\r\n-// ⚡ Room Operations\r\n-// -------------------------------------------------\r\n-export interface Room {\r\n-  id: string;\r\n-  name: string;\r\n-  topic: string;\r\n-  description?: string;\r\n-  hasPassword: boolean;\r\n-  password?: string | null;\r\n-  users?: { socketId: string; userInfo: any }[];\r\n }\r\n-\r\n-/** Join a room */\r\n-export const joinRoom = (roomId: string, user: any): void => {\r\n-  socket?.emit(\"join-room\", { roomId, user });\r\n-};\r\n-\r\n-/** Leave a room */\r\n-export const leaveRoom = (roomId: string, userId: string): void => {\r\n-  socket?.emit(\"leave-room\", { roomId, userId });\r\n-};\r\n-\r\n-/** Send a room message */\r\n-export interface RoomMessage {\r\n-  id: string;\r\n-  text: string;\r\n-  user: string | undefined;\r\n-  timestamp: string;\r\n-}\r\n-\r\n-export const sendRoomMessage = (roomId: string, text: string): void => {\r\n-  const message: RoomMessage = {\r\n-    id: uuidv4(),\r\n-    text,\r\n-    user: socket?.id,\r\n-    timestamp: new Date().toISOString(),\r\n-  };\r\n-  socket?.emit(\"send-message\", { roomId, message });\r\n-};\r\n-\r\n-/** Listen for messages */\r\n-export const onRoomMessage = (callback: (msg: RoomMessage) => void): void => {\r\n-  socket?.off(\"receive-message\").on(\"receive-message\", (data) => {\r\n-    callback(data.message);\r\n-  });\r\n-};\r\n-\r\n-/** Typing indicator */\r\n-export const sendTyping = (roomId: string, userId: string): void => {\r\n-  socket?.emit(\"typing\", { roomId, userId });\r\n-};\r\n-\r\n-export const onTyping = (callback: (data: any) => void): void => {\r\n-  socket?.off(\"typing\").on(\"typing\", callback);\r\n-};\r\n-\r\n-// -------------------------------------------------\r\n-// 🎥 WebRTC Signaling\r\n-// -------------------------------------------------\r\n-export const sendRoomOffer = (\r\n-  to: string,\r\n-  roomId: string,\r\n-  offer: RTCSessionDescriptionInit\r\n-): void => {\r\n-  socket?.emit(\"room-offer\", { to, roomId, offer });\r\n-};\r\n-\r\n-export const sendRoomAnswer = (\r\n-  to: string,\r\n-  roomId: string,\r\n-  answer: RTCSessionDescriptionInit\r\n-): void => {\r\n-  socket?.emit(\"room-answer\", { to, roomId, answer });\r\n-};\r\n-\r\n-export const sendRoomIce = (\r\n-  to: string,\r\n-  roomId: string,\r\n-  candidate: RTCIceCandidateInit\r\n-): void => {\r\n-  socket?.emit(\"room-ice\", { to, roomId, candidate });\r\n-};\r\n"
                },
                {
                    "date": 1760158663777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,90 @@\n-import { useEffect, useState } from \"react\";\r\n+import { useEffect, useState, useCallback } from \"react\";\r\n import type { Socket } from \"socket.io-client\";\r\n import {\r\n   connectRoomSocket,\r\n   disconnectRoomSocket,\r\n+  joinRoom,\r\n+  leaveRoom,\r\n+  sendRoomMessage,\r\n+  sendTyping,\r\n } from \"../services/roomSocketService\";\r\n \r\n-/** React hook to manage /rooms socket connection */\r\n-export default function useRoomSocket(): Socket | null {\r\n+export interface Room {\r\n+  id: string;\r\n+  name: string;\r\n+  topic: string;\r\n+  description?: string;\r\n+  hasPassword: boolean;\r\n+  password?: string | null;\r\n+  users?: { socketId: string; userInfo: any }[];\r\n+}\r\n+\r\n+export interface RoomMessage {\r\n+  id: string;\r\n+  text: string;\r\n+  user: string | undefined;\r\n+  timestamp: string;\r\n+}\r\n+\r\n+/** Hook to manage /rooms socket connection */\r\n+export default function useRoomSocket() {\r\n   const [socket, setSocket] = useState<Socket | null>(null);\r\n+  const [rooms, setRooms] = useState<Room[]>([]);\r\n \r\n   useEffect(() => {\r\n-    // Connect to /rooms namespace\r\n     const s = connectRoomSocket();\r\n     setSocket(s);\r\n \r\n-    // Cleanup on unmount\r\n+    // Listen for server updates\r\n+    s.on(\"rooms\", (data: Room[]) => setRooms(data));\r\n+    s.on(\"room-created\", (newRoom: Room) =>\r\n+      setRooms((prev) => [...prev, { ...newRoom, users: [] }])\r\n+    );\r\n+    s.on(\"room-update\", (updatedRoom: Room) =>\r\n+      setRooms((prev) => prev.map((r) => (r.id === updatedRoom.id ? updatedRoom : r)))\r\n+    );\r\n+\r\n     return () => {\r\n-      if (s) {\r\n-        disconnectRoomSocket();\r\n-        setSocket(null);\r\n-      }\r\n+      disconnectRoomSocket();\r\n+      setSocket(null);\r\n     };\r\n   }, []);\r\n \r\n-  return socket;\r\n+  // --- Helpers ---\r\n+  const createRoom = useCallback(\r\n+    (room: Omit<Room, \"id\" | \"users\">) => {\r\n+      socket?.emit(\"create-room\", room);\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  const join = useCallback(\r\n+    (roomId: string, user: any) => {\r\n+      joinRoom(roomId, user);\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  const leave = useCallback(\r\n+    (roomId: string, userId: string) => {\r\n+      leaveRoom(roomId, userId);\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  const sendMessage = useCallback(\r\n+    (roomId: string, text: string) => {\r\n+      sendRoomMessage(roomId, text);\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  const typing = useCallback(\r\n+    (roomId: string, userId: string) => {\r\n+      sendTyping(roomId, userId);\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  return { socket, rooms, createRoom, join, leave, sendMessage, typing };\r\n }\r\n"
                },
                {
                    "date": 1760188898099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,66 +25,62 @@\n   user: string | undefined;\r\n   timestamp: string;\r\n }\r\n \r\n-/** Hook to manage /rooms socket connection */\r\n export default function useRoomSocket() {\r\n   const [socket, setSocket] = useState<Socket | null>(null);\r\n   const [rooms, setRooms] = useState<Room[]>([]);\r\n \r\n   useEffect(() => {\r\n     const s = connectRoomSocket();\r\n     setSocket(s);\r\n \r\n-    // Listen for server updates\r\n-    s.on(\"rooms\", (data: Room[]) => setRooms(data));\r\n-    s.on(\"room-created\", (newRoom: Room) =>\r\n-      setRooms((prev) => [...prev, { ...newRoom, users: [] }])\r\n-    );\r\n-    s.on(\"room-update\", (updatedRoom: Room) =>\r\n-      setRooms((prev) => prev.map((r) => (r.id === updatedRoom.id ? updatedRoom : r)))\r\n-    );\r\n+    const handleRooms = (data: Room[]) => setRooms(data);\r\n+    const handleRoomCreated = (newRoom: Room) =>\r\n+      setRooms((prev) => [...prev, { ...newRoom, users: [] }]);\r\n+    const handleRoomUpdate = (updatedRoom: Room) =>\r\n+      setRooms((prev) =>\r\n+        prev.map((r) => (r.id === updatedRoom.id ? updatedRoom : r))\r\n+      );\r\n \r\n+    s.on(\"rooms\", handleRooms);\r\n+    s.on(\"room-created\", handleRoomCreated);\r\n+    s.on(\"room-update\", handleRoomUpdate);\r\n+\r\n     return () => {\r\n+      s.off(\"rooms\", handleRooms);\r\n+      s.off(\"room-created\", handleRoomCreated);\r\n+      s.off(\"room-update\", handleRoomUpdate);\r\n       disconnectRoomSocket();\r\n       setSocket(null);\r\n     };\r\n   }, []);\r\n \r\n-  // --- Helpers ---\r\n   const createRoom = useCallback(\r\n     (room: Omit<Room, \"id\" | \"users\">) => {\r\n       socket?.emit(\"create-room\", room);\r\n     },\r\n     [socket]\r\n   );\r\n \r\n-  const join = useCallback(\r\n-    (roomId: string, user: any) => {\r\n-      joinRoom(roomId, user);\r\n-    },\r\n-    [socket]\r\n-  );\r\n+  const join = useCallback((roomId: string, user: any) => {\r\n+    if (!socket) return;\r\n+    joinRoom(socket, roomId, user);\r\n+  }, [socket]);\r\n \r\n-  const leave = useCallback(\r\n-    (roomId: string, userId: string) => {\r\n-      leaveRoom(roomId, userId);\r\n-    },\r\n-    [socket]\r\n-  );\r\n+  const leave = useCallback((roomId: string, userId: string) => {\r\n+    if (!socket) return;\r\n+    leaveRoom(socket, roomId, userId);\r\n+  }, [socket]);\r\n \r\n-  const sendMessage = useCallback(\r\n-    (roomId: string, text: string) => {\r\n-      sendRoomMessage(roomId, text);\r\n-    },\r\n-    [socket]\r\n-  );\r\n+  const sendMessage = useCallback((roomId: string, text: string) => {\r\n+    if (!socket) return;\r\n+    sendRoomMessage(socket, roomId, text);\r\n+  }, [socket]);\r\n \r\n-  const typing = useCallback(\r\n-    (roomId: string, userId: string) => {\r\n-      sendTyping(roomId, userId);\r\n-    },\r\n-    [socket]\r\n-  );\r\n+  const typing = useCallback((roomId: string, userId: string) => {\r\n+    if (!socket) return;\r\n+    sendTyping(socket, roomId, userId);\r\n+  }, [socket]);\r\n \r\n   return { socket, rooms, createRoom, join, leave, sendMessage, typing };\r\n }\r\n"
                },
                {
                    "date": 1760188904532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,62 +25,66 @@\n   user: string | undefined;\r\n   timestamp: string;\r\n }\r\n \r\n+/** Hook to manage /rooms socket connection */\r\n export default function useRoomSocket() {\r\n   const [socket, setSocket] = useState<Socket | null>(null);\r\n   const [rooms, setRooms] = useState<Room[]>([]);\r\n \r\n   useEffect(() => {\r\n     const s = connectRoomSocket();\r\n     setSocket(s);\r\n \r\n-    const handleRooms = (data: Room[]) => setRooms(data);\r\n-    const handleRoomCreated = (newRoom: Room) =>\r\n-      setRooms((prev) => [...prev, { ...newRoom, users: [] }]);\r\n-    const handleRoomUpdate = (updatedRoom: Room) =>\r\n-      setRooms((prev) =>\r\n-        prev.map((r) => (r.id === updatedRoom.id ? updatedRoom : r))\r\n-      );\r\n+    // Listen for server updates\r\n+    s.on(\"rooms\", (data: Room[]) => setRooms(data));\r\n+    s.on(\"room-created\", (newRoom: Room) =>\r\n+      setRooms((prev) => [...prev, { ...newRoom, users: [] }])\r\n+    );\r\n+    s.on(\"room-update\", (updatedRoom: Room) =>\r\n+      setRooms((prev) => prev.map((r) => (r.id === updatedRoom.id ? updatedRoom : r)))\r\n+    );\r\n \r\n-    s.on(\"rooms\", handleRooms);\r\n-    s.on(\"room-created\", handleRoomCreated);\r\n-    s.on(\"room-update\", handleRoomUpdate);\r\n-\r\n     return () => {\r\n-      s.off(\"rooms\", handleRooms);\r\n-      s.off(\"room-created\", handleRoomCreated);\r\n-      s.off(\"room-update\", handleRoomUpdate);\r\n       disconnectRoomSocket();\r\n       setSocket(null);\r\n     };\r\n   }, []);\r\n \r\n+  // --- Helpers ---\r\n   const createRoom = useCallback(\r\n     (room: Omit<Room, \"id\" | \"users\">) => {\r\n       socket?.emit(\"create-room\", room);\r\n     },\r\n     [socket]\r\n   );\r\n \r\n-  const join = useCallback((roomId: string, user: any) => {\r\n-    if (!socket) return;\r\n-    joinRoom(socket, roomId, user);\r\n-  }, [socket]);\r\n+  const join = useCallback(\r\n+    (roomId: string, user: any) => {\r\n+      joinRoom(roomId, user);\r\n+    },\r\n+    [socket]\r\n+  );\r\n \r\n-  const leave = useCallback((roomId: string, userId: string) => {\r\n-    if (!socket) return;\r\n-    leaveRoom(socket, roomId, userId);\r\n-  }, [socket]);\r\n+  const leave = useCallback(\r\n+    (roomId: string, userId: string) => {\r\n+      leaveRoom(roomId, userId);\r\n+    },\r\n+    [socket]\r\n+  );\r\n \r\n-  const sendMessage = useCallback((roomId: string, text: string) => {\r\n-    if (!socket) return;\r\n-    sendRoomMessage(socket, roomId, text);\r\n-  }, [socket]);\r\n+  const sendMessage = useCallback(\r\n+    (roomId: string, text: string) => {\r\n+      sendRoomMessage(roomId, text);\r\n+    },\r\n+    [socket]\r\n+  );\r\n \r\n-  const typing = useCallback((roomId: string, userId: string) => {\r\n-    if (!socket) return;\r\n-    sendTyping(socket, roomId, userId);\r\n-  }, [socket]);\r\n+  const typing = useCallback(\r\n+    (roomId: string, userId: string) => {\r\n+      sendTyping(roomId, userId);\r\n+    },\r\n+    [socket]\r\n+  );\r\n \r\n   return { socket, rooms, createRoom, join, leave, sendMessage, typing };\r\n }\r\n"
                },
                {
                    "date": 1760191771218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,66 +1,111 @@\n-import { useEffect, useState, useCallback } from \"react\";\r\n+import { useEffect, useState, useCallback, useRef } from \"react\";\r\n import type { Socket } from \"socket.io-client\";\r\n import {\r\n   connectRoomSocket,\r\n   disconnectRoomSocket,\r\n   joinRoom,\r\n   leaveRoom,\r\n   sendRoomMessage,\r\n   sendTyping,\r\n+  onRoomMessage,\r\n+  onTyping,\r\n } from \"../services/roomSocketService\";\r\n \r\n+export interface RoomUser {\r\n+  socketId: string;\r\n+  userInfo: {\r\n+    name?: string;\r\n+    avatar?: string;\r\n+    country?: string;\r\n+    [key: string]: any;\r\n+  };\r\n+}\r\n+\r\n export interface Room {\r\n   id: string;\r\n   name: string;\r\n   topic: string;\r\n   description?: string;\r\n   hasPassword: boolean;\r\n   password?: string | null;\r\n-  users?: { socketId: string; userInfo: any }[];\r\n+  users?: RoomUser[];\r\n }\r\n \r\n export interface RoomMessage {\r\n   id: string;\r\n   text: string;\r\n-  user: string | undefined;\r\n+  userId: string;\r\n+  username?: string;\r\n   timestamp: string;\r\n }\r\n \r\n-/** Hook to manage /rooms socket connection */\r\n+/** \r\n+ * ✅ Robust Hook to manage the /rooms socket namespace \r\n+ * Handles: connection, reconnection, room events, messaging, typing\r\n+ */\r\n export default function useRoomSocket() {\r\n   const [socket, setSocket] = useState<Socket | null>(null);\r\n   const [rooms, setRooms] = useState<Room[]>([]);\r\n+  const messageCallbacks = useRef<((msg: RoomMessage) => void)[]>([]);\r\n+  const typingCallbacks = useRef<((data: { roomId: string; userId: string }) => void)[]>([]);\r\n \r\n+  // --------------------------------------------------------------------\r\n+  // 🔌 Connect + Sync\r\n+  // --------------------------------------------------------------------\r\n   useEffect(() => {\r\n     const s = connectRoomSocket();\r\n     setSocket(s);\r\n \r\n-    // Listen for server updates\r\n-    s.on(\"rooms\", (data: Room[]) => setRooms(data));\r\n-    s.on(\"room-created\", (newRoom: Room) =>\r\n-      setRooms((prev) => [...prev, { ...newRoom, users: [] }])\r\n-    );\r\n-    s.on(\"room-update\", (updatedRoom: Room) =>\r\n-      setRooms((prev) => prev.map((r) => (r.id === updatedRoom.id ? updatedRoom : r)))\r\n-    );\r\n+    const handleRoomsList = (data: Room[]) => setRooms(data);\r\n \r\n+    const handleRoomCreated = (newRoom: Room) =>\r\n+      setRooms((prev) => {\r\n+        const exists = prev.some((r) => r.id === newRoom.id);\r\n+        return exists ? prev : [...prev, { ...newRoom, users: [] }];\r\n+      });\r\n+\r\n+    const handleRoomUpdate = (updatedRoom: Room) =>\r\n+      setRooms((prev) =>\r\n+        prev.map((r) => (r.id === updatedRoom.id ? updatedRoom : r))\r\n+      );\r\n+\r\n+    s.on(\"rooms\", handleRoomsList);\r\n+    s.on(\"room-created\", handleRoomCreated);\r\n+    s.on(\"room-update\", handleRoomUpdate);\r\n+\r\n+    // Optional: Listen for messages globally (useRef holds callbacks)\r\n+    onRoomMessage((msg) => {\r\n+      messageCallbacks.current.forEach((cb) => cb(msg));\r\n+    });\r\n+\r\n+    // Typing indicator handler\r\n+    onTyping((data) => {\r\n+      typingCallbacks.current.forEach((cb) => cb(data));\r\n+    });\r\n+\r\n+    // Cleanup when component unmounts\r\n     return () => {\r\n+      s.off(\"rooms\", handleRoomsList);\r\n+      s.off(\"room-created\", handleRoomCreated);\r\n+      s.off(\"room-update\", handleRoomUpdate);\r\n       disconnectRoomSocket();\r\n       setSocket(null);\r\n     };\r\n   }, []);\r\n \r\n-  // --- Helpers ---\r\n+  // --------------------------------------------------------------------\r\n+  // 🧩 Public API\r\n+  // --------------------------------------------------------------------\r\n   const createRoom = useCallback(\r\n     (room: Omit<Room, \"id\" | \"users\">) => {\r\n       socket?.emit(\"create-room\", room);\r\n     },\r\n     [socket]\r\n   );\r\n \r\n   const join = useCallback(\r\n-    (roomId: string, user: any) => {\r\n+    (roomId: string, user: RoomUser[\"userInfo\"]) => {\r\n       joinRoom(roomId, user);\r\n     },\r\n     [socket]\r\n   );\r\n@@ -73,9 +118,9 @@\n   );\r\n \r\n   const sendMessage = useCallback(\r\n     (roomId: string, text: string) => {\r\n-      sendRoomMessage(roomId, text);\r\n+      if (text.trim()) sendRoomMessage(roomId, text);\r\n     },\r\n     [socket]\r\n   );\r\n \r\n@@ -85,6 +130,39 @@\n     },\r\n     [socket]\r\n   );\r\n \r\n-  return { socket, rooms, createRoom, join, leave, sendMessage, typing };\r\n+  // --------------------------------------------------------------------\r\n+  // 💬 Event Subscription Helpers\r\n+  // --------------------------------------------------------------------\r\n+  const onMessage = useCallback((callback: (msg: RoomMessage) => void) => {\r\n+    messageCallbacks.current.push(callback);\r\n+    return () => {\r\n+      messageCallbacks.current = messageCallbacks.current.filter((cb) => cb !== callback);\r\n+    };\r\n+  }, []);\r\n+\r\n+  const onUserTyping = useCallback(\r\n+    (callback: (data: { roomId: string; userId: string }) => void) => {\r\n+      typingCallbacks.current.push(callback);\r\n+      return () => {\r\n+        typingCallbacks.current = typingCallbacks.current.filter((cb) => cb !== callback);\r\n+      };\r\n+    },\r\n+    []\r\n+  );\r\n+\r\n+  // --------------------------------------------------------------------\r\n+  // ✅ Return API\r\n+  // --------------------------------------------------------------------\r\n+  return {\r\n+    socket,\r\n+    rooms,\r\n+    createRoom,\r\n+    join,\r\n+    leave,\r\n+    sendMessage,\r\n+    typing,\r\n+    onMessage,\r\n+    onUserTyping,\r\n+  };\r\n }\r\n"
                }
            ],
            "date": 1758898655460,
            "name": "Commit-0",
            "content": "import { useEffect, useRef, useState } from \"react\";\r\nimport { connectRoomSocket, disconnectRoomSocket, getRoomSocket } from \"../services/roomSocketService\";\r\n\r\nexport default function useRoomSocket() {\r\n  const [socket, setSocket] = useState<any>(null);\r\n\r\n  useEffect(() => {\r\n    connectRoomSocket();\r\n    const s = getRoomSocket();\r\n    setSocket(s);\r\n\r\n    return () => {\r\n      disconnectRoomSocket();\r\n      setSocket(null);\r\n    };\r\n  }, []);\r\n\r\n  return socket;\r\n}\r\n"
        }
    ]
}