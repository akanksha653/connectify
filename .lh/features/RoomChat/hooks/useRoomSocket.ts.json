{
    "sourceFile": "features/RoomChat/hooks/useRoomSocket.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 30,
            "patches": [
                {
                    "date": 1758898655460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758906475682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,22 @@\n-import { useEffect, useRef, useState } from \"react\";\r\n-import { connectRoomSocket, disconnectRoomSocket, getRoomSocket } from \"../services/roomSocketService\";\r\n+import { useEffect, useState } from \"react\";\r\n+import type { Socket } from \"socket.io-client\";\r\n+import {\r\n+  connectRoomSocket,\r\n+  disconnectRoomSocket,\r\n+  getRoomSocket,\r\n+} from \"../services/roomSocketService\";\r\n \r\n export default function useRoomSocket() {\r\n-  const [socket, setSocket] = useState<any>(null);\r\n+  const [socket, setSocket] = useState<Socket | null>(null);\r\n \r\n   useEffect(() => {\r\n-    connectRoomSocket();\r\n-    const s = getRoomSocket();\r\n+    // Establish connection\r\n+    const s = connectRoomSocket(); // Prefer connectRoomSocket() to return the socket\r\n     setSocket(s);\r\n \r\n     return () => {\r\n+      // Clean up connection on unmount\r\n       disconnectRoomSocket();\r\n       setSocket(null);\r\n     };\r\n   }, []);\r\n"
                },
                {
                    "date": 1758985284114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,23 +2,24 @@\n import type { Socket } from \"socket.io-client\";\r\n import {\r\n   connectRoomSocket,\r\n   disconnectRoomSocket,\r\n-  getRoomSocket,\r\n } from \"../services/roomSocketService\";\r\n \r\n-export default function useRoomSocket() {\r\n+export default function useRoomSocket(): Socket | null {\r\n   const [socket, setSocket] = useState<Socket | null>(null);\r\n \r\n   useEffect(() => {\r\n-    // Establish connection\r\n-    const s = connectRoomSocket(); // Prefer connectRoomSocket() to return the socket\r\n+    // Connect to the room socket\r\n+    const s = connectRoomSocket();\r\n     setSocket(s);\r\n \r\n+    // Clean up on unmount\r\n     return () => {\r\n-      // Clean up connection on unmount\r\n-      disconnectRoomSocket();\r\n-      setSocket(null);\r\n+      if (s) {\r\n+        disconnectRoomSocket();\r\n+        setSocket(null);\r\n+      }\r\n     };\r\n   }, []);\r\n \r\n   return socket;\r\n"
                },
                {
                    "date": 1760156235068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,123 @@\n-import { useEffect, useState } from \"react\";\r\n-import type { Socket } from \"socket.io-client\";\r\n-import {\r\n-  connectRoomSocket,\r\n-  disconnectRoomSocket,\r\n-} from \"../services/roomSocketService\";\r\n+// features/RoomChat/services/roomSocketService.ts\r\n+import { io, Socket } from \"socket.io-client\";\r\n+import { v4 as uuidv4 } from \"uuid\";\r\n \r\n-export default function useRoomSocket(): Socket | null {\r\n-  const [socket, setSocket] = useState<Socket | null>(null);\r\n+// ✅ Use your signaling server URL\r\n+const SOCKET_URL =\r\n+  process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n \r\n-  useEffect(() => {\r\n-    // Connect to the room socket\r\n-    const s = connectRoomSocket();\r\n-    setSocket(s);\r\n+// Single socket instance for /rooms namespace\r\n+let socket: Socket | null = null;\r\n \r\n-    // Clean up on unmount\r\n-    return () => {\r\n-      if (s) {\r\n-        disconnectRoomSocket();\r\n-        setSocket(null);\r\n-      }\r\n-    };\r\n-  }, []);\r\n+/** Connect to the room socket server (namespace /rooms) */\r\n+export const connectRoomSocket = (): Socket => {\r\n+  if (!socket) {\r\n+    socket = io(`${SOCKET_URL}/rooms`, {\r\n+      transports: [\"websocket\"],\r\n+    });\r\n \r\n+    socket.on(\"connect\", () => {\r\n+      console.log(\"✅ Connected to room server:\", socket!.id);\r\n+    });\r\n+\r\n+    socket.on(\"disconnect\", (reason) => {\r\n+      console.log(\"❌ Disconnected from room server:\", reason);\r\n+    });\r\n+  }\r\n   return socket;\r\n+};\r\n+\r\n+/** Disconnect from room server */\r\n+export const disconnectRoomSocket = (): void => {\r\n+  if (socket) {\r\n+    socket.disconnect();\r\n+    socket = null;\r\n+  }\r\n+};\r\n+\r\n+/** Get current socket instance */\r\n+export const getRoomSocket = (): Socket | null => socket;\r\n+\r\n+// -------------------------------------------------\r\n+// ⚡ Room Operations\r\n+// -------------------------------------------------\r\n+export interface Room {\r\n+  id: string;\r\n+  name: string;\r\n+  topic: string;\r\n+  description?: string;\r\n+  hasPassword: boolean;\r\n+  password?: string | null;\r\n+  users?: { socketId: string; userInfo: any }[];\r\n }\r\n+\r\n+/** Join a room */\r\n+export const joinRoom = (roomId: string, user: any): void => {\r\n+  socket?.emit(\"join-room\", { roomId, user });\r\n+};\r\n+\r\n+/** Leave a room */\r\n+export const leaveRoom = (roomId: string, userId: string): void => {\r\n+  socket?.emit(\"leave-room\", { roomId, userId });\r\n+};\r\n+\r\n+/** Send a room message */\r\n+export interface RoomMessage {\r\n+  id: string;\r\n+  text: string;\r\n+  user: string | undefined;\r\n+  timestamp: string;\r\n+}\r\n+\r\n+export const sendRoomMessage = (roomId: string, text: string): void => {\r\n+  const message: RoomMessage = {\r\n+    id: uuidv4(),\r\n+    text,\r\n+    user: socket?.id,\r\n+    timestamp: new Date().toISOString(),\r\n+  };\r\n+  socket?.emit(\"send-message\", { roomId, message });\r\n+};\r\n+\r\n+/** Listen for messages */\r\n+export const onRoomMessage = (callback: (msg: RoomMessage) => void): void => {\r\n+  socket?.off(\"receive-message\").on(\"receive-message\", (data) => {\r\n+    callback(data.message);\r\n+  });\r\n+};\r\n+\r\n+/** Typing indicator */\r\n+export const sendTyping = (roomId: string, userId: string): void => {\r\n+  socket?.emit(\"typing\", { roomId, userId });\r\n+};\r\n+\r\n+export const onTyping = (callback: (data: any) => void): void => {\r\n+  socket?.off(\"typing\").on(\"typing\", callback);\r\n+};\r\n+\r\n+// -------------------------------------------------\r\n+// 🎥 WebRTC Signaling\r\n+// -------------------------------------------------\r\n+export const sendRoomOffer = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  offer: RTCSessionDescriptionInit\r\n+): void => {\r\n+  socket?.emit(\"room-offer\", { to, roomId, offer });\r\n+};\r\n+\r\n+export const sendRoomAnswer = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  answer: RTCSessionDescriptionInit\r\n+): void => {\r\n+  socket?.emit(\"room-answer\", { to, roomId, answer });\r\n+};\r\n+\r\n+export const sendRoomIce = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  candidate: RTCIceCandidateInit\r\n+): void => {\r\n+  socket?.emit(\"room-ice\", { to, roomId, candidate });\r\n+};\r\n"
                },
                {
                    "date": 1760156706709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,123 +1,27 @@\n-// features/RoomChat/services/roomSocketService.ts\r\n-import { io, Socket } from \"socket.io-client\";\r\n-import { v4 as uuidv4 } from \"uuid\";\r\n+import { useEffect, useState } from \"react\";\r\n+import type { Socket } from \"socket.io-client\";\r\n+import {\r\n+  connectRoomSocket,\r\n+  disconnectRoomSocket,\r\n+} from \"../services/roomSocketService\";\r\n \r\n-// ✅ Use your signaling server URL\r\n-const SOCKET_URL =\r\n-  process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n+/** React hook to manage /rooms socket connection */\r\n+export default function useRoomSocket(): Socket | null {\r\n+  const [socket, setSocket] = useState<Socket | null>(null);\r\n \r\n-// Single socket instance for /rooms namespace\r\n-let socket: Socket | null = null;\r\n+  useEffect(() => {\r\n+    // Connect to /rooms namespace\r\n+    const s = connectRoomSocket();\r\n+    setSocket(s);\r\n \r\n-/** Connect to the room socket server (namespace /rooms) */\r\n-export const connectRoomSocket = (): Socket => {\r\n-  if (!socket) {\r\n-    socket = io(`${SOCKET_URL}/rooms`, {\r\n-      transports: [\"websocket\"],\r\n-    });\r\n+    // Cleanup on unmount\r\n+    return () => {\r\n+      if (s) {\r\n+        disconnectRoomSocket();\r\n+        setSocket(null);\r\n+      }\r\n+    };\r\n+  }, []);\r\n \r\n-    socket.on(\"connect\", () => {\r\n-      console.log(\"✅ Connected to room server:\", socket!.id);\r\n-    });\r\n-\r\n-    socket.on(\"disconnect\", (reason) => {\r\n-      console.log(\"❌ Disconnected from room server:\", reason);\r\n-    });\r\n-  }\r\n   return socket;\r\n-};\r\n-\r\n-/** Disconnect from room server */\r\n-export const disconnectRoomSocket = (): void => {\r\n-  if (socket) {\r\n-    socket.disconnect();\r\n-    socket = null;\r\n-  }\r\n-};\r\n-\r\n-/** Get current socket instance */\r\n-export const getRoomSocket = (): Socket | null => socket;\r\n-\r\n-// -------------------------------------------------\r\n-// ⚡ Room Operations\r\n-// -------------------------------------------------\r\n-export interface Room {\r\n-  id: string;\r\n-  name: string;\r\n-  topic: string;\r\n-  description?: string;\r\n-  hasPassword: boolean;\r\n-  password?: string | null;\r\n-  users?: { socketId: string; userInfo: any }[];\r\n }\r\n-\r\n-/** Join a room */\r\n-export const joinRoom = (roomId: string, user: any): void => {\r\n-  socket?.emit(\"join-room\", { roomId, user });\r\n-};\r\n-\r\n-/** Leave a room */\r\n-export const leaveRoom = (roomId: string, userId: string): void => {\r\n-  socket?.emit(\"leave-room\", { roomId, userId });\r\n-};\r\n-\r\n-/** Send a room message */\r\n-export interface RoomMessage {\r\n-  id: string;\r\n-  text: string;\r\n-  user: string | undefined;\r\n-  timestamp: string;\r\n-}\r\n-\r\n-export const sendRoomMessage = (roomId: string, text: string): void => {\r\n-  const message: RoomMessage = {\r\n-    id: uuidv4(),\r\n-    text,\r\n-    user: socket?.id,\r\n-    timestamp: new Date().toISOString(),\r\n-  };\r\n-  socket?.emit(\"send-message\", { roomId, message });\r\n-};\r\n-\r\n-/** Listen for messages */\r\n-export const onRoomMessage = (callback: (msg: RoomMessage) => void): void => {\r\n-  socket?.off(\"receive-message\").on(\"receive-message\", (data) => {\r\n-    callback(data.message);\r\n-  });\r\n-};\r\n-\r\n-/** Typing indicator */\r\n-export const sendTyping = (roomId: string, userId: string): void => {\r\n-  socket?.emit(\"typing\", { roomId, userId });\r\n-};\r\n-\r\n-export const onTyping = (callback: (data: any) => void): void => {\r\n-  socket?.off(\"typing\").on(\"typing\", callback);\r\n-};\r\n-\r\n-// -------------------------------------------------\r\n-// 🎥 WebRTC Signaling\r\n-// -------------------------------------------------\r\n-export const sendRoomOffer = (\r\n-  to: string,\r\n-  roomId: string,\r\n-  offer: RTCSessionDescriptionInit\r\n-): void => {\r\n-  socket?.emit(\"room-offer\", { to, roomId, offer });\r\n-};\r\n-\r\n-export const sendRoomAnswer = (\r\n-  to: string,\r\n-  roomId: string,\r\n-  answer: RTCSessionDescriptionInit\r\n-): void => {\r\n-  socket?.emit(\"room-answer\", { to, roomId, answer });\r\n-};\r\n-\r\n-export const sendRoomIce = (\r\n-  to: string,\r\n-  roomId: string,\r\n-  candidate: RTCIceCandidateInit\r\n-): void => {\r\n-  socket?.emit(\"room-ice\", { to, roomId, candidate });\r\n-};\r\n"
                },
                {
                    "date": 1760158663777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,90 @@\n-import { useEffect, useState } from \"react\";\r\n+import { useEffect, useState, useCallback } from \"react\";\r\n import type { Socket } from \"socket.io-client\";\r\n import {\r\n   connectRoomSocket,\r\n   disconnectRoomSocket,\r\n+  joinRoom,\r\n+  leaveRoom,\r\n+  sendRoomMessage,\r\n+  sendTyping,\r\n } from \"../services/roomSocketService\";\r\n \r\n-/** React hook to manage /rooms socket connection */\r\n-export default function useRoomSocket(): Socket | null {\r\n+export interface Room {\r\n+  id: string;\r\n+  name: string;\r\n+  topic: string;\r\n+  description?: string;\r\n+  hasPassword: boolean;\r\n+  password?: string | null;\r\n+  users?: { socketId: string; userInfo: any }[];\r\n+}\r\n+\r\n+export interface RoomMessage {\r\n+  id: string;\r\n+  text: string;\r\n+  user: string | undefined;\r\n+  timestamp: string;\r\n+}\r\n+\r\n+/** Hook to manage /rooms socket connection */\r\n+export default function useRoomSocket() {\r\n   const [socket, setSocket] = useState<Socket | null>(null);\r\n+  const [rooms, setRooms] = useState<Room[]>([]);\r\n \r\n   useEffect(() => {\r\n-    // Connect to /rooms namespace\r\n     const s = connectRoomSocket();\r\n     setSocket(s);\r\n \r\n-    // Cleanup on unmount\r\n+    // Listen for server updates\r\n+    s.on(\"rooms\", (data: Room[]) => setRooms(data));\r\n+    s.on(\"room-created\", (newRoom: Room) =>\r\n+      setRooms((prev) => [...prev, { ...newRoom, users: [] }])\r\n+    );\r\n+    s.on(\"room-update\", (updatedRoom: Room) =>\r\n+      setRooms((prev) => prev.map((r) => (r.id === updatedRoom.id ? updatedRoom : r)))\r\n+    );\r\n+\r\n     return () => {\r\n-      if (s) {\r\n-        disconnectRoomSocket();\r\n-        setSocket(null);\r\n-      }\r\n+      disconnectRoomSocket();\r\n+      setSocket(null);\r\n     };\r\n   }, []);\r\n \r\n-  return socket;\r\n+  // --- Helpers ---\r\n+  const createRoom = useCallback(\r\n+    (room: Omit<Room, \"id\" | \"users\">) => {\r\n+      socket?.emit(\"create-room\", room);\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  const join = useCallback(\r\n+    (roomId: string, user: any) => {\r\n+      joinRoom(roomId, user);\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  const leave = useCallback(\r\n+    (roomId: string, userId: string) => {\r\n+      leaveRoom(roomId, userId);\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  const sendMessage = useCallback(\r\n+    (roomId: string, text: string) => {\r\n+      sendRoomMessage(roomId, text);\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  const typing = useCallback(\r\n+    (roomId: string, userId: string) => {\r\n+      sendTyping(roomId, userId);\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  return { socket, rooms, createRoom, join, leave, sendMessage, typing };\r\n }\r\n"
                },
                {
                    "date": 1760188898099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,66 +25,62 @@\n   user: string | undefined;\r\n   timestamp: string;\r\n }\r\n \r\n-/** Hook to manage /rooms socket connection */\r\n export default function useRoomSocket() {\r\n   const [socket, setSocket] = useState<Socket | null>(null);\r\n   const [rooms, setRooms] = useState<Room[]>([]);\r\n \r\n   useEffect(() => {\r\n     const s = connectRoomSocket();\r\n     setSocket(s);\r\n \r\n-    // Listen for server updates\r\n-    s.on(\"rooms\", (data: Room[]) => setRooms(data));\r\n-    s.on(\"room-created\", (newRoom: Room) =>\r\n-      setRooms((prev) => [...prev, { ...newRoom, users: [] }])\r\n-    );\r\n-    s.on(\"room-update\", (updatedRoom: Room) =>\r\n-      setRooms((prev) => prev.map((r) => (r.id === updatedRoom.id ? updatedRoom : r)))\r\n-    );\r\n+    const handleRooms = (data: Room[]) => setRooms(data);\r\n+    const handleRoomCreated = (newRoom: Room) =>\r\n+      setRooms((prev) => [...prev, { ...newRoom, users: [] }]);\r\n+    const handleRoomUpdate = (updatedRoom: Room) =>\r\n+      setRooms((prev) =>\r\n+        prev.map((r) => (r.id === updatedRoom.id ? updatedRoom : r))\r\n+      );\r\n \r\n+    s.on(\"rooms\", handleRooms);\r\n+    s.on(\"room-created\", handleRoomCreated);\r\n+    s.on(\"room-update\", handleRoomUpdate);\r\n+\r\n     return () => {\r\n+      s.off(\"rooms\", handleRooms);\r\n+      s.off(\"room-created\", handleRoomCreated);\r\n+      s.off(\"room-update\", handleRoomUpdate);\r\n       disconnectRoomSocket();\r\n       setSocket(null);\r\n     };\r\n   }, []);\r\n \r\n-  // --- Helpers ---\r\n   const createRoom = useCallback(\r\n     (room: Omit<Room, \"id\" | \"users\">) => {\r\n       socket?.emit(\"create-room\", room);\r\n     },\r\n     [socket]\r\n   );\r\n \r\n-  const join = useCallback(\r\n-    (roomId: string, user: any) => {\r\n-      joinRoom(roomId, user);\r\n-    },\r\n-    [socket]\r\n-  );\r\n+  const join = useCallback((roomId: string, user: any) => {\r\n+    if (!socket) return;\r\n+    joinRoom(socket, roomId, user);\r\n+  }, [socket]);\r\n \r\n-  const leave = useCallback(\r\n-    (roomId: string, userId: string) => {\r\n-      leaveRoom(roomId, userId);\r\n-    },\r\n-    [socket]\r\n-  );\r\n+  const leave = useCallback((roomId: string, userId: string) => {\r\n+    if (!socket) return;\r\n+    leaveRoom(socket, roomId, userId);\r\n+  }, [socket]);\r\n \r\n-  const sendMessage = useCallback(\r\n-    (roomId: string, text: string) => {\r\n-      sendRoomMessage(roomId, text);\r\n-    },\r\n-    [socket]\r\n-  );\r\n+  const sendMessage = useCallback((roomId: string, text: string) => {\r\n+    if (!socket) return;\r\n+    sendRoomMessage(socket, roomId, text);\r\n+  }, [socket]);\r\n \r\n-  const typing = useCallback(\r\n-    (roomId: string, userId: string) => {\r\n-      sendTyping(roomId, userId);\r\n-    },\r\n-    [socket]\r\n-  );\r\n+  const typing = useCallback((roomId: string, userId: string) => {\r\n+    if (!socket) return;\r\n+    sendTyping(socket, roomId, userId);\r\n+  }, [socket]);\r\n \r\n   return { socket, rooms, createRoom, join, leave, sendMessage, typing };\r\n }\r\n"
                },
                {
                    "date": 1760188904532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,62 +25,66 @@\n   user: string | undefined;\r\n   timestamp: string;\r\n }\r\n \r\n+/** Hook to manage /rooms socket connection */\r\n export default function useRoomSocket() {\r\n   const [socket, setSocket] = useState<Socket | null>(null);\r\n   const [rooms, setRooms] = useState<Room[]>([]);\r\n \r\n   useEffect(() => {\r\n     const s = connectRoomSocket();\r\n     setSocket(s);\r\n \r\n-    const handleRooms = (data: Room[]) => setRooms(data);\r\n-    const handleRoomCreated = (newRoom: Room) =>\r\n-      setRooms((prev) => [...prev, { ...newRoom, users: [] }]);\r\n-    const handleRoomUpdate = (updatedRoom: Room) =>\r\n-      setRooms((prev) =>\r\n-        prev.map((r) => (r.id === updatedRoom.id ? updatedRoom : r))\r\n-      );\r\n+    // Listen for server updates\r\n+    s.on(\"rooms\", (data: Room[]) => setRooms(data));\r\n+    s.on(\"room-created\", (newRoom: Room) =>\r\n+      setRooms((prev) => [...prev, { ...newRoom, users: [] }])\r\n+    );\r\n+    s.on(\"room-update\", (updatedRoom: Room) =>\r\n+      setRooms((prev) => prev.map((r) => (r.id === updatedRoom.id ? updatedRoom : r)))\r\n+    );\r\n \r\n-    s.on(\"rooms\", handleRooms);\r\n-    s.on(\"room-created\", handleRoomCreated);\r\n-    s.on(\"room-update\", handleRoomUpdate);\r\n-\r\n     return () => {\r\n-      s.off(\"rooms\", handleRooms);\r\n-      s.off(\"room-created\", handleRoomCreated);\r\n-      s.off(\"room-update\", handleRoomUpdate);\r\n       disconnectRoomSocket();\r\n       setSocket(null);\r\n     };\r\n   }, []);\r\n \r\n+  // --- Helpers ---\r\n   const createRoom = useCallback(\r\n     (room: Omit<Room, \"id\" | \"users\">) => {\r\n       socket?.emit(\"create-room\", room);\r\n     },\r\n     [socket]\r\n   );\r\n \r\n-  const join = useCallback((roomId: string, user: any) => {\r\n-    if (!socket) return;\r\n-    joinRoom(socket, roomId, user);\r\n-  }, [socket]);\r\n+  const join = useCallback(\r\n+    (roomId: string, user: any) => {\r\n+      joinRoom(roomId, user);\r\n+    },\r\n+    [socket]\r\n+  );\r\n \r\n-  const leave = useCallback((roomId: string, userId: string) => {\r\n-    if (!socket) return;\r\n-    leaveRoom(socket, roomId, userId);\r\n-  }, [socket]);\r\n+  const leave = useCallback(\r\n+    (roomId: string, userId: string) => {\r\n+      leaveRoom(roomId, userId);\r\n+    },\r\n+    [socket]\r\n+  );\r\n \r\n-  const sendMessage = useCallback((roomId: string, text: string) => {\r\n-    if (!socket) return;\r\n-    sendRoomMessage(socket, roomId, text);\r\n-  }, [socket]);\r\n+  const sendMessage = useCallback(\r\n+    (roomId: string, text: string) => {\r\n+      sendRoomMessage(roomId, text);\r\n+    },\r\n+    [socket]\r\n+  );\r\n \r\n-  const typing = useCallback((roomId: string, userId: string) => {\r\n-    if (!socket) return;\r\n-    sendTyping(socket, roomId, userId);\r\n-  }, [socket]);\r\n+  const typing = useCallback(\r\n+    (roomId: string, userId: string) => {\r\n+      sendTyping(roomId, userId);\r\n+    },\r\n+    [socket]\r\n+  );\r\n \r\n   return { socket, rooms, createRoom, join, leave, sendMessage, typing };\r\n }\r\n"
                },
                {
                    "date": 1760191771218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,66 +1,111 @@\n-import { useEffect, useState, useCallback } from \"react\";\r\n+import { useEffect, useState, useCallback, useRef } from \"react\";\r\n import type { Socket } from \"socket.io-client\";\r\n import {\r\n   connectRoomSocket,\r\n   disconnectRoomSocket,\r\n   joinRoom,\r\n   leaveRoom,\r\n   sendRoomMessage,\r\n   sendTyping,\r\n+  onRoomMessage,\r\n+  onTyping,\r\n } from \"../services/roomSocketService\";\r\n \r\n+export interface RoomUser {\r\n+  socketId: string;\r\n+  userInfo: {\r\n+    name?: string;\r\n+    avatar?: string;\r\n+    country?: string;\r\n+    [key: string]: any;\r\n+  };\r\n+}\r\n+\r\n export interface Room {\r\n   id: string;\r\n   name: string;\r\n   topic: string;\r\n   description?: string;\r\n   hasPassword: boolean;\r\n   password?: string | null;\r\n-  users?: { socketId: string; userInfo: any }[];\r\n+  users?: RoomUser[];\r\n }\r\n \r\n export interface RoomMessage {\r\n   id: string;\r\n   text: string;\r\n-  user: string | undefined;\r\n+  userId: string;\r\n+  username?: string;\r\n   timestamp: string;\r\n }\r\n \r\n-/** Hook to manage /rooms socket connection */\r\n+/** \r\n+ * ✅ Robust Hook to manage the /rooms socket namespace \r\n+ * Handles: connection, reconnection, room events, messaging, typing\r\n+ */\r\n export default function useRoomSocket() {\r\n   const [socket, setSocket] = useState<Socket | null>(null);\r\n   const [rooms, setRooms] = useState<Room[]>([]);\r\n+  const messageCallbacks = useRef<((msg: RoomMessage) => void)[]>([]);\r\n+  const typingCallbacks = useRef<((data: { roomId: string; userId: string }) => void)[]>([]);\r\n \r\n+  // --------------------------------------------------------------------\r\n+  // 🔌 Connect + Sync\r\n+  // --------------------------------------------------------------------\r\n   useEffect(() => {\r\n     const s = connectRoomSocket();\r\n     setSocket(s);\r\n \r\n-    // Listen for server updates\r\n-    s.on(\"rooms\", (data: Room[]) => setRooms(data));\r\n-    s.on(\"room-created\", (newRoom: Room) =>\r\n-      setRooms((prev) => [...prev, { ...newRoom, users: [] }])\r\n-    );\r\n-    s.on(\"room-update\", (updatedRoom: Room) =>\r\n-      setRooms((prev) => prev.map((r) => (r.id === updatedRoom.id ? updatedRoom : r)))\r\n-    );\r\n+    const handleRoomsList = (data: Room[]) => setRooms(data);\r\n \r\n+    const handleRoomCreated = (newRoom: Room) =>\r\n+      setRooms((prev) => {\r\n+        const exists = prev.some((r) => r.id === newRoom.id);\r\n+        return exists ? prev : [...prev, { ...newRoom, users: [] }];\r\n+      });\r\n+\r\n+    const handleRoomUpdate = (updatedRoom: Room) =>\r\n+      setRooms((prev) =>\r\n+        prev.map((r) => (r.id === updatedRoom.id ? updatedRoom : r))\r\n+      );\r\n+\r\n+    s.on(\"rooms\", handleRoomsList);\r\n+    s.on(\"room-created\", handleRoomCreated);\r\n+    s.on(\"room-update\", handleRoomUpdate);\r\n+\r\n+    // Optional: Listen for messages globally (useRef holds callbacks)\r\n+    onRoomMessage((msg) => {\r\n+      messageCallbacks.current.forEach((cb) => cb(msg));\r\n+    });\r\n+\r\n+    // Typing indicator handler\r\n+    onTyping((data) => {\r\n+      typingCallbacks.current.forEach((cb) => cb(data));\r\n+    });\r\n+\r\n+    // Cleanup when component unmounts\r\n     return () => {\r\n+      s.off(\"rooms\", handleRoomsList);\r\n+      s.off(\"room-created\", handleRoomCreated);\r\n+      s.off(\"room-update\", handleRoomUpdate);\r\n       disconnectRoomSocket();\r\n       setSocket(null);\r\n     };\r\n   }, []);\r\n \r\n-  // --- Helpers ---\r\n+  // --------------------------------------------------------------------\r\n+  // 🧩 Public API\r\n+  // --------------------------------------------------------------------\r\n   const createRoom = useCallback(\r\n     (room: Omit<Room, \"id\" | \"users\">) => {\r\n       socket?.emit(\"create-room\", room);\r\n     },\r\n     [socket]\r\n   );\r\n \r\n   const join = useCallback(\r\n-    (roomId: string, user: any) => {\r\n+    (roomId: string, user: RoomUser[\"userInfo\"]) => {\r\n       joinRoom(roomId, user);\r\n     },\r\n     [socket]\r\n   );\r\n@@ -73,9 +118,9 @@\n   );\r\n \r\n   const sendMessage = useCallback(\r\n     (roomId: string, text: string) => {\r\n-      sendRoomMessage(roomId, text);\r\n+      if (text.trim()) sendRoomMessage(roomId, text);\r\n     },\r\n     [socket]\r\n   );\r\n \r\n@@ -85,6 +130,39 @@\n     },\r\n     [socket]\r\n   );\r\n \r\n-  return { socket, rooms, createRoom, join, leave, sendMessage, typing };\r\n+  // --------------------------------------------------------------------\r\n+  // 💬 Event Subscription Helpers\r\n+  // --------------------------------------------------------------------\r\n+  const onMessage = useCallback((callback: (msg: RoomMessage) => void) => {\r\n+    messageCallbacks.current.push(callback);\r\n+    return () => {\r\n+      messageCallbacks.current = messageCallbacks.current.filter((cb) => cb !== callback);\r\n+    };\r\n+  }, []);\r\n+\r\n+  const onUserTyping = useCallback(\r\n+    (callback: (data: { roomId: string; userId: string }) => void) => {\r\n+      typingCallbacks.current.push(callback);\r\n+      return () => {\r\n+        typingCallbacks.current = typingCallbacks.current.filter((cb) => cb !== callback);\r\n+      };\r\n+    },\r\n+    []\r\n+  );\r\n+\r\n+  // --------------------------------------------------------------------\r\n+  // ✅ Return API\r\n+  // --------------------------------------------------------------------\r\n+  return {\r\n+    socket,\r\n+    rooms,\r\n+    createRoom,\r\n+    join,\r\n+    leave,\r\n+    sendMessage,\r\n+    typing,\r\n+    onMessage,\r\n+    onUserTyping,\r\n+  };\r\n }\r\n"
                },
                {
                    "date": 1760246392473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import { useEffect, useState, useCallback, useRef } from \"react\";\r\n+import type { Socket } from \"socket.io-client\";\r\n+import {\r\n+  connectRoomSocket,\r\n+  disconnectRoomSocket,\r\n+  joinRoom,\r\n+  leaveRoom,\r\n+  sendRoomMessage,\r\n+  sendTyping,\r\n+  onRoomMessage,\r\n+  onTyping,\r\n+} from \"../services/roomSocketService\";\r\n+\r\n+export interface RoomUser {\r\n+  socketId: string;\r\n+  userInfo: {\r\n+    name?: string;\r\n+    avatar?: string;\r\n+    country?: string;\r\n+    [key: string]: any;\r\n+  };\r\n+}\r\n+\r\n+export interface Room {\r\n+  id: string;\r\n+  name: string;\r\n+  topic: string;\r\n+  description?: string;\r\n+  hasPassword: boolean;\r\n+  password?: string | null;\r\n+  users?: RoomUser[];\r\n+}\r\n+\r\n+export interface RoomMessage {\r\n+  id: string;\r\n+  text: string;\r\n+  userId: string;\r\n+  username?: string;\r\n+  timestamp: string;\r\n+}\r\n+\r\n+/**\r\n+ * ✅ Robust Hook to manage the /rooms socket namespace\r\n+ * Handles: connection, reconnection, room events, messaging, typing\r\n+ */\r\n+export default function useRoomSocket() {\r\n+  const [socket, setSocket] = useState<Socket | null>(null);\r\n+  const [rooms, setRooms] = useState<Room[]>([]);\r\n+\r\n+  const messageCallbacks = useRef<((msg: RoomMessage) => void)[]>([]);\r\n+  const typingCallbacks = useRef<((data: { roomId: string; userId: string }) => void)[]>([]);\r\n+  const subscribed = useRef(false);\r\n+\r\n+  // --------------------------------------------------------------------\r\n+  // 🔌 Connect + Sync\r\n+  // --------------------------------------------------------------------\r\n+  useEffect(() => {\r\n+    const s = connectRoomSocket();\r\n+    setSocket(s);\r\n+\r\n+    // --- Room events ---\r\n+    const handleRoomsList = (data: Room[]) => setRooms(data);\r\n+\r\n+    const handleRoomCreated = (newRoom: Room) =>\r\n+      setRooms((prev) => {\r\n+        const exists = prev.some((r) => r.id === newRoom.id);\r\n+        return exists ? prev : [...prev, { ...newRoom, users: [] }];\r\n+      });\r\n+\r\n+    const handleRoomUpdate = (updatedRoom: Room) =>\r\n+      setRooms((prev) =>\r\n+        prev.map((r) => (r.id === updatedRoom.id ? updatedRoom : r))\r\n+      );\r\n+\r\n+    s.on(\"rooms\", handleRoomsList);\r\n+    s.on(\"room-created\", handleRoomCreated);\r\n+    s.on(\"room-update\", handleRoomUpdate);\r\n+\r\n+    // --- Messages & typing (subscribe only once) ---\r\n+    if (!subscribed.current) {\r\n+      onRoomMessage((msg) => messageCallbacks.current.forEach((cb) => cb(msg)));\r\n+      onTyping((data) => typingCallbacks.current.forEach((cb) => cb(data)));\r\n+      subscribed.current = true;\r\n+    }\r\n+\r\n+    // --- Cleanup ---\r\n+    return () => {\r\n+      s.off(\"rooms\", handleRoomsList);\r\n+      s.off(\"room-created\", handleRoomCreated);\r\n+      s.off(\"room-update\", handleRoomUpdate);\r\n+      disconnectRoomSocket();\r\n+      setSocket(null);\r\n+\r\n+      messageCallbacks.current = [];\r\n+      typingCallbacks.current = [];\r\n+    };\r\n+  }, []);\r\n+\r\n+  // --------------------------------------------------------------------\r\n+  // 🧩 Public API\r\n+  // --------------------------------------------------------------------\r\n+  const createRoom = useCallback(\r\n+    (room: Omit<Room, \"id\" | \"users\">) => {\r\n+      if (!socket) return console.warn(\"Socket not connected yet\");\r\n+      socket.emit(\"create-room\", room);\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  const join = useCallback(\r\n+    (roomId: string, user: RoomUser[\"userInfo\"]) => {\r\n+      if (!socket) return console.warn(\"Socket not connected yet\");\r\n+      joinRoom(roomId, user);\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  const leave = useCallback(\r\n+    (roomId: string, userId: string) => {\r\n+      if (!socket) return console.warn(\"Socket not connected yet\");\r\n+      leaveRoom(roomId, userId);\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  const sendMessage = useCallback(\r\n+    (roomId: string, text: string) => {\r\n+      if (!socket) return console.warn(\"Socket not connected yet\");\r\n+      if (text.trim()) sendRoomMessage(roomId, text);\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  const typing = useCallback(\r\n+    (roomId: string, userId: string) => {\r\n+      if (!socket) return console.warn(\"Socket not connected yet\");\r\n+      sendTyping(roomId, userId);\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  // --------------------------------------------------------------------\r\n+  // 💬 Event Subscription Helpers\r\n+  // --------------------------------------------------------------------\r\n+  const onMessage = useCallback((callback: (msg: RoomMessage) => void) => {\r\n+    messageCallbacks.current.push(callback);\r\n+    return () => {\r\n+      messageCallbacks.current = messageCallbacks.current.filter((cb) => cb !== callback);\r\n+    };\r\n+  }, []);\r\n+\r\n+  const onUserTyping = useCallback(\r\n+    (callback: (data: { roomId: string; userId: string }) => void) => {\r\n+      typingCallbacks.current.push(callback);\r\n+      return () => {\r\n+        typingCallbacks.current = typingCallbacks.current.filter((cb) => cb !== callback);\r\n+      };\r\n+    },\r\n+    []\r\n+  );\r\n+\r\n+  // --------------------------------------------------------------------\r\n+  // ✅ Return API\r\n+  // --------------------------------------------------------------------\r\n+  return {\r\n+    socket,\r\n+    rooms,\r\n+    createRoom,\r\n+    join,\r\n+    leave,\r\n+    sendMessage,\r\n+    typing,\r\n+    onMessage,\r\n+    onUserTyping,\r\n+  };\r\n+}\r\n"
                },
                {
                    "date": 1760267358550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,344 +1,108 @@\n-import { useEffect, useState, useCallback, useRef } from \"react\";\r\n-import type { Socket } from \"socket.io-client\";\r\n-import {\r\n-  connectRoomSocket,\r\n-  disconnectRoomSocket,\r\n-  joinRoom,\r\n-  leaveRoom,\r\n-  sendRoomMessage,\r\n-  sendTyping,\r\n-  onRoomMessage,\r\n-  onTyping,\r\n-} from \"../services/roomSocketService\";\r\n+// features/RoomSystem/hooks/useRoomSocket.ts\r\n+import { useEffect, useMemo, useState, useRef } from \"react\";\r\n+import { io, Socket } from \"socket.io-client\";\r\n+import { ROOM_EVENTS } from \"../utils/roomEvents\";\r\n+import type { Room, Participant, Message } from \"../utils/roomTypes\";\r\n \r\n-export interface RoomUser {\r\n-  socketId: string;\r\n-  userInfo: {\r\n-    name?: string;\r\n-    avatar?: string;\r\n-    country?: string;\r\n-    [key: string]: any;\r\n-  };\r\n-}\r\n+const SIGNALING_URL = process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n \r\n-export interface Room {\r\n-  id: string;\r\n-  name: string;\r\n-  topic: string;\r\n-  description?: string;\r\n-  hasPassword: boolean;\r\n-  password?: string | null;\r\n-  users?: RoomUser[];\r\n-}\r\n-\r\n-export interface RoomMessage {\r\n-  id: string;\r\n-  text: string;\r\n-  userId: string;\r\n-  username?: string;\r\n-  timestamp: string;\r\n-}\r\n-\r\n-/**\r\n- * ✅ Robust Hook to manage the /rooms socket namespace\r\n- * Handles: connection, reconnection, room events, messaging, typing\r\n- */\r\n-export default function useRoomSocket() {\r\n-  const [socket, setSocket] = useState<Socket | null>(null);\r\n+export function useRoomSocket() {\r\n+  const socketRef = useRef<Socket | null>(null);\r\n+  const [connected, setConnected] = useState(false);\r\n   const [rooms, setRooms] = useState<Room[]>([]);\r\n+  const [currentRoomUsers, setCurrentRoomUsers] = useState<Participant[]>([]);\r\n+  const [events, setEvents] = useState<{ type: string; payload: any }[]>([]);\r\n \r\n-  const messageCallbacks = useRef<((msg: RoomMessage) => void)[]>([]);\r\n-  const typingCallbacks = useRef<((data: { roomId: string; userId: string }) => void)[]>([]);\r\n-  const subscribed = useRef(false);\r\n-\r\n-  // --------------------------------------------------------------------\r\n-  // 🔌 Connect + Sync\r\n-  // --------------------------------------------------------------------\r\n   useEffect(() => {\r\n-    const s = connectRoomSocket();\r\n-    setSocket(s);\r\n+    const socket = io(`${SIGNALING_URL}/rooms`, {\r\n+      transports: [\"websocket\", \"polling\"],\r\n+      withCredentials: true,\r\n+    });\r\n \r\n-    // --- Room events ---\r\n-    const handleRoomsList = (data: Room[]) => setRooms(data);\r\n+    socketRef.current = socket;\r\n \r\n-    const handleRoomCreated = (newRoom: Room) =>\r\n-      setRooms((prev) => {\r\n-        const exists = prev.some((r) => r.id === newRoom.id);\r\n-        return exists ? prev : [...prev, { ...newRoom, users: [] }];\r\n-      });\r\n+    socket.on(\"connect\", () => {\r\n+      setConnected(true);\r\n+    });\r\n \r\n-    const handleRoomUpdate = (updatedRoom: Room) =>\r\n-      setRooms((prev) =>\r\n-        prev.map((r) => (r.id === updatedRoom.id ? updatedRoom : r))\r\n-      );\r\n+    socket.on(\"disconnect\", () => {\r\n+      setConnected(false);\r\n+    });\r\n \r\n-    s.on(\"rooms\", handleRoomsList);\r\n-    s.on(\"room-created\", handleRoomCreated);\r\n-    s.on(\"room-update\", handleRoomUpdate);\r\n+    socket.on(\"rooms\", (r: Room[]) => {\r\n+      setRooms(r || []);\r\n+    });\r\n \r\n-    // --- Messages & typing (subscribe only once) ---\r\n-    if (!subscribed.current) {\r\n-      onRoomMessage((msg) => messageCallbacks.current.forEach((cb) => cb(msg)));\r\n-      onTyping((data) => typingCallbacks.current.forEach((cb) => cb(data)));\r\n-      subscribed.current = true;\r\n-    }\r\n+    socket.on(\"room-users\", (users: Participant[]) => {\r\n+      setCurrentRoomUsers(users || []);\r\n+    });\r\n \r\n-    // --- Cleanup ---\r\n-    return () => {\r\n-      s.off(\"rooms\", handleRoomsList);\r\n-      s.off(\"room-created\", handleRoomCreated);\r\n-      s.off(\"room-update\", handleRoomUpdate);\r\n-      disconnectRoomSocket();\r\n-      setSocket(null);\r\n+    socket.on(\"room-created\", (room: Room) => {\r\n+      setEvents((e) => [...e, { type: ROOM_EVENTS.CREATED, payload: room }]);\r\n+    });\r\n \r\n-      messageCallbacks.current = [];\r\n-      typingCallbacks.current = [];\r\n-    };\r\n-  }, []);\r\n+    socket.on(\"room-deleted\", (payload) => {\r\n+      setEvents((e) => [...e, { type: ROOM_EVENTS.DELETED, payload }]);\r\n+    });\r\n \r\n-  // --------------------------------------------------------------------\r\n-  // 🧩 Public API\r\n-  // --------------------------------------------------------------------\r\n-  const createRoom = useCallback(\r\n-    (room: Omit<Room, \"id\" | \"users\">) => {\r\n-      if (!socket) return console.warn(\"Socket not connected yet\");\r\n-      socket.emit(\"create-room\", room);\r\n-    },\r\n-    [socket]\r\n-  );\r\n+    socket.on(\"receive-message\", (msg: Message) => {\r\n+      setEvents((e) => [...e, { type: ROOM_EVENTS.MESSAGE_RECEIVE, payload: msg }]);\r\n+    });\r\n \r\n-  const join = useCallback(\r\n-    (roomId: string, user: RoomUser[\"userInfo\"]) => {\r\n-      if (!socket) return console.warn(\"Socket not connected yet\");\r\n-      joinRoom(roomId, user);\r\n-    },\r\n-    [socket]\r\n-  );\r\n+    socket.on(\"connected\", () => {\r\n+      // server greeted us; can be used for debug\r\n+    });\r\n \r\n-  const leave = useCallback(\r\n-    (roomId: string, userId: string) => {\r\n-      if (!socket) return console.warn(\"Socket not connected yet\");\r\n-      leaveRoom(roomId, userId);\r\n-    },\r\n-    [socket]\r\n-  );\r\n-\r\n-  const sendMessage = useCallback(\r\n-    (roomId: string, text: string) => {\r\n-      if (!socket) return console.warn(\"Socket not connected yet\");\r\n-      if (text.trim()) sendRoomMessage(roomId, text);\r\n-    },\r\n-    [socket]\r\n-  );\r\n-\r\n-  const typing = useCallback(\r\n-    (roomId: string, userId: string) => {\r\n-      if (!socket) return console.warn(\"Socket not connected yet\");\r\n-      sendTyping(roomId, userId);\r\n-    },\r\n-    [socket]\r\n-  );\r\n-\r\n-  // --------------------------------------------------------------------\r\n-  // 💬 Event Subscription Helpers\r\n-  // --------------------------------------------------------------------\r\n-  const onMessage = useCallback((callback: (msg: RoomMessage) => void) => {\r\n-    messageCallbacks.current.push(callback);\r\n     return () => {\r\n-      messageCallbacks.current = messageCallbacks.current.filter((cb) => cb !== callback);\r\n+      socket.disconnect();\r\n+      socketRef.current = null;\r\n     };\r\n   }, []);\r\n \r\n-  const onUserTyping = useCallback(\r\n-    (callback: (data: { roomId: string; userId: string }) => void) => {\r\n-      typingCallbacks.current.push(callback);\r\n-      return () => {\r\n-        typingCallbacks.current = typingCallbacks.current.filter((cb) => cb !== callback);\r\n-      };\r\n-    },\r\n-    []\r\n-  );\r\n+  const createRoom = async (payload: { name: string; topic: string; description?: string; password?: string }) => {\r\n+    socketRef.current?.emit(ROOM_EVENTS.CREATE, payload);\r\n+  };\r\n \r\n-  // --------------------------------------------------------------------\r\n-  // ✅ Return API\r\n-  // --------------------------------------------------------------------\r\n-  return {\r\n-    socket,\r\n-    rooms,\r\n-    createRoom,\r\n-    join,\r\n-    leave,\r\n-    sendMessage,\r\n-    typing,\r\n-    onMessage,\r\n-    onUserTyping,\r\n+  const joinRoom = (roomId: string, user: any) => {\r\n+    socketRef.current?.emit(ROOM_EVENTS.JOIN, { roomId, user });\r\n   };\r\n-}\r\n-import { useEffect, useState, useCallback, useRef } from \"react\";\r\n-import type { Socket } from \"socket.io-client\";\r\n-import {\r\n-  connectRoomSocket,\r\n-  disconnectRoomSocket,\r\n-  joinRoom,\r\n-  leaveRoom,\r\n-  sendRoomMessage,\r\n-  sendTyping,\r\n-  onRoomMessage,\r\n-  onTyping,\r\n-} from \"../services/roomSocketService\";\r\n \r\n-export interface RoomUser {\r\n-  socketId: string;\r\n-  userInfo: {\r\n-    name?: string;\r\n-    avatar?: string;\r\n-    country?: string;\r\n-    [key: string]: any;\r\n+  const leaveRoom = (roomId: string) => {\r\n+    socketRef.current?.emit(ROOM_EVENTS.LEAVE, { roomId });\r\n   };\r\n-}\r\n \r\n-export interface Room {\r\n-  id: string;\r\n-  name: string;\r\n-  topic: string;\r\n-  description?: string;\r\n-  hasPassword: boolean;\r\n-  password?: string | null;\r\n-  users?: RoomUser[];\r\n-}\r\n+  const deleteRoom = (roomId: string) => {\r\n+    socketRef.current?.emit(ROOM_EVENTS.DELETE, { roomId });\r\n+  };\r\n \r\n-export interface RoomMessage {\r\n-  id: string;\r\n-  text: string;\r\n-  userId: string;\r\n-  username?: string;\r\n-  timestamp: string;\r\n-}\r\n+  const sendMessage = (roomId: string, message: Partial<Message>) => {\r\n+    socketRef.current?.emit(ROOM_EVENTS.MESSAGE_SEND, { roomId, message });\r\n+  };\r\n \r\n-/** \r\n- * ✅ Robust Hook to manage the /rooms socket namespace \r\n- * Handles: connection, reconnection, room events, messaging, typing\r\n- */\r\n-export default function useRoomSocket() {\r\n-  const [socket, setSocket] = useState<Socket | null>(null);\r\n-  const [rooms, setRooms] = useState<Room[]>([]);\r\n-  const messageCallbacks = useRef<((msg: RoomMessage) => void)[]>([]);\r\n-  const typingCallbacks = useRef<((data: { roomId: string; userId: string }) => void)[]>([]);\r\n+  const loadMessages = (payload: { roomId: string; limit?: number; lastMessageId?: string | null }) => {\r\n+    socketRef.current?.emit(\"load-messages\", payload);\r\n+  };\r\n \r\n-  // --------------------------------------------------------------------\r\n-  // 🔌 Connect + Sync\r\n-  // --------------------------------------------------------------------\r\n-  useEffect(() => {\r\n-    const s = connectRoomSocket();\r\n-    setSocket(s);\r\n+  const on = (eventName: string, cb: (...args: any[]) => void) => {\r\n+    socketRef.current?.on(eventName, cb);\r\n+    return () => socketRef.current?.off(eventName, cb);\r\n+  };\r\n \r\n-    const handleRoomsList = (data: Room[]) => setRooms(data);\r\n-\r\n-    const handleRoomCreated = (newRoom: Room) =>\r\n-      setRooms((prev) => {\r\n-        const exists = prev.some((r) => r.id === newRoom.id);\r\n-        return exists ? prev : [...prev, { ...newRoom, users: [] }];\r\n-      });\r\n-\r\n-    const handleRoomUpdate = (updatedRoom: Room) =>\r\n-      setRooms((prev) =>\r\n-        prev.map((r) => (r.id === updatedRoom.id ? updatedRoom : r))\r\n-      );\r\n-\r\n-    s.on(\"rooms\", handleRoomsList);\r\n-    s.on(\"room-created\", handleRoomCreated);\r\n-    s.on(\"room-update\", handleRoomUpdate);\r\n-\r\n-    // Optional: Listen for messages globally (useRef holds callbacks)\r\n-    onRoomMessage((msg) => {\r\n-      messageCallbacks.current.forEach((cb) => cb(msg));\r\n-    });\r\n-\r\n-    // Typing indicator handler\r\n-    onTyping((data) => {\r\n-      typingCallbacks.current.forEach((cb) => cb(data));\r\n-    });\r\n-\r\n-    // Cleanup when component unmounts\r\n-    return () => {\r\n-      s.off(\"rooms\", handleRoomsList);\r\n-      s.off(\"room-created\", handleRoomCreated);\r\n-      s.off(\"room-update\", handleRoomUpdate);\r\n-      disconnectRoomSocket();\r\n-      setSocket(null);\r\n-    };\r\n-  }, []);\r\n-\r\n-  // --------------------------------------------------------------------\r\n-  // 🧩 Public API\r\n-  // --------------------------------------------------------------------\r\n-  const createRoom = useCallback(\r\n-    (room: Omit<Room, \"id\" | \"users\">) => {\r\n-      socket?.emit(\"create-room\", room);\r\n-    },\r\n-    [socket]\r\n+  return useMemo(\r\n+    () => ({\r\n+      socket: socketRef.current,\r\n+      connected,\r\n+      rooms,\r\n+      currentRoomUsers,\r\n+      events,\r\n+      createRoom,\r\n+      joinRoom,\r\n+      leaveRoom,\r\n+      deleteRoom,\r\n+      sendMessage,\r\n+      loadMessages,\r\n+      on,\r\n+    }),\r\n+    [connected, rooms, currentRoomUsers, events]\r\n   );\r\n-\r\n-  const join = useCallback(\r\n-    (roomId: string, user: RoomUser[\"userInfo\"]) => {\r\n-      joinRoom(roomId, user);\r\n-    },\r\n-    [socket]\r\n-  );\r\n-\r\n-  const leave = useCallback(\r\n-    (roomId: string, userId: string) => {\r\n-      leaveRoom(roomId, userId);\r\n-    },\r\n-    [socket]\r\n-  );\r\n-\r\n-  const sendMessage = useCallback(\r\n-    (roomId: string, text: string) => {\r\n-      if (text.trim()) sendRoomMessage(roomId, text);\r\n-    },\r\n-    [socket]\r\n-  );\r\n-\r\n-  const typing = useCallback(\r\n-    (roomId: string, userId: string) => {\r\n-      sendTyping(roomId, userId);\r\n-    },\r\n-    [socket]\r\n-  );\r\n-\r\n-  // --------------------------------------------------------------------\r\n-  // 💬 Event Subscription Helpers\r\n-  // --------------------------------------------------------------------\r\n-  const onMessage = useCallback((callback: (msg: RoomMessage) => void) => {\r\n-    messageCallbacks.current.push(callback);\r\n-    return () => {\r\n-      messageCallbacks.current = messageCallbacks.current.filter((cb) => cb !== callback);\r\n-    };\r\n-  }, []);\r\n-\r\n-  const onUserTyping = useCallback(\r\n-    (callback: (data: { roomId: string; userId: string }) => void) => {\r\n-      typingCallbacks.current.push(callback);\r\n-      return () => {\r\n-        typingCallbacks.current = typingCallbacks.current.filter((cb) => cb !== callback);\r\n-      };\r\n-    },\r\n-    []\r\n-  );\r\n-\r\n-  // --------------------------------------------------------------------\r\n-  // ✅ Return API\r\n-  // --------------------------------------------------------------------\r\n-  return {\r\n-    socket,\r\n-    rooms,\r\n-    createRoom,\r\n-    join,\r\n-    leave,\r\n-    sendMessage,\r\n-    typing,\r\n-    onMessage,\r\n-    onUserTyping,\r\n-  };\r\n }\r\n"
                },
                {
                    "date": 1760267846799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,108 +1,43 @@\n // features/RoomSystem/hooks/useRoomSocket.ts\r\n-import { useEffect, useMemo, useState, useRef } from \"react\";\r\n-import { io, Socket } from \"socket.io-client\";\r\n+import { useEffect, useState, useMemo } from \"react\";\r\n import { ROOM_EVENTS } from \"../utils/roomEvents\";\r\n import type { Room, Participant, Message } from \"../utils/roomTypes\";\r\n+import { useSocket } from \"./SocketProvider\";\r\n \r\n-const SIGNALING_URL = process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n-\r\n export function useRoomSocket() {\r\n-  const socketRef = useRef<Socket | null>(null);\r\n-  const [connected, setConnected] = useState(false);\r\n+  const { socket, connected } = useSocket();\r\n   const [rooms, setRooms] = useState<Room[]>([]);\r\n   const [currentRoomUsers, setCurrentRoomUsers] = useState<Participant[]>([]);\r\n   const [events, setEvents] = useState<{ type: string; payload: any }[]>([]);\r\n \r\n   useEffect(() => {\r\n-    const socket = io(`${SIGNALING_URL}/rooms`, {\r\n-      transports: [\"websocket\", \"polling\"],\r\n-      withCredentials: true,\r\n-    });\r\n+    if (!socket) return;\r\n \r\n-    socketRef.current = socket;\r\n+    socket.on(\"rooms\", setRooms);\r\n+    socket.on(\"room-users\", setCurrentRoomUsers);\r\n+    socket.on(\"room-created\", (room) => setEvents((e) => [...e, { type: ROOM_EVENTS.CREATED, payload: room }]));\r\n+    socket.on(\"room-deleted\", (payload) => setEvents((e) => [...e, { type: ROOM_EVENTS.DELETED, payload }]));\r\n+    socket.on(\"receive-message\", (msg: Message) => setEvents((e) => [...e, { type: ROOM_EVENTS.MESSAGE_RECEIVE, payload: msg }]));\r\n \r\n-    socket.on(\"connect\", () => {\r\n-      setConnected(true);\r\n-    });\r\n-\r\n-    socket.on(\"disconnect\", () => {\r\n-      setConnected(false);\r\n-    });\r\n-\r\n-    socket.on(\"rooms\", (r: Room[]) => {\r\n-      setRooms(r || []);\r\n-    });\r\n-\r\n-    socket.on(\"room-users\", (users: Participant[]) => {\r\n-      setCurrentRoomUsers(users || []);\r\n-    });\r\n-\r\n-    socket.on(\"room-created\", (room: Room) => {\r\n-      setEvents((e) => [...e, { type: ROOM_EVENTS.CREATED, payload: room }]);\r\n-    });\r\n-\r\n-    socket.on(\"room-deleted\", (payload) => {\r\n-      setEvents((e) => [...e, { type: ROOM_EVENTS.DELETED, payload }]);\r\n-    });\r\n-\r\n-    socket.on(\"receive-message\", (msg: Message) => {\r\n-      setEvents((e) => [...e, { type: ROOM_EVENTS.MESSAGE_RECEIVE, payload: msg }]);\r\n-    });\r\n-\r\n-    socket.on(\"connected\", () => {\r\n-      // server greeted us; can be used for debug\r\n-    });\r\n-\r\n     return () => {\r\n-      socket.disconnect();\r\n-      socketRef.current = null;\r\n+      socket.off(\"rooms\");\r\n+      socket.off(\"room-users\");\r\n+      socket.off(\"room-created\");\r\n+      socket.off(\"room-deleted\");\r\n+      socket.off(\"receive-message\");\r\n     };\r\n-  }, []);\r\n+  }, [socket]);\r\n \r\n-  const createRoom = async (payload: { name: string; topic: string; description?: string; password?: string }) => {\r\n-    socketRef.current?.emit(ROOM_EVENTS.CREATE, payload);\r\n+  const createRoom = (payload: { name: string; topic: string; password?: string; maxUsers?: number }) => {\r\n+    socket?.emit(ROOM_EVENTS.CREATE, payload);\r\n   };\r\n+  const joinRoom = (roomId: string, user: any, password?: string) => socket?.emit(ROOM_EVENTS.JOIN, { roomId, user, password });\r\n+  const leaveRoom = (roomId: string) => socket?.emit(ROOM_EVENTS.LEAVE, { roomId });\r\n+  const deleteRoom = (roomId: string) => socket?.emit(ROOM_EVENTS.DELETE, { roomId });\r\n+  const sendMessage = (roomId: string, message: Partial<Message>) => socket?.emit(ROOM_EVENTS.MESSAGE_SEND, { roomId, message });\r\n \r\n-  const joinRoom = (roomId: string, user: any) => {\r\n-    socketRef.current?.emit(ROOM_EVENTS.JOIN, { roomId, user });\r\n-  };\r\n-\r\n-  const leaveRoom = (roomId: string) => {\r\n-    socketRef.current?.emit(ROOM_EVENTS.LEAVE, { roomId });\r\n-  };\r\n-\r\n-  const deleteRoom = (roomId: string) => {\r\n-    socketRef.current?.emit(ROOM_EVENTS.DELETE, { roomId });\r\n-  };\r\n-\r\n-  const sendMessage = (roomId: string, message: Partial<Message>) => {\r\n-    socketRef.current?.emit(ROOM_EVENTS.MESSAGE_SEND, { roomId, message });\r\n-  };\r\n-\r\n-  const loadMessages = (payload: { roomId: string; limit?: number; lastMessageId?: string | null }) => {\r\n-    socketRef.current?.emit(\"load-messages\", payload);\r\n-  };\r\n-\r\n-  const on = (eventName: string, cb: (...args: any[]) => void) => {\r\n-    socketRef.current?.on(eventName, cb);\r\n-    return () => socketRef.current?.off(eventName, cb);\r\n-  };\r\n-\r\n   return useMemo(\r\n-    () => ({\r\n-      socket: socketRef.current,\r\n-      connected,\r\n-      rooms,\r\n-      currentRoomUsers,\r\n-      events,\r\n-      createRoom,\r\n-      joinRoom,\r\n-      leaveRoom,\r\n-      deleteRoom,\r\n-      sendMessage,\r\n-      loadMessages,\r\n-      on,\r\n-    }),\r\n+    () => ({ connected, rooms, currentRoomUsers, events, createRoom, joinRoom, leaveRoom, deleteRoom, sendMessage }),\r\n     [connected, rooms, currentRoomUsers, events]\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1760267894731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +1,108 @@\n // features/RoomSystem/hooks/useRoomSocket.ts\r\n-import { useEffect, useState, useMemo } from \"react\";\r\n+import { useEffect, useMemo, useState, useRef } from \"react\";\r\n+import { io, Socket } from \"socket.io-client\";\r\n import { ROOM_EVENTS } from \"../utils/roomEvents\";\r\n import type { Room, Participant, Message } from \"../utils/roomTypes\";\r\n-import { useSocket } from \"./SocketProvider\";\r\n \r\n+const SIGNALING_URL = process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n+\r\n export function useRoomSocket() {\r\n-  const { socket, connected } = useSocket();\r\n+  const socketRef = useRef<Socket | null>(null);\r\n+  const [connected, setConnected] = useState(false);\r\n   const [rooms, setRooms] = useState<Room[]>([]);\r\n   const [currentRoomUsers, setCurrentRoomUsers] = useState<Participant[]>([]);\r\n   const [events, setEvents] = useState<{ type: string; payload: any }[]>([]);\r\n \r\n   useEffect(() => {\r\n-    if (!socket) return;\r\n+    const socket = io(`${SIGNALING_URL}/rooms`, {\r\n+      transports: [\"websocket\", \"polling\"],\r\n+      withCredentials: true,\r\n+    });\r\n \r\n-    socket.on(\"rooms\", setRooms);\r\n-    socket.on(\"room-users\", setCurrentRoomUsers);\r\n-    socket.on(\"room-created\", (room) => setEvents((e) => [...e, { type: ROOM_EVENTS.CREATED, payload: room }]));\r\n-    socket.on(\"room-deleted\", (payload) => setEvents((e) => [...e, { type: ROOM_EVENTS.DELETED, payload }]));\r\n-    socket.on(\"receive-message\", (msg: Message) => setEvents((e) => [...e, { type: ROOM_EVENTS.MESSAGE_RECEIVE, payload: msg }]));\r\n+    socketRef.current = socket;\r\n \r\n+    socket.on(\"connect\", () => {\r\n+      setConnected(true);\r\n+    });\r\n+\r\n+    socket.on(\"disconnect\", () => {\r\n+      setConnected(false);\r\n+    });\r\n+\r\n+    socket.on(\"rooms\", (r: Room[]) => {\r\n+      setRooms(r || []);\r\n+    });\r\n+\r\n+    socket.on(\"room-users\", (users: Participant[]) => {\r\n+      setCurrentRoomUsers(users || []);\r\n+    });\r\n+\r\n+    socket.on(\"room-created\", (room: Room) => {\r\n+      setEvents((e) => [...e, { type: ROOM_EVENTS.CREATED, payload: room }]);\r\n+    });\r\n+\r\n+    socket.on(\"room-deleted\", (payload) => {\r\n+      setEvents((e) => [...e, { type: ROOM_EVENTS.DELETED, payload }]);\r\n+    });\r\n+\r\n+    socket.on(\"receive-message\", (msg: Message) => {\r\n+      setEvents((e) => [...e, { type: ROOM_EVENTS.MESSAGE_RECEIVE, payload: msg }]);\r\n+    });\r\n+\r\n+    socket.on(\"connected\", () => {\r\n+      // server greeted us; can be used for debug\r\n+    });\r\n+\r\n     return () => {\r\n-      socket.off(\"rooms\");\r\n-      socket.off(\"room-users\");\r\n-      socket.off(\"room-created\");\r\n-      socket.off(\"room-deleted\");\r\n-      socket.off(\"receive-message\");\r\n+      socket.disconnect();\r\n+      socketRef.current = null;\r\n     };\r\n-  }, [socket]);\r\n+  }, []);\r\n \r\n-  const createRoom = (payload: { name: string; topic: string; password?: string; maxUsers?: number }) => {\r\n-    socket?.emit(ROOM_EVENTS.CREATE, payload);\r\n+  const createRoom = async (payload: { name: string; topic: string; description?: string; password?: string }) => {\r\n+    socketRef.current?.emit(ROOM_EVENTS.CREATE, payload);\r\n   };\r\n-  const joinRoom = (roomId: string, user: any, password?: string) => socket?.emit(ROOM_EVENTS.JOIN, { roomId, user, password });\r\n-  const leaveRoom = (roomId: string) => socket?.emit(ROOM_EVENTS.LEAVE, { roomId });\r\n-  const deleteRoom = (roomId: string) => socket?.emit(ROOM_EVENTS.DELETE, { roomId });\r\n-  const sendMessage = (roomId: string, message: Partial<Message>) => socket?.emit(ROOM_EVENTS.MESSAGE_SEND, { roomId, message });\r\n \r\n+  const joinRoom = (roomId: string, user: any) => {\r\n+    socketRef.current?.emit(ROOM_EVENTS.JOIN, { roomId, user });\r\n+  };\r\n+\r\n+  const leaveRoom = (roomId: string) => {\r\n+    socketRef.current?.emit(ROOM_EVENTS.LEAVE, { roomId });\r\n+  };\r\n+\r\n+  const deleteRoom = (roomId: string) => {\r\n+    socketRef.current?.emit(ROOM_EVENTS.DELETE, { roomId });\r\n+  };\r\n+\r\n+  const sendMessage = (roomId: string, message: Partial<Message>) => {\r\n+    socketRef.current?.emit(ROOM_EVENTS.MESSAGE_SEND, { roomId, message });\r\n+  };\r\n+\r\n+  const loadMessages = (payload: { roomId: string; limit?: number; lastMessageId?: string | null }) => {\r\n+    socketRef.current?.emit(\"load-messages\", payload);\r\n+  };\r\n+\r\n+  const on = (eventName: string, cb: (...args: any[]) => void) => {\r\n+    socketRef.current?.on(eventName, cb);\r\n+    return () => socketRef.current?.off(eventName, cb);\r\n+  };\r\n+\r\n   return useMemo(\r\n-    () => ({ connected, rooms, currentRoomUsers, events, createRoom, joinRoom, leaveRoom, deleteRoom, sendMessage }),\r\n+    () => ({\r\n+      socket: socketRef.current,\r\n+      connected,\r\n+      rooms,\r\n+      currentRoomUsers,\r\n+      events,\r\n+      createRoom,\r\n+      joinRoom,\r\n+      leaveRoom,\r\n+      deleteRoom,\r\n+      sendMessage,\r\n+      loadMessages,\r\n+      on,\r\n+    }),\r\n     [connected, rooms, currentRoomUsers, events]\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1760268085161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+// features/RoomSystem/hooks/useRoomSocket.ts\r\n+import { useEffect, useState, useMemo } from \"react\";\r\n+import { ROOM_EVENTS } from \"../utils/roomEvents\";\r\n+import type { Room, Participant, Message } from \"../utils/roomTypes\";\r\n+import { useSocket } from \"./SocketProvider\";\r\n+\r\n+export function useRoomSocket() {\r\n+  const { socket, connected } = useSocket();\r\n+  const [rooms, setRooms] = useState<Room[]>([]);\r\n+  const [currentRoomUsers, setCurrentRoomUsers] = useState<Participant[]>([]);\r\n+  const [events, setEvents] = useState<{ type: string; payload: any }[]>([]);\r\n+\r\n+  useEffect(() => {\r\n+    if (!socket) return;\r\n+\r\n+    socket.on(\"rooms\", setRooms);\r\n+    socket.on(\"room-users\", setCurrentRoomUsers);\r\n+    socket.on(\"room-created\", (room) => setEvents((e) => [...e, { type: ROOM_EVENTS.CREATED, payload: room }]));\r\n+    socket.on(\"room-deleted\", (payload) => setEvents((e) => [...e, { type: ROOM_EVENTS.DELETED, payload }]));\r\n+    socket.on(\"receive-message\", (msg: Message) => setEvents((e) => [...e, { type: ROOM_EVENTS.MESSAGE_RECEIVE, payload: msg }]));\r\n+\r\n+    return () => {\r\n+      socket.off(\"rooms\");\r\n+      socket.off(\"room-users\");\r\n+      socket.off(\"room-created\");\r\n+      socket.off(\"room-deleted\");\r\n+      socket.off(\"receive-message\");\r\n+    };\r\n+  }, [socket]);\r\n+\r\n+  const createRoom = (payload: { name: string; topic: string; password?: string; maxUsers?: number }) => {\r\n+    socket?.emit(ROOM_EVENTS.CREATE, payload);\r\n+  };\r\n+  const joinRoom = (roomId: string, user: any, password?: string) => socket?.emit(ROOM_EVENTS.JOIN, { roomId, user, password });\r\n+  const leaveRoom = (roomId: string) => socket?.emit(ROOM_EVENTS.LEAVE, { roomId });\r\n+  const deleteRoom = (roomId: string) => socket?.emit(ROOM_EVENTS.DELETE, { roomId });\r\n+  const sendMessage = (roomId: string, message: Partial<Message>) => socket?.emit(ROOM_EVENTS.MESSAGE_SEND, { roomId, message });\r\n+\r\n+  return useMemo(\r\n+    () => ({ connected, rooms, currentRoomUsers, events, createRoom, joinRoom, leaveRoom, deleteRoom, sendMessage }),\r\n+    [connected, rooms, currentRoomUsers, events]\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1760268629366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,140 +12,56 @@\n \r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n-    socket.on(\"rooms\", setRooms);\r\n-    socket.on(\"room-users\", setCurrentRoomUsers);\r\n-    socket.on(\"room-created\", (room) => setEvents((e) => [...e, { type: ROOM_EVENTS.CREATED, payload: room }]));\r\n-    socket.on(\"room-deleted\", (payload) => setEvents((e) => [...e, { type: ROOM_EVENTS.DELETED, payload }]));\r\n-    socket.on(\"receive-message\", (msg: Message) => setEvents((e) => [...e, { type: ROOM_EVENTS.MESSAGE_RECEIVE, payload: msg }]));\r\n+    // Listen to socket events\r\n+    const handleRooms = (rooms: Room[]) => setRooms(rooms);\r\n+    const handleRoomUsers = (users: Participant[]) => setCurrentRoomUsers(users);\r\n+    const handleRoomCreated = (room: Room) =>\r\n+      setEvents((prev) => [...prev, { type: ROOM_EVENTS.CREATED, payload: room }]);\r\n+    const handleRoomDeleted = (payload: any) =>\r\n+      setEvents((prev) => [...prev, { type: ROOM_EVENTS.DELETED, payload }]);\r\n+    const handleReceiveMessage = (msg: Message) =>\r\n+      setEvents((prev) => [...prev, { type: ROOM_EVENTS.MESSAGE_RECEIVE, payload: msg }]);\r\n \r\n+    socket.on(\"rooms\", handleRooms);\r\n+    socket.on(\"room-users\", handleRoomUsers);\r\n+    socket.on(\"room-created\", handleRoomCreated);\r\n+    socket.on(\"room-deleted\", handleRoomDeleted);\r\n+    socket.on(\"receive-message\", handleReceiveMessage);\r\n+\r\n     return () => {\r\n-      socket.off(\"rooms\");\r\n-      socket.off(\"room-users\");\r\n-      socket.off(\"room-created\");\r\n-      socket.off(\"room-deleted\");\r\n-      socket.off(\"receive-message\");\r\n+      socket.off(\"rooms\", handleRooms);\r\n+      socket.off(\"room-users\", handleRoomUsers);\r\n+      socket.off(\"room-created\", handleRoomCreated);\r\n+      socket.off(\"room-deleted\", handleRoomDeleted);\r\n+      socket.off(\"receive-message\", handleReceiveMessage);\r\n     };\r\n   }, [socket]);\r\n \r\n+  // Actions\r\n   const createRoom = (payload: { name: string; topic: string; password?: string; maxUsers?: number }) => {\r\n     socket?.emit(ROOM_EVENTS.CREATE, payload);\r\n   };\r\n-  const joinRoom = (roomId: string, user: any, password?: string) => socket?.emit(ROOM_EVENTS.JOIN, { roomId, user, password });\r\n-  const leaveRoom = (roomId: string) => socket?.emit(ROOM_EVENTS.LEAVE, { roomId });\r\n-  const deleteRoom = (roomId: string) => socket?.emit(ROOM_EVENTS.DELETE, { roomId });\r\n-  const sendMessage = (roomId: string, message: Partial<Message>) => socket?.emit(ROOM_EVENTS.MESSAGE_SEND, { roomId, message });\r\n \r\n-  return useMemo(\r\n-    () => ({ connected, rooms, currentRoomUsers, events, createRoom, joinRoom, leaveRoom, deleteRoom, sendMessage }),\r\n-    [connected, rooms, currentRoomUsers, events]\r\n-  );\r\n-}\r\n-// features/RoomSystem/hooks/useRoomSocket.ts\r\n-import { useEffect, useMemo, useState, useRef } from \"react\";\r\n-import { io, Socket } from \"socket.io-client\";\r\n-import { ROOM_EVENTS } from \"../utils/roomEvents\";\r\n-import type { Room, Participant, Message } from \"../utils/roomTypes\";\r\n-\r\n-const SIGNALING_URL = process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n-\r\n-export function useRoomSocket() {\r\n-  const socketRef = useRef<Socket | null>(null);\r\n-  const [connected, setConnected] = useState(false);\r\n-  const [rooms, setRooms] = useState<Room[]>([]);\r\n-  const [currentRoomUsers, setCurrentRoomUsers] = useState<Participant[]>([]);\r\n-  const [events, setEvents] = useState<{ type: string; payload: any }[]>([]);\r\n-\r\n-  useEffect(() => {\r\n-    const socket = io(`${SIGNALING_URL}/rooms`, {\r\n-      transports: [\"websocket\", \"polling\"],\r\n-      withCredentials: true,\r\n-    });\r\n-\r\n-    socketRef.current = socket;\r\n-\r\n-    socket.on(\"connect\", () => {\r\n-      setConnected(true);\r\n-    });\r\n-\r\n-    socket.on(\"disconnect\", () => {\r\n-      setConnected(false);\r\n-    });\r\n-\r\n-    socket.on(\"rooms\", (r: Room[]) => {\r\n-      setRooms(r || []);\r\n-    });\r\n-\r\n-    socket.on(\"room-users\", (users: Participant[]) => {\r\n-      setCurrentRoomUsers(users || []);\r\n-    });\r\n-\r\n-    socket.on(\"room-created\", (room: Room) => {\r\n-      setEvents((e) => [...e, { type: ROOM_EVENTS.CREATED, payload: room }]);\r\n-    });\r\n-\r\n-    socket.on(\"room-deleted\", (payload) => {\r\n-      setEvents((e) => [...e, { type: ROOM_EVENTS.DELETED, payload }]);\r\n-    });\r\n-\r\n-    socket.on(\"receive-message\", (msg: Message) => {\r\n-      setEvents((e) => [...e, { type: ROOM_EVENTS.MESSAGE_RECEIVE, payload: msg }]);\r\n-    });\r\n-\r\n-    socket.on(\"connected\", () => {\r\n-      // server greeted us; can be used for debug\r\n-    });\r\n-\r\n-    return () => {\r\n-      socket.disconnect();\r\n-      socketRef.current = null;\r\n-    };\r\n-  }, []);\r\n-\r\n-  const createRoom = async (payload: { name: string; topic: string; description?: string; password?: string }) => {\r\n-    socketRef.current?.emit(ROOM_EVENTS.CREATE, payload);\r\n+  const joinRoom = (roomId: string, user: Participant, password?: string) => {\r\n+    socket?.emit(ROOM_EVENTS.JOIN, { roomId, user, password });\r\n   };\r\n \r\n-  const joinRoom = (roomId: string, user: any) => {\r\n-    socketRef.current?.emit(ROOM_EVENTS.JOIN, { roomId, user });\r\n-  };\r\n-\r\n   const leaveRoom = (roomId: string) => {\r\n-    socketRef.current?.emit(ROOM_EVENTS.LEAVE, { roomId });\r\n+    socket?.emit(ROOM_EVENTS.LEAVE, { roomId });\r\n   };\r\n \r\n   const deleteRoom = (roomId: string) => {\r\n-    socketRef.current?.emit(ROOM_EVENTS.DELETE, { roomId });\r\n+    socket?.emit(ROOM_EVENTS.DELETE, { roomId });\r\n   };\r\n \r\n   const sendMessage = (roomId: string, message: Partial<Message>) => {\r\n-    socketRef.current?.emit(ROOM_EVENTS.MESSAGE_SEND, { roomId, message });\r\n+    socket?.emit(ROOM_EVENTS.MESSAGE_SEND, { roomId, message });\r\n   };\r\n \r\n-  const loadMessages = (payload: { roomId: string; limit?: number; lastMessageId?: string | null }) => {\r\n-    socketRef.current?.emit(\"load-messages\", payload);\r\n-  };\r\n-\r\n-  const on = (eventName: string, cb: (...args: any[]) => void) => {\r\n-    socketRef.current?.on(eventName, cb);\r\n-    return () => socketRef.current?.off(eventName, cb);\r\n-  };\r\n-\r\n+  // Return socket explicitly along with everything else\r\n   return useMemo(\r\n-    () => ({\r\n-      socket: socketRef.current,\r\n-      connected,\r\n-      rooms,\r\n-      currentRoomUsers,\r\n-      events,\r\n-      createRoom,\r\n-      joinRoom,\r\n-      leaveRoom,\r\n-      deleteRoom,\r\n-      sendMessage,\r\n-      loadMessages,\r\n-      on,\r\n-    }),\r\n-    [connected, rooms, currentRoomUsers, events]\r\n+    () => ({ socket, connected, rooms, currentRoomUsers, events, createRoom, joinRoom, leaveRoom, deleteRoom, sendMessage }),\r\n+    [socket, connected, rooms, currentRoomUsers, events]\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1760268729989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,67 +1,62 @@\n // features/RoomSystem/hooks/useRoomSocket.ts\r\n-import { useEffect, useState, useMemo } from \"react\";\r\n+import { useEffect, useState, useRef, useMemo } from \"react\";\r\n+import { io, type Socket } from \"socket.io-client\";\r\n import { ROOM_EVENTS } from \"../utils/roomEvents\";\r\n import type { Room, Participant, Message } from \"../utils/roomTypes\";\r\n-import { useSocket } from \"./SocketProvider\";\r\n \r\n+const ROOM_SERVER_URL = process.env.NEXT_PUBLIC_ROOM_SERVER_URL || \"http://localhost:3001/rooms\";\r\n+\r\n export function useRoomSocket() {\r\n-  const { socket, connected } = useSocket();\r\n+  const [socket, setSocket] = useState<Socket | null>(null);\r\n+  const socketRef = useRef<Socket | null>(null);\r\n+\r\n   const [rooms, setRooms] = useState<Room[]>([]);\r\n   const [currentRoomUsers, setCurrentRoomUsers] = useState<Participant[]>([]);\r\n   const [events, setEvents] = useState<{ type: string; payload: any }[]>([]);\r\n \r\n   useEffect(() => {\r\n-    if (!socket) return;\r\n+    if (!socketRef.current) {\r\n+      const s = io(ROOM_SERVER_URL);\r\n+      socketRef.current = s;\r\n+      setSocket(s);\r\n \r\n-    // Listen to socket events\r\n-    const handleRooms = (rooms: Room[]) => setRooms(rooms);\r\n-    const handleRoomUsers = (users: Participant[]) => setCurrentRoomUsers(users);\r\n-    const handleRoomCreated = (room: Room) =>\r\n-      setEvents((prev) => [...prev, { type: ROOM_EVENTS.CREATED, payload: room }]);\r\n-    const handleRoomDeleted = (payload: any) =>\r\n-      setEvents((prev) => [...prev, { type: ROOM_EVENTS.DELETED, payload }]);\r\n-    const handleReceiveMessage = (msg: Message) =>\r\n-      setEvents((prev) => [...prev, { type: ROOM_EVENTS.MESSAGE_RECEIVE, payload: msg }]);\r\n+      s.on(\"connect\", () => console.log(\"✅ Connected to room server:\", s.id));\r\n+      s.on(\"disconnect\", (reason) => console.log(\"❌ Disconnected from room server:\", reason));\r\n \r\n-    socket.on(\"rooms\", handleRooms);\r\n-    socket.on(\"room-users\", handleRoomUsers);\r\n-    socket.on(\"room-created\", handleRoomCreated);\r\n-    socket.on(\"room-deleted\", handleRoomDeleted);\r\n-    socket.on(\"receive-message\", handleReceiveMessage);\r\n+      // room events\r\n+      s.on(ROOM_EVENTS.USERS, setCurrentRoomUsers);\r\n+      s.on(ROOM_EVENTS.CREATED, (room) =>\r\n+        setEvents((e) => [...e, { type: ROOM_EVENTS.CREATED, payload: room }])\r\n+      );\r\n+      s.on(ROOM_EVENTS.DELETED, (payload) =>\r\n+        setEvents((e) => [...e, { type: ROOM_EVENTS.DELETED, payload }])\r\n+      );\r\n+      s.on(ROOM_EVENTS.MESSAGE_RECEIVE, (msg: Message) =>\r\n+        setEvents((e) => [...e, { type: ROOM_EVENTS.MESSAGE_RECEIVE, payload: msg }])\r\n+      );\r\n+      s.on(\"rooms\", setRooms);\r\n+    }\r\n \r\n     return () => {\r\n-      socket.off(\"rooms\", handleRooms);\r\n-      socket.off(\"room-users\", handleRoomUsers);\r\n-      socket.off(\"room-created\", handleRoomCreated);\r\n-      socket.off(\"room-deleted\", handleRoomDeleted);\r\n-      socket.off(\"receive-message\", handleReceiveMessage);\r\n+      if (socketRef.current) {\r\n+        socketRef.current.disconnect();\r\n+        socketRef.current = null;\r\n+      }\r\n     };\r\n-  }, [socket]);\r\n+  }, []);\r\n \r\n-  // Actions\r\n+  // room actions\r\n   const createRoom = (payload: { name: string; topic: string; password?: string; maxUsers?: number }) => {\r\n-    socket?.emit(ROOM_EVENTS.CREATE, payload);\r\n+    socketRef.current?.emit(ROOM_EVENTS.CREATE, payload);\r\n   };\r\n+  const joinRoom = (roomId: string, user: any) => socketRef.current?.emit(ROOM_EVENTS.JOIN, { roomId, user });\r\n+  const leaveRoom = (roomId: string) => socketRef.current?.emit(ROOM_EVENTS.LEAVE, { roomId });\r\n+  const deleteRoom = (roomId: string) => socketRef.current?.emit(ROOM_EVENTS.DELETE, { roomId });\r\n+  const sendMessage = (roomId: string, message: Partial<Message>) =>\r\n+    socketRef.current?.emit(ROOM_EVENTS.MESSAGE_SEND, { roomId, message });\r\n \r\n-  const joinRoom = (roomId: string, user: Participant, password?: string) => {\r\n-    socket?.emit(ROOM_EVENTS.JOIN, { roomId, user, password });\r\n-  };\r\n-\r\n-  const leaveRoom = (roomId: string) => {\r\n-    socket?.emit(ROOM_EVENTS.LEAVE, { roomId });\r\n-  };\r\n-\r\n-  const deleteRoom = (roomId: string) => {\r\n-    socket?.emit(ROOM_EVENTS.DELETE, { roomId });\r\n-  };\r\n-\r\n-  const sendMessage = (roomId: string, message: Partial<Message>) => {\r\n-    socket?.emit(ROOM_EVENTS.MESSAGE_SEND, { roomId, message });\r\n-  };\r\n-\r\n-  // Return socket explicitly along with everything else\r\n   return useMemo(\r\n-    () => ({ socket, connected, rooms, currentRoomUsers, events, createRoom, joinRoom, leaveRoom, deleteRoom, sendMessage }),\r\n-    [socket, connected, rooms, currentRoomUsers, events]\r\n+    () => ({ socket, rooms, currentRoomUsers, events, createRoom, joinRoom, leaveRoom, deleteRoom, sendMessage }),\r\n+    [socket, rooms, currentRoomUsers, events]\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1760268794425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,41 +1,23 @@\n // features/RoomSystem/hooks/useRoomSocket.ts\r\n-import { useEffect, useState, useRef, useMemo } from \"react\";\r\n+import { useEffect, useState, useRef } from \"react\";\r\n import { io, type Socket } from \"socket.io-client\";\r\n-import { ROOM_EVENTS } from \"../utils/roomEvents\";\r\n-import type { Room, Participant, Message } from \"../utils/roomTypes\";\r\n+import { ROOM_EVENTS } from \"../utils/roomEvents\"; // ✅ use this instead\r\n \r\n const ROOM_SERVER_URL = process.env.NEXT_PUBLIC_ROOM_SERVER_URL || \"http://localhost:3001/rooms\";\r\n \r\n export function useRoomSocket() {\r\n   const [socket, setSocket] = useState<Socket | null>(null);\r\n   const socketRef = useRef<Socket | null>(null);\r\n \r\n-  const [rooms, setRooms] = useState<Room[]>([]);\r\n-  const [currentRoomUsers, setCurrentRoomUsers] = useState<Participant[]>([]);\r\n-  const [events, setEvents] = useState<{ type: string; payload: any }[]>([]);\r\n-\r\n   useEffect(() => {\r\n     if (!socketRef.current) {\r\n       const s = io(ROOM_SERVER_URL);\r\n       socketRef.current = s;\r\n       setSocket(s);\r\n \r\n       s.on(\"connect\", () => console.log(\"✅ Connected to room server:\", s.id));\r\n       s.on(\"disconnect\", (reason) => console.log(\"❌ Disconnected from room server:\", reason));\r\n-\r\n-      // room events\r\n-      s.on(ROOM_EVENTS.USERS, setCurrentRoomUsers);\r\n-      s.on(ROOM_EVENTS.CREATED, (room) =>\r\n-        setEvents((e) => [...e, { type: ROOM_EVENTS.CREATED, payload: room }])\r\n-      );\r\n-      s.on(ROOM_EVENTS.DELETED, (payload) =>\r\n-        setEvents((e) => [...e, { type: ROOM_EVENTS.DELETED, payload }])\r\n-      );\r\n-      s.on(ROOM_EVENTS.MESSAGE_RECEIVE, (msg: Message) =>\r\n-        setEvents((e) => [...e, { type: ROOM_EVENTS.MESSAGE_RECEIVE, payload: msg }])\r\n-      );\r\n-      s.on(\"rooms\", setRooms);\r\n     }\r\n \r\n     return () => {\r\n       if (socketRef.current) {\r\n@@ -44,19 +26,23 @@\n       }\r\n     };\r\n   }, []);\r\n \r\n-  // room actions\r\n-  const createRoom = (payload: { name: string; topic: string; password?: string; maxUsers?: number }) => {\r\n-    socketRef.current?.emit(ROOM_EVENTS.CREATE, payload);\r\n+  const sendMessage = (roomId: string, message: any) => {\r\n+    socketRef.current?.emit(ROOM_EVENTS.MESSAGE_SEND, { roomId, message });\r\n   };\r\n-  const joinRoom = (roomId: string, user: any) => socketRef.current?.emit(ROOM_EVENTS.JOIN, { roomId, user });\r\n-  const leaveRoom = (roomId: string) => socketRef.current?.emit(ROOM_EVENTS.LEAVE, { roomId });\r\n-  const deleteRoom = (roomId: string) => socketRef.current?.emit(ROOM_EVENTS.DELETE, { roomId });\r\n-  const sendMessage = (roomId: string, message: Partial<Message>) =>\r\n-    socketRef.current?.emit(ROOM_EVENTS.MESSAGE_SEND, { roomId, message });\r\n \r\n-  return useMemo(\r\n-    () => ({ socket, rooms, currentRoomUsers, events, createRoom, joinRoom, leaveRoom, deleteRoom, sendMessage }),\r\n-    [socket, rooms, currentRoomUsers, events]\r\n-  );\r\n+  const joinRoom = (roomId: string, user: any) => {\r\n+    socketRef.current?.emit(ROOM_EVENTS.JOIN, { roomId, user });\r\n+  };\r\n+\r\n+  const leaveRoom = (roomId: string) => {\r\n+    socketRef.current?.emit(ROOM_EVENTS.LEAVE, { roomId });\r\n+  };\r\n+\r\n+  return {\r\n+    socket,\r\n+    sendMessage,\r\n+    joinRoom,\r\n+    leaveRoom,\r\n+  };\r\n }\r\n"
                },
                {
                    "date": 1760269021163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,33 @@\n // features/RoomSystem/hooks/useRoomSocket.ts\r\n import { useEffect, useState, useRef } from \"react\";\r\n-import { io, type Socket } from \"socket.io-client\";\r\n-import { ROOM_EVENTS } from \"../utils/roomEvents\"; // ✅ use this instead\r\n+import { io, Socket } from \"socket.io-client\";\r\n+import { ROOM_EVENTS } from \"../utils/roomEvents\";\r\n+import type { Room, Participant, Message } from \"../utils/roomTypes\";\r\n \r\n const ROOM_SERVER_URL = process.env.NEXT_PUBLIC_ROOM_SERVER_URL || \"http://localhost:3001/rooms\";\r\n \r\n export function useRoomSocket() {\r\n   const [socket, setSocket] = useState<Socket | null>(null);\r\n+  const [connected, setConnected] = useState(false);\r\n+  const [rooms, setRooms] = useState<Room[]>([]);\r\n   const socketRef = useRef<Socket | null>(null);\r\n \r\n   useEffect(() => {\r\n     if (!socketRef.current) {\r\n       const s = io(ROOM_SERVER_URL);\r\n       socketRef.current = s;\r\n       setSocket(s);\r\n \r\n-      s.on(\"connect\", () => console.log(\"✅ Connected to room server:\", s.id));\r\n-      s.on(\"disconnect\", (reason) => console.log(\"❌ Disconnected from room server:\", reason));\r\n+      s.on(\"connect\", () => {\r\n+        console.log(\"✅ Connected to room server:\", s.id);\r\n+        setConnected(true);\r\n+      });\r\n+\r\n+      s.on(\"disconnect\", () => setConnected(false));\r\n+\r\n+      // Listen for room updates\r\n+      s.on(\"rooms\", (r: Room[]) => setRooms(r));\r\n     }\r\n \r\n     return () => {\r\n       if (socketRef.current) {\r\n@@ -26,23 +36,22 @@\n       }\r\n     };\r\n   }, []);\r\n \r\n-  const sendMessage = (roomId: string, message: any) => {\r\n-    socketRef.current?.emit(ROOM_EVENTS.MESSAGE_SEND, { roomId, message });\r\n+  const createRoom = (payload: { name: string; topic: string; password?: string; maxUsers?: number }) => {\r\n+    socketRef.current?.emit(ROOM_EVENTS.CREATE, payload);\r\n   };\r\n \r\n-  const joinRoom = (roomId: string, user: any) => {\r\n+  const joinRoom = (roomId: string, user?: any) => {\r\n     socketRef.current?.emit(ROOM_EVENTS.JOIN, { roomId, user });\r\n   };\r\n \r\n   const leaveRoom = (roomId: string) => {\r\n     socketRef.current?.emit(ROOM_EVENTS.LEAVE, { roomId });\r\n   };\r\n \r\n-  return {\r\n-    socket,\r\n-    sendMessage,\r\n-    joinRoom,\r\n-    leaveRoom,\r\n+  const sendMessage = (roomId: string, message: Partial<Message>) => {\r\n+    socketRef.current?.emit(ROOM_EVENTS.MESSAGE_SEND, { roomId, message });\r\n   };\r\n+\r\n+  return { socket, connected, rooms, createRoom, joinRoom, leaveRoom, sendMessage };\r\n }\r\n"
                },
                {
                    "date": 1760269619291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n-// features/RoomSystem/hooks/useRoomSocket.ts\r\n-import { useEffect, useState, useRef } from \"react\";\r\n+import { useEffect, useState, useRef, useMemo } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n import { ROOM_EVENTS } from \"../utils/roomEvents\";\r\n import type { Room, Participant, Message } from \"../utils/roomTypes\";\r\n \r\n@@ -9,25 +8,26 @@\n export function useRoomSocket() {\r\n   const [socket, setSocket] = useState<Socket | null>(null);\r\n   const [connected, setConnected] = useState(false);\r\n   const [rooms, setRooms] = useState<Room[]>([]);\r\n+  const [currentRoomUsers, setCurrentRoomUsers] = useState<Participant[]>([]);\r\n+\r\n   const socketRef = useRef<Socket | null>(null);\r\n \r\n   useEffect(() => {\r\n     if (!socketRef.current) {\r\n       const s = io(ROOM_SERVER_URL);\r\n       socketRef.current = s;\r\n       setSocket(s);\r\n \r\n-      s.on(\"connect\", () => {\r\n-        console.log(\"✅ Connected to room server:\", s.id);\r\n-        setConnected(true);\r\n-      });\r\n-\r\n+      s.on(\"connect\", () => setConnected(true));\r\n       s.on(\"disconnect\", () => setConnected(false));\r\n \r\n-      // Listen for room updates\r\n+      // Listen for rooms list\r\n       s.on(\"rooms\", (r: Room[]) => setRooms(r));\r\n+\r\n+      // Listen for room users update\r\n+      s.on(\"room-users\", (users: Participant[]) => setCurrentRoomUsers(users));\r\n     }\r\n \r\n     return () => {\r\n       if (socketRef.current) {\r\n@@ -36,22 +36,35 @@\n       }\r\n     };\r\n   }, []);\r\n \r\n-  const createRoom = (payload: { name: string; topic: string; password?: string; maxUsers?: number }) => {\r\n-    socketRef.current?.emit(ROOM_EVENTS.CREATE, payload);\r\n-  };\r\n-\r\n-  const joinRoom = (roomId: string, user?: any) => {\r\n+  const joinRoom = (roomId: string, user: any) => {\r\n     socketRef.current?.emit(ROOM_EVENTS.JOIN, { roomId, user });\r\n   };\r\n \r\n   const leaveRoom = (roomId: string) => {\r\n     socketRef.current?.emit(ROOM_EVENTS.LEAVE, { roomId });\r\n+    setCurrentRoomUsers([]);\r\n   };\r\n \r\n   const sendMessage = (roomId: string, message: Partial<Message>) => {\r\n     socketRef.current?.emit(ROOM_EVENTS.MESSAGE_SEND, { roomId, message });\r\n   };\r\n \r\n-  return { socket, connected, rooms, createRoom, joinRoom, leaveRoom, sendMessage };\r\n+  const createRoom = (payload: { name: string; topic: string }) => {\r\n+    socketRef.current?.emit(ROOM_EVENTS.CREATE, payload);\r\n+  };\r\n+\r\n+  return useMemo(\r\n+    () => ({\r\n+      socket,\r\n+      connected,\r\n+      rooms,\r\n+      currentRoomUsers,\r\n+      joinRoom,\r\n+      leaveRoom,\r\n+      sendMessage,\r\n+      createRoom,\r\n+    }),\r\n+    [socket, connected, rooms, currentRoomUsers]\r\n+  );\r\n }\r\n"
                },
                {
                    "date": 1760271539509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+// features/RoomChat/hooks/useRoomSocket.ts\r\n import { useEffect, useState, useRef, useMemo } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n import { ROOM_EVENTS } from \"../utils/roomEvents\";\r\n import type { Room, Participant, Message } from \"../utils/roomTypes\";\r\n@@ -12,11 +13,16 @@\n   const [currentRoomUsers, setCurrentRoomUsers] = useState<Participant[]>([]);\r\n \r\n   const socketRef = useRef<Socket | null>(null);\r\n \r\n+  // Store WebRTC handler\r\n+  const _handleUserJoined = useRef<((data: { socketId: string }) => void) | null>(null);\r\n+\r\n   useEffect(() => {\r\n     if (!socketRef.current) {\r\n-      const s = io(ROOM_SERVER_URL);\r\n+      const s = io(ROOM_SERVER_URL, {\r\n+        transports: [\"websocket\", \"polling\"],\r\n+      });\r\n       socketRef.current = s;\r\n       setSocket(s);\r\n \r\n       s.on(\"connect\", () => setConnected(true));\r\n@@ -24,9 +30,9 @@\n \r\n       // Listen for rooms list\r\n       s.on(\"rooms\", (r: Room[]) => setRooms(r));\r\n \r\n-      // Listen for room users update\r\n+      // Listen for current room users\r\n       s.on(\"room-users\", (users: Participant[]) => setCurrentRoomUsers(users));\r\n     }\r\n \r\n     return () => {\r\n@@ -53,8 +59,27 @@\n   const createRoom = (payload: { name: string; topic: string }) => {\r\n     socketRef.current?.emit(ROOM_EVENTS.CREATE, payload);\r\n   };\r\n \r\n+  // --- WebRTC integration helper ---\r\n+  const onUserJoined = (handler: (data: { socketId: string }) => void) => {\r\n+    if (!socketRef.current) return;\r\n+\r\n+    // Remove previous listener if exists\r\n+    if (_handleUserJoined.current) {\r\n+      socketRef.current.off(\"user-joined\", _handleUserJoined.current);\r\n+    }\r\n+\r\n+    _handleUserJoined.current = handler;\r\n+    socketRef.current.on(\"user-joined\", handler);\r\n+  };\r\n+\r\n+  const removeUserJoinedListener = () => {\r\n+    if (!socketRef.current || !_handleUserJoined.current) return;\r\n+    socketRef.current.off(\"user-joined\", _handleUserJoined.current);\r\n+    _handleUserJoined.current = null;\r\n+  };\r\n+\r\n   return useMemo(\r\n     () => ({\r\n       socket,\r\n       connected,\r\n@@ -63,8 +88,10 @@\n       joinRoom,\r\n       leaveRoom,\r\n       sendMessage,\r\n       createRoom,\r\n+      onUserJoined,\r\n+      removeUserJoinedListener,\r\n     }),\r\n     [socket, connected, rooms, currentRoomUsers]\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1760272609056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { io, Socket } from \"socket.io-client\";\r\n import { ROOM_EVENTS } from \"../utils/roomEvents\";\r\n import type { Room, Participant, Message } from \"../utils/roomTypes\";\r\n \r\n-const ROOM_SERVER_URL = process.env.NEXT_PUBLIC_ROOM_SERVER_URL || \"http://localhost:3001/rooms\";\r\n+const ROOM_SERVER_URL = process.env.NEXT_PUBLIC_ROOM_SERVER_URL?.replace(/\\/$/, \"\") + \"/rooms\";\r\n \r\n export function useRoomSocket() {\r\n   const [socket, setSocket] = useState<Socket | null>(null);\r\n   const [connected, setConnected] = useState(false);\r\n"
                },
                {
                    "date": 1760272679570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { io, Socket } from \"socket.io-client\";\r\n import { ROOM_EVENTS } from \"../utils/roomEvents\";\r\n import type { Room, Participant, Message } from \"../utils/roomTypes\";\r\n \r\n-const ROOM_SERVER_URL = process.env.NEXT_PUBLIC_ROOM_SERVER_URL?.replace(/\\/$/, \"\") + \"/rooms\";\r\n+const SIGNALING_URL = (process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\").replace(/\\/$/, \"\");\r\n \r\n export function useRoomSocket() {\r\n   const [socket, setSocket] = useState<Socket | null>(null);\r\n   const [connected, setConnected] = useState(false);\r\n"
                },
                {
                    "date": 1760272688744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { io, Socket } from \"socket.io-client\";\r\n import { ROOM_EVENTS } from \"../utils/roomEvents\";\r\n import type { Room, Participant, Message } from \"../utils/roomTypes\";\r\n \r\n-const SIGNALING_URL = (process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\").replace(/\\/$/, \"\");\r\n+const ROOM_SERVER_URL = process.env.NEXT_PUBLIC_ROOM_SERVER_URL?.replace(/\\/$/, \"\") + \"/rooms\";\r\n \r\n export function useRoomSocket() {\r\n   const [socket, setSocket] = useState<Socket | null>(null);\r\n   const [connected, setConnected] = useState(false);\r\n"
                },
                {
                    "date": 1760274100343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,48 @@\n-// features/RoomChat/hooks/useRoomSocket.ts\r\n import { useEffect, useState, useRef, useMemo } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n import { ROOM_EVENTS } from \"../utils/roomEvents\";\r\n import type { Room, Participant, Message } from \"../utils/roomTypes\";\r\n \r\n-const ROOM_SERVER_URL = process.env.NEXT_PUBLIC_ROOM_SERVER_URL?.replace(/\\/$/, \"\") + \"/rooms\";\r\n+const ROOM_SERVER_URL =\r\n+  (process.env.NEXT_PUBLIC_ROOM_SERVER_URL?.replace(/\\/$/, \"\") || \"http://localhost:3001\") +\r\n+  \"/rooms\";\r\n \r\n export function useRoomSocket() {\r\n   const [socket, setSocket] = useState<Socket | null>(null);\r\n   const [connected, setConnected] = useState(false);\r\n   const [rooms, setRooms] = useState<Room[]>([]);\r\n   const [currentRoomUsers, setCurrentRoomUsers] = useState<Participant[]>([]);\r\n \r\n   const socketRef = useRef<Socket | null>(null);\r\n-\r\n-  // Store WebRTC handler\r\n   const _handleUserJoined = useRef<((data: { socketId: string }) => void) | null>(null);\r\n \r\n   useEffect(() => {\r\n     if (!socketRef.current) {\r\n       const s = io(ROOM_SERVER_URL, {\r\n         transports: [\"websocket\", \"polling\"],\r\n       });\r\n+\r\n       socketRef.current = s;\r\n       setSocket(s);\r\n \r\n+      // --- Connection status ---\r\n       s.on(\"connect\", () => setConnected(true));\r\n       s.on(\"disconnect\", () => setConnected(false));\r\n \r\n-      // Listen for rooms list\r\n+      // --- Rooms list ---\r\n       s.on(\"rooms\", (r: Room[]) => setRooms(r));\r\n \r\n-      // Listen for current room users\r\n+      // --- Current room users ---\r\n       s.on(\"room-users\", (users: Participant[]) => setCurrentRoomUsers(users));\r\n+\r\n+      // Optional: handle room-created event to optimistically update\r\n+      s.on(\"room-created\", (newRoom: Room) => setRooms((prev) => [...prev, newRoom]));\r\n+\r\n+      // Optional: handle room-deleted\r\n+      s.on(\"room-deleted\", ({ roomId }: { roomId: string }) =>\r\n+        setRooms((prev) => prev.filter((r) => r.id !== roomId))\r\n+      );\r\n     }\r\n \r\n     return () => {\r\n       if (socketRef.current) {\r\n@@ -42,8 +51,9 @@\n       }\r\n     };\r\n   }, []);\r\n \r\n+  // --- Room actions ---\r\n   const joinRoom = (roomId: string, user: any) => {\r\n     socketRef.current?.emit(ROOM_EVENTS.JOIN, { roomId, user });\r\n   };\r\n \r\n@@ -56,16 +66,24 @@\n     socketRef.current?.emit(ROOM_EVENTS.MESSAGE_SEND, { roomId, message });\r\n   };\r\n \r\n   const createRoom = (payload: { name: string; topic: string }) => {\r\n+    // Optimistic update\r\n+    const tempRoom: Room = {\r\n+      id: \"temp-\" + Date.now(),\r\n+      name: payload.name,\r\n+      topic: payload.topic,\r\n+      users: [],\r\n+    };\r\n+    setRooms((prev) => [...prev, tempRoom]);\r\n+\r\n     socketRef.current?.emit(ROOM_EVENTS.CREATE, payload);\r\n   };\r\n \r\n   // --- WebRTC integration helper ---\r\n   const onUserJoined = (handler: (data: { socketId: string }) => void) => {\r\n     if (!socketRef.current) return;\r\n \r\n-    // Remove previous listener if exists\r\n     if (_handleUserJoined.current) {\r\n       socketRef.current.off(\"user-joined\", _handleUserJoined.current);\r\n     }\r\n \r\n"
                },
                {
                    "date": 1760277941879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n import { useEffect, useState, useRef, useMemo } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n import { ROOM_EVENTS } from \"../utils/roomEvents\";\r\n import type { Room, Participant, Message } from \"../utils/roomTypes\";\r\n+import { db } from \"@/lib/firebaseConfig\"; // Firestore instance\r\n+import { collection, onSnapshot, addDoc, doc, updateDoc, arrayUnion, arrayRemove, deleteDoc, serverTimestamp } from \"firebase/firestore\";\r\n \r\n const ROOM_SERVER_URL =\r\n   (process.env.NEXT_PUBLIC_ROOM_SERVER_URL?.replace(/\\/$/, \"\") || \"http://localhost:3001\") +\r\n   \"/rooms\";\r\n@@ -15,78 +17,106 @@\n \r\n   const socketRef = useRef<Socket | null>(null);\r\n   const _handleUserJoined = useRef<((data: { socketId: string }) => void) | null>(null);\r\n \r\n+  // Firestore listener\r\n   useEffect(() => {\r\n+    const roomsCol = collection(db, \"rooms\");\r\n+    const unsubscribe = onSnapshot(roomsCol, (snapshot) => {\r\n+      const fetchedRooms: Room[] = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() })) as Room[];\r\n+      setRooms(fetchedRooms);\r\n+    });\r\n+\r\n+    return () => unsubscribe();\r\n+  }, []);\r\n+\r\n+  // Socket connection\r\n+  useEffect(() => {\r\n     if (!socketRef.current) {\r\n-      const s = io(ROOM_SERVER_URL, {\r\n-        transports: [\"websocket\", \"polling\"],\r\n-      });\r\n-\r\n+      const s = io(ROOM_SERVER_URL, { transports: [\"websocket\", \"polling\"] });\r\n       socketRef.current = s;\r\n       setSocket(s);\r\n \r\n-      // --- Connection status ---\r\n       s.on(\"connect\", () => setConnected(true));\r\n       s.on(\"disconnect\", () => setConnected(false));\r\n \r\n-      // --- Rooms list ---\r\n-      s.on(\"rooms\", (r: Room[]) => setRooms(r));\r\n-\r\n-      // --- Current room users ---\r\n       s.on(\"room-users\", (users: Participant[]) => setCurrentRoomUsers(users));\r\n-\r\n-      // Optional: handle room-created event to optimistically update\r\n       s.on(\"room-created\", (newRoom: Room) => setRooms((prev) => [...prev, newRoom]));\r\n-\r\n-      // Optional: handle room-deleted\r\n       s.on(\"room-deleted\", ({ roomId }: { roomId: string }) =>\r\n         setRooms((prev) => prev.filter((r) => r.id !== roomId))\r\n       );\r\n     }\r\n \r\n     return () => {\r\n-      if (socketRef.current) {\r\n-        socketRef.current.disconnect();\r\n-        socketRef.current = null;\r\n-      }\r\n+      socketRef.current?.disconnect();\r\n+      socketRef.current = null;\r\n     };\r\n   }, []);\r\n \r\n   // --- Room actions ---\r\n-  const joinRoom = (roomId: string, user: any) => {\r\n+\r\n+  const createRoom = async (payload: { name: string; topic: string; description?: string; password?: string }) => {\r\n+    try {\r\n+      const roomsCol = collection(db, \"rooms\");\r\n+      const newRoomRef = await addDoc(roomsCol, {\r\n+        name: payload.name,\r\n+        topic: payload.topic,\r\n+        description: payload.description || \"\",\r\n+        password: payload.password || null,\r\n+        createdAt: serverTimestamp(),\r\n+        users: [],\r\n+      });\r\n+\r\n+      const newRoom: Room = { id: newRoomRef.id, name: payload.name, topic: payload.topic, users: [] };\r\n+      socketRef.current?.emit(ROOM_EVENTS.CREATE, newRoom);\r\n+      return newRoom;\r\n+    } catch (err) {\r\n+      console.error(\"createRoom error:\", err);\r\n+      return null;\r\n+    }\r\n+  };\r\n+\r\n+  const joinRoom = async (roomId: string, user: Participant) => {\r\n     socketRef.current?.emit(ROOM_EVENTS.JOIN, { roomId, user });\r\n+\r\n+    try {\r\n+      const roomDoc = doc(db, \"rooms\", roomId);\r\n+      await updateDoc(roomDoc, { users: arrayUnion(user) });\r\n+    } catch (err) {\r\n+      console.error(\"joinRoom error:\", err);\r\n+    }\r\n   };\r\n \r\n-  const leaveRoom = (roomId: string) => {\r\n+  const leaveRoom = async (roomId: string, user: Participant) => {\r\n     socketRef.current?.emit(ROOM_EVENTS.LEAVE, { roomId });\r\n     setCurrentRoomUsers([]);\r\n+\r\n+    try {\r\n+      const roomDoc = doc(db, \"rooms\", roomId);\r\n+      await updateDoc(roomDoc, { users: arrayRemove(user) });\r\n+    } catch (err) {\r\n+      console.error(\"leaveRoom error:\", err);\r\n+    }\r\n   };\r\n \r\n+  const deleteRoom = async (roomId: string) => {\r\n+    try {\r\n+      await deleteDoc(doc(db, \"rooms\", roomId));\r\n+      socketRef.current?.emit(ROOM_EVENTS.DELETE, { roomId });\r\n+    } catch (err) {\r\n+      console.error(\"deleteRoom error:\", err);\r\n+    }\r\n+  };\r\n+\r\n   const sendMessage = (roomId: string, message: Partial<Message>) => {\r\n     socketRef.current?.emit(ROOM_EVENTS.MESSAGE_SEND, { roomId, message });\r\n   };\r\n \r\n-  const createRoom = (payload: { name: string; topic: string }) => {\r\n-    // Optimistic update\r\n-    const tempRoom: Room = {\r\n-      id: \"temp-\" + Date.now(),\r\n-      name: payload.name,\r\n-      topic: payload.topic,\r\n-      users: [],\r\n-    };\r\n-    setRooms((prev) => [...prev, tempRoom]);\r\n-\r\n-    socketRef.current?.emit(ROOM_EVENTS.CREATE, payload);\r\n-  };\r\n-\r\n-  // --- WebRTC integration helper ---\r\n+  // --- WebRTC helper ---\r\n   const onUserJoined = (handler: (data: { socketId: string }) => void) => {\r\n     if (!socketRef.current) return;\r\n \r\n-    if (_handleUserJoined.current) {\r\n-      socketRef.current.off(\"user-joined\", _handleUserJoined.current);\r\n-    }\r\n+    if (_handleUserJoined.current) socketRef.current.off(\"user-joined\", _handleUserJoined.current);\r\n \r\n     _handleUserJoined.current = handler;\r\n     socketRef.current.on(\"user-joined\", handler);\r\n   };\r\n@@ -106,8 +136,9 @@\n       joinRoom,\r\n       leaveRoom,\r\n       sendMessage,\r\n       createRoom,\r\n+      deleteRoom,\r\n       onUserJoined,\r\n       removeUserJoinedListener,\r\n     }),\r\n     [socket, connected, rooms, currentRoomUsers]\r\n"
                },
                {
                    "date": 1760279236665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,20 @@\n import { useEffect, useState, useRef, useMemo } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n import { ROOM_EVENTS } from \"../utils/roomEvents\";\r\n import type { Room, Participant, Message } from \"../utils/roomTypes\";\r\n-import { db } from \"@/lib/firebaseConfig\"; // Firestore instance\r\n-import { collection, onSnapshot, addDoc, doc, updateDoc, arrayUnion, arrayRemove, deleteDoc, serverTimestamp } from \"firebase/firestore\";\r\n+import { db } from \"@/lib/firebaseConfig\";\r\n+import {\r\n+  collection,\r\n+  onSnapshot,\r\n+  addDoc,\r\n+  doc,\r\n+  updateDoc,\r\n+  arrayUnion,\r\n+  arrayRemove,\r\n+  deleteDoc,\r\n+  serverTimestamp,\r\n+} from \"firebase/firestore\";\r\n \r\n const ROOM_SERVER_URL =\r\n   (process.env.NEXT_PUBLIC_ROOM_SERVER_URL?.replace(/\\/$/, \"\") || \"http://localhost:3001\") +\r\n   \"/rooms\";\r\n@@ -17,16 +27,15 @@\n \r\n   const socketRef = useRef<Socket | null>(null);\r\n   const _handleUserJoined = useRef<((data: { socketId: string }) => void) | null>(null);\r\n \r\n-  // Firestore listener\r\n+  // Firestore rooms listener\r\n   useEffect(() => {\r\n     const roomsCol = collection(db, \"rooms\");\r\n     const unsubscribe = onSnapshot(roomsCol, (snapshot) => {\r\n       const fetchedRooms: Room[] = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() })) as Room[];\r\n       setRooms(fetchedRooms);\r\n     });\r\n-\r\n     return () => unsubscribe();\r\n   }, []);\r\n \r\n   // Socket connection\r\n@@ -39,8 +48,15 @@\n       s.on(\"connect\", () => setConnected(true));\r\n       s.on(\"disconnect\", () => setConnected(false));\r\n \r\n       s.on(\"room-users\", (users: Participant[]) => setCurrentRoomUsers(users));\r\n+      s.on(\"user-joined\", ({ socketId, userInfo }) =>\r\n+        setCurrentRoomUsers((prev) => [...prev.filter((u) => u.socketId !== socketId), { socketId, userInfo }])\r\n+      );\r\n+      s.on(\"user-left\", ({ userId }) =>\r\n+        setCurrentRoomUsers((prev) => prev.filter((u) => u.socketId !== userId))\r\n+      );\r\n+\r\n       s.on(\"room-created\", (newRoom: Room) => setRooms((prev) => [...prev, newRoom]));\r\n       s.on(\"room-deleted\", ({ roomId }: { roomId: string }) =>\r\n         setRooms((prev) => prev.filter((r) => r.id !== roomId))\r\n       );\r\n@@ -75,25 +91,36 @@\n     }\r\n   };\r\n \r\n   const joinRoom = async (roomId: string, user: Participant) => {\r\n-    socketRef.current?.emit(ROOM_EVENTS.JOIN, { roomId, user });\r\n+    if (!socketRef.current) return;\r\n \r\n+    // Ensure socketId is attached\r\n+    const userWithSocket: Participant = {\r\n+      ...user,\r\n+      socketId: socketRef.current.id,\r\n+    };\r\n+\r\n+    socketRef.current.emit(ROOM_EVENTS.JOIN, { roomId, user: userWithSocket });\r\n+\r\n     try {\r\n       const roomDoc = doc(db, \"rooms\", roomId);\r\n-      await updateDoc(roomDoc, { users: arrayUnion(user) });\r\n+      await updateDoc(roomDoc, { users: arrayUnion(userWithSocket) });\r\n     } catch (err) {\r\n       console.error(\"joinRoom error:\", err);\r\n     }\r\n   };\r\n \r\n   const leaveRoom = async (roomId: string, user: Participant) => {\r\n-    socketRef.current?.emit(ROOM_EVENTS.LEAVE, { roomId });\r\n+    if (!socketRef.current) return;\r\n+\r\n+    const userWithSocket = { ...user, socketId: socketRef.current.id };\r\n+    socketRef.current.emit(ROOM_EVENTS.LEAVE, { roomId });\r\n     setCurrentRoomUsers([]);\r\n \r\n     try {\r\n       const roomDoc = doc(db, \"rooms\", roomId);\r\n-      await updateDoc(roomDoc, { users: arrayRemove(user) });\r\n+      await updateDoc(roomDoc, { users: arrayRemove(userWithSocket) });\r\n     } catch (err) {\r\n       console.error(\"leaveRoom error:\", err);\r\n     }\r\n   };\r\n@@ -110,9 +137,9 @@\n   const sendMessage = (roomId: string, message: Partial<Message>) => {\r\n     socketRef.current?.emit(ROOM_EVENTS.MESSAGE_SEND, { roomId, message });\r\n   };\r\n \r\n-  // --- WebRTC helper ---\r\n+  // WebRTC helpers\r\n   const onUserJoined = (handler: (data: { socketId: string }) => void) => {\r\n     if (!socketRef.current) return;\r\n \r\n     if (_handleUserJoined.current) socketRef.current.off(\"user-joined\", _handleUserJoined.current);\r\n"
                },
                {
                    "date": 1760279293240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,27 +90,31 @@\n       return null;\r\n     }\r\n   };\r\n \r\n-  const joinRoom = async (roomId: string, user: Participant) => {\r\n-    if (!socketRef.current) return;\r\n+ const joinRoom = async (roomId: string, user: Participant) => {\r\n+  if (!socketRef.current || !socketRef.current.connected) {\r\n+    console.error(\"Socket not connected yet\");\r\n+    return;\r\n+  }\r\n \r\n-    // Ensure socketId is attached\r\n-    const userWithSocket: Participant = {\r\n-      ...user,\r\n-      socketId: socketRef.current.id,\r\n-    };\r\n+  // Attach socketId safely\r\n+  const userWithSocket: Participant = {\r\n+    ...user,\r\n+    socketId: socketRef.current.id, // safe now because we checked connection\r\n+  };\r\n \r\n-    socketRef.current.emit(ROOM_EVENTS.JOIN, { roomId, user: userWithSocket });\r\n+  socketRef.current.emit(ROOM_EVENTS.JOIN, { roomId, user: userWithSocket });\r\n \r\n-    try {\r\n-      const roomDoc = doc(db, \"rooms\", roomId);\r\n-      await updateDoc(roomDoc, { users: arrayUnion(userWithSocket) });\r\n-    } catch (err) {\r\n-      console.error(\"joinRoom error:\", err);\r\n-    }\r\n-  };\r\n+  try {\r\n+    const roomDoc = doc(db, \"rooms\", roomId);\r\n+    await updateDoc(roomDoc, { users: arrayUnion(userWithSocket) });\r\n+  } catch (err) {\r\n+    console.error(\"joinRoom error:\", err);\r\n+  }\r\n+};\r\n \r\n+\r\n   const leaveRoom = async (roomId: string, user: Participant) => {\r\n     if (!socketRef.current) return;\r\n \r\n     const userWithSocket = { ...user, socketId: socketRef.current.id };\r\n"
                },
                {
                    "date": 1760279330606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,18 +90,17 @@\n       return null;\r\n     }\r\n   };\r\n \r\n- const joinRoom = async (roomId: string, user: Participant) => {\r\n+ const joinRoom = async (roomId: string, user: Omit<Participant, \"socketId\">) => {\r\n   if (!socketRef.current || !socketRef.current.connected) {\r\n     console.error(\"Socket not connected yet\");\r\n     return;\r\n   }\r\n \r\n-  // Attach socketId safely\r\n   const userWithSocket: Participant = {\r\n     ...user,\r\n-    socketId: socketRef.current.id, // safe now because we checked connection\r\n+    socketId: socketRef.current.id, // now socketId exists\r\n   };\r\n \r\n   socketRef.current.emit(ROOM_EVENTS.JOIN, { roomId, user: userWithSocket });\r\n \r\n@@ -112,9 +111,8 @@\n     console.error(\"joinRoom error:\", err);\r\n   }\r\n };\r\n \r\n-\r\n   const leaveRoom = async (roomId: string, user: Participant) => {\r\n     if (!socketRef.current) return;\r\n \r\n     const userWithSocket = { ...user, socketId: socketRef.current.id };\r\n"
                },
                {
                    "date": 1760279481532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+// features/RoomChat/hooks/useRoomSocket.ts\r\n import { useEffect, useState, useRef, useMemo } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n import { ROOM_EVENTS } from \"../utils/roomEvents\";\r\n import type { Room, Participant, Message } from \"../utils/roomTypes\";\r\n@@ -27,9 +28,9 @@\n \r\n   const socketRef = useRef<Socket | null>(null);\r\n   const _handleUserJoined = useRef<((data: { socketId: string }) => void) | null>(null);\r\n \r\n-  // Firestore rooms listener\r\n+  // Firestore listener for rooms\r\n   useEffect(() => {\r\n     const roomsCol = collection(db, \"rooms\");\r\n     const unsubscribe = onSnapshot(roomsCol, (snapshot) => {\r\n       const fetchedRooms: Room[] = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() })) as Room[];\r\n@@ -48,15 +49,8 @@\n       s.on(\"connect\", () => setConnected(true));\r\n       s.on(\"disconnect\", () => setConnected(false));\r\n \r\n       s.on(\"room-users\", (users: Participant[]) => setCurrentRoomUsers(users));\r\n-      s.on(\"user-joined\", ({ socketId, userInfo }) =>\r\n-        setCurrentRoomUsers((prev) => [...prev.filter((u) => u.socketId !== socketId), { socketId, userInfo }])\r\n-      );\r\n-      s.on(\"user-left\", ({ userId }) =>\r\n-        setCurrentRoomUsers((prev) => prev.filter((u) => u.socketId !== userId))\r\n-      );\r\n-\r\n       s.on(\"room-created\", (newRoom: Room) => setRooms((prev) => [...prev, newRoom]));\r\n       s.on(\"room-deleted\", ({ roomId }: { roomId: string }) =>\r\n         setRooms((prev) => prev.filter((r) => r.id !== roomId))\r\n       );\r\n@@ -69,9 +63,14 @@\n   }, []);\r\n \r\n   // --- Room actions ---\r\n \r\n-  const createRoom = async (payload: { name: string; topic: string; description?: string; password?: string }) => {\r\n+  const createRoom = async (payload: {\r\n+    name: string;\r\n+    topic: string;\r\n+    description?: string;\r\n+    password?: string;\r\n+  }) => {\r\n     try {\r\n       const roomsCol = collection(db, \"rooms\");\r\n       const newRoomRef = await addDoc(roomsCol, {\r\n         name: payload.name,\r\n@@ -90,39 +89,33 @@\n       return null;\r\n     }\r\n   };\r\n \r\n- const joinRoom = async (roomId: string, user: Omit<Participant, \"socketId\">) => {\r\n-  if (!socketRef.current || !socketRef.current.connected) {\r\n-    console.error(\"Socket not connected yet\");\r\n-    return;\r\n-  }\r\n+  const joinRoom = async (roomId: string, user: Omit<Participant, \"socketId\">) => {\r\n+    if (!socketRef.current) return;\r\n \r\n-  const userWithSocket: Participant = {\r\n-    ...user,\r\n-    socketId: socketRef.current.id, // now socketId exists\r\n-  };\r\n+    const userWithSocket: Participant = {\r\n+      ...user,\r\n+      socketId: socketRef.current.id, // ✅ attach socketId\r\n+    };\r\n \r\n-  socketRef.current.emit(ROOM_EVENTS.JOIN, { roomId, user: userWithSocket });\r\n+    socketRef.current.emit(ROOM_EVENTS.JOIN, { roomId, user: userWithSocket });\r\n \r\n-  try {\r\n-    const roomDoc = doc(db, \"rooms\", roomId);\r\n-    await updateDoc(roomDoc, { users: arrayUnion(userWithSocket) });\r\n-  } catch (err) {\r\n-    console.error(\"joinRoom error:\", err);\r\n-  }\r\n-};\r\n+    try {\r\n+      const roomDoc = doc(db, \"rooms\", roomId);\r\n+      await updateDoc(roomDoc, { users: arrayUnion(userWithSocket) });\r\n+    } catch (err) {\r\n+      console.error(\"joinRoom error:\", err);\r\n+    }\r\n+  };\r\n \r\n   const leaveRoom = async (roomId: string, user: Participant) => {\r\n-    if (!socketRef.current) return;\r\n-\r\n-    const userWithSocket = { ...user, socketId: socketRef.current.id };\r\n-    socketRef.current.emit(ROOM_EVENTS.LEAVE, { roomId });\r\n+    socketRef.current?.emit(ROOM_EVENTS.LEAVE, { roomId });\r\n     setCurrentRoomUsers([]);\r\n \r\n     try {\r\n       const roomDoc = doc(db, \"rooms\", roomId);\r\n-      await updateDoc(roomDoc, { users: arrayRemove(userWithSocket) });\r\n+      await updateDoc(roomDoc, { users: arrayRemove(user) });\r\n     } catch (err) {\r\n       console.error(\"leaveRoom error:\", err);\r\n     }\r\n   };\r\n@@ -139,14 +132,13 @@\n   const sendMessage = (roomId: string, message: Partial<Message>) => {\r\n     socketRef.current?.emit(ROOM_EVENTS.MESSAGE_SEND, { roomId, message });\r\n   };\r\n \r\n-  // WebRTC helpers\r\n+  // --- WebRTC / user joined helpers ---\r\n+\r\n   const onUserJoined = (handler: (data: { socketId: string }) => void) => {\r\n     if (!socketRef.current) return;\r\n-\r\n     if (_handleUserJoined.current) socketRef.current.off(\"user-joined\", _handleUserJoined.current);\r\n-\r\n     _handleUserJoined.current = handler;\r\n     socketRef.current.on(\"user-joined\", handler);\r\n   };\r\n \r\n"
                },
                {
                    "date": 1760279553118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n     if (!socketRef.current) return;\r\n \r\n     const userWithSocket: Participant = {\r\n       ...user,\r\n-      socketId: socketRef.current.id, // ✅ attach socketId\r\n+      socketId: socketRef.current.id ?? \"\", // ✅ attach socketId, fallback to empty string\r\n     };\r\n \r\n     socketRef.current.emit(ROOM_EVENTS.JOIN, { roomId, user: userWithSocket });\r\n \r\n"
                },
                {
                    "date": 1760280039313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n \r\n   const socketRef = useRef<Socket | null>(null);\r\n   const _handleUserJoined = useRef<((data: { socketId: string }) => void) | null>(null);\r\n \r\n-  // Firestore listener for rooms\r\n+  // --- Firestore listener for rooms ---\r\n   useEffect(() => {\r\n     const roomsCol = collection(db, \"rooms\");\r\n     const unsubscribe = onSnapshot(roomsCol, (snapshot) => {\r\n       const fetchedRooms: Room[] = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() })) as Room[];\r\n@@ -38,9 +38,9 @@\n     });\r\n     return () => unsubscribe();\r\n   }, []);\r\n \r\n-  // Socket connection\r\n+  // --- Socket connection ---\r\n   useEffect(() => {\r\n     if (!socketRef.current) {\r\n       const s = io(ROOM_SERVER_URL, { transports: [\"websocket\", \"polling\"] });\r\n       socketRef.current = s;\r\n@@ -62,15 +62,9 @@\n     };\r\n   }, []);\r\n \r\n   // --- Room actions ---\r\n-\r\n-  const createRoom = async (payload: {\r\n-    name: string;\r\n-    topic: string;\r\n-    description?: string;\r\n-    password?: string;\r\n-  }) => {\r\n+  const createRoom = async (payload: { name: string; topic: string; description?: string; password?: string }) => {\r\n     try {\r\n       const roomsCol = collection(db, \"rooms\");\r\n       const newRoomRef = await addDoc(roomsCol, {\r\n         name: payload.name,\r\n@@ -94,13 +88,15 @@\n     if (!socketRef.current) return;\r\n \r\n     const userWithSocket: Participant = {\r\n       ...user,\r\n-      socketId: socketRef.current.id ?? \"\", // ✅ attach socketId, fallback to empty string\r\n+      socketId: socketRef.current.id ?? \"\",\r\n     };\r\n \r\n+    // Emit socket event\r\n     socketRef.current.emit(ROOM_EVENTS.JOIN, { roomId, user: userWithSocket });\r\n \r\n+    // Update Firestore\r\n     try {\r\n       const roomDoc = doc(db, \"rooms\", roomId);\r\n       await updateDoc(roomDoc, { users: arrayUnion(userWithSocket) });\r\n     } catch (err) {\r\n@@ -133,9 +129,8 @@\n     socketRef.current?.emit(ROOM_EVENTS.MESSAGE_SEND, { roomId, message });\r\n   };\r\n \r\n   // --- WebRTC / user joined helpers ---\r\n-\r\n   const onUserJoined = (handler: (data: { socketId: string }) => void) => {\r\n     if (!socketRef.current) return;\r\n     if (_handleUserJoined.current) socketRef.current.off(\"user-joined\", _handleUserJoined.current);\r\n     _handleUserJoined.current = handler;\r\n"
                }
            ],
            "date": 1758898655460,
            "name": "Commit-0",
            "content": "import { useEffect, useRef, useState } from \"react\";\r\nimport { connectRoomSocket, disconnectRoomSocket, getRoomSocket } from \"../services/roomSocketService\";\r\n\r\nexport default function useRoomSocket() {\r\n  const [socket, setSocket] = useState<any>(null);\r\n\r\n  useEffect(() => {\r\n    connectRoomSocket();\r\n    const s = getRoomSocket();\r\n    setSocket(s);\r\n\r\n    return () => {\r\n      disconnectRoomSocket();\r\n      setSocket(null);\r\n    };\r\n  }, []);\r\n\r\n  return socket;\r\n}\r\n"
        }
    ]
}