{
    "sourceFile": "features/RoomChat/hooks/useRoomSocket.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1758898655460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758906475682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,22 @@\n-import { useEffect, useRef, useState } from \"react\";\r\n-import { connectRoomSocket, disconnectRoomSocket, getRoomSocket } from \"../services/roomSocketService\";\r\n+import { useEffect, useState } from \"react\";\r\n+import type { Socket } from \"socket.io-client\";\r\n+import {\r\n+  connectRoomSocket,\r\n+  disconnectRoomSocket,\r\n+  getRoomSocket,\r\n+} from \"../services/roomSocketService\";\r\n \r\n export default function useRoomSocket() {\r\n-  const [socket, setSocket] = useState<any>(null);\r\n+  const [socket, setSocket] = useState<Socket | null>(null);\r\n \r\n   useEffect(() => {\r\n-    connectRoomSocket();\r\n-    const s = getRoomSocket();\r\n+    // Establish connection\r\n+    const s = connectRoomSocket(); // Prefer connectRoomSocket() to return the socket\r\n     setSocket(s);\r\n \r\n     return () => {\r\n+      // Clean up connection on unmount\r\n       disconnectRoomSocket();\r\n       setSocket(null);\r\n     };\r\n   }, []);\r\n"
                },
                {
                    "date": 1758985284114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,23 +2,24 @@\n import type { Socket } from \"socket.io-client\";\r\n import {\r\n   connectRoomSocket,\r\n   disconnectRoomSocket,\r\n-  getRoomSocket,\r\n } from \"../services/roomSocketService\";\r\n \r\n-export default function useRoomSocket() {\r\n+export default function useRoomSocket(): Socket | null {\r\n   const [socket, setSocket] = useState<Socket | null>(null);\r\n \r\n   useEffect(() => {\r\n-    // Establish connection\r\n-    const s = connectRoomSocket(); // Prefer connectRoomSocket() to return the socket\r\n+    // Connect to the room socket\r\n+    const s = connectRoomSocket();\r\n     setSocket(s);\r\n \r\n+    // Clean up on unmount\r\n     return () => {\r\n-      // Clean up connection on unmount\r\n-      disconnectRoomSocket();\r\n-      setSocket(null);\r\n+      if (s) {\r\n+        disconnectRoomSocket();\r\n+        setSocket(null);\r\n+      }\r\n     };\r\n   }, []);\r\n \r\n   return socket;\r\n"
                },
                {
                    "date": 1760156235068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,123 @@\n-import { useEffect, useState } from \"react\";\r\n-import type { Socket } from \"socket.io-client\";\r\n-import {\r\n-  connectRoomSocket,\r\n-  disconnectRoomSocket,\r\n-} from \"../services/roomSocketService\";\r\n+// features/RoomChat/services/roomSocketService.ts\r\n+import { io, Socket } from \"socket.io-client\";\r\n+import { v4 as uuidv4 } from \"uuid\";\r\n \r\n-export default function useRoomSocket(): Socket | null {\r\n-  const [socket, setSocket] = useState<Socket | null>(null);\r\n+// ✅ Use your signaling server URL\r\n+const SOCKET_URL =\r\n+  process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n \r\n-  useEffect(() => {\r\n-    // Connect to the room socket\r\n-    const s = connectRoomSocket();\r\n-    setSocket(s);\r\n+// Single socket instance for /rooms namespace\r\n+let socket: Socket | null = null;\r\n \r\n-    // Clean up on unmount\r\n-    return () => {\r\n-      if (s) {\r\n-        disconnectRoomSocket();\r\n-        setSocket(null);\r\n-      }\r\n-    };\r\n-  }, []);\r\n+/** Connect to the room socket server (namespace /rooms) */\r\n+export const connectRoomSocket = (): Socket => {\r\n+  if (!socket) {\r\n+    socket = io(`${SOCKET_URL}/rooms`, {\r\n+      transports: [\"websocket\"],\r\n+    });\r\n \r\n+    socket.on(\"connect\", () => {\r\n+      console.log(\"✅ Connected to room server:\", socket!.id);\r\n+    });\r\n+\r\n+    socket.on(\"disconnect\", (reason) => {\r\n+      console.log(\"❌ Disconnected from room server:\", reason);\r\n+    });\r\n+  }\r\n   return socket;\r\n+};\r\n+\r\n+/** Disconnect from room server */\r\n+export const disconnectRoomSocket = (): void => {\r\n+  if (socket) {\r\n+    socket.disconnect();\r\n+    socket = null;\r\n+  }\r\n+};\r\n+\r\n+/** Get current socket instance */\r\n+export const getRoomSocket = (): Socket | null => socket;\r\n+\r\n+// -------------------------------------------------\r\n+// ⚡ Room Operations\r\n+// -------------------------------------------------\r\n+export interface Room {\r\n+  id: string;\r\n+  name: string;\r\n+  topic: string;\r\n+  description?: string;\r\n+  hasPassword: boolean;\r\n+  password?: string | null;\r\n+  users?: { socketId: string; userInfo: any }[];\r\n }\r\n+\r\n+/** Join a room */\r\n+export const joinRoom = (roomId: string, user: any): void => {\r\n+  socket?.emit(\"join-room\", { roomId, user });\r\n+};\r\n+\r\n+/** Leave a room */\r\n+export const leaveRoom = (roomId: string, userId: string): void => {\r\n+  socket?.emit(\"leave-room\", { roomId, userId });\r\n+};\r\n+\r\n+/** Send a room message */\r\n+export interface RoomMessage {\r\n+  id: string;\r\n+  text: string;\r\n+  user: string | undefined;\r\n+  timestamp: string;\r\n+}\r\n+\r\n+export const sendRoomMessage = (roomId: string, text: string): void => {\r\n+  const message: RoomMessage = {\r\n+    id: uuidv4(),\r\n+    text,\r\n+    user: socket?.id,\r\n+    timestamp: new Date().toISOString(),\r\n+  };\r\n+  socket?.emit(\"send-message\", { roomId, message });\r\n+};\r\n+\r\n+/** Listen for messages */\r\n+export const onRoomMessage = (callback: (msg: RoomMessage) => void): void => {\r\n+  socket?.off(\"receive-message\").on(\"receive-message\", (data) => {\r\n+    callback(data.message);\r\n+  });\r\n+};\r\n+\r\n+/** Typing indicator */\r\n+export const sendTyping = (roomId: string, userId: string): void => {\r\n+  socket?.emit(\"typing\", { roomId, userId });\r\n+};\r\n+\r\n+export const onTyping = (callback: (data: any) => void): void => {\r\n+  socket?.off(\"typing\").on(\"typing\", callback);\r\n+};\r\n+\r\n+// -------------------------------------------------\r\n+// 🎥 WebRTC Signaling\r\n+// -------------------------------------------------\r\n+export const sendRoomOffer = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  offer: RTCSessionDescriptionInit\r\n+): void => {\r\n+  socket?.emit(\"room-offer\", { to, roomId, offer });\r\n+};\r\n+\r\n+export const sendRoomAnswer = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  answer: RTCSessionDescriptionInit\r\n+): void => {\r\n+  socket?.emit(\"room-answer\", { to, roomId, answer });\r\n+};\r\n+\r\n+export const sendRoomIce = (\r\n+  to: string,\r\n+  roomId: string,\r\n+  candidate: RTCIceCandidateInit\r\n+): void => {\r\n+  socket?.emit(\"room-ice\", { to, roomId, candidate });\r\n+};\r\n"
                },
                {
                    "date": 1760156706709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,123 +1,27 @@\n-// features/RoomChat/services/roomSocketService.ts\r\n-import { io, Socket } from \"socket.io-client\";\r\n-import { v4 as uuidv4 } from \"uuid\";\r\n+import { useEffect, useState } from \"react\";\r\n+import type { Socket } from \"socket.io-client\";\r\n+import {\r\n+  connectRoomSocket,\r\n+  disconnectRoomSocket,\r\n+} from \"../services/roomSocketService\";\r\n \r\n-// ✅ Use your signaling server URL\r\n-const SOCKET_URL =\r\n-  process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n+/** React hook to manage /rooms socket connection */\r\n+export default function useRoomSocket(): Socket | null {\r\n+  const [socket, setSocket] = useState<Socket | null>(null);\r\n \r\n-// Single socket instance for /rooms namespace\r\n-let socket: Socket | null = null;\r\n+  useEffect(() => {\r\n+    // Connect to /rooms namespace\r\n+    const s = connectRoomSocket();\r\n+    setSocket(s);\r\n \r\n-/** Connect to the room socket server (namespace /rooms) */\r\n-export const connectRoomSocket = (): Socket => {\r\n-  if (!socket) {\r\n-    socket = io(`${SOCKET_URL}/rooms`, {\r\n-      transports: [\"websocket\"],\r\n-    });\r\n+    // Cleanup on unmount\r\n+    return () => {\r\n+      if (s) {\r\n+        disconnectRoomSocket();\r\n+        setSocket(null);\r\n+      }\r\n+    };\r\n+  }, []);\r\n \r\n-    socket.on(\"connect\", () => {\r\n-      console.log(\"✅ Connected to room server:\", socket!.id);\r\n-    });\r\n-\r\n-    socket.on(\"disconnect\", (reason) => {\r\n-      console.log(\"❌ Disconnected from room server:\", reason);\r\n-    });\r\n-  }\r\n   return socket;\r\n-};\r\n-\r\n-/** Disconnect from room server */\r\n-export const disconnectRoomSocket = (): void => {\r\n-  if (socket) {\r\n-    socket.disconnect();\r\n-    socket = null;\r\n-  }\r\n-};\r\n-\r\n-/** Get current socket instance */\r\n-export const getRoomSocket = (): Socket | null => socket;\r\n-\r\n-// -------------------------------------------------\r\n-// ⚡ Room Operations\r\n-// -------------------------------------------------\r\n-export interface Room {\r\n-  id: string;\r\n-  name: string;\r\n-  topic: string;\r\n-  description?: string;\r\n-  hasPassword: boolean;\r\n-  password?: string | null;\r\n-  users?: { socketId: string; userInfo: any }[];\r\n }\r\n-\r\n-/** Join a room */\r\n-export const joinRoom = (roomId: string, user: any): void => {\r\n-  socket?.emit(\"join-room\", { roomId, user });\r\n-};\r\n-\r\n-/** Leave a room */\r\n-export const leaveRoom = (roomId: string, userId: string): void => {\r\n-  socket?.emit(\"leave-room\", { roomId, userId });\r\n-};\r\n-\r\n-/** Send a room message */\r\n-export interface RoomMessage {\r\n-  id: string;\r\n-  text: string;\r\n-  user: string | undefined;\r\n-  timestamp: string;\r\n-}\r\n-\r\n-export const sendRoomMessage = (roomId: string, text: string): void => {\r\n-  const message: RoomMessage = {\r\n-    id: uuidv4(),\r\n-    text,\r\n-    user: socket?.id,\r\n-    timestamp: new Date().toISOString(),\r\n-  };\r\n-  socket?.emit(\"send-message\", { roomId, message });\r\n-};\r\n-\r\n-/** Listen for messages */\r\n-export const onRoomMessage = (callback: (msg: RoomMessage) => void): void => {\r\n-  socket?.off(\"receive-message\").on(\"receive-message\", (data) => {\r\n-    callback(data.message);\r\n-  });\r\n-};\r\n-\r\n-/** Typing indicator */\r\n-export const sendTyping = (roomId: string, userId: string): void => {\r\n-  socket?.emit(\"typing\", { roomId, userId });\r\n-};\r\n-\r\n-export const onTyping = (callback: (data: any) => void): void => {\r\n-  socket?.off(\"typing\").on(\"typing\", callback);\r\n-};\r\n-\r\n-// -------------------------------------------------\r\n-// 🎥 WebRTC Signaling\r\n-// -------------------------------------------------\r\n-export const sendRoomOffer = (\r\n-  to: string,\r\n-  roomId: string,\r\n-  offer: RTCSessionDescriptionInit\r\n-): void => {\r\n-  socket?.emit(\"room-offer\", { to, roomId, offer });\r\n-};\r\n-\r\n-export const sendRoomAnswer = (\r\n-  to: string,\r\n-  roomId: string,\r\n-  answer: RTCSessionDescriptionInit\r\n-): void => {\r\n-  socket?.emit(\"room-answer\", { to, roomId, answer });\r\n-};\r\n-\r\n-export const sendRoomIce = (\r\n-  to: string,\r\n-  roomId: string,\r\n-  candidate: RTCIceCandidateInit\r\n-): void => {\r\n-  socket?.emit(\"room-ice\", { to, roomId, candidate });\r\n-};\r\n"
                }
            ],
            "date": 1758898655460,
            "name": "Commit-0",
            "content": "import { useEffect, useRef, useState } from \"react\";\r\nimport { connectRoomSocket, disconnectRoomSocket, getRoomSocket } from \"../services/roomSocketService\";\r\n\r\nexport default function useRoomSocket() {\r\n  const [socket, setSocket] = useState<any>(null);\r\n\r\n  useEffect(() => {\r\n    connectRoomSocket();\r\n    const s = getRoomSocket();\r\n    setSocket(s);\r\n\r\n    return () => {\r\n      disconnectRoomSocket();\r\n      setSocket(null);\r\n    };\r\n  }, []);\r\n\r\n  return socket;\r\n}\r\n"
        }
    ]
}