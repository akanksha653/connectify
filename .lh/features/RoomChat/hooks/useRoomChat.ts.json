{
    "sourceFile": "features/RoomChat/hooks/useRoomChat.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1760267374577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760267429025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { useEffect, useState, useRef } from \"react\";\r\n import type { Message } from \"../utils/roomTypes\";\r\n import { useRoomSocket } from \"./useRoomSocket\";\r\n import { collection, query, orderBy, limit as fLimit, startAfter, getDocs } from \"firebase/firestore\";\r\n-import { db } from \"../../../../lib/firebaseConfig\"; // adapt path if needed\r\n+import { db } from \"@/lib/firebaseConfig\"; // adapt path if needed\r\n \r\n export function useRoomChat(roomId: string | null) {\r\n   const { sendMessage, loadMessages, on, socket } = useRoomSocket();\r\n   const [messages, setMessages] = useState<Message[]>([]);\r\n"
                },
                {
                    "date": 1760267856948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,67 +1,33 @@\n // features/RoomSystem/hooks/useRoomChat.ts\r\n-import { useEffect, useState, useRef } from \"react\";\r\n+import { useEffect, useState } from \"react\";\r\n import type { Message } from \"../utils/roomTypes\";\r\n import { useRoomSocket } from \"./useRoomSocket\";\r\n-import { collection, query, orderBy, limit as fLimit, startAfter, getDocs } from \"firebase/firestore\";\r\n-import { db } from \"@/lib/firebaseConfig\"; // adapt path if needed\r\n+import { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\r\n+import { storage } from \"../../../../lib/firebaseConfig\"; // import Storage instance\r\n \r\n-export function useRoomChat(roomId: string | null) {\r\n-  const { sendMessage, loadMessages, on, socket } = useRoomSocket();\r\n+export function useRoomChat(roomId: string) {\r\n+  const { sendMessage, socket } = useRoomSocket();\r\n   const [messages, setMessages] = useState<Message[]>([]);\r\n-  const lastDocIdRef = useRef<string | null>(null);\r\n \r\n   useEffect(() => {\r\n     if (!socket) return;\r\n-\r\n-    const recv = (msg: Message) => {\r\n-      if (msg && msg.id) setMessages((m) => [...m, msg]);\r\n-    };\r\n-\r\n+    const recv = (msg: Message) => setMessages((m) => [...m, msg]);\r\n     socket.on(\"receive-message\", recv);\r\n-\r\n-    return () => {\r\n-      socket.off(\"receive-message\", recv);\r\n-    };\r\n+    return () => socket.off(\"receive-message\", recv);\r\n   }, [socket]);\r\n \r\n-  useEffect(() => {\r\n-    setMessages([]);\r\n-    lastDocIdRef.current = null;\r\n-    if (!roomId) return;\r\n-\r\n-    // load first page via socket fallback\r\n-    socket?.emit(\"load-messages\", { roomId, limit: 50, lastMessageId: null });\r\n-    const handler = (msgs: Message[]) => {\r\n-      setMessages(msgs || []);\r\n-      if (msgs && msgs.length) lastDocIdRef.current = msgs[msgs.length - 1].id;\r\n-    };\r\n-    socket?.on(\"messages\", handler);\r\n-    return () => {\r\n-      socket?.off(\"messages\", handler);\r\n-    };\r\n-  }, [roomId, socket]);\r\n-\r\n   const send = (payload: Omit<Message, \"id\" | \"timestamp\">) => {\r\n-    if (!roomId) return;\r\n-    const msg: Partial<Message> = {\r\n-      ...payload,\r\n-      timestamp: Date.now(),\r\n-    };\r\n+    const msg: Partial<Message> = { ...payload, timestamp: Date.now() };\r\n     sendMessage(roomId, msg);\r\n-    // optimistic local add (without id) — the server will emit receive-message with id\r\n     setMessages((m) => [...m, { ...(msg as Message), id: `local-${Date.now()}` }]);\r\n   };\r\n \r\n-  const loadMore = async (pageSize = 50) => {\r\n-    if (!roomId) return;\r\n-\r\n-    // Prefer server socket pagination because messages are stored in subcollection.\r\n-    socket?.emit(\"load-messages\", { roomId, limit: pageSize, lastMessageId: lastDocIdRef.current });\r\n+  const sendFile = async (file: File, senderName: string) => {\r\n+    const storageRef = ref(storage, `rooms/${roomId}/${Date.now()}_${file.name}`);\r\n+    await uploadBytes(storageRef, file);\r\n+    const url = await getDownloadURL(storageRef);\r\n+    send({ senderId: \"me\", senderName, content: url, type: \"file\", fileName: file.name });\r\n   };\r\n \r\n-  return {\r\n-    messages,\r\n-    send,\r\n-    loadMore,\r\n-  };\r\n+  return { messages, send, sendFile };\r\n }\r\n"
                },
                {
                    "date": 1760267892118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,33 +1,67 @@\n // features/RoomSystem/hooks/useRoomChat.ts\r\n-import { useEffect, useState } from \"react\";\r\n+import { useEffect, useState, useRef } from \"react\";\r\n import type { Message } from \"../utils/roomTypes\";\r\n import { useRoomSocket } from \"./useRoomSocket\";\r\n-import { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\r\n-import { storage } from \"../../../../lib/firebaseConfig\"; // import Storage instance\r\n+import { collection, query, orderBy, limit as fLimit, startAfter, getDocs } from \"firebase/firestore\";\r\n+import { db } from \"@/lib/firebaseConfig\"; // adapt path if needed\r\n \r\n-export function useRoomChat(roomId: string) {\r\n-  const { sendMessage, socket } = useRoomSocket();\r\n+export function useRoomChat(roomId: string | null) {\r\n+  const { sendMessage, loadMessages, on, socket } = useRoomSocket();\r\n   const [messages, setMessages] = useState<Message[]>([]);\r\n+  const lastDocIdRef = useRef<string | null>(null);\r\n \r\n   useEffect(() => {\r\n     if (!socket) return;\r\n-    const recv = (msg: Message) => setMessages((m) => [...m, msg]);\r\n+\r\n+    const recv = (msg: Message) => {\r\n+      if (msg && msg.id) setMessages((m) => [...m, msg]);\r\n+    };\r\n+\r\n     socket.on(\"receive-message\", recv);\r\n-    return () => socket.off(\"receive-message\", recv);\r\n+\r\n+    return () => {\r\n+      socket.off(\"receive-message\", recv);\r\n+    };\r\n   }, [socket]);\r\n \r\n+  useEffect(() => {\r\n+    setMessages([]);\r\n+    lastDocIdRef.current = null;\r\n+    if (!roomId) return;\r\n+\r\n+    // load first page via socket fallback\r\n+    socket?.emit(\"load-messages\", { roomId, limit: 50, lastMessageId: null });\r\n+    const handler = (msgs: Message[]) => {\r\n+      setMessages(msgs || []);\r\n+      if (msgs && msgs.length) lastDocIdRef.current = msgs[msgs.length - 1].id;\r\n+    };\r\n+    socket?.on(\"messages\", handler);\r\n+    return () => {\r\n+      socket?.off(\"messages\", handler);\r\n+    };\r\n+  }, [roomId, socket]);\r\n+\r\n   const send = (payload: Omit<Message, \"id\" | \"timestamp\">) => {\r\n-    const msg: Partial<Message> = { ...payload, timestamp: Date.now() };\r\n+    if (!roomId) return;\r\n+    const msg: Partial<Message> = {\r\n+      ...payload,\r\n+      timestamp: Date.now(),\r\n+    };\r\n     sendMessage(roomId, msg);\r\n+    // optimistic local add (without id) — the server will emit receive-message with id\r\n     setMessages((m) => [...m, { ...(msg as Message), id: `local-${Date.now()}` }]);\r\n   };\r\n \r\n-  const sendFile = async (file: File, senderName: string) => {\r\n-    const storageRef = ref(storage, `rooms/${roomId}/${Date.now()}_${file.name}`);\r\n-    await uploadBytes(storageRef, file);\r\n-    const url = await getDownloadURL(storageRef);\r\n-    send({ senderId: \"me\", senderName, content: url, type: \"file\", fileName: file.name });\r\n+  const loadMore = async (pageSize = 50) => {\r\n+    if (!roomId) return;\r\n+\r\n+    // Prefer server socket pagination because messages are stored in subcollection.\r\n+    socket?.emit(\"load-messages\", { roomId, limit: pageSize, lastMessageId: lastDocIdRef.current });\r\n   };\r\n \r\n-  return { messages, send, sendFile };\r\n+  return {\r\n+    messages,\r\n+    send,\r\n+    loadMore,\r\n+  };\r\n }\r\n"
                },
                {
                    "date": 1760268118617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,67 +1,33 @@\n // features/RoomSystem/hooks/useRoomChat.ts\r\n-import { useEffect, useState, useRef } from \"react\";\r\n+import { useEffect, useState } from \"react\";\r\n import type { Message } from \"../utils/roomTypes\";\r\n import { useRoomSocket } from \"./useRoomSocket\";\r\n-import { collection, query, orderBy, limit as fLimit, startAfter, getDocs } from \"firebase/firestore\";\r\n-import { db } from \"@/lib/firebaseConfig\"; // adapt path if needed\r\n+import { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\r\n+import { storage } from \"@/lib/firebaseConfig\"; // import Storage instance\r\n \r\n-export function useRoomChat(roomId: string | null) {\r\n-  const { sendMessage, loadMessages, on, socket } = useRoomSocket();\r\n+export function useRoomChat(roomId: string) {\r\n+  const { sendMessage, socket } = useRoomSocket();\r\n   const [messages, setMessages] = useState<Message[]>([]);\r\n-  const lastDocIdRef = useRef<string | null>(null);\r\n \r\n   useEffect(() => {\r\n     if (!socket) return;\r\n-\r\n-    const recv = (msg: Message) => {\r\n-      if (msg && msg.id) setMessages((m) => [...m, msg]);\r\n-    };\r\n-\r\n+    const recv = (msg: Message) => setMessages((m) => [...m, msg]);\r\n     socket.on(\"receive-message\", recv);\r\n-\r\n-    return () => {\r\n-      socket.off(\"receive-message\", recv);\r\n-    };\r\n+    return () => socket.off(\"receive-message\", recv);\r\n   }, [socket]);\r\n \r\n-  useEffect(() => {\r\n-    setMessages([]);\r\n-    lastDocIdRef.current = null;\r\n-    if (!roomId) return;\r\n-\r\n-    // load first page via socket fallback\r\n-    socket?.emit(\"load-messages\", { roomId, limit: 50, lastMessageId: null });\r\n-    const handler = (msgs: Message[]) => {\r\n-      setMessages(msgs || []);\r\n-      if (msgs && msgs.length) lastDocIdRef.current = msgs[msgs.length - 1].id;\r\n-    };\r\n-    socket?.on(\"messages\", handler);\r\n-    return () => {\r\n-      socket?.off(\"messages\", handler);\r\n-    };\r\n-  }, [roomId, socket]);\r\n-\r\n   const send = (payload: Omit<Message, \"id\" | \"timestamp\">) => {\r\n-    if (!roomId) return;\r\n-    const msg: Partial<Message> = {\r\n-      ...payload,\r\n-      timestamp: Date.now(),\r\n-    };\r\n+    const msg: Partial<Message> = { ...payload, timestamp: Date.now() };\r\n     sendMessage(roomId, msg);\r\n-    // optimistic local add (without id) — the server will emit receive-message with id\r\n     setMessages((m) => [...m, { ...(msg as Message), id: `local-${Date.now()}` }]);\r\n   };\r\n \r\n-  const loadMore = async (pageSize = 50) => {\r\n-    if (!roomId) return;\r\n-\r\n-    // Prefer server socket pagination because messages are stored in subcollection.\r\n-    socket?.emit(\"load-messages\", { roomId, limit: pageSize, lastMessageId: lastDocIdRef.current });\r\n+  const sendFile = async (file: File, senderName: string) => {\r\n+    const storageRef = ref(storage, `rooms/${roomId}/${Date.now()}_${file.name}`);\r\n+    await uploadBytes(storageRef, file);\r\n+    const url = await getDownloadURL(storageRef);\r\n+    send({ senderId: \"me\", senderName, content: url, type: \"file\", fileName: file.name });\r\n   };\r\n \r\n-  return {\r\n-    messages,\r\n-    send,\r\n-    loadMore,\r\n-  };\r\n+  return { messages, send, sendFile };\r\n }\r\n"
                },
                {
                    "date": 1760268525568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,33 +1,51 @@\n-// features/RoomSystem/hooks/useRoomChat.ts\r\n-import { useEffect, useState } from \"react\";\r\n-import type { Message } from \"../utils/roomTypes\";\r\n-import { useRoomSocket } from \"./useRoomSocket\";\r\n-import { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\r\n-import { storage } from \"@/lib/firebaseConfig\"; // import Storage instance\r\n+// features/RoomSystem/hooks/useRoomSocket.ts\r\n+import { useEffect, useState, useRef } from \"react\";\r\n+import { io, Socket } from \"socket.io-client\";\r\n+import type { RoomEvents } from \"../utils/roomEvents\";\r\n \r\n-export function useRoomChat(roomId: string) {\r\n-  const { sendMessage, socket } = useRoomSocket();\r\n-  const [messages, setMessages] = useState<Message[]>([]);\r\n+const ROOM_SERVER_URL = process.env.NEXT_PUBLIC_ROOM_SERVER_URL || \"http://localhost:3001/rooms\";\r\n \r\n+export function useRoomSocket() {\r\n+  const [socket, setSocket] = useState<Socket | null>(null);\r\n+  const socketRef = useRef<Socket | null>(null);\r\n+\r\n   useEffect(() => {\r\n-    if (!socket) return;\r\n-    const recv = (msg: Message) => setMessages((m) => [...m, msg]);\r\n-    socket.on(\"receive-message\", recv);\r\n-    return () => socket.off(\"receive-message\", recv);\r\n-  }, [socket]);\r\n+    if (!socketRef.current) {\r\n+      const s = io(ROOM_SERVER_URL);\r\n+      socketRef.current = s;\r\n+      setSocket(s);\r\n \r\n-  const send = (payload: Omit<Message, \"id\" | \"timestamp\">) => {\r\n-    const msg: Partial<Message> = { ...payload, timestamp: Date.now() };\r\n-    sendMessage(roomId, msg);\r\n-    setMessages((m) => [...m, { ...(msg as Message), id: `local-${Date.now()}` }]);\r\n+      s.on(\"connect\", () => console.log(\"✅ Connected to room server:\", s.id));\r\n+      s.on(\"disconnect\", (reason) => console.log(\"❌ Disconnected from room server:\", reason));\r\n+    }\r\n+\r\n+    return () => {\r\n+      if (socketRef.current) {\r\n+        socketRef.current.disconnect();\r\n+        socketRef.current = null;\r\n+      }\r\n+    };\r\n+  }, []);\r\n+\r\n+  const sendMessage = (roomId: string, message: any) => {\r\n+    if (!socketRef.current) return;\r\n+    socketRef.current.emit(\"send-message\", { roomId, message });\r\n   };\r\n \r\n-  const sendFile = async (file: File, senderName: string) => {\r\n-    const storageRef = ref(storage, `rooms/${roomId}/${Date.now()}_${file.name}`);\r\n-    await uploadBytes(storageRef, file);\r\n-    const url = await getDownloadURL(storageRef);\r\n-    send({ senderId: \"me\", senderName, content: url, type: \"file\", fileName: file.name });\r\n+  const joinRoom = (roomId: string, user: any) => {\r\n+    if (!socketRef.current) return;\r\n+    socketRef.current.emit(\"join-room\", { roomId, user });\r\n   };\r\n \r\n-  return { messages, send, sendFile };\r\n+  const leaveRoom = (roomId: string) => {\r\n+    if (!socketRef.current) return;\r\n+    socketRef.current.emit(\"leave-room\", { roomId });\r\n+  };\r\n+\r\n+  return {\r\n+    socket,\r\n+    sendMessage,\r\n+    joinRoom,\r\n+    leaveRoom,\r\n+  };\r\n }\r\n"
                },
                {
                    "date": 1760268808289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,51 +1,33 @@\n-// features/RoomSystem/hooks/useRoomSocket.ts\r\n-import { useEffect, useState, useRef } from \"react\";\r\n-import { io, Socket } from \"socket.io-client\";\r\n-import type { RoomEvents } from \"../utils/roomEvents\";\r\n+// features/RoomSystem/hooks/useRoomChat.ts\r\n+import { useEffect, useState } from \"react\";\r\n+import type { Message } from \"../utils/roomTypes\";\r\n+import { useRoomSocket } from \"./useRoomSocket\";\r\n+import { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\r\n+import { storage } from \"@/lib/firebaseConfig\"; // import Storage instance\r\n \r\n-const ROOM_SERVER_URL = process.env.NEXT_PUBLIC_ROOM_SERVER_URL || \"http://localhost:3001/rooms\";\r\n+export function useRoomChat(roomId: string) {\r\n+  const { sendMessage, socket } = useRoomSocket();\r\n+  const [messages, setMessages] = useState<Message[]>([]);\r\n \r\n-export function useRoomSocket() {\r\n-  const [socket, setSocket] = useState<Socket | null>(null);\r\n-  const socketRef = useRef<Socket | null>(null);\r\n-\r\n   useEffect(() => {\r\n-    if (!socketRef.current) {\r\n-      const s = io(ROOM_SERVER_URL);\r\n-      socketRef.current = s;\r\n-      setSocket(s);\r\n+    if (!socket) return;\r\n+    const recv = (msg: Message) => setMessages((m) => [...m, msg]);\r\n+    socket.on(\"receive-message\", recv);\r\n+    return () => socket.off(\"receive-message\", recv);\r\n+  }, [socket]);\r\n \r\n-      s.on(\"connect\", () => console.log(\"✅ Connected to room server:\", s.id));\r\n-      s.on(\"disconnect\", (reason) => console.log(\"❌ Disconnected from room server:\", reason));\r\n-    }\r\n-\r\n-    return () => {\r\n-      if (socketRef.current) {\r\n-        socketRef.current.disconnect();\r\n-        socketRef.current = null;\r\n-      }\r\n-    };\r\n-  }, []);\r\n-\r\n-  const sendMessage = (roomId: string, message: any) => {\r\n-    if (!socketRef.current) return;\r\n-    socketRef.current.emit(\"send-message\", { roomId, message });\r\n+  const send = (payload: Omit<Message, \"id\" | \"timestamp\">) => {\r\n+    const msg: Partial<Message> = { ...payload, timestamp: Date.now() };\r\n+    sendMessage(roomId, msg);\r\n+    setMessages((m) => [...m, { ...(msg as Message), id: `local-${Date.now()}` }]);\r\n   };\r\n \r\n-  const joinRoom = (roomId: string, user: any) => {\r\n-    if (!socketRef.current) return;\r\n-    socketRef.current.emit(\"join-room\", { roomId, user });\r\n+  const sendFile = async (file: File, senderName: string) => {\r\n+    const storageRef = ref(storage, `rooms/${roomId}/${Date.now()}_${file.name}`);\r\n+    await uploadBytes(storageRef, file);\r\n+    const url = await getDownloadURL(storageRef);\r\n+    send({ senderId: \"me\", senderName, content: url, type: \"file\", fileName: file.name });\r\n   };\r\n \r\n-  const leaveRoom = (roomId: string) => {\r\n-    if (!socketRef.current) return;\r\n-    socketRef.current.emit(\"leave-room\", { roomId });\r\n-  };\r\n-\r\n-  return {\r\n-    socket,\r\n-    sendMessage,\r\n-    joinRoom,\r\n-    leaveRoom,\r\n-  };\r\n+  return { messages, send, sendFile };\r\n }\r\n"
                },
                {
                    "date": 1760268850138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,32 +2,49 @@\n import { useEffect, useState } from \"react\";\r\n import type { Message } from \"../utils/roomTypes\";\r\n import { useRoomSocket } from \"./useRoomSocket\";\r\n import { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\r\n-import { storage } from \"@/lib/firebaseConfig\"; // import Storage instance\r\n+import { storage } from \"@/lib/firebaseConfig\"; // Firebase storage instance\r\n \r\n export function useRoomChat(roomId: string) {\r\n-  const { sendMessage, socket } = useRoomSocket();\r\n+  const { socket, sendMessage } = useRoomSocket(); // ✅ socket and sendMessage are available now\r\n   const [messages, setMessages] = useState<Message[]>([]);\r\n \r\n+  // Listen to incoming messages\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n-    const recv = (msg: Message) => setMessages((m) => [...m, msg]);\r\n+\r\n+    const recv = (msg: Message) => {\r\n+      setMessages((prev) => [...prev, msg]);\r\n+    };\r\n+\r\n     socket.on(\"receive-message\", recv);\r\n-    return () => socket.off(\"receive-message\", recv);\r\n+\r\n+    return () => {\r\n+      socket.off(\"receive-message\", recv);\r\n+    };\r\n   }, [socket]);\r\n \r\n+  // Send text message\r\n   const send = (payload: Omit<Message, \"id\" | \"timestamp\">) => {\r\n     const msg: Partial<Message> = { ...payload, timestamp: Date.now() };\r\n     sendMessage(roomId, msg);\r\n-    setMessages((m) => [...m, { ...(msg as Message), id: `local-${Date.now()}` }]);\r\n+    setMessages((prev) => [...prev, { ...(msg as Message), id: `local-${Date.now()}` }]);\r\n   };\r\n \r\n+  // Send file message\r\n   const sendFile = async (file: File, senderName: string) => {\r\n     const storageRef = ref(storage, `rooms/${roomId}/${Date.now()}_${file.name}`);\r\n     await uploadBytes(storageRef, file);\r\n     const url = await getDownloadURL(storageRef);\r\n-    send({ senderId: \"me\", senderName, content: url, type: \"file\", fileName: file.name });\r\n+\r\n+    send({\r\n+      senderId: \"me\",\r\n+      senderName,\r\n+      content: url,\r\n+      type: \"file\",\r\n+      fileName: file.name,\r\n+    });\r\n   };\r\n \r\n   return { messages, send, sendFile };\r\n }\r\n"
                }
            ],
            "date": 1760267374577,
            "name": "Commit-0",
            "content": "// features/RoomSystem/hooks/useRoomChat.ts\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport type { Message } from \"../utils/roomTypes\";\r\nimport { useRoomSocket } from \"./useRoomSocket\";\r\nimport { collection, query, orderBy, limit as fLimit, startAfter, getDocs } from \"firebase/firestore\";\r\nimport { db } from \"../../../../lib/firebaseConfig\"; // adapt path if needed\r\n\r\nexport function useRoomChat(roomId: string | null) {\r\n  const { sendMessage, loadMessages, on, socket } = useRoomSocket();\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const lastDocIdRef = useRef<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n\r\n    const recv = (msg: Message) => {\r\n      if (msg && msg.id) setMessages((m) => [...m, msg]);\r\n    };\r\n\r\n    socket.on(\"receive-message\", recv);\r\n\r\n    return () => {\r\n      socket.off(\"receive-message\", recv);\r\n    };\r\n  }, [socket]);\r\n\r\n  useEffect(() => {\r\n    setMessages([]);\r\n    lastDocIdRef.current = null;\r\n    if (!roomId) return;\r\n\r\n    // load first page via socket fallback\r\n    socket?.emit(\"load-messages\", { roomId, limit: 50, lastMessageId: null });\r\n    const handler = (msgs: Message[]) => {\r\n      setMessages(msgs || []);\r\n      if (msgs && msgs.length) lastDocIdRef.current = msgs[msgs.length - 1].id;\r\n    };\r\n    socket?.on(\"messages\", handler);\r\n    return () => {\r\n      socket?.off(\"messages\", handler);\r\n    };\r\n  }, [roomId, socket]);\r\n\r\n  const send = (payload: Omit<Message, \"id\" | \"timestamp\">) => {\r\n    if (!roomId) return;\r\n    const msg: Partial<Message> = {\r\n      ...payload,\r\n      timestamp: Date.now(),\r\n    };\r\n    sendMessage(roomId, msg);\r\n    // optimistic local add (without id) — the server will emit receive-message with id\r\n    setMessages((m) => [...m, { ...(msg as Message), id: `local-${Date.now()}` }]);\r\n  };\r\n\r\n  const loadMore = async (pageSize = 50) => {\r\n    if (!roomId) return;\r\n\r\n    // Prefer server socket pagination because messages are stored in subcollection.\r\n    socket?.emit(\"load-messages\", { roomId, limit: pageSize, lastMessageId: lastDocIdRef.current });\r\n  };\r\n\r\n  return {\r\n    messages,\r\n    send,\r\n    loadMore,\r\n  };\r\n}\r\n"
        }
    ]
}