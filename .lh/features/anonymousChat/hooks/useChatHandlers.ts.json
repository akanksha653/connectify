{
    "sourceFile": "features/anonymousChat/hooks/useChatHandlers.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1752664929722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753191021782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n   setLastAction,\r\n }: HandlersProps) {\r\n   const handleMatched = useCallback(\r\n     ({ roomId, isOfferer, partnerInfo }: any) => {\r\n+      console.log(\"✅ handleMatched received:\", { roomId, isOfferer, partnerInfo });\r\n       setRoomId(roomId);\r\n       setIsOfferer(isOfferer);\r\n       setPartnerInfo(partnerInfo);\r\n       setLoading(false);\r\n"
                },
                {
                    "date": 1758996070982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,19 @@\n import { useEffect, useCallback } from \"react\";\r\n \r\n+interface PartnerInfo {\r\n+  name: string;\r\n+  age: number;\r\n+  gender?: string;\r\n+  country?: string;\r\n+}\r\n+\r\n interface HandlersProps {\r\n-  socket: any;\r\n+  socket: any; // socket.io client\r\n   playSound: (type: \"match\" | \"leave\") => void;\r\n   setRoomId: (id: string | null) => void;\r\n   setIsOfferer: (val: boolean | null) => void;\r\n-  setPartnerInfo: (val: any) => void;\r\n+  setPartnerInfo: (val: PartnerInfo | null) => void;\r\n   setLoading: (val: boolean) => void;\r\n   setSessionStarted: (val: boolean) => void;\r\n   setLastAction: (val: \"skipped\" | \"left\" | null) => void;\r\n }\r\n@@ -21,28 +28,29 @@\n   setSessionStarted,\r\n   setLastAction,\r\n }: HandlersProps) {\r\n   const handleMatched = useCallback(\r\n-    ({ roomId, isOfferer, partnerInfo }: any) => {\r\n-      console.log(\"✅ handleMatched received:\", { roomId, isOfferer, partnerInfo });\r\n+    ({ roomId, isOfferer, partnerInfo }: { roomId: string; isOfferer: boolean; partnerInfo: PartnerInfo }) => {\r\n+      console.log(\"✅ Matched:\", { roomId, isOfferer, partnerInfo });\r\n       setRoomId(roomId);\r\n       setIsOfferer(isOfferer);\r\n       setPartnerInfo(partnerInfo);\r\n       setLoading(false);\r\n       setLastAction(null);\r\n       playSound(\"match\");\r\n     },\r\n-    [playSound]\r\n+    [playSound, setRoomId, setIsOfferer, setPartnerInfo, setLoading, setLastAction]\r\n   );\r\n \r\n   const handlePartnerLeft = useCallback(() => {\r\n     setRoomId(null);\r\n     setIsOfferer(null);\r\n     setSessionStarted(false);\r\n     setLoading(false);\r\n     setLastAction(\"left\");\r\n+    setPartnerInfo(null);\r\n     playSound(\"leave\");\r\n-  }, [playSound]);\r\n+  }, [playSound, setRoomId, setIsOfferer, setSessionStarted, setLoading, setLastAction, setPartnerInfo]);\r\n \r\n   useEffect(() => {\r\n     if (!socket) return;\r\n     socket.on(\"matched\", handleMatched);\r\n@@ -67,9 +75,9 @@\n     return () => {\r\n       socket.off(\"disconnect\", handleDisconnect);\r\n       socket.off(\"connect\", handleConnect);\r\n     };\r\n-  }, [socket]);\r\n+  }, [socket, setLoading, setSessionStarted]);\r\n \r\n   useEffect(() => {\r\n     return () => {\r\n       if (socket) {\r\n"
                },
                {
                    "date": 1758997003296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,13 @@\n import { useEffect, useCallback } from \"react\";\r\n \r\n interface PartnerInfo {\r\n+  uid?: string;\r\n   name: string;\r\n-  age: number;\r\n+  age: string; // must match UserInfo\r\n   gender?: string;\r\n   country?: string;\r\n+  email?: string;\r\n }\r\n \r\n interface HandlersProps {\r\n   socket: any; // socket.io client\r\n"
                },
                {
                    "date": 1758997184701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,13 @@\n import { useEffect, useCallback } from \"react\";\r\n+import { UserInfo } from \"../pages/anonymous/AnonymousChatRoom\"; // import the shared type\r\n \r\n-interface PartnerInfo {\r\n-  uid?: string;\r\n-  name: string;\r\n-  age: string; // must match UserInfo\r\n-  gender?: string;\r\n-  country?: string;\r\n-  email?: string;\r\n-}\r\n-\r\n interface HandlersProps {\r\n   socket: any; // socket.io client\r\n   playSound: (type: \"match\" | \"leave\") => void;\r\n   setRoomId: (id: string | null) => void;\r\n   setIsOfferer: (val: boolean | null) => void;\r\n-  setPartnerInfo: (val: PartnerInfo | null) => void;\r\n+  setPartnerInfo: (val: UserInfo | null) => void; // use UserInfo\r\n   setLoading: (val: boolean) => void;\r\n   setSessionStarted: (val: boolean) => void;\r\n   setLastAction: (val: \"skipped\" | \"left\" | null) => void;\r\n }\r\n@@ -30,9 +22,17 @@\n   setSessionStarted,\r\n   setLastAction,\r\n }: HandlersProps) {\r\n   const handleMatched = useCallback(\r\n-    ({ roomId, isOfferer, partnerInfo }: { roomId: string; isOfferer: boolean; partnerInfo: PartnerInfo }) => {\r\n+    ({\r\n+      roomId,\r\n+      isOfferer,\r\n+      partnerInfo,\r\n+    }: {\r\n+      roomId: string;\r\n+      isOfferer: boolean;\r\n+      partnerInfo: UserInfo; // use UserInfo\r\n+    }) => {\r\n       console.log(\"✅ Matched:\", { roomId, isOfferer, partnerInfo });\r\n       setRoomId(roomId);\r\n       setIsOfferer(isOfferer);\r\n       setPartnerInfo(partnerInfo);\r\n@@ -50,9 +50,17 @@\n     setLoading(false);\r\n     setLastAction(\"left\");\r\n     setPartnerInfo(null);\r\n     playSound(\"leave\");\r\n-  }, [playSound, setRoomId, setIsOfferer, setSessionStarted, setLoading, setLastAction, setPartnerInfo]);\r\n+  }, [\r\n+    playSound,\r\n+    setRoomId,\r\n+    setIsOfferer,\r\n+    setSessionStarted,\r\n+    setLoading,\r\n+    setLastAction,\r\n+    setPartnerInfo,\r\n+  ]);\r\n \r\n   useEffect(() => {\r\n     if (!socket) return;\r\n     socket.on(\"matched\", handleMatched);\r\n"
                },
                {
                    "date": 1758997207901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { useEffect, useCallback } from \"react\";\r\n-import { UserInfo } from \"../pages/anonymous/AnonymousChatRoom\"; // import the shared type\r\n+import { UserInfo } from \"\"; // import the shared type\r\n \r\n interface HandlersProps {\r\n   socket: any; // socket.io client\r\n   playSound: (type: \"match\" | \"leave\") => void;\r\n"
                },
                {
                    "date": 1759331599674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import { useEffect, useCallback } from \"react\";\r\n-import { UserInfo } from \"\"; // import the shared type\r\n-\r\n+import { UserInfo } from \"@/types/user\";\r\n interface HandlersProps {\r\n   socket: any; // socket.io client\r\n   playSound: (type: \"match\" | \"leave\") => void;\r\n   setRoomId: (id: string | null) => void;\r\n"
                },
                {
                    "date": 1759974849116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,97 +1,31 @@\n-import { useEffect, useCallback } from \"react\";\r\n-import { UserInfo } from \"@/types/user\";\r\n-interface HandlersProps {\r\n-  socket: any; // socket.io client\r\n-  playSound: (type: \"match\" | \"leave\") => void;\r\n-  setRoomId: (id: string | null) => void;\r\n-  setIsOfferer: (val: boolean | null) => void;\r\n-  setPartnerInfo: (val: UserInfo | null) => void; // use UserInfo\r\n-  setLoading: (val: boolean) => void;\r\n-  setSessionStarted: (val: boolean) => void;\r\n-  setLastAction: (val: \"skipped\" | \"left\" | null) => void;\r\n-}\r\n+const handleMatched = useCallback(\r\n+  (data: any) => {\r\n+    console.log(\"✅ Matched:\", data);\r\n \r\n-export function useChatHandlers({\r\n-  socket,\r\n-  playSound,\r\n-  setRoomId,\r\n-  setIsOfferer,\r\n-  setPartnerInfo,\r\n-  setLoading,\r\n-  setSessionStarted,\r\n-  setLastAction,\r\n-}: HandlersProps) {\r\n-  const handleMatched = useCallback(\r\n-    ({\r\n+    const {\r\n       roomId,\r\n       isOfferer,\r\n-      partnerInfo,\r\n-    }: {\r\n-      roomId: string;\r\n-      isOfferer: boolean;\r\n-      partnerInfo: UserInfo; // use UserInfo\r\n-    }) => {\r\n-      console.log(\"✅ Matched:\", { roomId, isOfferer, partnerInfo });\r\n-      setRoomId(roomId);\r\n-      setIsOfferer(isOfferer);\r\n-      setPartnerInfo(partnerInfo);\r\n-      setLoading(false);\r\n-      setLastAction(null);\r\n-      playSound(\"match\");\r\n-    },\r\n-    [playSound, setRoomId, setIsOfferer, setPartnerInfo, setLoading, setLastAction]\r\n-  );\r\n+      partnerId,\r\n+      partnerName,\r\n+      partnerAge,\r\n+      partnerCountry,\r\n+    } = data;\r\n \r\n-  const handlePartnerLeft = useCallback(() => {\r\n-    setRoomId(null);\r\n-    setIsOfferer(null);\r\n-    setSessionStarted(false);\r\n-    setLoading(false);\r\n-    setLastAction(\"left\");\r\n-    setPartnerInfo(null);\r\n-    playSound(\"leave\");\r\n-  }, [\r\n-    playSound,\r\n-    setRoomId,\r\n-    setIsOfferer,\r\n-    setSessionStarted,\r\n-    setLoading,\r\n-    setLastAction,\r\n-    setPartnerInfo,\r\n-  ]);\r\n+    setRoomId(roomId);\r\n+    setIsOfferer(isOfferer);\r\n \r\n-  useEffect(() => {\r\n-    if (!socket) return;\r\n-    socket.on(\"matched\", handleMatched);\r\n-    socket.on(\"partner-left\", handlePartnerLeft);\r\n-    return () => {\r\n-      socket.off(\"matched\", handleMatched);\r\n-      socket.off(\"partner-left\", handlePartnerLeft);\r\n-    };\r\n-  }, [socket, handleMatched, handlePartnerLeft]);\r\n+    setPartnerInfo({\r\n+      uid: partnerId,\r\n+      name: partnerName || \"Stranger\",\r\n+      age: partnerAge || \"\",\r\n+      gender: \"\", // optional if not sent\r\n+      country: partnerCountry || \"\",\r\n+      email: \"\",\r\n+    });\r\n \r\n-  useEffect(() => {\r\n-    if (!socket) return;\r\n-    const handleDisconnect = () => {\r\n-      setLoading(false);\r\n-      setSessionStarted(false);\r\n-    };\r\n-    const handleConnect = () => {\r\n-      console.log(\"Connected to socket:\", socket.id);\r\n-    };\r\n-    socket.on(\"disconnect\", handleDisconnect);\r\n-    socket.on(\"connect\", handleConnect);\r\n-    return () => {\r\n-      socket.off(\"disconnect\", handleDisconnect);\r\n-      socket.off(\"connect\", handleConnect);\r\n-    };\r\n-  }, [socket, setLoading, setSessionStarted]);\r\n-\r\n-  useEffect(() => {\r\n-    return () => {\r\n-      if (socket) {\r\n-        socket.emit(\"leave-room\");\r\n-      }\r\n-    };\r\n-  }, [socket]);\r\n-}\r\n+    setLoading(false);\r\n+    setLastAction(null);\r\n+    playSound(\"match\");\r\n+  },\r\n+  [playSound, setRoomId, setIsOfferer, setPartnerInfo, setLoading, setLastAction]\r\n+);\r\n"
                },
                {
                    "date": 1759974855165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,31 +1,97 @@\n-const handleMatched = useCallback(\r\n-  (data: any) => {\r\n-    console.log(\"✅ Matched:\", data);\r\n+import { useEffect, useCallback } from \"react\";\r\n+import { UserInfo } from \"@/types/user\";\r\n+interface HandlersProps {\r\n+  socket: any; // socket.io client\r\n+  playSound: (type: \"match\" | \"leave\") => void;\r\n+  setRoomId: (id: string | null) => void;\r\n+  setIsOfferer: (val: boolean | null) => void;\r\n+  setPartnerInfo: (val: UserInfo | null) => void; // use UserInfo\r\n+  setLoading: (val: boolean) => void;\r\n+  setSessionStarted: (val: boolean) => void;\r\n+  setLastAction: (val: \"skipped\" | \"left\" | null) => void;\r\n+}\r\n \r\n-    const {\r\n+export function useChatHandlers({\r\n+  socket,\r\n+  playSound,\r\n+  setRoomId,\r\n+  setIsOfferer,\r\n+  setPartnerInfo,\r\n+  setLoading,\r\n+  setSessionStarted,\r\n+  setLastAction,\r\n+}: HandlersProps) {\r\n+  const handleMatched = useCallback(\r\n+    ({\r\n       roomId,\r\n       isOfferer,\r\n-      partnerId,\r\n-      partnerName,\r\n-      partnerAge,\r\n-      partnerCountry,\r\n-    } = data;\r\n+      partnerInfo,\r\n+    }: {\r\n+      roomId: string;\r\n+      isOfferer: boolean;\r\n+      partnerInfo: UserInfo; // use UserInfo\r\n+    }) => {\r\n+      console.log(\"✅ Matched:\", { roomId, isOfferer, partnerInfo });\r\n+      setRoomId(roomId);\r\n+      setIsOfferer(isOfferer);\r\n+      setPartnerInfo(partnerInfo);\r\n+      setLoading(false);\r\n+      setLastAction(null);\r\n+      playSound(\"match\");\r\n+    },\r\n+    [playSound, setRoomId, setIsOfferer, setPartnerInfo, setLoading, setLastAction]\r\n+  );\r\n \r\n-    setRoomId(roomId);\r\n-    setIsOfferer(isOfferer);\r\n+  const handlePartnerLeft = useCallback(() => {\r\n+    setRoomId(null);\r\n+    setIsOfferer(null);\r\n+    setSessionStarted(false);\r\n+    setLoading(false);\r\n+    setLastAction(\"left\");\r\n+    setPartnerInfo(null);\r\n+    playSound(\"leave\");\r\n+  }, [\r\n+    playSound,\r\n+    setRoomId,\r\n+    setIsOfferer,\r\n+    setSessionStarted,\r\n+    setLoading,\r\n+    setLastAction,\r\n+    setPartnerInfo,\r\n+  ]);\r\n \r\n-    setPartnerInfo({\r\n-      uid: partnerId,\r\n-      name: partnerName || \"Stranger\",\r\n-      age: partnerAge || \"\",\r\n-      gender: \"\", // optional if not sent\r\n-      country: partnerCountry || \"\",\r\n-      email: \"\",\r\n-    });\r\n+  useEffect(() => {\r\n+    if (!socket) return;\r\n+    socket.on(\"matched\", handleMatched);\r\n+    socket.on(\"partner-left\", handlePartnerLeft);\r\n+    return () => {\r\n+      socket.off(\"matched\", handleMatched);\r\n+      socket.off(\"partner-left\", handlePartnerLeft);\r\n+    };\r\n+  }, [socket, handleMatched, handlePartnerLeft]);\r\n \r\n-    setLoading(false);\r\n-    setLastAction(null);\r\n-    playSound(\"match\");\r\n-  },\r\n-  [playSound, setRoomId, setIsOfferer, setPartnerInfo, setLoading, setLastAction]\r\n-);\r\n+  useEffect(() => {\r\n+    if (!socket) return;\r\n+    const handleDisconnect = () => {\r\n+      setLoading(false);\r\n+      setSessionStarted(false);\r\n+    };\r\n+    const handleConnect = () => {\r\n+      console.log(\"Connected to socket:\", socket.id);\r\n+    };\r\n+    socket.on(\"disconnect\", handleDisconnect);\r\n+    socket.on(\"connect\", handleConnect);\r\n+    return () => {\r\n+      socket.off(\"disconnect\", handleDisconnect);\r\n+      socket.off(\"connect\", handleConnect);\r\n+    };\r\n+  }, [socket, setLoading, setSessionStarted]);\r\n+\r\n+  useEffect(() => {\r\n+    return () => {\r\n+      if (socket) {\r\n+        socket.emit(\"leave-room\");\r\n+      }\r\n+    };\r\n+  }, [socket]);\r\n+}\r\n"
                },
                {
                    "date": 1759974904636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,14 @@\n+// features/anonymousChat/hooks/useChatHandlers.ts\r\n import { useEffect, useCallback } from \"react\";\r\n import { UserInfo } from \"@/types/user\";\r\n+\r\n interface HandlersProps {\r\n   socket: any; // socket.io client\r\n   playSound: (type: \"match\" | \"leave\") => void;\r\n   setRoomId: (id: string | null) => void;\r\n   setIsOfferer: (val: boolean | null) => void;\r\n-  setPartnerInfo: (val: UserInfo | null) => void; // use UserInfo\r\n+  setPartnerInfo: (val: UserInfo | null) => void;\r\n   setLoading: (val: boolean) => void;\r\n   setSessionStarted: (val: boolean) => void;\r\n   setLastAction: (val: \"skipped\" | \"left\" | null) => void;\r\n }\r\n@@ -20,29 +22,46 @@\n   setLoading,\r\n   setSessionStarted,\r\n   setLastAction,\r\n }: HandlersProps) {\r\n+  // ------------------------------\r\n+  // Handle match found\r\n+  // ------------------------------\r\n   const handleMatched = useCallback(\r\n-    ({\r\n-      roomId,\r\n-      isOfferer,\r\n-      partnerInfo,\r\n-    }: {\r\n-      roomId: string;\r\n-      isOfferer: boolean;\r\n-      partnerInfo: UserInfo; // use UserInfo\r\n-    }) => {\r\n-      console.log(\"✅ Matched:\", { roomId, isOfferer, partnerInfo });\r\n+    (data: any) => {\r\n+      console.log(\"✅ Matched:\", data);\r\n+\r\n+      const {\r\n+        roomId,\r\n+        isOfferer,\r\n+        partnerId,\r\n+        partnerName,\r\n+        partnerAge,\r\n+        partnerCountry,\r\n+      } = data;\r\n+\r\n       setRoomId(roomId);\r\n       setIsOfferer(isOfferer);\r\n-      setPartnerInfo(partnerInfo);\r\n+\r\n+      setPartnerInfo({\r\n+        uid: partnerId,\r\n+        name: partnerName || \"Stranger\",\r\n+        age: partnerAge || \"\",\r\n+        gender: \"\", // optional\r\n+        country: partnerCountry || \"\",\r\n+        email: \"\",\r\n+      });\r\n+\r\n       setLoading(false);\r\n       setLastAction(null);\r\n       playSound(\"match\");\r\n     },\r\n     [playSound, setRoomId, setIsOfferer, setPartnerInfo, setLoading, setLastAction]\r\n   );\r\n \r\n+  // ------------------------------\r\n+  // Handle partner left\r\n+  // ------------------------------\r\n   const handlePartnerLeft = useCallback(() => {\r\n     setRoomId(null);\r\n     setIsOfferer(null);\r\n     setSessionStarted(false);\r\n@@ -59,35 +78,54 @@\n     setLastAction,\r\n     setPartnerInfo,\r\n   ]);\r\n \r\n+  // ------------------------------\r\n+  // Socket event listeners\r\n+  // ------------------------------\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n+\r\n     socket.on(\"matched\", handleMatched);\r\n     socket.on(\"partner-left\", handlePartnerLeft);\r\n+\r\n     return () => {\r\n       socket.off(\"matched\", handleMatched);\r\n       socket.off(\"partner-left\", handlePartnerLeft);\r\n     };\r\n   }, [socket, handleMatched, handlePartnerLeft]);\r\n \r\n+  // ------------------------------\r\n+  // Connection / disconnection\r\n+  // ------------------------------\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n+\r\n     const handleDisconnect = () => {\r\n       setLoading(false);\r\n       setSessionStarted(false);\r\n+      setRoomId(null);\r\n+      setIsOfferer(null);\r\n+      setPartnerInfo(null);\r\n+      setLastAction(null);\r\n     };\r\n+\r\n     const handleConnect = () => {\r\n-      console.log(\"Connected to socket:\", socket.id);\r\n+      console.log(\"✅ Connected to socket:\", socket.id);\r\n     };\r\n+\r\n     socket.on(\"disconnect\", handleDisconnect);\r\n     socket.on(\"connect\", handleConnect);\r\n+\r\n     return () => {\r\n       socket.off(\"disconnect\", handleDisconnect);\r\n       socket.off(\"connect\", handleConnect);\r\n     };\r\n-  }, [socket, setLoading, setSessionStarted]);\r\n+  }, [socket, setLoading, setSessionStarted, setRoomId, setIsOfferer, setPartnerInfo, setLastAction]);\r\n \r\n+  // ------------------------------\r\n+  // Clean up: leave room on unmount\r\n+  // ------------------------------\r\n   useEffect(() => {\r\n     return () => {\r\n       if (socket) {\r\n         socket.emit(\"leave-room\");\r\n"
                },
                {
                    "date": 1760104669523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { useEffect, useCallback } from \"react\";\r\n import { UserInfo } from \"@/types/user\";\r\n \r\n interface HandlersProps {\r\n-  socket: any; // socket.io client\r\n+  socket: any;\r\n   playSound: (type: \"match\" | \"leave\") => void;\r\n   setRoomId: (id: string | null) => void;\r\n   setIsOfferer: (val: boolean | null) => void;\r\n   setPartnerInfo: (val: UserInfo | null) => void;\r\n@@ -23,9 +23,9 @@\n   setSessionStarted,\r\n   setLastAction,\r\n }: HandlersProps) {\r\n   // ------------------------------\r\n-  // Handle match found\r\n+  // Handle successful match\r\n   // ------------------------------\r\n   const handleMatched = useCallback(\r\n     (data: any) => {\r\n       console.log(\"✅ Matched:\", data);\r\n@@ -45,24 +45,34 @@\n       setPartnerInfo({\r\n         uid: partnerId,\r\n         name: partnerName || \"Stranger\",\r\n         age: partnerAge || \"\",\r\n-        gender: \"\", // optional\r\n+        gender: \"\",\r\n         country: partnerCountry || \"\",\r\n         email: \"\",\r\n       });\r\n \r\n       setLoading(false);\r\n+      setSessionStarted(true);\r\n       setLastAction(null);\r\n       playSound(\"match\");\r\n     },\r\n-    [playSound, setRoomId, setIsOfferer, setPartnerInfo, setLoading, setLastAction]\r\n+    [\r\n+      playSound,\r\n+      setRoomId,\r\n+      setIsOfferer,\r\n+      setPartnerInfo,\r\n+      setLoading,\r\n+      setSessionStarted,\r\n+      setLastAction,\r\n+    ]\r\n   );\r\n \r\n   // ------------------------------\r\n-  // Handle partner left\r\n+  // Handle partner leaving\r\n   // ------------------------------\r\n   const handlePartnerLeft = useCallback(() => {\r\n+    console.log(\"⚠️ Partner left the chat.\");\r\n     setRoomId(null);\r\n     setIsOfferer(null);\r\n     setSessionStarted(false);\r\n     setLoading(false);\r\n@@ -79,9 +89,9 @@\n     setPartnerInfo,\r\n   ]);\r\n \r\n   // ------------------------------\r\n-  // Socket event listeners\r\n+  // Socket event bindings\r\n   // ------------------------------\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n@@ -94,40 +104,67 @@\n     };\r\n   }, [socket, handleMatched, handlePartnerLeft]);\r\n \r\n   // ------------------------------\r\n-  // Connection / disconnection\r\n+  // Handle socket connection lifecycle\r\n   // ------------------------------\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n+    const handleConnect = () => {\r\n+      console.log(\"✅ Connected to socket:\", socket.id);\r\n+    };\r\n+\r\n     const handleDisconnect = () => {\r\n+      console.warn(\"⚠️ Socket disconnected.\");\r\n       setLoading(false);\r\n       setSessionStarted(false);\r\n       setRoomId(null);\r\n       setIsOfferer(null);\r\n       setPartnerInfo(null);\r\n       setLastAction(null);\r\n     };\r\n \r\n-    const handleConnect = () => {\r\n-      console.log(\"✅ Connected to socket:\", socket.id);\r\n-    };\r\n-\r\n+    socket.on(\"connect\", handleConnect);\r\n     socket.on(\"disconnect\", handleDisconnect);\r\n-    socket.on(\"connect\", handleConnect);\r\n \r\n     return () => {\r\n+      socket.off(\"connect\", handleConnect);\r\n       socket.off(\"disconnect\", handleDisconnect);\r\n-      socket.off(\"connect\", handleConnect);\r\n     };\r\n-  }, [socket, setLoading, setSessionStarted, setRoomId, setIsOfferer, setPartnerInfo, setLastAction]);\r\n+  }, [\r\n+    socket,\r\n+    setLoading,\r\n+    setSessionStarted,\r\n+    setRoomId,\r\n+    setIsOfferer,\r\n+    setPartnerInfo,\r\n+    setLastAction,\r\n+  ]);\r\n \r\n   // ------------------------------\r\n-  // Clean up: leave room on unmount\r\n+  // Handle page refresh or close\r\n   // ------------------------------\r\n   useEffect(() => {\r\n+    if (!socket) return;\r\n+\r\n+    const handleBeforeUnload = () => {\r\n+      // Notify partner before closing tab or refreshing\r\n+      socket.emit(\"leave-room\");\r\n+    };\r\n+\r\n+    window.addEventListener(\"beforeunload\", handleBeforeUnload);\r\n+\r\n     return () => {\r\n+      window.removeEventListener(\"beforeunload\", handleBeforeUnload);\r\n+    };\r\n+  }, [socket]);\r\n+\r\n+  // ------------------------------\r\n+  // Cleanup when component unmounts\r\n+  // ------------------------------\r\n+  useEffect(() => {\r\n+    return () => {\r\n       if (socket) {\r\n         socket.emit(\"leave-room\");\r\n       }\r\n     };\r\n"
                },
                {
                    "date": 1760113847436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n   setPartnerInfo: (val: UserInfo | null) => void;\r\n   setLoading: (val: boolean) => void;\r\n   setSessionStarted: (val: boolean) => void;\r\n   setLastAction: (val: \"skipped\" | \"left\" | null) => void;\r\n+  cleanup?: () => void; // optional: pass from useWebRTC for skip/stop\r\n }\r\n \r\n export function useChatHandlers({\r\n   socket,\r\n@@ -21,24 +22,18 @@\n   setPartnerInfo,\r\n   setLoading,\r\n   setSessionStarted,\r\n   setLastAction,\r\n+  cleanup,\r\n }: HandlersProps) {\r\n   // ------------------------------\r\n   // Handle successful match\r\n   // ------------------------------\r\n   const handleMatched = useCallback(\r\n     (data: any) => {\r\n       console.log(\"✅ Matched:\", data);\r\n \r\n-      const {\r\n-        roomId,\r\n-        isOfferer,\r\n-        partnerId,\r\n-        partnerName,\r\n-        partnerAge,\r\n-        partnerCountry,\r\n-      } = data;\r\n+      const { roomId, isOfferer, partnerId, partnerName, partnerAge, partnerCountry } = data;\r\n \r\n       setRoomId(roomId);\r\n       setIsOfferer(isOfferer);\r\n \r\n@@ -55,42 +50,46 @@\n       setSessionStarted(true);\r\n       setLastAction(null);\r\n       playSound(\"match\");\r\n     },\r\n-    [\r\n-      playSound,\r\n-      setRoomId,\r\n-      setIsOfferer,\r\n-      setPartnerInfo,\r\n-      setLoading,\r\n-      setSessionStarted,\r\n-      setLastAction,\r\n-    ]\r\n+    [playSound, setRoomId, setIsOfferer, setPartnerInfo, setLoading, setSessionStarted, setLastAction]\r\n   );\r\n \r\n   // ------------------------------\r\n   // Handle partner leaving\r\n   // ------------------------------\r\n   const handlePartnerLeft = useCallback(() => {\r\n     console.log(\"⚠️ Partner left the chat.\");\r\n+\r\n+    if (cleanup) cleanup(); // cleanup streams\r\n+\r\n     setRoomId(null);\r\n     setIsOfferer(null);\r\n     setSessionStarted(false);\r\n     setLoading(false);\r\n     setLastAction(\"left\");\r\n     setPartnerInfo(null);\r\n     playSound(\"leave\");\r\n-  }, [\r\n-    playSound,\r\n-    setRoomId,\r\n-    setIsOfferer,\r\n-    setSessionStarted,\r\n-    setLoading,\r\n-    setLastAction,\r\n-    setPartnerInfo,\r\n-  ]);\r\n+  }, [cleanup, playSound, setRoomId, setIsOfferer, setSessionStarted, setLoading, setLastAction, setPartnerInfo]);\r\n \r\n   // ------------------------------\r\n+  // Skip partner (hard skip)\r\n+  // ------------------------------\r\n+  const handleSkip = useCallback(() => {\r\n+    console.log(\"⏭ Skipping partner...\");\r\n+\r\n+    if (cleanup) cleanup(); // cleanup streams\r\n+\r\n+    setRoomId(null);\r\n+    setIsOfferer(null);\r\n+    setSessionStarted(false);\r\n+    setLoading(true); // show loading while finding next partner\r\n+    setLastAction(\"skipped\");\r\n+    setPartnerInfo(null);\r\n+    socket?.emit(\"leave-room\"); // notify server\r\n+  }, [cleanup, setRoomId, setIsOfferer, setSessionStarted, setLoading, setLastAction, setPartnerInfo, socket]);\r\n+\r\n+  // ------------------------------\r\n   // Socket event bindings\r\n   // ------------------------------\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n@@ -104,19 +103,18 @@\n     };\r\n   }, [socket, handleMatched, handlePartnerLeft]);\r\n \r\n   // ------------------------------\r\n-  // Handle socket connection lifecycle\r\n+  // Socket connection lifecycle\r\n   // ------------------------------\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n-    const handleConnect = () => {\r\n-      console.log(\"✅ Connected to socket:\", socket.id);\r\n-    };\r\n-\r\n+    const handleConnect = () => console.log(\"✅ Connected to socket:\", socket.id);\r\n     const handleDisconnect = () => {\r\n       console.warn(\"⚠️ Socket disconnected.\");\r\n+      if (cleanup) cleanup();\r\n+\r\n       setLoading(false);\r\n       setSessionStarted(false);\r\n       setRoomId(null);\r\n       setIsOfferer(null);\r\n@@ -130,43 +128,33 @@\n     return () => {\r\n       socket.off(\"connect\", handleConnect);\r\n       socket.off(\"disconnect\", handleDisconnect);\r\n     };\r\n-  }, [\r\n-    socket,\r\n-    setLoading,\r\n-    setSessionStarted,\r\n-    setRoomId,\r\n-    setIsOfferer,\r\n-    setPartnerInfo,\r\n-    setLastAction,\r\n-  ]);\r\n+  }, [socket, cleanup, setLoading, setSessionStarted, setRoomId, setIsOfferer, setPartnerInfo, setLastAction]);\r\n \r\n   // ------------------------------\r\n-  // Handle page refresh or close\r\n+  // Handle page unload (refresh/close)\r\n   // ------------------------------\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n     const handleBeforeUnload = () => {\r\n-      // Notify partner before closing tab or refreshing\r\n+      if (cleanup) cleanup();\r\n       socket.emit(\"leave-room\");\r\n     };\r\n \r\n     window.addEventListener(\"beforeunload\", handleBeforeUnload);\r\n+    return () => window.removeEventListener(\"beforeunload\", handleBeforeUnload);\r\n+  }, [socket, cleanup]);\r\n \r\n-    return () => {\r\n-      window.removeEventListener(\"beforeunload\", handleBeforeUnload);\r\n-    };\r\n-  }, [socket]);\r\n-\r\n   // ------------------------------\r\n-  // Cleanup when component unmounts\r\n+  // Cleanup on unmount\r\n   // ------------------------------\r\n   useEffect(() => {\r\n     return () => {\r\n-      if (socket) {\r\n-        socket.emit(\"leave-room\");\r\n-      }\r\n+      if (cleanup) cleanup();\r\n+      socket?.emit(\"leave-room\");\r\n     };\r\n-  }, [socket]);\r\n+  }, [socket, cleanup]);\r\n+\r\n+  return { handleSkip }; // expose skip for ControlBar\r\n }\r\n"
                },
                {
                    "date": 1760114047147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,17 +2,16 @@\n import { useEffect, useCallback } from \"react\";\r\n import { UserInfo } from \"@/types/user\";\r\n \r\n interface HandlersProps {\r\n-  socket: any;\r\n+  socket: any; // socket.io client\r\n   playSound: (type: \"match\" | \"leave\") => void;\r\n   setRoomId: (id: string | null) => void;\r\n   setIsOfferer: (val: boolean | null) => void;\r\n   setPartnerInfo: (val: UserInfo | null) => void;\r\n   setLoading: (val: boolean) => void;\r\n   setSessionStarted: (val: boolean) => void;\r\n   setLastAction: (val: \"skipped\" | \"left\" | null) => void;\r\n-  cleanup?: () => void; // optional: pass from useWebRTC for skip/stop\r\n }\r\n \r\n export function useChatHandlers({\r\n   socket,\r\n@@ -22,76 +21,68 @@\n   setPartnerInfo,\r\n   setLoading,\r\n   setSessionStarted,\r\n   setLastAction,\r\n-  cleanup,\r\n }: HandlersProps) {\r\n   // ------------------------------\r\n-  // Handle successful match\r\n+  // Handle match found\r\n   // ------------------------------\r\n   const handleMatched = useCallback(\r\n     (data: any) => {\r\n       console.log(\"✅ Matched:\", data);\r\n \r\n-      const { roomId, isOfferer, partnerId, partnerName, partnerAge, partnerCountry } = data;\r\n+      const {\r\n+        roomId,\r\n+        isOfferer,\r\n+        partnerId,\r\n+        partnerName,\r\n+        partnerAge,\r\n+        partnerCountry,\r\n+      } = data;\r\n \r\n       setRoomId(roomId);\r\n       setIsOfferer(isOfferer);\r\n \r\n       setPartnerInfo({\r\n         uid: partnerId,\r\n         name: partnerName || \"Stranger\",\r\n         age: partnerAge || \"\",\r\n-        gender: \"\",\r\n+        gender: \"\", // optional\r\n         country: partnerCountry || \"\",\r\n         email: \"\",\r\n       });\r\n \r\n       setLoading(false);\r\n-      setSessionStarted(true);\r\n       setLastAction(null);\r\n       playSound(\"match\");\r\n     },\r\n-    [playSound, setRoomId, setIsOfferer, setPartnerInfo, setLoading, setSessionStarted, setLastAction]\r\n+    [playSound, setRoomId, setIsOfferer, setPartnerInfo, setLoading, setLastAction]\r\n   );\r\n \r\n   // ------------------------------\r\n-  // Handle partner leaving\r\n+  // Handle partner left\r\n   // ------------------------------\r\n   const handlePartnerLeft = useCallback(() => {\r\n-    console.log(\"⚠️ Partner left the chat.\");\r\n-\r\n-    if (cleanup) cleanup(); // cleanup streams\r\n-\r\n     setRoomId(null);\r\n     setIsOfferer(null);\r\n     setSessionStarted(false);\r\n     setLoading(false);\r\n     setLastAction(\"left\");\r\n     setPartnerInfo(null);\r\n     playSound(\"leave\");\r\n-  }, [cleanup, playSound, setRoomId, setIsOfferer, setSessionStarted, setLoading, setLastAction, setPartnerInfo]);\r\n+  }, [\r\n+    playSound,\r\n+    setRoomId,\r\n+    setIsOfferer,\r\n+    setSessionStarted,\r\n+    setLoading,\r\n+    setLastAction,\r\n+    setPartnerInfo,\r\n+  ]);\r\n \r\n   // ------------------------------\r\n-  // Skip partner (hard skip)\r\n+  // Socket event listeners\r\n   // ------------------------------\r\n-  const handleSkip = useCallback(() => {\r\n-    console.log(\"⏭ Skipping partner...\");\r\n-\r\n-    if (cleanup) cleanup(); // cleanup streams\r\n-\r\n-    setRoomId(null);\r\n-    setIsOfferer(null);\r\n-    setSessionStarted(false);\r\n-    setLoading(true); // show loading while finding next partner\r\n-    setLastAction(\"skipped\");\r\n-    setPartnerInfo(null);\r\n-    socket?.emit(\"leave-room\"); // notify server\r\n-  }, [cleanup, setRoomId, setIsOfferer, setSessionStarted, setLoading, setLastAction, setPartnerInfo, socket]);\r\n-\r\n-  // ------------------------------\r\n-  // Socket event bindings\r\n-  // ------------------------------\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n     socket.on(\"matched\", handleMatched);\r\n@@ -103,58 +94,42 @@\n     };\r\n   }, [socket, handleMatched, handlePartnerLeft]);\r\n \r\n   // ------------------------------\r\n-  // Socket connection lifecycle\r\n+  // Connection / disconnection\r\n   // ------------------------------\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n-    const handleConnect = () => console.log(\"✅ Connected to socket:\", socket.id);\r\n     const handleDisconnect = () => {\r\n-      console.warn(\"⚠️ Socket disconnected.\");\r\n-      if (cleanup) cleanup();\r\n-\r\n       setLoading(false);\r\n       setSessionStarted(false);\r\n       setRoomId(null);\r\n       setIsOfferer(null);\r\n       setPartnerInfo(null);\r\n       setLastAction(null);\r\n     };\r\n \r\n+    const handleConnect = () => {\r\n+      console.log(\"✅ Connected to socket:\", socket.id);\r\n+    };\r\n+\r\n+    socket.on(\"disconnect\", handleDisconnect);\r\n     socket.on(\"connect\", handleConnect);\r\n-    socket.on(\"disconnect\", handleDisconnect);\r\n \r\n     return () => {\r\n+      socket.off(\"disconnect\", handleDisconnect);\r\n       socket.off(\"connect\", handleConnect);\r\n-      socket.off(\"disconnect\", handleDisconnect);\r\n     };\r\n-  }, [socket, cleanup, setLoading, setSessionStarted, setRoomId, setIsOfferer, setPartnerInfo, setLastAction]);\r\n+  }, [socket, setLoading, setSessionStarted, setRoomId, setIsOfferer, setPartnerInfo, setLastAction]);\r\n \r\n   // ------------------------------\r\n-  // Handle page unload (refresh/close)\r\n+  // Clean up: leave room on unmount\r\n   // ------------------------------\r\n   useEffect(() => {\r\n-    if (!socket) return;\r\n-\r\n-    const handleBeforeUnload = () => {\r\n-      if (cleanup) cleanup();\r\n-      socket.emit(\"leave-room\");\r\n-    };\r\n-\r\n-    window.addEventListener(\"beforeunload\", handleBeforeUnload);\r\n-    return () => window.removeEventListener(\"beforeunload\", handleBeforeUnload);\r\n-  }, [socket, cleanup]);\r\n-\r\n-  // ------------------------------\r\n-  // Cleanup on unmount\r\n-  // ------------------------------\r\n-  useEffect(() => {\r\n     return () => {\r\n-      if (cleanup) cleanup();\r\n-      socket?.emit(\"leave-room\");\r\n+      if (socket) {\r\n+        socket.emit(\"leave-room\");\r\n+      }\r\n     };\r\n-  }, [socket, cleanup]);\r\n-\r\n-  return { handleSkip }; // expose skip for ControlBar\r\n+  }, [socket]);\r\n }\r\n"
                }
            ],
            "date": 1752664929722,
            "name": "Commit-0",
            "content": "import { useEffect, useCallback } from \"react\";\r\n\r\ninterface HandlersProps {\r\n  socket: any;\r\n  playSound: (type: \"match\" | \"leave\") => void;\r\n  setRoomId: (id: string | null) => void;\r\n  setIsOfferer: (val: boolean | null) => void;\r\n  setPartnerInfo: (val: any) => void;\r\n  setLoading: (val: boolean) => void;\r\n  setSessionStarted: (val: boolean) => void;\r\n  setLastAction: (val: \"skipped\" | \"left\" | null) => void;\r\n}\r\n\r\nexport function useChatHandlers({\r\n  socket,\r\n  playSound,\r\n  setRoomId,\r\n  setIsOfferer,\r\n  setPartnerInfo,\r\n  setLoading,\r\n  setSessionStarted,\r\n  setLastAction,\r\n}: HandlersProps) {\r\n  const handleMatched = useCallback(\r\n    ({ roomId, isOfferer, partnerInfo }: any) => {\r\n      setRoomId(roomId);\r\n      setIsOfferer(isOfferer);\r\n      setPartnerInfo(partnerInfo);\r\n      setLoading(false);\r\n      setLastAction(null);\r\n      playSound(\"match\");\r\n    },\r\n    [playSound]\r\n  );\r\n\r\n  const handlePartnerLeft = useCallback(() => {\r\n    setRoomId(null);\r\n    setIsOfferer(null);\r\n    setSessionStarted(false);\r\n    setLoading(false);\r\n    setLastAction(\"left\");\r\n    playSound(\"leave\");\r\n  }, [playSound]);\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n    socket.on(\"matched\", handleMatched);\r\n    socket.on(\"partner-left\", handlePartnerLeft);\r\n    return () => {\r\n      socket.off(\"matched\", handleMatched);\r\n      socket.off(\"partner-left\", handlePartnerLeft);\r\n    };\r\n  }, [socket, handleMatched, handlePartnerLeft]);\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n    const handleDisconnect = () => {\r\n      setLoading(false);\r\n      setSessionStarted(false);\r\n    };\r\n    const handleConnect = () => {\r\n      console.log(\"Connected to socket:\", socket.id);\r\n    };\r\n    socket.on(\"disconnect\", handleDisconnect);\r\n    socket.on(\"connect\", handleConnect);\r\n    return () => {\r\n      socket.off(\"disconnect\", handleDisconnect);\r\n      socket.off(\"connect\", handleConnect);\r\n    };\r\n  }, [socket]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (socket) {\r\n        socket.emit(\"leave-room\");\r\n      }\r\n    };\r\n  }, [socket]);\r\n}\r\n"
        }
    ]
}