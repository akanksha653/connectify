{
    "sourceFile": "features/anonymousChat/hooks/useChatHandlers.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1752664929722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753191021782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n   setLastAction,\r\n }: HandlersProps) {\r\n   const handleMatched = useCallback(\r\n     ({ roomId, isOfferer, partnerInfo }: any) => {\r\n+      console.log(\"✅ handleMatched received:\", { roomId, isOfferer, partnerInfo });\r\n       setRoomId(roomId);\r\n       setIsOfferer(isOfferer);\r\n       setPartnerInfo(partnerInfo);\r\n       setLoading(false);\r\n"
                },
                {
                    "date": 1758996070982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,19 @@\n import { useEffect, useCallback } from \"react\";\r\n \r\n+interface PartnerInfo {\r\n+  name: string;\r\n+  age: number;\r\n+  gender?: string;\r\n+  country?: string;\r\n+}\r\n+\r\n interface HandlersProps {\r\n-  socket: any;\r\n+  socket: any; // socket.io client\r\n   playSound: (type: \"match\" | \"leave\") => void;\r\n   setRoomId: (id: string | null) => void;\r\n   setIsOfferer: (val: boolean | null) => void;\r\n-  setPartnerInfo: (val: any) => void;\r\n+  setPartnerInfo: (val: PartnerInfo | null) => void;\r\n   setLoading: (val: boolean) => void;\r\n   setSessionStarted: (val: boolean) => void;\r\n   setLastAction: (val: \"skipped\" | \"left\" | null) => void;\r\n }\r\n@@ -21,28 +28,29 @@\n   setSessionStarted,\r\n   setLastAction,\r\n }: HandlersProps) {\r\n   const handleMatched = useCallback(\r\n-    ({ roomId, isOfferer, partnerInfo }: any) => {\r\n-      console.log(\"✅ handleMatched received:\", { roomId, isOfferer, partnerInfo });\r\n+    ({ roomId, isOfferer, partnerInfo }: { roomId: string; isOfferer: boolean; partnerInfo: PartnerInfo }) => {\r\n+      console.log(\"✅ Matched:\", { roomId, isOfferer, partnerInfo });\r\n       setRoomId(roomId);\r\n       setIsOfferer(isOfferer);\r\n       setPartnerInfo(partnerInfo);\r\n       setLoading(false);\r\n       setLastAction(null);\r\n       playSound(\"match\");\r\n     },\r\n-    [playSound]\r\n+    [playSound, setRoomId, setIsOfferer, setPartnerInfo, setLoading, setLastAction]\r\n   );\r\n \r\n   const handlePartnerLeft = useCallback(() => {\r\n     setRoomId(null);\r\n     setIsOfferer(null);\r\n     setSessionStarted(false);\r\n     setLoading(false);\r\n     setLastAction(\"left\");\r\n+    setPartnerInfo(null);\r\n     playSound(\"leave\");\r\n-  }, [playSound]);\r\n+  }, [playSound, setRoomId, setIsOfferer, setSessionStarted, setLoading, setLastAction, setPartnerInfo]);\r\n \r\n   useEffect(() => {\r\n     if (!socket) return;\r\n     socket.on(\"matched\", handleMatched);\r\n@@ -67,9 +75,9 @@\n     return () => {\r\n       socket.off(\"disconnect\", handleDisconnect);\r\n       socket.off(\"connect\", handleConnect);\r\n     };\r\n-  }, [socket]);\r\n+  }, [socket, setLoading, setSessionStarted]);\r\n \r\n   useEffect(() => {\r\n     return () => {\r\n       if (socket) {\r\n"
                },
                {
                    "date": 1758997003296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,13 @@\n import { useEffect, useCallback } from \"react\";\r\n \r\n interface PartnerInfo {\r\n+  uid?: string;\r\n   name: string;\r\n-  age: number;\r\n+  age: string; // must match UserInfo\r\n   gender?: string;\r\n   country?: string;\r\n+  email?: string;\r\n }\r\n \r\n interface HandlersProps {\r\n   socket: any; // socket.io client\r\n"
                },
                {
                    "date": 1758997184701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,13 @@\n import { useEffect, useCallback } from \"react\";\r\n+import { UserInfo } from \"../pages/anonymous/AnonymousChatRoom\"; // import the shared type\r\n \r\n-interface PartnerInfo {\r\n-  uid?: string;\r\n-  name: string;\r\n-  age: string; // must match UserInfo\r\n-  gender?: string;\r\n-  country?: string;\r\n-  email?: string;\r\n-}\r\n-\r\n interface HandlersProps {\r\n   socket: any; // socket.io client\r\n   playSound: (type: \"match\" | \"leave\") => void;\r\n   setRoomId: (id: string | null) => void;\r\n   setIsOfferer: (val: boolean | null) => void;\r\n-  setPartnerInfo: (val: PartnerInfo | null) => void;\r\n+  setPartnerInfo: (val: UserInfo | null) => void; // use UserInfo\r\n   setLoading: (val: boolean) => void;\r\n   setSessionStarted: (val: boolean) => void;\r\n   setLastAction: (val: \"skipped\" | \"left\" | null) => void;\r\n }\r\n@@ -30,9 +22,17 @@\n   setSessionStarted,\r\n   setLastAction,\r\n }: HandlersProps) {\r\n   const handleMatched = useCallback(\r\n-    ({ roomId, isOfferer, partnerInfo }: { roomId: string; isOfferer: boolean; partnerInfo: PartnerInfo }) => {\r\n+    ({\r\n+      roomId,\r\n+      isOfferer,\r\n+      partnerInfo,\r\n+    }: {\r\n+      roomId: string;\r\n+      isOfferer: boolean;\r\n+      partnerInfo: UserInfo; // use UserInfo\r\n+    }) => {\r\n       console.log(\"✅ Matched:\", { roomId, isOfferer, partnerInfo });\r\n       setRoomId(roomId);\r\n       setIsOfferer(isOfferer);\r\n       setPartnerInfo(partnerInfo);\r\n@@ -50,9 +50,17 @@\n     setLoading(false);\r\n     setLastAction(\"left\");\r\n     setPartnerInfo(null);\r\n     playSound(\"leave\");\r\n-  }, [playSound, setRoomId, setIsOfferer, setSessionStarted, setLoading, setLastAction, setPartnerInfo]);\r\n+  }, [\r\n+    playSound,\r\n+    setRoomId,\r\n+    setIsOfferer,\r\n+    setSessionStarted,\r\n+    setLoading,\r\n+    setLastAction,\r\n+    setPartnerInfo,\r\n+  ]);\r\n \r\n   useEffect(() => {\r\n     if (!socket) return;\r\n     socket.on(\"matched\", handleMatched);\r\n"
                },
                {
                    "date": 1758997207901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { useEffect, useCallback } from \"react\";\r\n-import { UserInfo } from \"../pages/anonymous/AnonymousChatRoom\"; // import the shared type\r\n+import { UserInfo } from \"\"; // import the shared type\r\n \r\n interface HandlersProps {\r\n   socket: any; // socket.io client\r\n   playSound: (type: \"match\" | \"leave\") => void;\r\n"
                },
                {
                    "date": 1759331599674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import { useEffect, useCallback } from \"react\";\r\n-import { UserInfo } from \"\"; // import the shared type\r\n-\r\n+import { UserInfo } from \"@/types/user\";\r\n interface HandlersProps {\r\n   socket: any; // socket.io client\r\n   playSound: (type: \"match\" | \"leave\") => void;\r\n   setRoomId: (id: string | null) => void;\r\n"
                }
            ],
            "date": 1752664929722,
            "name": "Commit-0",
            "content": "import { useEffect, useCallback } from \"react\";\r\n\r\ninterface HandlersProps {\r\n  socket: any;\r\n  playSound: (type: \"match\" | \"leave\") => void;\r\n  setRoomId: (id: string | null) => void;\r\n  setIsOfferer: (val: boolean | null) => void;\r\n  setPartnerInfo: (val: any) => void;\r\n  setLoading: (val: boolean) => void;\r\n  setSessionStarted: (val: boolean) => void;\r\n  setLastAction: (val: \"skipped\" | \"left\" | null) => void;\r\n}\r\n\r\nexport function useChatHandlers({\r\n  socket,\r\n  playSound,\r\n  setRoomId,\r\n  setIsOfferer,\r\n  setPartnerInfo,\r\n  setLoading,\r\n  setSessionStarted,\r\n  setLastAction,\r\n}: HandlersProps) {\r\n  const handleMatched = useCallback(\r\n    ({ roomId, isOfferer, partnerInfo }: any) => {\r\n      setRoomId(roomId);\r\n      setIsOfferer(isOfferer);\r\n      setPartnerInfo(partnerInfo);\r\n      setLoading(false);\r\n      setLastAction(null);\r\n      playSound(\"match\");\r\n    },\r\n    [playSound]\r\n  );\r\n\r\n  const handlePartnerLeft = useCallback(() => {\r\n    setRoomId(null);\r\n    setIsOfferer(null);\r\n    setSessionStarted(false);\r\n    setLoading(false);\r\n    setLastAction(\"left\");\r\n    playSound(\"leave\");\r\n  }, [playSound]);\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n    socket.on(\"matched\", handleMatched);\r\n    socket.on(\"partner-left\", handlePartnerLeft);\r\n    return () => {\r\n      socket.off(\"matched\", handleMatched);\r\n      socket.off(\"partner-left\", handlePartnerLeft);\r\n    };\r\n  }, [socket, handleMatched, handlePartnerLeft]);\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n    const handleDisconnect = () => {\r\n      setLoading(false);\r\n      setSessionStarted(false);\r\n    };\r\n    const handleConnect = () => {\r\n      console.log(\"Connected to socket:\", socket.id);\r\n    };\r\n    socket.on(\"disconnect\", handleDisconnect);\r\n    socket.on(\"connect\", handleConnect);\r\n    return () => {\r\n      socket.off(\"disconnect\", handleDisconnect);\r\n      socket.off(\"connect\", handleConnect);\r\n    };\r\n  }, [socket]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (socket) {\r\n        socket.emit(\"leave-room\");\r\n      }\r\n    };\r\n  }, [socket]);\r\n}\r\n"
        }
    ]
}