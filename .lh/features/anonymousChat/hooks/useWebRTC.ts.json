{
    "sourceFile": "features/anonymousChat/hooks/useWebRTC.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1752230051942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752239716786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"http://localhost:3001\";\r\n \r\n export default function useWebRTC(roomId: string) {\r\n   const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);\r\n-  const localStreamRef = useRef<MediaStream | null>(null);\r\n+  const [localStream, setLocalStream] = useState<MediaStream | null>(null);\r\n   const peerConnectionRef = useRef<RTCPeerConnection | null>(null);\r\n   const socketRef = useRef<Socket | null>(null);\r\n \r\n   const iceServers = {\r\n@@ -19,56 +19,67 @@\n   };\r\n \r\n   useEffect(() => {\r\n     const init = async () => {\r\n-      socketRef.current = io(SOCKET_URL);\r\n-      localStreamRef.current = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n+      // Connect to signaling server\r\n+      socketRef.current = io(SOCKET_URL, {\r\n+        transports: [\"websocket\"], // Ensures stability with Railway/production\r\n+      });\r\n \r\n+      // Get local media stream\r\n+      const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n+      setLocalStream(stream);\r\n+\r\n+      // Join room\r\n       socketRef.current.emit(\"join-room\", roomId);\r\n \r\n+      // Create peer connection\r\n       peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n \r\n-      // Add local tracks\r\n-      localStreamRef.current.getTracks().forEach((track) => {\r\n-        peerConnectionRef.current?.addTrack(track, localStreamRef.current as MediaStream);\r\n+      // Add local tracks to peer connection\r\n+      stream.getTracks().forEach((track) => {\r\n+        peerConnectionRef.current?.addTrack(track, stream);\r\n       });\r\n \r\n       // Handle remote stream\r\n       peerConnectionRef.current.ontrack = (event) => {\r\n         setRemoteStream(event.streams[0]);\r\n       };\r\n \r\n-      // ICE candidates\r\n+      // Handle ICE candidates generated locally\r\n       peerConnectionRef.current.onicecandidate = (event) => {\r\n         if (event.candidate) {\r\n-          socketRef.current?.emit(\"ice-candidate\", event.candidate, roomId);\r\n+          socketRef.current?.emit(\"ice-candidate\", { candidate: event.candidate, roomId });\r\n         }\r\n       };\r\n \r\n-      socketRef.current.on(\"offer\", async (offer: RTCSessionDescriptionInit) => {\r\n+      // Listen for offer\r\n+      socketRef.current.on(\"offer\", async ({ offer }) => {\r\n         await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(offer));\r\n         const answer = await peerConnectionRef.current?.createAnswer();\r\n         await peerConnectionRef.current?.setLocalDescription(answer);\r\n-        socketRef.current?.emit(\"answer\", answer, roomId);\r\n+        socketRef.current?.emit(\"answer\", { answer, roomId });\r\n       });\r\n \r\n-      socketRef.current.on(\"answer\", async (answer: RTCSessionDescriptionInit) => {\r\n+      // Listen for answer\r\n+      socketRef.current.on(\"answer\", async ({ answer }) => {\r\n         await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(answer));\r\n       });\r\n \r\n-      socketRef.current.on(\"ice-candidate\", async (candidate: RTCIceCandidateInit) => {\r\n+      // Listen for ICE candidates from remote peer\r\n+      socketRef.current.on(\"ice-candidate\", async ({ candidate }) => {\r\n         try {\r\n           await peerConnectionRef.current?.addIceCandidate(new RTCIceCandidate(candidate));\r\n         } catch (error) {\r\n           console.error(\"Error adding received ice candidate\", error);\r\n         }\r\n       });\r\n \r\n-      // Create offer if second user joins\r\n+      // If a user joins, create an offer\r\n       socketRef.current.on(\"user-joined\", async () => {\r\n         const offer = await peerConnectionRef.current?.createOffer();\r\n         await peerConnectionRef.current?.setLocalDescription(offer);\r\n-        socketRef.current?.emit(\"offer\", offer, roomId);\r\n+        socketRef.current?.emit(\"offer\", { offer, roomId });\r\n       });\r\n     };\r\n \r\n     init();\r\n@@ -78,6 +89,6 @@\n       socketRef.current?.disconnect();\r\n     };\r\n   }, [roomId]);\r\n \r\n-  return { localStream: localStreamRef.current, remoteStream };\r\n+  return { localStream, remoteStream };\r\n }\r\n"
                },
                {
                    "date": 1752240989128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n import { useEffect, useRef, useState } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n \r\n-const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"http://localhost:3001\";\r\n+const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n \r\n export default function useWebRTC(roomId: string) {\r\n   const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);\r\n   const [localStream, setLocalStream] = useState<MediaStream | null>(null);\r\n"
                },
                {
                    "date": 1752241446632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,74 +19,85 @@\n   };\r\n \r\n   useEffect(() => {\r\n     const init = async () => {\r\n-      // Connect to signaling server\r\n-      socketRef.current = io(SOCKET_URL, {\r\n-        transports: [\"websocket\"], // Ensures stability with Railway/production\r\n-      });\r\n+      if (!SOCKET_URL) {\r\n+        console.error(\"❌ NEXT_PUBLIC_SOCKET_URL is not defined\");\r\n+        return;\r\n+      }\r\n \r\n-      // Get local media stream\r\n-      const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n-      setLocalStream(stream);\r\n+      try {\r\n+        // Connect to signaling server\r\n+        socketRef.current = io(SOCKET_URL, {\r\n+          transports: [\"websocket\"],\r\n+        });\r\n \r\n-      // Join room\r\n-      socketRef.current.emit(\"join-room\", roomId);\r\n+        // Get local media stream\r\n+        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n+        setLocalStream(stream);\r\n \r\n-      // Create peer connection\r\n-      peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n+        // Join room\r\n+        socketRef.current.emit(\"join-room\", roomId);\r\n \r\n-      // Add local tracks to peer connection\r\n-      stream.getTracks().forEach((track) => {\r\n-        peerConnectionRef.current?.addTrack(track, stream);\r\n-      });\r\n+        // Create peer connection\r\n+        peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n \r\n-      // Handle remote stream\r\n-      peerConnectionRef.current.ontrack = (event) => {\r\n-        setRemoteStream(event.streams[0]);\r\n-      };\r\n+        // Add local tracks to peer connection\r\n+        stream.getTracks().forEach((track) => {\r\n+          peerConnectionRef.current?.addTrack(track, stream);\r\n+        });\r\n \r\n-      // Handle ICE candidates generated locally\r\n-      peerConnectionRef.current.onicecandidate = (event) => {\r\n-        if (event.candidate) {\r\n-          socketRef.current?.emit(\"ice-candidate\", { candidate: event.candidate, roomId });\r\n-        }\r\n-      };\r\n+        // Handle remote stream\r\n+        peerConnectionRef.current.ontrack = (event) => {\r\n+          setRemoteStream(event.streams[0]);\r\n+        };\r\n \r\n-      // Listen for offer\r\n-      socketRef.current.on(\"offer\", async ({ offer }) => {\r\n-        await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(offer));\r\n-        const answer = await peerConnectionRef.current?.createAnswer();\r\n-        await peerConnectionRef.current?.setLocalDescription(answer);\r\n-        socketRef.current?.emit(\"answer\", { answer, roomId });\r\n-      });\r\n+        // Handle ICE candidates generated locally\r\n+        peerConnectionRef.current.onicecandidate = (event) => {\r\n+          if (event.candidate) {\r\n+            socketRef.current?.emit(\"ice-candidate\", { candidate: event.candidate, roomId });\r\n+          }\r\n+        };\r\n \r\n-      // Listen for answer\r\n-      socketRef.current.on(\"answer\", async ({ answer }) => {\r\n-        await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(answer));\r\n-      });\r\n+        // Listen for offer\r\n+        socketRef.current.on(\"offer\", async ({ offer }) => {\r\n+          await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(offer));\r\n+          const answer = await peerConnectionRef.current?.createAnswer();\r\n+          await peerConnectionRef.current?.setLocalDescription(answer);\r\n+          socketRef.current?.emit(\"answer\", { answer, roomId });\r\n+        });\r\n \r\n-      // Listen for ICE candidates from remote peer\r\n-      socketRef.current.on(\"ice-candidate\", async ({ candidate }) => {\r\n-        try {\r\n-          await peerConnectionRef.current?.addIceCandidate(new RTCIceCandidate(candidate));\r\n-        } catch (error) {\r\n-          console.error(\"Error adding received ice candidate\", error);\r\n-        }\r\n-      });\r\n+        // Listen for answer\r\n+        socketRef.current.on(\"answer\", async ({ answer }) => {\r\n+          await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(answer));\r\n+        });\r\n \r\n-      // If a user joins, create an offer\r\n-      socketRef.current.on(\"user-joined\", async () => {\r\n-        const offer = await peerConnectionRef.current?.createOffer();\r\n-        await peerConnectionRef.current?.setLocalDescription(offer);\r\n-        socketRef.current?.emit(\"offer\", { offer, roomId });\r\n-      });\r\n+        // Listen for ICE candidates from remote peer\r\n+        socketRef.current.on(\"ice-candidate\", async ({ candidate }) => {\r\n+          try {\r\n+            await peerConnectionRef.current?.addIceCandidate(new RTCIceCandidate(candidate));\r\n+          } catch (error) {\r\n+            console.error(\"Error adding received ice candidate\", error);\r\n+          }\r\n+        });\r\n+\r\n+        // If a user joins, create an offer\r\n+        socketRef.current.on(\"user-joined\", async () => {\r\n+          const offer = await peerConnectionRef.current?.createOffer();\r\n+          await peerConnectionRef.current?.setLocalDescription(offer);\r\n+          socketRef.current?.emit(\"offer\", { offer, roomId });\r\n+        });\r\n+      } catch (error) {\r\n+        console.error(\"❌ Failed to initialize WebRTC:\", error);\r\n+      }\r\n     };\r\n \r\n     init();\r\n \r\n     return () => {\r\n+      // Cleanup\r\n       peerConnectionRef.current?.close();\r\n+      localStream?.getTracks().forEach((track) => track.stop());\r\n       socketRef.current?.disconnect();\r\n     };\r\n   }, [roomId]);\r\n \r\n"
                },
                {
                    "date": 1752259008837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { io, Socket } from \"socket.io-client\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n \r\n-export default function useWebRTC(roomId: string) {\r\n+export default function useWebRTC(roomId: string | null) {\r\n   const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);\r\n   const [localStream, setLocalStream] = useState<MediaStream | null>(null);\r\n   const peerConnectionRef = useRef<RTCPeerConnection | null>(null);\r\n   const socketRef = useRef<Socket | null>(null);\r\n@@ -18,8 +18,13 @@\n     ],\r\n   };\r\n \r\n   useEffect(() => {\r\n+    if (!roomId) {\r\n+      console.log(\"⏳ Waiting for server-assigned roomId...\");\r\n+      return;\r\n+    }\r\n+\r\n     const init = async () => {\r\n       if (!SOCKET_URL) {\r\n         console.error(\"❌ NEXT_PUBLIC_SOCKET_URL is not defined\");\r\n         return;\r\n@@ -34,11 +39,8 @@\n         // Get local media stream\r\n         const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n         setLocalStream(stream);\r\n \r\n-        // Join room\r\n-        socketRef.current.emit(\"join-room\", roomId);\r\n-\r\n         // Create peer connection\r\n         peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n \r\n         // Add local tracks to peer connection\r\n@@ -57,8 +59,11 @@\n             socketRef.current?.emit(\"ice-candidate\", { candidate: event.candidate, roomId });\r\n           }\r\n         };\r\n \r\n+        // Join room after connecting socket and setting up handlers\r\n+        socketRef.current.emit(\"join-room\", roomId);\r\n+\r\n         // Listen for offer\r\n         socketRef.current.on(\"offer\", async ({ offer }) => {\r\n           await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(offer));\r\n           const answer = await peerConnectionRef.current?.createAnswer();\r\n@@ -98,8 +103,8 @@\n       peerConnectionRef.current?.close();\r\n       localStream?.getTracks().forEach((track) => track.stop());\r\n       socketRef.current?.disconnect();\r\n     };\r\n-  }, [roomId]);\r\n+  }, [roomId, SOCKET_URL]);\r\n \r\n   return { localStream, remoteStream };\r\n }\r\n"
                },
                {
                    "date": 1752259979797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,13 +4,22 @@\n import { io, Socket } from \"socket.io-client\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n \r\n-export default function useWebRTC(roomId: string | null) {\r\n+interface MatchedPayload {\r\n+  roomId: string;\r\n+  partnerId: string;\r\n+  isOfferer: boolean;\r\n+}\r\n+\r\n+export default function useWebRTC(\r\n+  roomId: string | null,\r\n+  isOfferer: boolean | null,\r\n+  socket: Socket | null\r\n+) {\r\n   const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);\r\n   const [localStream, setLocalStream] = useState<MediaStream | null>(null);\r\n   const peerConnectionRef = useRef<RTCPeerConnection | null>(null);\r\n-  const socketRef = useRef<Socket | null>(null);\r\n \r\n   const iceServers = {\r\n     iceServers: [\r\n       { urls: \"stun:stun.l.google.com:19302\" },\r\n@@ -18,80 +27,85 @@\n     ],\r\n   };\r\n \r\n   useEffect(() => {\r\n-    if (!roomId) {\r\n-      console.log(\"⏳ Waiting for server-assigned roomId...\");\r\n+    if (!roomId || !socket) {\r\n+      console.log(\"⏳ Waiting for roomId and socket...\");\r\n       return;\r\n     }\r\n \r\n     const init = async () => {\r\n-      if (!SOCKET_URL) {\r\n-        console.error(\"❌ NEXT_PUBLIC_SOCKET_URL is not defined\");\r\n-        return;\r\n-      }\r\n-\r\n       try {\r\n-        // Connect to signaling server\r\n-        socketRef.current = io(SOCKET_URL, {\r\n-          transports: [\"websocket\"],\r\n+        // Get local media stream\r\n+        const stream = await navigator.mediaDevices.getUserMedia({\r\n+          video: true,\r\n+          audio: true,\r\n         });\r\n-\r\n-        // Get local media stream\r\n-        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n         setLocalStream(stream);\r\n+        console.log(\"🎥 Local stream obtained\");\r\n \r\n         // Create peer connection\r\n         peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n \r\n-        // Add local tracks to peer connection\r\n+        // Add local tracks\r\n         stream.getTracks().forEach((track) => {\r\n           peerConnectionRef.current?.addTrack(track, stream);\r\n         });\r\n \r\n         // Handle remote stream\r\n         peerConnectionRef.current.ontrack = (event) => {\r\n           setRemoteStream(event.streams[0]);\r\n+          console.log(\"📡 Remote stream received\");\r\n         };\r\n \r\n-        // Handle ICE candidates generated locally\r\n+        // Handle local ICE candidates\r\n         peerConnectionRef.current.onicecandidate = (event) => {\r\n           if (event.candidate) {\r\n-            socketRef.current?.emit(\"ice-candidate\", { candidate: event.candidate, roomId });\r\n+            socket.emit(\"ice-candidate\", { candidate: event.candidate, roomId });\r\n+            console.log(\"❄️ Sent local ICE candidate\");\r\n           }\r\n         };\r\n \r\n-        // Join room after connecting socket and setting up handlers\r\n-        socketRef.current.emit(\"join-room\", roomId);\r\n-\r\n         // Listen for offer\r\n-        socketRef.current.on(\"offer\", async ({ offer }) => {\r\n-          await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(offer));\r\n+        socket.on(\"offer\", async ({ offer }) => {\r\n+          console.log(\"📨 Received offer\");\r\n+          await peerConnectionRef.current?.setRemoteDescription(\r\n+            new RTCSessionDescription(offer)\r\n+          );\r\n           const answer = await peerConnectionRef.current?.createAnswer();\r\n           await peerConnectionRef.current?.setLocalDescription(answer);\r\n-          socketRef.current?.emit(\"answer\", { answer, roomId });\r\n+          socket.emit(\"answer\", { answer, roomId });\r\n+          console.log(\"✅ Sent answer\");\r\n         });\r\n \r\n         // Listen for answer\r\n-        socketRef.current.on(\"answer\", async ({ answer }) => {\r\n-          await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(answer));\r\n+        socket.on(\"answer\", async ({ answer }) => {\r\n+          console.log(\"📨 Received answer\");\r\n+          await peerConnectionRef.current?.setRemoteDescription(\r\n+            new RTCSessionDescription(answer)\r\n+          );\r\n         });\r\n \r\n-        // Listen for ICE candidates from remote peer\r\n-        socketRef.current.on(\"ice-candidate\", async ({ candidate }) => {\r\n+        // Listen for ICE candidates from remote\r\n+        socket.on(\"ice-candidate\", async ({ candidate }) => {\r\n           try {\r\n-            await peerConnectionRef.current?.addIceCandidate(new RTCIceCandidate(candidate));\r\n+            await peerConnectionRef.current?.addIceCandidate(\r\n+              new RTCIceCandidate(candidate)\r\n+            );\r\n+            console.log(\"❄️ Added remote ICE candidate\");\r\n           } catch (error) {\r\n-            console.error(\"Error adding received ice candidate\", error);\r\n+            console.error(\"⚠️ Error adding received ice candidate\", error);\r\n           }\r\n         });\r\n \r\n-        // If a user joins, create an offer\r\n-        socketRef.current.on(\"user-joined\", async () => {\r\n+        // If this client is offerer, create offer after joining\r\n+        if (isOfferer) {\r\n+          console.log(\"🎬 Acting as offerer, creating offer\");\r\n           const offer = await peerConnectionRef.current?.createOffer();\r\n           await peerConnectionRef.current?.setLocalDescription(offer);\r\n-          socketRef.current?.emit(\"offer\", { offer, roomId });\r\n-        });\r\n+          socket.emit(\"offer\", { offer, roomId });\r\n+        }\r\n+\r\n       } catch (error) {\r\n         console.error(\"❌ Failed to initialize WebRTC:\", error);\r\n       }\r\n     };\r\n@@ -99,12 +113,15 @@\n     init();\r\n \r\n     return () => {\r\n       // Cleanup\r\n+      console.log(\"♻️ Cleaning up WebRTC resources\");\r\n       peerConnectionRef.current?.close();\r\n       localStream?.getTracks().forEach((track) => track.stop());\r\n-      socketRef.current?.disconnect();\r\n+      socket.off(\"offer\");\r\n+      socket.off(\"answer\");\r\n+      socket.off(\"ice-candidate\");\r\n     };\r\n-  }, [roomId, SOCKET_URL]);\r\n+  }, [roomId, socket, isOfferer]);\r\n \r\n   return { localStream, remoteStream };\r\n }\r\n"
                },
                {
                    "date": 1752261655350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,22 +4,13 @@\n import { io, Socket } from \"socket.io-client\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n \r\n-interface MatchedPayload {\r\n-  roomId: string;\r\n-  partnerId: string;\r\n-  isOfferer: boolean;\r\n-}\r\n-\r\n-export default function useWebRTC(\r\n-  roomId: string | null,\r\n-  isOfferer: boolean | null,\r\n-  socket: Socket | null\r\n-) {\r\n+export default function useWebRTC(roomId: string | null, isOfferer: boolean) {\r\n   const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);\r\n   const [localStream, setLocalStream] = useState<MediaStream | null>(null);\r\n   const peerConnectionRef = useRef<RTCPeerConnection | null>(null);\r\n+  const socketRef = useRef<Socket | null>(null);\r\n \r\n   const iceServers = {\r\n     iceServers: [\r\n       { urls: \"stun:stun.l.google.com:19302\" },\r\n@@ -27,22 +18,28 @@\n     ],\r\n   };\r\n \r\n   useEffect(() => {\r\n-    if (!roomId || !socket) {\r\n-      console.log(\"⏳ Waiting for roomId and socket...\");\r\n+    if (!roomId) {\r\n+      console.log(\"⏳ Waiting for server-assigned roomId...\");\r\n       return;\r\n     }\r\n \r\n     const init = async () => {\r\n+      if (!SOCKET_URL) {\r\n+        console.error(\"❌ NEXT_PUBLIC_SOCKET_URL is not defined\");\r\n+        return;\r\n+      }\r\n+\r\n       try {\r\n+        // Connect to signaling server\r\n+        socketRef.current = io(SOCKET_URL, {\r\n+          transports: [\"websocket\"],\r\n+        });\r\n+\r\n         // Get local media stream\r\n-        const stream = await navigator.mediaDevices.getUserMedia({\r\n-          video: true,\r\n-          audio: true,\r\n-        });\r\n+        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n         setLocalStream(stream);\r\n-        console.log(\"🎥 Local stream obtained\");\r\n \r\n         // Create peer connection\r\n         peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n \r\n@@ -53,75 +50,61 @@\n \r\n         // Handle remote stream\r\n         peerConnectionRef.current.ontrack = (event) => {\r\n           setRemoteStream(event.streams[0]);\r\n-          console.log(\"📡 Remote stream received\");\r\n         };\r\n \r\n-        // Handle local ICE candidates\r\n+        // Handle ICE candidates generated locally\r\n         peerConnectionRef.current.onicecandidate = (event) => {\r\n           if (event.candidate) {\r\n-            socket.emit(\"ice-candidate\", { candidate: event.candidate, roomId });\r\n-            console.log(\"❄️ Sent local ICE candidate\");\r\n+            socketRef.current?.emit(\"ice-candidate\", { candidate: event.candidate, roomId });\r\n           }\r\n         };\r\n \r\n+        // Join room\r\n+        socketRef.current.emit(\"join-room\", roomId);\r\n+\r\n+        // If I am offerer, create offer immediately\r\n+        if (isOfferer) {\r\n+          const offer = await peerConnectionRef.current.createOffer();\r\n+          await peerConnectionRef.current.setLocalDescription(offer);\r\n+          socketRef.current.emit(\"offer\", { offer, roomId });\r\n+        }\r\n+\r\n         // Listen for offer\r\n-        socket.on(\"offer\", async ({ offer }) => {\r\n-          console.log(\"📨 Received offer\");\r\n-          await peerConnectionRef.current?.setRemoteDescription(\r\n-            new RTCSessionDescription(offer)\r\n-          );\r\n+        socketRef.current.on(\"offer\", async ({ offer }) => {\r\n+          await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(offer));\r\n           const answer = await peerConnectionRef.current?.createAnswer();\r\n           await peerConnectionRef.current?.setLocalDescription(answer);\r\n-          socket.emit(\"answer\", { answer, roomId });\r\n-          console.log(\"✅ Sent answer\");\r\n+          socketRef.current?.emit(\"answer\", { answer, roomId });\r\n         });\r\n \r\n         // Listen for answer\r\n-        socket.on(\"answer\", async ({ answer }) => {\r\n-          console.log(\"📨 Received answer\");\r\n-          await peerConnectionRef.current?.setRemoteDescription(\r\n-            new RTCSessionDescription(answer)\r\n-          );\r\n+        socketRef.current.on(\"answer\", async ({ answer }) => {\r\n+          await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(answer));\r\n         });\r\n \r\n-        // Listen for ICE candidates from remote\r\n-        socket.on(\"ice-candidate\", async ({ candidate }) => {\r\n+        // Listen for ICE candidates from remote peer\r\n+        socketRef.current.on(\"ice-candidate\", async ({ candidate }) => {\r\n           try {\r\n-            await peerConnectionRef.current?.addIceCandidate(\r\n-              new RTCIceCandidate(candidate)\r\n-            );\r\n-            console.log(\"❄️ Added remote ICE candidate\");\r\n+            await peerConnectionRef.current?.addIceCandidate(new RTCIceCandidate(candidate));\r\n           } catch (error) {\r\n-            console.error(\"⚠️ Error adding received ice candidate\", error);\r\n+            console.error(\"Error adding received ice candidate\", error);\r\n           }\r\n         });\r\n \r\n-        // If this client is offerer, create offer after joining\r\n-        if (isOfferer) {\r\n-          console.log(\"🎬 Acting as offerer, creating offer\");\r\n-          const offer = await peerConnectionRef.current?.createOffer();\r\n-          await peerConnectionRef.current?.setLocalDescription(offer);\r\n-          socket.emit(\"offer\", { offer, roomId });\r\n-        }\r\n-\r\n       } catch (error) {\r\n         console.error(\"❌ Failed to initialize WebRTC:\", error);\r\n       }\r\n     };\r\n \r\n     init();\r\n \r\n     return () => {\r\n-      // Cleanup\r\n-      console.log(\"♻️ Cleaning up WebRTC resources\");\r\n       peerConnectionRef.current?.close();\r\n       localStream?.getTracks().forEach((track) => track.stop());\r\n-      socket.off(\"offer\");\r\n-      socket.off(\"answer\");\r\n-      socket.off(\"ice-candidate\");\r\n+      socketRef.current?.disconnect();\r\n     };\r\n-  }, [roomId, socket, isOfferer]);\r\n+  }, [roomId, isOfferer]);\r\n \r\n   return { localStream, remoteStream };\r\n }\r\n"
                },
                {
                    "date": 1752261934582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { io, Socket } from \"socket.io-client\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n \r\n-export default function useWebRTC(roomId: string | null, isOfferer: boolean) {\r\n+export default function useWebRTC(roomId: string | null, isOfferer: boolean | null) {\r\n   const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);\r\n   const [localStream, setLocalStream] = useState<MediaStream | null>(null);\r\n   const peerConnectionRef = useRef<RTCPeerConnection | null>(null);\r\n   const socketRef = useRef<Socket | null>(null);\r\n@@ -18,10 +18,10 @@\n     ],\r\n   };\r\n \r\n   useEffect(() => {\r\n-    if (!roomId) {\r\n-      console.log(\"⏳ Waiting for server-assigned roomId...\");\r\n+    if (!roomId || isOfferer === null) {\r\n+      console.log(\"⏳ Waiting for server-assigned roomId and role...\");\r\n       return;\r\n     }\r\n \r\n     const init = async () => {\r\n@@ -30,61 +30,50 @@\n         return;\r\n       }\r\n \r\n       try {\r\n-        // Connect to signaling server\r\n         socketRef.current = io(SOCKET_URL, {\r\n           transports: [\"websocket\"],\r\n         });\r\n \r\n-        // Get local media stream\r\n         const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n         setLocalStream(stream);\r\n \r\n-        // Create peer connection\r\n         peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n \r\n-        // Add local tracks\r\n         stream.getTracks().forEach((track) => {\r\n           peerConnectionRef.current?.addTrack(track, stream);\r\n         });\r\n \r\n-        // Handle remote stream\r\n         peerConnectionRef.current.ontrack = (event) => {\r\n           setRemoteStream(event.streams[0]);\r\n         };\r\n \r\n-        // Handle ICE candidates generated locally\r\n         peerConnectionRef.current.onicecandidate = (event) => {\r\n           if (event.candidate) {\r\n             socketRef.current?.emit(\"ice-candidate\", { candidate: event.candidate, roomId });\r\n           }\r\n         };\r\n \r\n-        // Join room\r\n         socketRef.current.emit(\"join-room\", roomId);\r\n \r\n-        // If I am offerer, create offer immediately\r\n         if (isOfferer) {\r\n           const offer = await peerConnectionRef.current.createOffer();\r\n           await peerConnectionRef.current.setLocalDescription(offer);\r\n           socketRef.current.emit(\"offer\", { offer, roomId });\r\n         }\r\n \r\n-        // Listen for offer\r\n         socketRef.current.on(\"offer\", async ({ offer }) => {\r\n           await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(offer));\r\n           const answer = await peerConnectionRef.current?.createAnswer();\r\n           await peerConnectionRef.current?.setLocalDescription(answer);\r\n           socketRef.current?.emit(\"answer\", { answer, roomId });\r\n         });\r\n \r\n-        // Listen for answer\r\n         socketRef.current.on(\"answer\", async ({ answer }) => {\r\n           await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(answer));\r\n         });\r\n \r\n-        // Listen for ICE candidates from remote peer\r\n         socketRef.current.on(\"ice-candidate\", async ({ candidate }) => {\r\n           try {\r\n             await peerConnectionRef.current?.addIceCandidate(new RTCIceCandidate(candidate));\r\n           } catch (error) {\r\n"
                },
                {
                    "date": 1752262332881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,55 +30,66 @@\n         return;\r\n       }\r\n \r\n       try {\r\n+        // ✅ Connect to signaling server\r\n         socketRef.current = io(SOCKET_URL, {\r\n           transports: [\"websocket\"],\r\n         });\r\n \r\n+        // ✅ Get local media stream\r\n         const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n         setLocalStream(stream);\r\n \r\n+        // ✅ Create RTCPeerConnection\r\n         peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n \r\n+        // ✅ Add local tracks to peer connection\r\n         stream.getTracks().forEach((track) => {\r\n           peerConnectionRef.current?.addTrack(track, stream);\r\n         });\r\n \r\n+        // ✅ Handle remote stream\r\n         peerConnectionRef.current.ontrack = (event) => {\r\n           setRemoteStream(event.streams[0]);\r\n         };\r\n \r\n+        // ✅ Handle ICE candidates generated locally\r\n         peerConnectionRef.current.onicecandidate = (event) => {\r\n           if (event.candidate) {\r\n             socketRef.current?.emit(\"ice-candidate\", { candidate: event.candidate, roomId });\r\n           }\r\n         };\r\n \r\n+        // ✅ Join room after setting up handlers\r\n         socketRef.current.emit(\"join-room\", roomId);\r\n \r\n+        // ✅ Offerer creates offer\r\n         if (isOfferer) {\r\n           const offer = await peerConnectionRef.current.createOffer();\r\n           await peerConnectionRef.current.setLocalDescription(offer);\r\n           socketRef.current.emit(\"offer\", { offer, roomId });\r\n         }\r\n \r\n+        // ✅ Listen for offer\r\n         socketRef.current.on(\"offer\", async ({ offer }) => {\r\n           await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(offer));\r\n           const answer = await peerConnectionRef.current?.createAnswer();\r\n           await peerConnectionRef.current?.setLocalDescription(answer);\r\n           socketRef.current?.emit(\"answer\", { answer, roomId });\r\n         });\r\n \r\n+        // ✅ Listen for answer\r\n         socketRef.current.on(\"answer\", async ({ answer }) => {\r\n           await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(answer));\r\n         });\r\n \r\n+        // ✅ Listen for ICE candidates from remote peer\r\n         socketRef.current.on(\"ice-candidate\", async ({ candidate }) => {\r\n           try {\r\n             await peerConnectionRef.current?.addIceCandidate(new RTCIceCandidate(candidate));\r\n           } catch (error) {\r\n-            console.error(\"Error adding received ice candidate\", error);\r\n+            console.error(\"Error adding received ICE candidate:\", error);\r\n           }\r\n         });\r\n \r\n       } catch (error) {\r\n@@ -88,8 +99,9 @@\n \r\n     init();\r\n \r\n     return () => {\r\n+      // ✅ Cleanup\r\n       peerConnectionRef.current?.close();\r\n       localStream?.getTracks().forEach((track) => track.stop());\r\n       socketRef.current?.disconnect();\r\n     };\r\n"
                },
                {
                    "date": 1752289302288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n   const iceServers = {\r\n     iceServers: [\r\n       { urls: \"stun:stun.l.google.com:19302\" },\r\n       { urls: \"stun:stun1.l.google.com:19302\" },\r\n+      // ✅ Add TURN here for production if needed\r\n     ],\r\n   };\r\n \r\n   useEffect(() => {\r\n@@ -35,28 +36,41 @@\n         socketRef.current = io(SOCKET_URL, {\r\n           transports: [\"websocket\"],\r\n         });\r\n \r\n+        socketRef.current.on(\"connect\", () => {\r\n+          console.log(\"✅ Connected to socket server:\", socketRef.current?.id);\r\n+        });\r\n+\r\n         // ✅ Get local media stream\r\n         const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n         setLocalStream(stream);\r\n+        console.log(\"📷 Obtained local media stream\");\r\n \r\n         // ✅ Create RTCPeerConnection\r\n         peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n+        console.log(\"🔧 Created RTCPeerConnection\");\r\n \r\n         // ✅ Add local tracks to peer connection\r\n         stream.getTracks().forEach((track) => {\r\n           peerConnectionRef.current?.addTrack(track, stream);\r\n         });\r\n \r\n         // ✅ Handle remote stream\r\n         peerConnectionRef.current.ontrack = (event) => {\r\n+          console.log(\"📡 Received remote stream track\");\r\n           setRemoteStream(event.streams[0]);\r\n         };\r\n \r\n+        // ✅ Connection state monitoring\r\n+        peerConnectionRef.current.onconnectionstatechange = () => {\r\n+          console.log(\"🔗 Connection state:\", peerConnectionRef.current?.connectionState);\r\n+        };\r\n+\r\n         // ✅ Handle ICE candidates generated locally\r\n         peerConnectionRef.current.onicecandidate = (event) => {\r\n           if (event.candidate) {\r\n+            console.log(\"📤 Sending ICE candidate\");\r\n             socketRef.current?.emit(\"ice-candidate\", { candidate: event.candidate, roomId });\r\n           }\r\n         };\r\n \r\n@@ -64,32 +78,38 @@\n         socketRef.current.emit(\"join-room\", roomId);\r\n \r\n         // ✅ Offerer creates offer\r\n         if (isOfferer) {\r\n+          console.log(\"📞 Creating offer...\");\r\n           const offer = await peerConnectionRef.current.createOffer();\r\n           await peerConnectionRef.current.setLocalDescription(offer);\r\n           socketRef.current.emit(\"offer\", { offer, roomId });\r\n+          console.log(\"📤 Sent offer:\", offer);\r\n         }\r\n \r\n         // ✅ Listen for offer\r\n         socketRef.current.on(\"offer\", async ({ offer }) => {\r\n+          console.log(\"📩 Received offer:\", offer);\r\n           await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(offer));\r\n           const answer = await peerConnectionRef.current?.createAnswer();\r\n           await peerConnectionRef.current?.setLocalDescription(answer);\r\n           socketRef.current?.emit(\"answer\", { answer, roomId });\r\n+          console.log(\"📤 Sent answer:\", answer);\r\n         });\r\n \r\n         // ✅ Listen for answer\r\n         socketRef.current.on(\"answer\", async ({ answer }) => {\r\n+          console.log(\"📩 Received answer:\", answer);\r\n           await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(answer));\r\n         });\r\n \r\n         // ✅ Listen for ICE candidates from remote peer\r\n         socketRef.current.on(\"ice-candidate\", async ({ candidate }) => {\r\n+          console.log(\"📩 Received ICE candidate:\", candidate);\r\n           try {\r\n             await peerConnectionRef.current?.addIceCandidate(new RTCIceCandidate(candidate));\r\n           } catch (error) {\r\n-            console.error(\"Error adding received ICE candidate:\", error);\r\n+            console.error(\"❌ Error adding received ICE candidate:\", error);\r\n           }\r\n         });\r\n \r\n       } catch (error) {\r\n@@ -100,8 +120,9 @@\n     init();\r\n \r\n     return () => {\r\n       // ✅ Cleanup\r\n+      console.log(\"🧹 Cleaning up WebRTC and socket connections\");\r\n       peerConnectionRef.current?.close();\r\n       localStream?.getTracks().forEach((track) => track.stop());\r\n       socketRef.current?.disconnect();\r\n     };\r\n"
                },
                {
                    "date": 1752298167157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   const iceServers = {\r\n     iceServers: [\r\n       { urls: \"stun:stun.l.google.com:19302\" },\r\n       { urls: \"stun:stun1.l.google.com:19302\" },\r\n-      // ✅ Add TURN here for production if needed\r\n+      // 🔒 Add TURN servers here for production behind NAT/firewalls\r\n     ],\r\n   };\r\n \r\n   useEffect(() => {\r\n@@ -40,8 +40,13 @@\n         socketRef.current.on(\"connect\", () => {\r\n           console.log(\"✅ Connected to socket server:\", socketRef.current?.id);\r\n         });\r\n \r\n+        // ✅ Confirm joined room\r\n+        socketRef.current.on(\"joined-room\", (joinedRoomId) => {\r\n+          console.log(\"🏠 Successfully joined room:\", joinedRoomId);\r\n+        });\r\n+\r\n         // ✅ Get local media stream\r\n         const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n         setLocalStream(stream);\r\n         console.log(\"📷 Obtained local media stream\");\r\n@@ -60,9 +65,9 @@\n           console.log(\"📡 Received remote stream track\");\r\n           setRemoteStream(event.streams[0]);\r\n         };\r\n \r\n-        // ✅ Connection state monitoring\r\n+        // ✅ Monitor connection state\r\n         peerConnectionRef.current.onconnectionstatechange = () => {\r\n           console.log(\"🔗 Connection state:\", peerConnectionRef.current?.connectionState);\r\n         };\r\n \r\n@@ -76,9 +81,9 @@\n \r\n         // ✅ Join room after setting up handlers\r\n         socketRef.current.emit(\"join-room\", roomId);\r\n \r\n-        // ✅ Offerer creates offer\r\n+        // ✅ Offerer creates offer after joining room\r\n         if (isOfferer) {\r\n           console.log(\"📞 Creating offer...\");\r\n           const offer = await peerConnectionRef.current.createOffer();\r\n           await peerConnectionRef.current.setLocalDescription(offer);\r\n@@ -119,9 +124,9 @@\n \r\n     init();\r\n \r\n     return () => {\r\n-      // ✅ Cleanup\r\n+      // ✅ Cleanup resources\r\n       console.log(\"🧹 Cleaning up WebRTC and socket connections\");\r\n       peerConnectionRef.current?.close();\r\n       localStream?.getTracks().forEach((track) => track.stop());\r\n       socketRef.current?.disconnect();\r\n"
                },
                {
                    "date": 1752298872630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   const iceServers = {\r\n     iceServers: [\r\n       { urls: \"stun:stun.l.google.com:19302\" },\r\n       { urls: \"stun:stun1.l.google.com:19302\" },\r\n-      // 🔒 Add TURN servers here for production behind NAT/firewalls\r\n+      // 🔒 Add TURN servers for production behind NAT/firewalls\r\n     ],\r\n   };\r\n \r\n   useEffect(() => {\r\n@@ -40,14 +40,9 @@\n         socketRef.current.on(\"connect\", () => {\r\n           console.log(\"✅ Connected to socket server:\", socketRef.current?.id);\r\n         });\r\n \r\n-        // ✅ Confirm joined room\r\n-        socketRef.current.on(\"joined-room\", (joinedRoomId) => {\r\n-          console.log(\"🏠 Successfully joined room:\", joinedRoomId);\r\n-        });\r\n-\r\n-        // ✅ Get local media stream\r\n+        // ✅ Get local media stream immediately\r\n         const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n         setLocalStream(stream);\r\n         console.log(\"📷 Obtained local media stream\");\r\n \r\n@@ -78,41 +73,44 @@\n             socketRef.current?.emit(\"ice-candidate\", { candidate: event.candidate, roomId });\r\n           }\r\n         };\r\n \r\n-        // ✅ Join room after setting up handlers\r\n+        // ✅ Join room and wait for confirmation before offer creation\r\n         socketRef.current.emit(\"join-room\", roomId);\r\n \r\n-        // ✅ Offerer creates offer after joining room\r\n-        if (isOfferer) {\r\n-          console.log(\"📞 Creating offer...\");\r\n-          const offer = await peerConnectionRef.current.createOffer();\r\n-          await peerConnectionRef.current.setLocalDescription(offer);\r\n-          socketRef.current.emit(\"offer\", { offer, roomId });\r\n-          console.log(\"📤 Sent offer:\", offer);\r\n-        }\r\n+        socketRef.current.on(\"joined-room\", async (joinedRoomId) => {\r\n+          console.log(\"🏠 Successfully joined room:\", joinedRoomId);\r\n \r\n+          if (isOfferer) {\r\n+            console.log(\"📞 Creating offer...\");\r\n+            const offer = await peerConnectionRef.current!.createOffer();\r\n+            await peerConnectionRef.current!.setLocalDescription(offer);\r\n+            socketRef.current?.emit(\"offer\", { offer, roomId });\r\n+            console.log(\"📤 Sent offer:\", offer);\r\n+          }\r\n+        });\r\n+\r\n         // ✅ Listen for offer\r\n         socketRef.current.on(\"offer\", async ({ offer }) => {\r\n           console.log(\"📩 Received offer:\", offer);\r\n-          await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(offer));\r\n-          const answer = await peerConnectionRef.current?.createAnswer();\r\n-          await peerConnectionRef.current?.setLocalDescription(answer);\r\n+          await peerConnectionRef.current!.setRemoteDescription(new RTCSessionDescription(offer));\r\n+          const answer = await peerConnectionRef.current!.createAnswer();\r\n+          await peerConnectionRef.current!.setLocalDescription(answer);\r\n           socketRef.current?.emit(\"answer\", { answer, roomId });\r\n           console.log(\"📤 Sent answer:\", answer);\r\n         });\r\n \r\n         // ✅ Listen for answer\r\n         socketRef.current.on(\"answer\", async ({ answer }) => {\r\n           console.log(\"📩 Received answer:\", answer);\r\n-          await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(answer));\r\n+          await peerConnectionRef.current!.setRemoteDescription(new RTCSessionDescription(answer));\r\n         });\r\n \r\n         // ✅ Listen for ICE candidates from remote peer\r\n         socketRef.current.on(\"ice-candidate\", async ({ candidate }) => {\r\n           console.log(\"📩 Received ICE candidate:\", candidate);\r\n           try {\r\n-            await peerConnectionRef.current?.addIceCandidate(new RTCIceCandidate(candidate));\r\n+            await peerConnectionRef.current!.addIceCandidate(new RTCIceCandidate(candidate));\r\n           } catch (error) {\r\n             console.error(\"❌ Error adding received ICE candidate:\", error);\r\n           }\r\n         });\r\n@@ -124,9 +122,8 @@\n \r\n     init();\r\n \r\n     return () => {\r\n-      // ✅ Cleanup resources\r\n       console.log(\"🧹 Cleaning up WebRTC and socket connections\");\r\n       peerConnectionRef.current?.close();\r\n       localStream?.getTracks().forEach((track) => track.stop());\r\n       socketRef.current?.disconnect();\r\n"
                },
                {
                    "date": 1752300859892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,149 @@\n+import { useEffect, useRef, useState, useCallback } from \"react\";\r\n+import { io, Socket } from \"socket.io-client\";\r\n+\r\n+const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n+\r\n+export default function useWebRTC(roomId: string | null, isOfferer: boolean | null) {\r\n+  const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);\r\n+  const [localStream, setLocalStream] = useState<MediaStream | null>(null);\r\n+  const peerConnectionRef = useRef<RTCPeerConnection | null>(null);\r\n+  const socketRef = useRef<Socket | null>(null);\r\n+\r\n+  const iceServers = {\r\n+    iceServers: [\r\n+      { urls: \"stun:stun.l.google.com:19302\" },\r\n+      { urls: \"stun:stun1.l.google.com:19302\" },\r\n+      // 🔒 Add TURN servers for production behind NAT/firewalls\r\n+    ],\r\n+  };\r\n+\r\n+  /**\r\n+   * ✅ Cleanup function to close connections and stop media tracks\r\n+   */\r\n+  const stopWebRTC = useCallback(() => {\r\n+    console.log(\"🛑 Stopping WebRTC and socket connections\");\r\n+    // Close peer connection\r\n+    peerConnectionRef.current?.close();\r\n+    peerConnectionRef.current = null;\r\n+\r\n+    // Stop local media tracks\r\n+    localStream?.getTracks().forEach((track) => track.stop());\r\n+    setLocalStream(null);\r\n+\r\n+    // Clear remote stream\r\n+    setRemoteStream(null);\r\n+\r\n+    // Disconnect socket\r\n+    socketRef.current?.disconnect();\r\n+    socketRef.current = null;\r\n+  }, [localStream]);\r\n+\r\n+  useEffect(() => {\r\n+    if (!roomId || isOfferer === null) {\r\n+      console.log(\"⏳ Waiting for server-assigned roomId and role...\");\r\n+      return;\r\n+    }\r\n+\r\n+    const init = async () => {\r\n+      if (!SOCKET_URL) {\r\n+        console.error(\"❌ NEXT_PUBLIC_SOCKET_URL is not defined\");\r\n+        return;\r\n+      }\r\n+\r\n+      try {\r\n+        // ✅ Connect to signaling server\r\n+        socketRef.current = io(SOCKET_URL, {\r\n+          transports: [\"websocket\"],\r\n+        });\r\n+\r\n+        socketRef.current.on(\"connect\", () => {\r\n+          console.log(\"✅ Connected to socket server:\", socketRef.current?.id);\r\n+        });\r\n+\r\n+        // ✅ Get local media stream immediately\r\n+        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n+        setLocalStream(stream);\r\n+        console.log(\"📷 Obtained local media stream\");\r\n+\r\n+        // ✅ Create RTCPeerConnection\r\n+        peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n+        console.log(\"🔧 Created RTCPeerConnection\");\r\n+\r\n+        // ✅ Add local tracks to peer connection\r\n+        stream.getTracks().forEach((track) => {\r\n+          peerConnectionRef.current?.addTrack(track, stream);\r\n+        });\r\n+\r\n+        // ✅ Handle remote stream\r\n+        peerConnectionRef.current.ontrack = (event) => {\r\n+          console.log(\"📡 Received remote stream track\");\r\n+          setRemoteStream(event.streams[0]);\r\n+        };\r\n+\r\n+        // ✅ Monitor connection state\r\n+        peerConnectionRef.current.onconnectionstatechange = () => {\r\n+          console.log(\"🔗 Connection state:\", peerConnectionRef.current?.connectionState);\r\n+        };\r\n+\r\n+        // ✅ Handle ICE candidates generated locally\r\n+        peerConnectionRef.current.onicecandidate = (event) => {\r\n+          if (event.candidate) {\r\n+            console.log(\"📤 Sending ICE candidate\");\r\n+            socketRef.current?.emit(\"ice-candidate\", { candidate: event.candidate, roomId });\r\n+          }\r\n+        };\r\n+\r\n+        // ✅ Join room and wait for confirmation before offer creation\r\n+        socketRef.current.emit(\"join-room\", roomId);\r\n+\r\n+        socketRef.current.on(\"joined-room\", async (joinedRoomId) => {\r\n+          console.log(\"🏠 Successfully joined room:\", joinedRoomId);\r\n+\r\n+          if (isOfferer) {\r\n+            console.log(\"📞 Creating offer...\");\r\n+            const offer = await peerConnectionRef.current!.createOffer();\r\n+            await peerConnectionRef.current!.setLocalDescription(offer);\r\n+            socketRef.current?.emit(\"offer\", { offer, roomId });\r\n+            console.log(\"📤 Sent offer:\", offer);\r\n+          }\r\n+        });\r\n+\r\n+        // ✅ Listen for offer\r\n+        socketRef.current.on(\"offer\", async ({ offer }) => {\r\n+          console.log(\"📩 Received offer:\", offer);\r\n+          await peerConnectionRef.current!.setRemoteDescription(new RTCSessionDescription(offer));\r\n+          const answer = await peerConnectionRef.current!.createAnswer();\r\n+          await peerConnectionRef.current!.setLocalDescription(answer);\r\n+          socketRef.current?.emit(\"answer\", { answer, roomId });\r\n+          console.log(\"📤 Sent answer:\", answer);\r\n+        });\r\n+\r\n+        // ✅ Listen for answer\r\n+        socketRef.current.on(\"answer\", async ({ answer }) => {\r\n+          console.log(\"📩 Received answer:\", answer);\r\n+          await peerConnectionRef.current!.setRemoteDescription(new RTCSessionDescription(answer));\r\n+        });\r\n+\r\n+        // ✅ Listen for ICE candidates from remote peer\r\n+        socketRef.current.on(\"ice-candidate\", async ({ candidate }) => {\r\n+          console.log(\"📩 Received ICE candidate:\", candidate);\r\n+          try {\r\n+            await peerConnectionRef.current!.addIceCandidate(new RTCIceCandidate(candidate));\r\n+          } catch (error) {\r\n+            console.error(\"❌ Error adding received ICE candidate:\", error);\r\n+          }\r\n+        });\r\n+      } catch (error) {\r\n+        console.error(\"❌ Failed to initialize WebRTC:\", error);\r\n+      }\r\n+    };\r\n+\r\n+    init();\r\n+\r\n+    return () => {\r\n+      stopWebRTC();\r\n+    };\r\n+  }, [roomId, isOfferer, stopWebRTC]);\r\n+\r\n+  return { localStream, remoteStream, stopWebRTC };\r\n+}\r\n"
                },
                {
                    "date": 1752301382921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,27 +16,21 @@\n       // 🔒 Add TURN servers for production behind NAT/firewalls\r\n     ],\r\n   };\r\n \r\n-  /**\r\n-   * ✅ Cleanup function to close connections and stop media tracks\r\n-   */\r\n   const stopWebRTC = useCallback(() => {\r\n-    console.log(\"🛑 Stopping WebRTC and socket connections\");\r\n-    // Close peer connection\r\n+    console.log(\"🛑 Manually stopping WebRTC and socket connections\");\r\n+\r\n     peerConnectionRef.current?.close();\r\n     peerConnectionRef.current = null;\r\n \r\n-    // Stop local media tracks\r\n     localStream?.getTracks().forEach((track) => track.stop());\r\n     setLocalStream(null);\r\n \r\n-    // Clear remote stream\r\n-    setRemoteStream(null);\r\n-\r\n-    // Disconnect socket\r\n     socketRef.current?.disconnect();\r\n     socketRef.current = null;\r\n+\r\n+    setRemoteStream(null);\r\n   }, [localStream]);\r\n \r\n   useEffect(() => {\r\n     if (!roomId || isOfferer === null) {\r\n@@ -50,90 +44,87 @@\n         return;\r\n       }\r\n \r\n       try {\r\n-        // ✅ Connect to signaling server\r\n-        socketRef.current = io(SOCKET_URL, {\r\n-          transports: [\"websocket\"],\r\n-        });\r\n+        // ✅ Connect to signaling server if not connected\r\n+        if (!socketRef.current) {\r\n+          socketRef.current = io(SOCKET_URL, {\r\n+            transports: [\"websocket\"],\r\n+          });\r\n \r\n-        socketRef.current.on(\"connect\", () => {\r\n-          console.log(\"✅ Connected to socket server:\", socketRef.current?.id);\r\n-        });\r\n+          socketRef.current.on(\"connect\", () => {\r\n+            console.log(\"✅ Connected to socket server:\", socketRef.current?.id);\r\n+          });\r\n+        }\r\n \r\n-        // ✅ Get local media stream immediately\r\n-        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n-        setLocalStream(stream);\r\n-        console.log(\"📷 Obtained local media stream\");\r\n+        // ✅ Get local media stream only if not already obtained\r\n+        if (!localStream) {\r\n+          const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n+          setLocalStream(stream);\r\n+          console.log(\"📷 Obtained local media stream\");\r\n+        }\r\n \r\n-        // ✅ Create RTCPeerConnection\r\n-        peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n-        console.log(\"🔧 Created RTCPeerConnection\");\r\n+        // ✅ Create RTCPeerConnection only if not existing\r\n+        if (!peerConnectionRef.current) {\r\n+          peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n+          console.log(\"🔧 Created RTCPeerConnection\");\r\n \r\n-        // ✅ Add local tracks to peer connection\r\n-        stream.getTracks().forEach((track) => {\r\n-          peerConnectionRef.current?.addTrack(track, stream);\r\n-        });\r\n+          // ✅ Add local tracks\r\n+          localStream?.getTracks().forEach((track) => {\r\n+            peerConnectionRef.current?.addTrack(track, localStream);\r\n+          });\r\n \r\n-        // ✅ Handle remote stream\r\n-        peerConnectionRef.current.ontrack = (event) => {\r\n-          console.log(\"📡 Received remote stream track\");\r\n-          setRemoteStream(event.streams[0]);\r\n-        };\r\n+          // ✅ Handle remote stream\r\n+          peerConnectionRef.current.ontrack = (event) => {\r\n+            console.log(\"📡 Received remote stream track\");\r\n+            setRemoteStream(event.streams[0]);\r\n+          };\r\n \r\n-        // ✅ Monitor connection state\r\n-        peerConnectionRef.current.onconnectionstatechange = () => {\r\n-          console.log(\"🔗 Connection state:\", peerConnectionRef.current?.connectionState);\r\n-        };\r\n+          // ✅ ICE candidates\r\n+          peerConnectionRef.current.onicecandidate = (event) => {\r\n+            if (event.candidate) {\r\n+              console.log(\"📤 Sending ICE candidate\");\r\n+              socketRef.current?.emit(\"ice-candidate\", { candidate: event.candidate, roomId });\r\n+            }\r\n+          };\r\n+        }\r\n \r\n-        // ✅ Handle ICE candidates generated locally\r\n-        peerConnectionRef.current.onicecandidate = (event) => {\r\n-          if (event.candidate) {\r\n-            console.log(\"📤 Sending ICE candidate\");\r\n-            socketRef.current?.emit(\"ice-candidate\", { candidate: event.candidate, roomId });\r\n-          }\r\n-        };\r\n-\r\n-        // ✅ Join room and wait for confirmation before offer creation\r\n+        // ✅ Join room and handle offer/answer flow\r\n         socketRef.current.emit(\"join-room\", roomId);\r\n \r\n-        socketRef.current.on(\"joined-room\", async (joinedRoomId) => {\r\n-          console.log(\"🏠 Successfully joined room:\", joinedRoomId);\r\n+        socketRef.current.on(\"joined-room\", async () => {\r\n+          console.log(\"🏠 Joined room:\", roomId);\r\n \r\n-          if (isOfferer) {\r\n+          if (isOfferer && peerConnectionRef.current) {\r\n             console.log(\"📞 Creating offer...\");\r\n-            const offer = await peerConnectionRef.current!.createOffer();\r\n-            await peerConnectionRef.current!.setLocalDescription(offer);\r\n+            const offer = await peerConnectionRef.current.createOffer();\r\n+            await peerConnectionRef.current.setLocalDescription(offer);\r\n             socketRef.current?.emit(\"offer\", { offer, roomId });\r\n-            console.log(\"📤 Sent offer:\", offer);\r\n           }\r\n         });\r\n \r\n-        // ✅ Listen for offer\r\n         socketRef.current.on(\"offer\", async ({ offer }) => {\r\n           console.log(\"📩 Received offer:\", offer);\r\n-          await peerConnectionRef.current!.setRemoteDescription(new RTCSessionDescription(offer));\r\n-          const answer = await peerConnectionRef.current!.createAnswer();\r\n-          await peerConnectionRef.current!.setLocalDescription(answer);\r\n+          await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(offer));\r\n+          const answer = await peerConnectionRef.current?.createAnswer();\r\n+          await peerConnectionRef.current?.setLocalDescription(answer);\r\n           socketRef.current?.emit(\"answer\", { answer, roomId });\r\n-          console.log(\"📤 Sent answer:\", answer);\r\n         });\r\n \r\n-        // ✅ Listen for answer\r\n         socketRef.current.on(\"answer\", async ({ answer }) => {\r\n           console.log(\"📩 Received answer:\", answer);\r\n-          await peerConnectionRef.current!.setRemoteDescription(new RTCSessionDescription(answer));\r\n+          await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(answer));\r\n         });\r\n \r\n-        // ✅ Listen for ICE candidates from remote peer\r\n         socketRef.current.on(\"ice-candidate\", async ({ candidate }) => {\r\n           console.log(\"📩 Received ICE candidate:\", candidate);\r\n           try {\r\n-            await peerConnectionRef.current!.addIceCandidate(new RTCIceCandidate(candidate));\r\n+            await peerConnectionRef.current?.addIceCandidate(new RTCIceCandidate(candidate));\r\n           } catch (error) {\r\n             console.error(\"❌ Error adding received ICE candidate:\", error);\r\n           }\r\n         });\r\n+\r\n       } catch (error) {\r\n         console.error(\"❌ Failed to initialize WebRTC:\", error);\r\n       }\r\n     };\r\n@@ -142,142 +133,8 @@\n \r\n     return () => {\r\n       stopWebRTC();\r\n     };\r\n-  }, [roomId, isOfferer, stopWebRTC]);\r\n+  }, [roomId, isOfferer, localStream, stopWebRTC]);\r\n \r\n   return { localStream, remoteStream, stopWebRTC };\r\n }\r\n-// features/anonymousChat/hooks/useWebRTC.ts\r\n-\r\n-import { useEffect, useRef, useState } from \"react\";\r\n-import { io, Socket } from \"socket.io-client\";\r\n-\r\n-const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n-\r\n-export default function useWebRTC(roomId: string | null, isOfferer: boolean | null) {\r\n-  const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);\r\n-  const [localStream, setLocalStream] = useState<MediaStream | null>(null);\r\n-  const peerConnectionRef = useRef<RTCPeerConnection | null>(null);\r\n-  const socketRef = useRef<Socket | null>(null);\r\n-\r\n-  const iceServers = {\r\n-    iceServers: [\r\n-      { urls: \"stun:stun.l.google.com:19302\" },\r\n-      { urls: \"stun:stun1.l.google.com:19302\" },\r\n-      // 🔒 Add TURN servers for production behind NAT/firewalls\r\n-    ],\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!roomId || isOfferer === null) {\r\n-      console.log(\"⏳ Waiting for server-assigned roomId and role...\");\r\n-      return;\r\n-    }\r\n-\r\n-    const init = async () => {\r\n-      if (!SOCKET_URL) {\r\n-        console.error(\"❌ NEXT_PUBLIC_SOCKET_URL is not defined\");\r\n-        return;\r\n-      }\r\n-\r\n-      try {\r\n-        // ✅ Connect to signaling server\r\n-        socketRef.current = io(SOCKET_URL, {\r\n-          transports: [\"websocket\"],\r\n-        });\r\n-\r\n-        socketRef.current.on(\"connect\", () => {\r\n-          console.log(\"✅ Connected to socket server:\", socketRef.current?.id);\r\n-        });\r\n-\r\n-        // ✅ Get local media stream immediately\r\n-        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n-        setLocalStream(stream);\r\n-        console.log(\"📷 Obtained local media stream\");\r\n-\r\n-        // ✅ Create RTCPeerConnection\r\n-        peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n-        console.log(\"🔧 Created RTCPeerConnection\");\r\n-\r\n-        // ✅ Add local tracks to peer connection\r\n-        stream.getTracks().forEach((track) => {\r\n-          peerConnectionRef.current?.addTrack(track, stream);\r\n-        });\r\n-\r\n-        // ✅ Handle remote stream\r\n-        peerConnectionRef.current.ontrack = (event) => {\r\n-          console.log(\"📡 Received remote stream track\");\r\n-          setRemoteStream(event.streams[0]);\r\n-        };\r\n-\r\n-        // ✅ Monitor connection state\r\n-        peerConnectionRef.current.onconnectionstatechange = () => {\r\n-          console.log(\"🔗 Connection state:\", peerConnectionRef.current?.connectionState);\r\n-        };\r\n-\r\n-        // ✅ Handle ICE candidates generated locally\r\n-        peerConnectionRef.current.onicecandidate = (event) => {\r\n-          if (event.candidate) {\r\n-            console.log(\"📤 Sending ICE candidate\");\r\n-            socketRef.current?.emit(\"ice-candidate\", { candidate: event.candidate, roomId });\r\n-          }\r\n-        };\r\n-\r\n-        // ✅ Join room and wait for confirmation before offer creation\r\n-        socketRef.current.emit(\"join-room\", roomId);\r\n-\r\n-        socketRef.current.on(\"joined-room\", async (joinedRoomId) => {\r\n-          console.log(\"🏠 Successfully joined room:\", joinedRoomId);\r\n-\r\n-          if (isOfferer) {\r\n-            console.log(\"📞 Creating offer...\");\r\n-            const offer = await peerConnectionRef.current!.createOffer();\r\n-            await peerConnectionRef.current!.setLocalDescription(offer);\r\n-            socketRef.current?.emit(\"offer\", { offer, roomId });\r\n-            console.log(\"📤 Sent offer:\", offer);\r\n-          }\r\n-        });\r\n-\r\n-        // ✅ Listen for offer\r\n-        socketRef.current.on(\"offer\", async ({ offer }) => {\r\n-          console.log(\"📩 Received offer:\", offer);\r\n-          await peerConnectionRef.current!.setRemoteDescription(new RTCSessionDescription(offer));\r\n-          const answer = await peerConnectionRef.current!.createAnswer();\r\n-          await peerConnectionRef.current!.setLocalDescription(answer);\r\n-          socketRef.current?.emit(\"answer\", { answer, roomId });\r\n-          console.log(\"📤 Sent answer:\", answer);\r\n-        });\r\n-\r\n-        // ✅ Listen for answer\r\n-        socketRef.current.on(\"answer\", async ({ answer }) => {\r\n-          console.log(\"📩 Received answer:\", answer);\r\n-          await peerConnectionRef.current!.setRemoteDescription(new RTCSessionDescription(answer));\r\n-        });\r\n-\r\n-        // ✅ Listen for ICE candidates from remote peer\r\n-        socketRef.current.on(\"ice-candidate\", async ({ candidate }) => {\r\n-          console.log(\"📩 Received ICE candidate:\", candidate);\r\n-          try {\r\n-            await peerConnectionRef.current!.addIceCandidate(new RTCIceCandidate(candidate));\r\n-          } catch (error) {\r\n-            console.error(\"❌ Error adding received ICE candidate:\", error);\r\n-          }\r\n-        });\r\n-\r\n-      } catch (error) {\r\n-        console.error(\"❌ Failed to initialize WebRTC:\", error);\r\n-      }\r\n-    };\r\n-\r\n-    init();\r\n-\r\n-    return () => {\r\n-      console.log(\"🧹 Cleaning up WebRTC and socket connections\");\r\n-      peerConnectionRef.current?.close();\r\n-      localStream?.getTracks().forEach((track) => track.stop());\r\n-      socketRef.current?.disconnect();\r\n-    };\r\n-  }, [roomId, isOfferer]);\r\n-\r\n-  return { localStream, remoteStream };\r\n-}\r\n"
                },
                {
                    "date": 1752301548912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n-import { useEffect, useRef, useState, useCallback } from \"react\";\r\n+// features/anonymousChat/hooks/useWebRTC.ts\r\n+\r\n+import { useEffect, useRef, useState } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n \r\n@@ -16,23 +18,8 @@\n       // 🔒 Add TURN servers for production behind NAT/firewalls\r\n     ],\r\n   };\r\n \r\n-  const stopWebRTC = useCallback(() => {\r\n-    console.log(\"🛑 Manually stopping WebRTC and socket connections\");\r\n-\r\n-    peerConnectionRef.current?.close();\r\n-    peerConnectionRef.current = null;\r\n-\r\n-    localStream?.getTracks().forEach((track) => track.stop());\r\n-    setLocalStream(null);\r\n-\r\n-    socketRef.current?.disconnect();\r\n-    socketRef.current = null;\r\n-\r\n-    setRemoteStream(null);\r\n-  }, [localStream]);\r\n-\r\n   useEffect(() => {\r\n     if (!roomId || isOfferer === null) {\r\n       console.log(\"⏳ Waiting for server-assigned roomId and role...\");\r\n       return;\r\n@@ -44,82 +31,86 @@\n         return;\r\n       }\r\n \r\n       try {\r\n-        // ✅ Connect to signaling server if not connected\r\n-        if (!socketRef.current) {\r\n-          socketRef.current = io(SOCKET_URL, {\r\n-            transports: [\"websocket\"],\r\n-          });\r\n+        // ✅ Connect to signaling server\r\n+        socketRef.current = io(SOCKET_URL, {\r\n+          transports: [\"websocket\"],\r\n+        });\r\n \r\n-          socketRef.current.on(\"connect\", () => {\r\n-            console.log(\"✅ Connected to socket server:\", socketRef.current?.id);\r\n-          });\r\n-        }\r\n+        socketRef.current.on(\"connect\", () => {\r\n+          console.log(\"✅ Connected to socket server:\", socketRef.current?.id);\r\n+        });\r\n \r\n-        // ✅ Get local media stream only if not already obtained\r\n-        if (!localStream) {\r\n-          const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n-          setLocalStream(stream);\r\n-          console.log(\"📷 Obtained local media stream\");\r\n-        }\r\n+        // ✅ Get local media stream immediately\r\n+        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n+        setLocalStream(stream);\r\n+        console.log(\"📷 Obtained local media stream\");\r\n \r\n-        // ✅ Create RTCPeerConnection only if not existing\r\n-        if (!peerConnectionRef.current) {\r\n-          peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n-          console.log(\"🔧 Created RTCPeerConnection\");\r\n+        // ✅ Create RTCPeerConnection\r\n+        peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n+        console.log(\"🔧 Created RTCPeerConnection\");\r\n \r\n-          // ✅ Add local tracks\r\n-          localStream?.getTracks().forEach((track) => {\r\n-            peerConnectionRef.current?.addTrack(track, localStream);\r\n-          });\r\n+        // ✅ Add local tracks to peer connection\r\n+        stream.getTracks().forEach((track) => {\r\n+          peerConnectionRef.current?.addTrack(track, stream);\r\n+        });\r\n \r\n-          // ✅ Handle remote stream\r\n-          peerConnectionRef.current.ontrack = (event) => {\r\n-            console.log(\"📡 Received remote stream track\");\r\n-            setRemoteStream(event.streams[0]);\r\n-          };\r\n+        // ✅ Handle remote stream\r\n+        peerConnectionRef.current.ontrack = (event) => {\r\n+          console.log(\"📡 Received remote stream track\");\r\n+          setRemoteStream(event.streams[0]);\r\n+        };\r\n \r\n-          // ✅ ICE candidates\r\n-          peerConnectionRef.current.onicecandidate = (event) => {\r\n-            if (event.candidate) {\r\n-              console.log(\"📤 Sending ICE candidate\");\r\n-              socketRef.current?.emit(\"ice-candidate\", { candidate: event.candidate, roomId });\r\n-            }\r\n-          };\r\n-        }\r\n+        // ✅ Monitor connection state\r\n+        peerConnectionRef.current.onconnectionstatechange = () => {\r\n+          console.log(\"🔗 Connection state:\", peerConnectionRef.current?.connectionState);\r\n+        };\r\n \r\n-        // ✅ Join room and handle offer/answer flow\r\n+        // ✅ Handle ICE candidates generated locally\r\n+        peerConnectionRef.current.onicecandidate = (event) => {\r\n+          if (event.candidate) {\r\n+            console.log(\"📤 Sending ICE candidate\");\r\n+            socketRef.current?.emit(\"ice-candidate\", { candidate: event.candidate, roomId });\r\n+          }\r\n+        };\r\n+\r\n+        // ✅ Join room and wait for confirmation before offer creation\r\n         socketRef.current.emit(\"join-room\", roomId);\r\n \r\n-        socketRef.current.on(\"joined-room\", async () => {\r\n-          console.log(\"🏠 Joined room:\", roomId);\r\n+        socketRef.current.on(\"joined-room\", async (joinedRoomId) => {\r\n+          console.log(\"🏠 Successfully joined room:\", joinedRoomId);\r\n \r\n-          if (isOfferer && peerConnectionRef.current) {\r\n+          if (isOfferer) {\r\n             console.log(\"📞 Creating offer...\");\r\n-            const offer = await peerConnectionRef.current.createOffer();\r\n-            await peerConnectionRef.current.setLocalDescription(offer);\r\n+            const offer = await peerConnectionRef.current!.createOffer();\r\n+            await peerConnectionRef.current!.setLocalDescription(offer);\r\n             socketRef.current?.emit(\"offer\", { offer, roomId });\r\n+            console.log(\"📤 Sent offer:\", offer);\r\n           }\r\n         });\r\n \r\n+        // ✅ Listen for offer\r\n         socketRef.current.on(\"offer\", async ({ offer }) => {\r\n           console.log(\"📩 Received offer:\", offer);\r\n-          await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(offer));\r\n-          const answer = await peerConnectionRef.current?.createAnswer();\r\n-          await peerConnectionRef.current?.setLocalDescription(answer);\r\n+          await peerConnectionRef.current!.setRemoteDescription(new RTCSessionDescription(offer));\r\n+          const answer = await peerConnectionRef.current!.createAnswer();\r\n+          await peerConnectionRef.current!.setLocalDescription(answer);\r\n           socketRef.current?.emit(\"answer\", { answer, roomId });\r\n+          console.log(\"📤 Sent answer:\", answer);\r\n         });\r\n \r\n+        // ✅ Listen for answer\r\n         socketRef.current.on(\"answer\", async ({ answer }) => {\r\n           console.log(\"📩 Received answer:\", answer);\r\n-          await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(answer));\r\n+          await peerConnectionRef.current!.setRemoteDescription(new RTCSessionDescription(answer));\r\n         });\r\n \r\n+        // ✅ Listen for ICE candidates from remote peer\r\n         socketRef.current.on(\"ice-candidate\", async ({ candidate }) => {\r\n           console.log(\"📩 Received ICE candidate:\", candidate);\r\n           try {\r\n-            await peerConnectionRef.current?.addIceCandidate(new RTCIceCandidate(candidate));\r\n+            await peerConnectionRef.current!.addIceCandidate(new RTCIceCandidate(candidate));\r\n           } catch (error) {\r\n             console.error(\"❌ Error adding received ICE candidate:\", error);\r\n           }\r\n         });\r\n@@ -131,10 +122,13 @@\n \r\n     init();\r\n \r\n     return () => {\r\n-      stopWebRTC();\r\n+      console.log(\"🧹 Cleaning up WebRTC and socket connections\");\r\n+      peerConnectionRef.current?.close();\r\n+      localStream?.getTracks().forEach((track) => track.stop());\r\n+      socketRef.current?.disconnect();\r\n     };\r\n-  }, [roomId, isOfferer, localStream, stopWebRTC]);\r\n+  }, [roomId, isOfferer]);\r\n \r\n-  return { localStream, remoteStream, stopWebRTC };\r\n+  return { localStream, remoteStream };\r\n }\r\n"
                },
                {
                    "date": 1752307135219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n // features/anonymousChat/hooks/useWebRTC.ts\r\n \r\n-import { useEffect, useRef, useState } from \"react\";\r\n+import { useEffect, useRef, useState, useCallback } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n \r\n@@ -18,117 +18,139 @@\n       // 🔒 Add TURN servers for production behind NAT/firewalls\r\n     ],\r\n   };\r\n \r\n-  useEffect(() => {\r\n+  const initWebRTC = useCallback(async () => {\r\n     if (!roomId || isOfferer === null) {\r\n       console.log(\"⏳ Waiting for server-assigned roomId and role...\");\r\n       return;\r\n     }\r\n \r\n-    const init = async () => {\r\n-      if (!SOCKET_URL) {\r\n-        console.error(\"❌ NEXT_PUBLIC_SOCKET_URL is not defined\");\r\n-        return;\r\n-      }\r\n+    if (!SOCKET_URL) {\r\n+      console.error(\"❌ NEXT_PUBLIC_SOCKET_URL is not defined\");\r\n+      return;\r\n+    }\r\n \r\n-      try {\r\n-        // ✅ Connect to signaling server\r\n-        socketRef.current = io(SOCKET_URL, {\r\n-          transports: [\"websocket\"],\r\n-        });\r\n+    try {\r\n+      // ✅ Connect to signaling server\r\n+      socketRef.current = io(SOCKET_URL, {\r\n+        transports: [\"websocket\"],\r\n+      });\r\n \r\n-        socketRef.current.on(\"connect\", () => {\r\n-          console.log(\"✅ Connected to socket server:\", socketRef.current?.id);\r\n-        });\r\n+      socketRef.current.on(\"connect\", () => {\r\n+        console.log(\"✅ Connected to socket server:\", socketRef.current?.id);\r\n+      });\r\n \r\n-        // ✅ Get local media stream immediately\r\n-        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n-        setLocalStream(stream);\r\n-        console.log(\"📷 Obtained local media stream\");\r\n+      // ✅ Get local media stream immediately\r\n+      const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n+      setLocalStream(stream);\r\n+      console.log(\"📷 Obtained local media stream\");\r\n \r\n-        // ✅ Create RTCPeerConnection\r\n-        peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n-        console.log(\"🔧 Created RTCPeerConnection\");\r\n+      // ✅ Create RTCPeerConnection\r\n+      peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n+      console.log(\"🔧 Created RTCPeerConnection\");\r\n \r\n-        // ✅ Add local tracks to peer connection\r\n-        stream.getTracks().forEach((track) => {\r\n-          peerConnectionRef.current?.addTrack(track, stream);\r\n-        });\r\n+      // ✅ Add local tracks to peer connection\r\n+      stream.getTracks().forEach((track) => {\r\n+        peerConnectionRef.current?.addTrack(track, stream);\r\n+      });\r\n \r\n-        // ✅ Handle remote stream\r\n-        peerConnectionRef.current.ontrack = (event) => {\r\n-          console.log(\"📡 Received remote stream track\");\r\n-          setRemoteStream(event.streams[0]);\r\n-        };\r\n+      // ✅ Handle remote stream\r\n+      peerConnectionRef.current.ontrack = (event) => {\r\n+        console.log(\"📡 Received remote stream track\");\r\n+        setRemoteStream(event.streams[0]);\r\n+      };\r\n \r\n-        // ✅ Monitor connection state\r\n-        peerConnectionRef.current.onconnectionstatechange = () => {\r\n-          console.log(\"🔗 Connection state:\", peerConnectionRef.current?.connectionState);\r\n-        };\r\n+      // ✅ Monitor connection state\r\n+      peerConnectionRef.current.onconnectionstatechange = () => {\r\n+        console.log(\"🔗 Connection state:\", peerConnectionRef.current?.connectionState);\r\n+      };\r\n \r\n-        // ✅ Handle ICE candidates generated locally\r\n-        peerConnectionRef.current.onicecandidate = (event) => {\r\n-          if (event.candidate) {\r\n-            console.log(\"📤 Sending ICE candidate\");\r\n-            socketRef.current?.emit(\"ice-candidate\", { candidate: event.candidate, roomId });\r\n-          }\r\n-        };\r\n+      // ✅ Handle ICE candidates generated locally\r\n+      peerConnectionRef.current.onicecandidate = (event) => {\r\n+        if (event.candidate) {\r\n+          console.log(\"📤 Sending ICE candidate\");\r\n+          socketRef.current?.emit(\"ice-candidate\", { candidate: event.candidate, roomId });\r\n+        }\r\n+      };\r\n \r\n-        // ✅ Join room and wait for confirmation before offer creation\r\n-        socketRef.current.emit(\"join-room\", roomId);\r\n+      // ✅ Join room and wait for confirmation before offer creation\r\n+      socketRef.current.emit(\"join-room\", roomId);\r\n \r\n-        socketRef.current.on(\"joined-room\", async (joinedRoomId) => {\r\n-          console.log(\"🏠 Successfully joined room:\", joinedRoomId);\r\n+      socketRef.current.on(\"joined-room\", async (joinedRoomId) => {\r\n+        console.log(\"🏠 Successfully joined room:\", joinedRoomId);\r\n \r\n-          if (isOfferer) {\r\n-            console.log(\"📞 Creating offer...\");\r\n-            const offer = await peerConnectionRef.current!.createOffer();\r\n-            await peerConnectionRef.current!.setLocalDescription(offer);\r\n-            socketRef.current?.emit(\"offer\", { offer, roomId });\r\n-            console.log(\"📤 Sent offer:\", offer);\r\n-          }\r\n-        });\r\n+        if (isOfferer) {\r\n+          console.log(\"📞 Creating offer...\");\r\n+          const offer = await peerConnectionRef.current!.createOffer();\r\n+          await peerConnectionRef.current!.setLocalDescription(offer);\r\n+          socketRef.current?.emit(\"offer\", { offer, roomId });\r\n+          console.log(\"📤 Sent offer:\", offer);\r\n+        }\r\n+      });\r\n \r\n-        // ✅ Listen for offer\r\n-        socketRef.current.on(\"offer\", async ({ offer }) => {\r\n-          console.log(\"📩 Received offer:\", offer);\r\n-          await peerConnectionRef.current!.setRemoteDescription(new RTCSessionDescription(offer));\r\n-          const answer = await peerConnectionRef.current!.createAnswer();\r\n-          await peerConnectionRef.current!.setLocalDescription(answer);\r\n-          socketRef.current?.emit(\"answer\", { answer, roomId });\r\n-          console.log(\"📤 Sent answer:\", answer);\r\n-        });\r\n+      // ✅ Listen for offer\r\n+      socketRef.current.on(\"offer\", async ({ offer }) => {\r\n+        console.log(\"📩 Received offer:\", offer);\r\n+        await peerConnectionRef.current!.setRemoteDescription(new RTCSessionDescription(offer));\r\n+        const answer = await peerConnectionRef.current!.createAnswer();\r\n+        await peerConnectionRef.current!.setLocalDescription(answer);\r\n+        socketRef.current?.emit(\"answer\", { answer, roomId });\r\n+        console.log(\"📤 Sent answer:\", answer);\r\n+      });\r\n \r\n-        // ✅ Listen for answer\r\n-        socketRef.current.on(\"answer\", async ({ answer }) => {\r\n-          console.log(\"📩 Received answer:\", answer);\r\n-          await peerConnectionRef.current!.setRemoteDescription(new RTCSessionDescription(answer));\r\n-        });\r\n+      // ✅ Listen for answer\r\n+      socketRef.current.on(\"answer\", async ({ answer }) => {\r\n+        console.log(\"📩 Received answer:\", answer);\r\n+        await peerConnectionRef.current!.setRemoteDescription(new RTCSessionDescription(answer));\r\n+      });\r\n \r\n-        // ✅ Listen for ICE candidates from remote peer\r\n-        socketRef.current.on(\"ice-candidate\", async ({ candidate }) => {\r\n-          console.log(\"📩 Received ICE candidate:\", candidate);\r\n-          try {\r\n-            await peerConnectionRef.current!.addIceCandidate(new RTCIceCandidate(candidate));\r\n-          } catch (error) {\r\n-            console.error(\"❌ Error adding received ICE candidate:\", error);\r\n-          }\r\n-        });\r\n+      // ✅ Listen for ICE candidates from remote peer\r\n+      socketRef.current.on(\"ice-candidate\", async ({ candidate }) => {\r\n+        console.log(\"📩 Received ICE candidate:\", candidate);\r\n+        try {\r\n+          await peerConnectionRef.current!.addIceCandidate(new RTCIceCandidate(candidate));\r\n+        } catch (error) {\r\n+          console.error(\"❌ Error adding received ICE candidate:\", error);\r\n+        }\r\n+      });\r\n+    } catch (error) {\r\n+      console.error(\"❌ Failed to initialize WebRTC:\", error);\r\n+    }\r\n+  }, [roomId, isOfferer]);\r\n \r\n-      } catch (error) {\r\n-        console.error(\"❌ Failed to initialize WebRTC:\", error);\r\n-      }\r\n-    };\r\n+  const stopWebRTC = useCallback(() => {\r\n+    console.log(\"🛑 Manually stopping WebRTC and socket connections\");\r\n \r\n-    init();\r\n+    // ✅ Close peer connection\r\n+    if (peerConnectionRef.current) {\r\n+      peerConnectionRef.current.close();\r\n+      peerConnectionRef.current = null;\r\n+    }\r\n \r\n+    // ✅ Stop local media tracks\r\n+    if (localStream) {\r\n+      localStream.getTracks().forEach((track) => track.stop());\r\n+      setLocalStream(null);\r\n+    }\r\n+\r\n+    // ✅ Disconnect socket\r\n+    if (socketRef.current) {\r\n+      socketRef.current.disconnect();\r\n+      socketRef.current = null;\r\n+    }\r\n+\r\n+    // ✅ Clear remote stream\r\n+    setRemoteStream(null);\r\n+  }, [localStream]);\r\n+\r\n+  // ✅ Initialize when roomId and isOfferer change\r\n+  useEffect(() => {\r\n+    initWebRTC();\r\n+\r\n     return () => {\r\n-      console.log(\"🧹 Cleaning up WebRTC and socket connections\");\r\n-      peerConnectionRef.current?.close();\r\n-      localStream?.getTracks().forEach((track) => track.stop());\r\n-      socketRef.current?.disconnect();\r\n+      stopWebRTC();\r\n     };\r\n-  }, [roomId, isOfferer]);\r\n+  }, [initWebRTC, stopWebRTC]);\r\n \r\n-  return { localStream, remoteStream };\r\n+  return { localStream, remoteStream, stopWebRTC };\r\n }\r\n"
                },
                {
                    "date": 1752307458264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n // features/anonymousChat/hooks/useWebRTC.ts\r\n \r\n-import { useEffect, useRef, useState, useCallback } from \"react\";\r\n+import { useEffect, useRef, useState } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n \r\n@@ -18,139 +18,117 @@\n       // 🔒 Add TURN servers for production behind NAT/firewalls\r\n     ],\r\n   };\r\n \r\n-  const initWebRTC = useCallback(async () => {\r\n+  useEffect(() => {\r\n     if (!roomId || isOfferer === null) {\r\n       console.log(\"⏳ Waiting for server-assigned roomId and role...\");\r\n       return;\r\n     }\r\n \r\n-    if (!SOCKET_URL) {\r\n-      console.error(\"❌ NEXT_PUBLIC_SOCKET_URL is not defined\");\r\n-      return;\r\n-    }\r\n+    const init = async () => {\r\n+      if (!SOCKET_URL) {\r\n+        console.error(\"❌ NEXT_PUBLIC_SOCKET_URL is not defined\");\r\n+        return;\r\n+      }\r\n \r\n-    try {\r\n-      // ✅ Connect to signaling server\r\n-      socketRef.current = io(SOCKET_URL, {\r\n-        transports: [\"websocket\"],\r\n-      });\r\n+      try {\r\n+        // ✅ Connect to signaling server\r\n+        socketRef.current = io(SOCKET_URL, {\r\n+          transports: [\"websocket\"],\r\n+        });\r\n \r\n-      socketRef.current.on(\"connect\", () => {\r\n-        console.log(\"✅ Connected to socket server:\", socketRef.current?.id);\r\n-      });\r\n+        socketRef.current.on(\"connect\", () => {\r\n+          console.log(\"✅ Connected to socket server:\", socketRef.current?.id);\r\n+        });\r\n \r\n-      // ✅ Get local media stream immediately\r\n-      const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n-      setLocalStream(stream);\r\n-      console.log(\"📷 Obtained local media stream\");\r\n+        // ✅ Get local media stream immediately\r\n+        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n+        setLocalStream(stream);\r\n+        console.log(\"📷 Obtained local media stream\");\r\n \r\n-      // ✅ Create RTCPeerConnection\r\n-      peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n-      console.log(\"🔧 Created RTCPeerConnection\");\r\n+        // ✅ Create RTCPeerConnection\r\n+        peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n+        console.log(\"🔧 Created RTCPeerConnection\");\r\n \r\n-      // ✅ Add local tracks to peer connection\r\n-      stream.getTracks().forEach((track) => {\r\n-        peerConnectionRef.current?.addTrack(track, stream);\r\n-      });\r\n+        // ✅ Add local tracks to peer connection\r\n+        stream.getTracks().forEach((track) => {\r\n+          peerConnectionRef.current?.addTrack(track, stream);\r\n+        });\r\n \r\n-      // ✅ Handle remote stream\r\n-      peerConnectionRef.current.ontrack = (event) => {\r\n-        console.log(\"📡 Received remote stream track\");\r\n-        setRemoteStream(event.streams[0]);\r\n-      };\r\n+        // ✅ Handle remote stream\r\n+        peerConnectionRef.current.ontrack = (event) => {\r\n+          console.log(\"📡 Received remote stream track\");\r\n+          setRemoteStream(event.streams[0]);\r\n+        };\r\n \r\n-      // ✅ Monitor connection state\r\n-      peerConnectionRef.current.onconnectionstatechange = () => {\r\n-        console.log(\"🔗 Connection state:\", peerConnectionRef.current?.connectionState);\r\n-      };\r\n+        // ✅ Monitor connection state\r\n+        peerConnectionRef.current.onconnectionstatechange = () => {\r\n+          console.log(\"🔗 Connection state:\", peerConnectionRef.current?.connectionState);\r\n+        };\r\n \r\n-      // ✅ Handle ICE candidates generated locally\r\n-      peerConnectionRef.current.onicecandidate = (event) => {\r\n-        if (event.candidate) {\r\n-          console.log(\"📤 Sending ICE candidate\");\r\n-          socketRef.current?.emit(\"ice-candidate\", { candidate: event.candidate, roomId });\r\n-        }\r\n-      };\r\n+        // ✅ Handle ICE candidates generated locally\r\n+        peerConnectionRef.current.onicecandidate = (event) => {\r\n+          if (event.candidate) {\r\n+            console.log(\"📤 Sending ICE candidate\");\r\n+            socketRef.current?.emit(\"ice-candidate\", { candidate: event.candidate, roomId });\r\n+          }\r\n+        };\r\n \r\n-      // ✅ Join room and wait for confirmation before offer creation\r\n-      socketRef.current.emit(\"join-room\", roomId);\r\n+        // ✅ Join room and wait for confirmation before offer creation\r\n+        socketRef.current.emit(\"join-room\", roomId);\r\n \r\n-      socketRef.current.on(\"joined-room\", async (joinedRoomId) => {\r\n-        console.log(\"🏠 Successfully joined room:\", joinedRoomId);\r\n+        socketRef.current.on(\"joined-room\", async (joinedRoomId) => {\r\n+          console.log(\"🏠 Successfully joined room:\", joinedRoomId);\r\n \r\n-        if (isOfferer) {\r\n-          console.log(\"📞 Creating offer...\");\r\n-          const offer = await peerConnectionRef.current!.createOffer();\r\n-          await peerConnectionRef.current!.setLocalDescription(offer);\r\n-          socketRef.current?.emit(\"offer\", { offer, roomId });\r\n-          console.log(\"📤 Sent offer:\", offer);\r\n-        }\r\n-      });\r\n+          if (isOfferer) {\r\n+            console.log(\"📞 Creating offer...\");\r\n+            const offer = await peerConnectionRef.current!.createOffer();\r\n+            await peerConnectionRef.current!.setLocalDescription(offer);\r\n+            socketRef.current?.emit(\"offer\", { offer, roomId });\r\n+            console.log(\"📤 Sent offer:\", offer);\r\n+          }\r\n+        });\r\n \r\n-      // ✅ Listen for offer\r\n-      socketRef.current.on(\"offer\", async ({ offer }) => {\r\n-        console.log(\"📩 Received offer:\", offer);\r\n-        await peerConnectionRef.current!.setRemoteDescription(new RTCSessionDescription(offer));\r\n-        const answer = await peerConnectionRef.current!.createAnswer();\r\n-        await peerConnectionRef.current!.setLocalDescription(answer);\r\n-        socketRef.current?.emit(\"answer\", { answer, roomId });\r\n-        console.log(\"📤 Sent answer:\", answer);\r\n-      });\r\n+        // ✅ Listen for offer\r\n+        socketRef.current.on(\"offer\", async ({ offer }) => {\r\n+          console.log(\"📩 Received offer:\", offer);\r\n+          await peerConnectionRef.current!.setRemoteDescription(new RTCSessionDescription(offer));\r\n+          const answer = await peerConnectionRef.current!.createAnswer();\r\n+          await peerConnectionRef.current!.setLocalDescription(answer);\r\n+          socketRef.current?.emit(\"answer\", { answer, roomId });\r\n+          console.log(\"📤 Sent answer:\", answer);\r\n+        });\r\n \r\n-      // ✅ Listen for answer\r\n-      socketRef.current.on(\"answer\", async ({ answer }) => {\r\n-        console.log(\"📩 Received answer:\", answer);\r\n-        await peerConnectionRef.current!.setRemoteDescription(new RTCSessionDescription(answer));\r\n-      });\r\n+        // ✅ Listen for answer\r\n+        socketRef.current.on(\"answer\", async ({ answer }) => {\r\n+          console.log(\"📩 Received answer:\", answer);\r\n+          await peerConnectionRef.current!.setRemoteDescription(new RTCSessionDescription(answer));\r\n+        });\r\n \r\n-      // ✅ Listen for ICE candidates from remote peer\r\n-      socketRef.current.on(\"ice-candidate\", async ({ candidate }) => {\r\n-        console.log(\"📩 Received ICE candidate:\", candidate);\r\n-        try {\r\n-          await peerConnectionRef.current!.addIceCandidate(new RTCIceCandidate(candidate));\r\n-        } catch (error) {\r\n-          console.error(\"❌ Error adding received ICE candidate:\", error);\r\n-        }\r\n-      });\r\n-    } catch (error) {\r\n-      console.error(\"❌ Failed to initialize WebRTC:\", error);\r\n-    }\r\n-  }, [roomId, isOfferer]);\r\n+        // ✅ Listen for ICE candidates from remote peer\r\n+        socketRef.current.on(\"ice-candidate\", async ({ candidate }) => {\r\n+          console.log(\"📩 Received ICE candidate:\", candidate);\r\n+          try {\r\n+            await peerConnectionRef.current!.addIceCandidate(new RTCIceCandidate(candidate));\r\n+          } catch (error) {\r\n+            console.error(\"❌ Error adding received ICE candidate:\", error);\r\n+          }\r\n+        });\r\n \r\n-  const stopWebRTC = useCallback(() => {\r\n-    console.log(\"🛑 Manually stopping WebRTC and socket connections\");\r\n+      } catch (error) {\r\n+        console.error(\"❌ Failed to initialize WebRTC:\", error);\r\n+      }\r\n+    };\r\n \r\n-    // ✅ Close peer connection\r\n-    if (peerConnectionRef.current) {\r\n-      peerConnectionRef.current.close();\r\n-      peerConnectionRef.current = null;\r\n-    }\r\n+    init();\r\n \r\n-    // ✅ Stop local media tracks\r\n-    if (localStream) {\r\n-      localStream.getTracks().forEach((track) => track.stop());\r\n-      setLocalStream(null);\r\n-    }\r\n-\r\n-    // ✅ Disconnect socket\r\n-    if (socketRef.current) {\r\n-      socketRef.current.disconnect();\r\n-      socketRef.current = null;\r\n-    }\r\n-\r\n-    // ✅ Clear remote stream\r\n-    setRemoteStream(null);\r\n-  }, [localStream]);\r\n-\r\n-  // ✅ Initialize when roomId and isOfferer change\r\n-  useEffect(() => {\r\n-    initWebRTC();\r\n-\r\n     return () => {\r\n-      stopWebRTC();\r\n+      console.log(\"🧹 Cleaning up WebRTC and socket connections\");\r\n+      peerConnectionRef.current?.close();\r\n+      localStream?.getTracks().forEach((track) => track.stop());\r\n+      socketRef.current?.disconnect();\r\n     };\r\n-  }, [initWebRTC, stopWebRTC]);\r\n+  }, [roomId, isOfferer]);\r\n \r\n-  return { localStream, remoteStream, stopWebRTC };\r\n+  return { localStream, remoteStream };\r\n }\r\n"
                },
                {
                    "date": 1752311536461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,10 @@\n-// features/anonymousChat/hooks/useWebRTC.ts\r\n-\r\n import { useEffect, useRef, useState } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n \r\n-export default function useWebRTC(roomId: string | null, isOfferer: boolean | null) {\r\n+export default function useWebRTC(roomId: string | null, isOfferer: boolean | null, isStarted: boolean) {\r\n   const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);\r\n   const [localStream, setLocalStream] = useState<MediaStream | null>(null);\r\n   const peerConnectionRef = useRef<RTCPeerConnection | null>(null);\r\n   const socketRef = useRef<Socket | null>(null);\r\n@@ -19,10 +17,10 @@\n     ],\r\n   };\r\n \r\n   useEffect(() => {\r\n-    if (!roomId || isOfferer === null) {\r\n-      console.log(\"⏳ Waiting for server-assigned roomId and role...\");\r\n+    if (!roomId || isOfferer === null || !isStarted) {\r\n+      console.log(\"⏳ Waiting for Start button click + server-assigned roomId + role...\");\r\n       return;\r\n     }\r\n \r\n     const init = async () => {\r\n@@ -40,9 +38,9 @@\n         socketRef.current.on(\"connect\", () => {\r\n           console.log(\"✅ Connected to socket server:\", socketRef.current?.id);\r\n         });\r\n \r\n-        // ✅ Get local media stream immediately\r\n+        // ✅ Get local media stream AFTER user clicks Start\r\n         const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n         setLocalStream(stream);\r\n         console.log(\"📷 Obtained local media stream\");\r\n \r\n@@ -127,8 +125,8 @@\n       peerConnectionRef.current?.close();\r\n       localStream?.getTracks().forEach((track) => track.stop());\r\n       socketRef.current?.disconnect();\r\n     };\r\n-  }, [roomId, isOfferer]);\r\n+  }, [roomId, isOfferer, isStarted]);\r\n \r\n   return { localStream, remoteStream };\r\n }\r\n"
                }
            ],
            "date": 1752230051942,
            "name": "Commit-0",
            "content": "// features/anonymousChat/hooks/useWebRTC.ts\r\n\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { io, Socket } from \"socket.io-client\";\r\n\r\nconst SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"http://localhost:3001\";\r\n\r\nexport default function useWebRTC(roomId: string) {\r\n  const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);\r\n  const localStreamRef = useRef<MediaStream | null>(null);\r\n  const peerConnectionRef = useRef<RTCPeerConnection | null>(null);\r\n  const socketRef = useRef<Socket | null>(null);\r\n\r\n  const iceServers = {\r\n    iceServers: [\r\n      { urls: \"stun:stun.l.google.com:19302\" },\r\n      { urls: \"stun:stun1.l.google.com:19302\" },\r\n    ],\r\n  };\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      socketRef.current = io(SOCKET_URL);\r\n      localStreamRef.current = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n\r\n      socketRef.current.emit(\"join-room\", roomId);\r\n\r\n      peerConnectionRef.current = new RTCPeerConnection(iceServers);\r\n\r\n      // Add local tracks\r\n      localStreamRef.current.getTracks().forEach((track) => {\r\n        peerConnectionRef.current?.addTrack(track, localStreamRef.current as MediaStream);\r\n      });\r\n\r\n      // Handle remote stream\r\n      peerConnectionRef.current.ontrack = (event) => {\r\n        setRemoteStream(event.streams[0]);\r\n      };\r\n\r\n      // ICE candidates\r\n      peerConnectionRef.current.onicecandidate = (event) => {\r\n        if (event.candidate) {\r\n          socketRef.current?.emit(\"ice-candidate\", event.candidate, roomId);\r\n        }\r\n      };\r\n\r\n      socketRef.current.on(\"offer\", async (offer: RTCSessionDescriptionInit) => {\r\n        await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(offer));\r\n        const answer = await peerConnectionRef.current?.createAnswer();\r\n        await peerConnectionRef.current?.setLocalDescription(answer);\r\n        socketRef.current?.emit(\"answer\", answer, roomId);\r\n      });\r\n\r\n      socketRef.current.on(\"answer\", async (answer: RTCSessionDescriptionInit) => {\r\n        await peerConnectionRef.current?.setRemoteDescription(new RTCSessionDescription(answer));\r\n      });\r\n\r\n      socketRef.current.on(\"ice-candidate\", async (candidate: RTCIceCandidateInit) => {\r\n        try {\r\n          await peerConnectionRef.current?.addIceCandidate(new RTCIceCandidate(candidate));\r\n        } catch (error) {\r\n          console.error(\"Error adding received ice candidate\", error);\r\n        }\r\n      });\r\n\r\n      // Create offer if second user joins\r\n      socketRef.current.on(\"user-joined\", async () => {\r\n        const offer = await peerConnectionRef.current?.createOffer();\r\n        await peerConnectionRef.current?.setLocalDescription(offer);\r\n        socketRef.current?.emit(\"offer\", offer, roomId);\r\n      });\r\n    };\r\n\r\n    init();\r\n\r\n    return () => {\r\n      peerConnectionRef.current?.close();\r\n      socketRef.current?.disconnect();\r\n    };\r\n  }, [roomId]);\r\n\r\n  return { localStream: localStreamRef.current, remoteStream };\r\n}\r\n"
        }
    ]
}