{
    "sourceFile": "features/anonymousChat/hooks/useSocket.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1752230016907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752240997860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n import { useEffect, useRef } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n \r\n-const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"http://localhost:3001\";\r\n+const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n \r\n export default function useSocket(): Socket | null {\r\n   const socketRef = useRef<Socket | null>(null);\r\n \r\n"
                },
                {
                    "date": 1752241390863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,34 +1,39 @@\n // features/anonymousChat/hooks/useSocket.ts\r\n \r\n-import { useEffect, useRef } from \"react\";\r\n+import { useEffect, useRef, useState } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n \r\n export default function useSocket(): Socket | null {\r\n-  const socketRef = useRef<Socket | null>(null);\r\n+  const [socket, setSocket] = useState<Socket | null>(null);\r\n \r\n   useEffect(() => {\r\n-    const socket = io(SOCKET_URL, {\r\n+    if (!SOCKET_URL) {\r\n+      console.error(\"❌ NEXT_PUBLIC_SOCKET_URL is not defined\");\r\n+      return;\r\n+    }\r\n+\r\n+    const newSocket = io(SOCKET_URL, {\r\n       transports: [\"websocket\"],\r\n       reconnectionAttempts: 3,\r\n       reconnectionDelay: 1000,\r\n     });\r\n \r\n-    socketRef.current = socket;\r\n+    setSocket(newSocket);\r\n \r\n-    socket.on(\"connect\", () => {\r\n-      console.log(\"✅ Connected to socket server:\", socket.id);\r\n+    newSocket.on(\"connect\", () => {\r\n+      console.log(\"✅ Connected to socket server:\", newSocket.id);\r\n     });\r\n \r\n-    socket.on(\"disconnect\", () => {\r\n+    newSocket.on(\"disconnect\", () => {\r\n       console.log(\"❌ Disconnected from socket server\");\r\n     });\r\n \r\n     return () => {\r\n-      socket.disconnect();\r\n+      newSocket.disconnect();\r\n     };\r\n   }, []);\r\n \r\n-  return socketRef.current;\r\n+  return socket;\r\n }\r\n"
                },
                {
                    "date": 1752259038255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n // features/anonymousChat/hooks/useSocket.ts\r\n \r\n-import { useEffect, useRef, useState } from \"react\";\r\n+import { useEffect, useState } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n \r\n@@ -17,20 +17,25 @@\n     const newSocket = io(SOCKET_URL, {\r\n       transports: [\"websocket\"],\r\n       reconnectionAttempts: 3,\r\n       reconnectionDelay: 1000,\r\n+      forceNew: true, // ✅ ensures fresh connection per hook usage\r\n     });\r\n \r\n-    setSocket(newSocket);\r\n-\r\n     newSocket.on(\"connect\", () => {\r\n       console.log(\"✅ Connected to socket server:\", newSocket.id);\r\n     });\r\n \r\n     newSocket.on(\"disconnect\", () => {\r\n       console.log(\"❌ Disconnected from socket server\");\r\n     });\r\n \r\n+    newSocket.on(\"connect_error\", (err) => {\r\n+      console.error(\"⚠️ Socket connection error:\", err.message);\r\n+    });\r\n+\r\n+    setSocket(newSocket);\r\n+\r\n     return () => {\r\n       newSocket.disconnect();\r\n     };\r\n   }, []);\r\n"
                },
                {
                    "date": 1758888884811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,19 @@\n // features/anonymousChat/hooks/useSocket.ts\r\n-\r\n-import { useEffect, useState } from \"react\";\r\n+import { useEffect, useState, useCallback } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n \r\n-export default function useSocket(): Socket | null {\r\n+export interface RoomPayload {\r\n+  roomId: string;\r\n+  name?: string;\r\n+  topic?: string;\r\n+  description?: string;\r\n+  password?: string;\r\n+}\r\n+\r\n+export default function useSocket() {\r\n   const [socket, setSocket] = useState<Socket | null>(null);\r\n \r\n   useEffect(() => {\r\n     if (!SOCKET_URL) {\r\n@@ -17,9 +24,9 @@\n     const newSocket = io(SOCKET_URL, {\r\n       transports: [\"websocket\"],\r\n       reconnectionAttempts: 3,\r\n       reconnectionDelay: 1000,\r\n-      forceNew: true, // ✅ ensures fresh connection per hook usage\r\n+      forceNew: true,\r\n     });\r\n \r\n     newSocket.on(\"connect\", () => {\r\n       console.log(\"✅ Connected to socket server:\", newSocket.id);\r\n@@ -39,6 +46,49 @@\n       newSocket.disconnect();\r\n     };\r\n   }, []);\r\n \r\n-  return socket;\r\n+  // ---------- 🔗 ROOM HELPERS ----------\r\n+  const createRoom = useCallback(\r\n+    (data: Omit<RoomPayload, \"roomId\">, cb?: (res: any) => void) => {\r\n+      socket?.emit(\"room:create\", data, cb);\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  const joinRoom = useCallback(\r\n+    (payload: { roomId: string; password?: string }, cb?: (res: any) => void) => {\r\n+      socket?.emit(\"room:join\", payload, cb);\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  const leaveRoom = useCallback(\r\n+    (roomId: string) => {\r\n+      socket?.emit(\"room:leave\", { roomId });\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  const sendRoomMessage = useCallback(\r\n+    (roomId: string, message: string) => {\r\n+      socket?.emit(\"room:message\", { roomId, message });\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  const listRooms = useCallback(\r\n+    (cb: (rooms: any[]) => void) => {\r\n+      socket?.emit(\"room:list\", null, cb);\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  return {\r\n+    socket,          // ✅ still accessible for anonymous chat\r\n+    createRoom,\r\n+    joinRoom,\r\n+    leaveRoom,\r\n+    sendRoomMessage,\r\n+    listRooms,\r\n+  };\r\n }\r\n"
                },
                {
                    "date": 1758888914123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,12 @@\n // features/anonymousChat/hooks/useSocket.ts\r\n-import { useEffect, useState, useCallback } from \"react\";\r\n+\r\n+import { useEffect, useState } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n \r\n-export interface RoomPayload {\r\n-  roomId: string;\r\n-  name?: string;\r\n-  topic?: string;\r\n-  description?: string;\r\n-  password?: string;\r\n-}\r\n-\r\n-export default function useSocket() {\r\n+export default function useSocket(): Socket | null {\r\n   const [socket, setSocket] = useState<Socket | null>(null);\r\n \r\n   useEffect(() => {\r\n     if (!SOCKET_URL) {\r\n@@ -24,9 +17,9 @@\n     const newSocket = io(SOCKET_URL, {\r\n       transports: [\"websocket\"],\r\n       reconnectionAttempts: 3,\r\n       reconnectionDelay: 1000,\r\n-      forceNew: true,\r\n+      forceNew: true, // ✅ ensures fresh connection per hook usage\r\n     });\r\n \r\n     newSocket.on(\"connect\", () => {\r\n       console.log(\"✅ Connected to socket server:\", newSocket.id);\r\n@@ -46,49 +39,6 @@\n       newSocket.disconnect();\r\n     };\r\n   }, []);\r\n \r\n-  // ---------- 🔗 ROOM HELPERS ----------\r\n-  const createRoom = useCallback(\r\n-    (data: Omit<RoomPayload, \"roomId\">, cb?: (res: any) => void) => {\r\n-      socket?.emit(\"room:create\", data, cb);\r\n-    },\r\n-    [socket]\r\n-  );\r\n-\r\n-  const joinRoom = useCallback(\r\n-    (payload: { roomId: string; password?: string }, cb?: (res: any) => void) => {\r\n-      socket?.emit(\"room:join\", payload, cb);\r\n-    },\r\n-    [socket]\r\n-  );\r\n-\r\n-  const leaveRoom = useCallback(\r\n-    (roomId: string) => {\r\n-      socket?.emit(\"room:leave\", { roomId });\r\n-    },\r\n-    [socket]\r\n-  );\r\n-\r\n-  const sendRoomMessage = useCallback(\r\n-    (roomId: string, message: string) => {\r\n-      socket?.emit(\"room:message\", { roomId, message });\r\n-    },\r\n-    [socket]\r\n-  );\r\n-\r\n-  const listRooms = useCallback(\r\n-    (cb: (rooms: any[]) => void) => {\r\n-      socket?.emit(\"room:list\", null, cb);\r\n-    },\r\n-    [socket]\r\n-  );\r\n-\r\n-  return {\r\n-    socket,          // ✅ still accessible for anonymous chat\r\n-    createRoom,\r\n-    joinRoom,\r\n-    leaveRoom,\r\n-    sendRoomMessage,\r\n-    listRooms,\r\n-  };\r\n+  return socket;\r\n }\r\n"
                },
                {
                    "date": 1758889022884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,19 @@\n // features/anonymousChat/hooks/useSocket.ts\r\n-\r\n-import { useEffect, useState } from \"react\";\r\n+import { useEffect, useState, useCallback } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n \r\n-export default function useSocket(): Socket | null {\r\n+export interface RoomPayload {\r\n+  roomId: string;\r\n+  name?: string;\r\n+  topic?: string;\r\n+  description?: string;\r\n+  password?: string;\r\n+}\r\n+\r\n+export default function useSocket() {\r\n   const [socket, setSocket] = useState<Socket | null>(null);\r\n \r\n   useEffect(() => {\r\n     if (!SOCKET_URL) {\r\n@@ -17,9 +24,9 @@\n     const newSocket = io(SOCKET_URL, {\r\n       transports: [\"websocket\"],\r\n       reconnectionAttempts: 3,\r\n       reconnectionDelay: 1000,\r\n-      forceNew: true, // ✅ ensures fresh connection per hook usage\r\n+      forceNew: true,\r\n     });\r\n \r\n     newSocket.on(\"connect\", () => {\r\n       console.log(\"✅ Connected to socket server:\", newSocket.id);\r\n@@ -39,6 +46,49 @@\n       newSocket.disconnect();\r\n     };\r\n   }, []);\r\n \r\n-  return socket;\r\n+  // ---------- 🔗 ROOM HELPERS ----------\r\n+  const createRoom = useCallback(\r\n+    (data: Omit<RoomPayload, \"roomId\">, cb?: (res: any) => void) => {\r\n+      socket?.emit(\"room:create\", data, cb);\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  const joinRoom = useCallback(\r\n+    (payload: { roomId: string; password?: string }, cb?: (res: any) => void) => {\r\n+      socket?.emit(\"room:join\", payload, cb);\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  const leaveRoom = useCallback(\r\n+    (roomId: string) => {\r\n+      socket?.emit(\"room:leave\", { roomId });\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  const sendRoomMessage = useCallback(\r\n+    (roomId: string, message: string) => {\r\n+      socket?.emit(\"room:message\", { roomId, message });\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  const listRooms = useCallback(\r\n+    (cb: (rooms: any[]) => void) => {\r\n+      socket?.emit(\"room:list\", null, cb);\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  return {\r\n+    socket,          // ✅ still accessible for anonymous chat\r\n+    createRoom,\r\n+    joinRoom,\r\n+    leaveRoom,\r\n+    sendRoomMessage,\r\n+    listRooms,\r\n+  };\r\n }\r\n"
                },
                {
                    "date": 1758889036743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,44 @@\n+// features/anonymousChat/hooks/useSocket.ts\r\n+\r\n+import { useEffect, useState } from \"react\";\r\n+import { io, Socket } from \"socket.io-client\";\r\n+\r\n+const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n+\r\n+export default function useSocket(): Socket | null {\r\n+  const [socket, setSocket] = useState<Socket | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    if (!SOCKET_URL) {\r\n+      console.error(\"❌ NEXT_PUBLIC_SOCKET_URL is not defined\");\r\n+      return;\r\n+    }\r\n+\r\n+    const newSocket = io(SOCKET_URL, {\r\n+      transports: [\"websocket\"],\r\n+      reconnectionAttempts: 3,\r\n+      reconnectionDelay: 1000,\r\n+      forceNew: true, // ✅ ensures fresh connection per hook usage\r\n+    });\r\n+\r\n+    newSocket.on(\"connect\", () => {\r\n+      console.log(\"✅ Connected to socket server:\", newSocket.id);\r\n+    });\r\n+\r\n+    newSocket.on(\"disconnect\", () => {\r\n+      console.log(\"❌ Disconnected from socket server\");\r\n+    });\r\n+\r\n+    newSocket.on(\"connect_error\", (err) => {\r\n+      console.error(\"⚠️ Socket connection error:\", err.message);\r\n+    });\r\n+\r\n+    setSocket(newSocket);\r\n+\r\n+    return () => {\r\n+      newSocket.disconnect();\r\n+    };\r\n+  }, []);\r\n+\r\n+  return socket;\r\n+}\r\n"
                },
                {
                    "date": 1758889112112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,78 +1,51 @@\n-// features/anonymousChat/hooks/useSocket.ts\r\n-\r\n import { useEffect, useState } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n \r\n-export default function useSocket(): Socket | null {\r\n-  const [socket, setSocket] = useState<Socket | null>(null);\r\n+// Extend the Socket type to include our helpers\r\n+type RoomSocket = Socket & {\r\n+  createRoom?: (data: any, cb?: (res: any) => void) => void;\r\n+  joinRoom?: (payload: any, cb?: (res: any) => void) => void;\r\n+  leaveRoom?: (roomId: string) => void;\r\n+  sendRoomMessage?: (roomId: string, message: string) => void;\r\n+  listRooms?: (cb: (rooms: any[]) => void) => void;\r\n+};\r\n \r\n+export default function useSocket(): RoomSocket | null {\r\n+  const [socket, setSocket] = useState<RoomSocket | null>(null);\r\n+\r\n   useEffect(() => {\r\n     if (!SOCKET_URL) {\r\n       console.error(\"❌ NEXT_PUBLIC_SOCKET_URL is not defined\");\r\n       return;\r\n     }\r\n \r\n-    const newSocket = io(SOCKET_URL, {\r\n+    const newSocket: RoomSocket = io(SOCKET_URL, {\r\n       transports: [\"websocket\"],\r\n       reconnectionAttempts: 3,\r\n       reconnectionDelay: 1000,\r\n-      forceNew: true, // ✅ ensures fresh connection per hook usage\r\n-    });\r\n+      forceNew: true,\r\n+    }) as RoomSocket;\r\n \r\n-    newSocket.on(\"connect\", () => {\r\n-      console.log(\"✅ Connected to socket server:\", newSocket.id);\r\n-    });\r\n+    // -------- Room helpers (added directly on socket) --------\r\n+    newSocket.createRoom = (data, cb) =>\r\n+      newSocket.emit(\"room:create\", data, cb);\r\n \r\n-    newSocket.on(\"disconnect\", () => {\r\n-      console.log(\"❌ Disconnected from socket server\");\r\n-    });\r\n+    newSocket.joinRoom = (payload, cb) =>\r\n+      newSocket.emit(\"room:join\", payload, cb);\r\n \r\n-    newSocket.on(\"connect_error\", (err) => {\r\n-      console.error(\"⚠️ Socket connection error:\", err.message);\r\n-    });\r\n+    newSocket.leaveRoom = (roomId) =>\r\n+      newSocket.emit(\"room:leave\", { roomId });\r\n \r\n-    setSocket(newSocket);\r\n+    newSocket.sendRoomMessage = (roomId, message) =>\r\n+      newSocket.emit(\"room:message\", { roomId, message });\r\n \r\n-    return () => {\r\n-      newSocket.disconnect();\r\n-    };\r\n-  }, []);\r\n+    newSocket.listRooms = (cb) =>\r\n+      newSocket.emit(\"room:list\", null, cb);\r\n \r\n-  return socket;\r\n-}\r\n-// features/anonymousChat/hooks/useSocket.ts\r\n-import { useEffect, useState, useCallback } from \"react\";\r\n-import { io, Socket } from \"socket.io-client\";\r\n-\r\n-const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n-\r\n-export interface RoomPayload {\r\n-  roomId: string;\r\n-  name?: string;\r\n-  topic?: string;\r\n-  description?: string;\r\n-  password?: string;\r\n-}\r\n-\r\n-export default function useSocket() {\r\n-  const [socket, setSocket] = useState<Socket | null>(null);\r\n-\r\n-  useEffect(() => {\r\n-    if (!SOCKET_URL) {\r\n-      console.error(\"❌ NEXT_PUBLIC_SOCKET_URL is not defined\");\r\n-      return;\r\n-    }\r\n-\r\n-    const newSocket = io(SOCKET_URL, {\r\n-      transports: [\"websocket\"],\r\n-      reconnectionAttempts: 3,\r\n-      reconnectionDelay: 1000,\r\n-      forceNew: true,\r\n-    });\r\n-\r\n+    // -------- Logs --------\r\n     newSocket.on(\"connect\", () => {\r\n       console.log(\"✅ Connected to socket server:\", newSocket.id);\r\n     });\r\n \r\n@@ -90,49 +63,6 @@\n       newSocket.disconnect();\r\n     };\r\n   }, []);\r\n \r\n-  // ---------- 🔗 ROOM HELPERS ----------\r\n-  const createRoom = useCallback(\r\n-    (data: Omit<RoomPayload, \"roomId\">, cb?: (res: any) => void) => {\r\n-      socket?.emit(\"room:create\", data, cb);\r\n-    },\r\n-    [socket]\r\n-  );\r\n-\r\n-  const joinRoom = useCallback(\r\n-    (payload: { roomId: string; password?: string }, cb?: (res: any) => void) => {\r\n-      socket?.emit(\"room:join\", payload, cb);\r\n-    },\r\n-    [socket]\r\n-  );\r\n-\r\n-  const leaveRoom = useCallback(\r\n-    (roomId: string) => {\r\n-      socket?.emit(\"room:leave\", { roomId });\r\n-    },\r\n-    [socket]\r\n-  );\r\n-\r\n-  const sendRoomMessage = useCallback(\r\n-    (roomId: string, message: string) => {\r\n-      socket?.emit(\"room:message\", { roomId, message });\r\n-    },\r\n-    [socket]\r\n-  );\r\n-\r\n-  const listRooms = useCallback(\r\n-    (cb: (rooms: any[]) => void) => {\r\n-      socket?.emit(\"room:list\", null, cb);\r\n-    },\r\n-    [socket]\r\n-  );\r\n-\r\n-  return {\r\n-    socket,          // ✅ still accessible for anonymous chat\r\n-    createRoom,\r\n-    joinRoom,\r\n-    leaveRoom,\r\n-    sendRoomMessage,\r\n-    listRooms,\r\n-  };\r\n+  return socket;\r\n }\r\n"
                },
                {
                    "date": 1758891679752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,51 +1,27 @@\n+// features/anonymousChat/hooks/useSocket.ts\r\n+\r\n import { useEffect, useState } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n \r\n-// Extend the Socket type to include our helpers\r\n-type RoomSocket = Socket & {\r\n-  createRoom?: (data: any, cb?: (res: any) => void) => void;\r\n-  joinRoom?: (payload: any, cb?: (res: any) => void) => void;\r\n-  leaveRoom?: (roomId: string) => void;\r\n-  sendRoomMessage?: (roomId: string, message: string) => void;\r\n-  listRooms?: (cb: (rooms: any[]) => void) => void;\r\n-};\r\n+export default function useSocket(): Socket | null {\r\n+  const [socket, setSocket] = useState<Socket | null>(null);\r\n \r\n-export default function useSocket(): RoomSocket | null {\r\n-  const [socket, setSocket] = useState<RoomSocket | null>(null);\r\n-\r\n   useEffect(() => {\r\n     if (!SOCKET_URL) {\r\n       console.error(\"❌ NEXT_PUBLIC_SOCKET_URL is not defined\");\r\n       return;\r\n     }\r\n \r\n-    const newSocket: RoomSocket = io(SOCKET_URL, {\r\n+    const newSocket = io(SOCKET_URL, {\r\n       transports: [\"websocket\"],\r\n       reconnectionAttempts: 3,\r\n       reconnectionDelay: 1000,\r\n-      forceNew: true,\r\n-    }) as RoomSocket;\r\n+      forceNew: true, // ✅ ensures fresh connection per hook usage\r\n+    });\r\n \r\n-    // -------- Room helpers (added directly on socket) --------\r\n-    newSocket.createRoom = (data, cb) =>\r\n-      newSocket.emit(\"room:create\", data, cb);\r\n-\r\n-    newSocket.joinRoom = (payload, cb) =>\r\n-      newSocket.emit(\"room:join\", payload, cb);\r\n-\r\n-    newSocket.leaveRoom = (roomId) =>\r\n-      newSocket.emit(\"room:leave\", { roomId });\r\n-\r\n-    newSocket.sendRoomMessage = (roomId, message) =>\r\n-      newSocket.emit(\"room:message\", { roomId, message });\r\n-\r\n-    newSocket.listRooms = (cb) =>\r\n-      newSocket.emit(\"room:list\", null, cb);\r\n-\r\n-    // -------- Logs --------\r\n     newSocket.on(\"connect\", () => {\r\n       console.log(\"✅ Connected to socket server:\", newSocket.id);\r\n     });\r\n \r\n"
                },
                {
                    "date": 1758893686080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n // features/anonymousChat/hooks/useSocket.ts\r\n-\r\n import { useEffect, useState } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n@@ -15,13 +14,14 @@\n     }\r\n \r\n     const newSocket = io(SOCKET_URL, {\r\n       transports: [\"websocket\"],\r\n-      reconnectionAttempts: 3,\r\n+      reconnectionAttempts: 5,\r\n       reconnectionDelay: 1000,\r\n-      forceNew: true, // ✅ ensures fresh connection per hook usage\r\n+      forceNew: true,\r\n     });\r\n \r\n+    // --- CONNECTION EVENTS ---\r\n     newSocket.on(\"connect\", () => {\r\n       console.log(\"✅ Connected to socket server:\", newSocket.id);\r\n     });\r\n \r\n@@ -32,8 +32,54 @@\n     newSocket.on(\"connect_error\", (err) => {\r\n       console.error(\"⚠️ Socket connection error:\", err.message);\r\n     });\r\n \r\n+    // --- 1-1 ANONYMOUS CHAT EVENTS ---\r\n+    newSocket.on(\"matched\", (data) => {\r\n+      console.log(\"👤 Matched with partner:\", data);\r\n+    });\r\n+\r\n+    newSocket.on(\"partner-left\", (data) => {\r\n+      console.log(\"❌ Partner left:\", data);\r\n+    });\r\n+\r\n+    newSocket.on(\"offer\", (data) => {\r\n+      console.log(\"📨 Received offer:\", data);\r\n+    });\r\n+\r\n+    newSocket.on(\"answer\", (data) => {\r\n+      console.log(\"📩 Received answer:\", data);\r\n+    });\r\n+\r\n+    newSocket.on(\"ice-candidate\", (data) => {\r\n+      console.log(\"🧊 Received ICE candidate:\", data);\r\n+    });\r\n+\r\n+    newSocket.on(\"receive-message\", (msg) => {\r\n+      console.log(\"💬 Received message:\", msg);\r\n+    });\r\n+\r\n+    newSocket.on(\"typing\", (data) => {\r\n+      console.log(\"✍️ Typing indicator:\", data);\r\n+    });\r\n+\r\n+    // --- ROOM SYSTEM EVENTS ---\r\n+    newSocket.on(\"joined-room\", (roomId: string) => {\r\n+      console.log(\"✅ Joined room:\", roomId);\r\n+    });\r\n+\r\n+    newSocket.on(\"room-message\", (msg) => {\r\n+      console.log(\"💬 Room message:\", msg);\r\n+    });\r\n+\r\n+    newSocket.on(\"user-joined\", (data) => {\r\n+      console.log(\"👥 User joined room:\", data);\r\n+    });\r\n+\r\n+    newSocket.on(\"user-left\", (data) => {\r\n+      console.log(\"❌ User left room:\", data);\r\n+    });\r\n+\r\n     setSocket(newSocket);\r\n \r\n     return () => {\r\n       newSocket.disconnect();\r\n"
                },
                {
                    "date": 1758897475776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n // features/anonymousChat/hooks/useSocket.ts\r\n+\r\n import { useEffect, useState } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL;\r\n@@ -14,14 +15,13 @@\n     }\r\n \r\n     const newSocket = io(SOCKET_URL, {\r\n       transports: [\"websocket\"],\r\n-      reconnectionAttempts: 5,\r\n+      reconnectionAttempts: 3,\r\n       reconnectionDelay: 1000,\r\n-      forceNew: true,\r\n+      forceNew: true, // ✅ ensures fresh connection per hook usage\r\n     });\r\n \r\n-    // --- CONNECTION EVENTS ---\r\n     newSocket.on(\"connect\", () => {\r\n       console.log(\"✅ Connected to socket server:\", newSocket.id);\r\n     });\r\n \r\n@@ -32,54 +32,8 @@\n     newSocket.on(\"connect_error\", (err) => {\r\n       console.error(\"⚠️ Socket connection error:\", err.message);\r\n     });\r\n \r\n-    // --- 1-1 ANONYMOUS CHAT EVENTS ---\r\n-    newSocket.on(\"matched\", (data) => {\r\n-      console.log(\"👤 Matched with partner:\", data);\r\n-    });\r\n-\r\n-    newSocket.on(\"partner-left\", (data) => {\r\n-      console.log(\"❌ Partner left:\", data);\r\n-    });\r\n-\r\n-    newSocket.on(\"offer\", (data) => {\r\n-      console.log(\"📨 Received offer:\", data);\r\n-    });\r\n-\r\n-    newSocket.on(\"answer\", (data) => {\r\n-      console.log(\"📩 Received answer:\", data);\r\n-    });\r\n-\r\n-    newSocket.on(\"ice-candidate\", (data) => {\r\n-      console.log(\"🧊 Received ICE candidate:\", data);\r\n-    });\r\n-\r\n-    newSocket.on(\"receive-message\", (msg) => {\r\n-      console.log(\"💬 Received message:\", msg);\r\n-    });\r\n-\r\n-    newSocket.on(\"typing\", (data) => {\r\n-      console.log(\"✍️ Typing indicator:\", data);\r\n-    });\r\n-\r\n-    // --- ROOM SYSTEM EVENTS ---\r\n-    newSocket.on(\"joined-room\", (roomId: string) => {\r\n-      console.log(\"✅ Joined room:\", roomId);\r\n-    });\r\n-\r\n-    newSocket.on(\"room-message\", (msg) => {\r\n-      console.log(\"💬 Room message:\", msg);\r\n-    });\r\n-\r\n-    newSocket.on(\"user-joined\", (data) => {\r\n-      console.log(\"👥 User joined room:\", data);\r\n-    });\r\n-\r\n-    newSocket.on(\"user-left\", (data) => {\r\n-      console.log(\"❌ User left room:\", data);\r\n-    });\r\n-\r\n     setSocket(newSocket);\r\n \r\n     return () => {\r\n       newSocket.disconnect();\r\n"
                }
            ],
            "date": 1752230016907,
            "name": "Commit-0",
            "content": "// features/anonymousChat/hooks/useSocket.ts\r\n\r\nimport { useEffect, useRef } from \"react\";\r\nimport { io, Socket } from \"socket.io-client\";\r\n\r\nconst SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"http://localhost:3001\";\r\n\r\nexport default function useSocket(): Socket | null {\r\n  const socketRef = useRef<Socket | null>(null);\r\n\r\n  useEffect(() => {\r\n    const socket = io(SOCKET_URL, {\r\n      transports: [\"websocket\"],\r\n      reconnectionAttempts: 3,\r\n      reconnectionDelay: 1000,\r\n    });\r\n\r\n    socketRef.current = socket;\r\n\r\n    socket.on(\"connect\", () => {\r\n      console.log(\"✅ Connected to socket server:\", socket.id);\r\n    });\r\n\r\n    socket.on(\"disconnect\", () => {\r\n      console.log(\"❌ Disconnected from socket server\");\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  return socketRef.current;\r\n}\r\n"
        }
    ]
}