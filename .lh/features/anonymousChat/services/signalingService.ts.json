{
    "sourceFile": "features/anonymousChat/services/signalingService.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1752230077724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752234979869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n // features/anonymousChat/services/signalingService.ts\r\n \r\n import { io, Socket } from \"socket.io-client\";\r\n \r\n-const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"http://localhost:3001\";\r\n+const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"https://akku-production.up.railway.app\";\r\n \r\n let socket: Socket | null = null;\r\n \r\n export const connectSocket = () => {\r\n"
                },
                {
                    "date": 1752253554503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,57 +1,115 @@\n // features/anonymousChat/services/signalingService.ts\r\n \r\n import { io, Socket } from \"socket.io-client\";\r\n+import { v4 as uuidv4 } from \"uuid\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"https://akku-production.up.railway.app\";\r\n \r\n let socket: Socket | null = null;\r\n \r\n+/**\r\n+ * Connects to the Socket.IO server if not already connected.\r\n+ */\r\n export const connectSocket = () => {\r\n   if (!socket) {\r\n-    socket = io(SOCKET_URL);\r\n+    socket = io(SOCKET_URL, {\r\n+      transports: [\"websocket\"],\r\n+      reconnectionAttempts: 5,\r\n+      reconnectionDelay: 1000,\r\n+    });\r\n+\r\n+    socket.on(\"connect\", () => {\r\n+      console.log(\"✅ Connected to signaling server:\", socket?.id);\r\n+    });\r\n+\r\n+    socket.on(\"disconnect\", () => {\r\n+      console.log(\"❌ Disconnected from signaling server\");\r\n+    });\r\n   }\r\n };\r\n \r\n+/**\r\n+ * Disconnects the Socket.IO connection.\r\n+ */\r\n export const disconnectSocket = () => {\r\n   if (socket) {\r\n     socket.disconnect();\r\n     socket = null;\r\n   }\r\n };\r\n \r\n+/**\r\n+ * Joins a room with given roomId.\r\n+ */\r\n export const joinRoom = (roomId: string) => {\r\n   socket?.emit(\"join-room\", roomId);\r\n };\r\n \r\n-export const onUserJoined = (callback: () => void) => {\r\n+/**\r\n+ * Listen for when another user joins.\r\n+ */\r\n+export const onUserJoined = (callback: (userId: string) => void) => {\r\n   socket?.on(\"user-joined\", callback);\r\n };\r\n \r\n+/**\r\n+ * Sends an offer to the room.\r\n+ */\r\n export const sendOffer = (offer: RTCSessionDescriptionInit, roomId: string) => {\r\n-  socket?.emit(\"offer\", offer, roomId);\r\n+  socket?.emit(\"offer\", { offer, roomId });\r\n };\r\n \r\n-export const onOffer = (callback: (offer: RTCSessionDescriptionInit) => void) => {\r\n+/**\r\n+ * Listen for an offer.\r\n+ */\r\n+export const onOffer = (callback: (data: { offer: RTCSessionDescriptionInit; sender: string }) => void) => {\r\n   socket?.on(\"offer\", callback);\r\n };\r\n \r\n+/**\r\n+ * Sends an answer to the room.\r\n+ */\r\n export const sendAnswer = (answer: RTCSessionDescriptionInit, roomId: string) => {\r\n-  socket?.emit(\"answer\", answer, roomId);\r\n+  socket?.emit(\"answer\", { answer, roomId });\r\n };\r\n \r\n-export const onAnswer = (callback: (answer: RTCSessionDescriptionInit) => void) => {\r\n+/**\r\n+ * Listen for an answer.\r\n+ */\r\n+export const onAnswer = (callback: (data: { answer: RTCSessionDescriptionInit; sender: string }) => void) => {\r\n   socket?.on(\"answer\", callback);\r\n };\r\n \r\n+/**\r\n+ * Sends ICE candidate to the room.\r\n+ */\r\n export const sendIceCandidate = (candidate: RTCIceCandidateInit, roomId: string) => {\r\n-  socket?.emit(\"ice-candidate\", candidate, roomId);\r\n+  socket?.emit(\"ice-candidate\", { candidate, roomId });\r\n };\r\n \r\n-export const onIceCandidate = (callback: (candidate: RTCIceCandidateInit) => void) => {\r\n+/**\r\n+ * Listen for ICE candidates.\r\n+ */\r\n+export const onIceCandidate = (callback: (data: { candidate: RTCIceCandidateInit; sender: string }) => void) => {\r\n   socket?.on(\"ice-candidate\", callback);\r\n };\r\n \r\n+/**\r\n+ * Sends a chat message to the room with UUID.\r\n+ */\r\n+export const sendMessage = (message: string, roomId: string) => {\r\n+  const messageId = uuidv4();\r\n+  socket?.emit(\"send-message\", { messageId, message, roomId });\r\n+};\r\n+\r\n+/**\r\n+ * Listen for chat messages.\r\n+ */\r\n+export const onReceiveMessage = (callback: (data: { messageId: string; message: string; sender: string }) => void) => {\r\n+  socket?.on(\"receive-message\", callback);\r\n+};\r\n+\r\n export default {\r\n   connectSocket,\r\n   disconnectSocket,\r\n   joinRoom,\r\n@@ -61,5 +119,7 @@\n   sendAnswer,\r\n   onAnswer,\r\n   sendIceCandidate,\r\n   onIceCandidate,\r\n+  sendMessage,\r\n+  onReceiveMessage,\r\n };\r\n"
                },
                {
                    "date": 1752298068441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,13 @@\n \r\n     socket.on(\"disconnect\", () => {\r\n       console.log(\"❌ Disconnected from signaling server\");\r\n     });\r\n+\r\n+    // ✅ Listen for joined-room confirmation\r\n+    socket.on(\"joined-room\", (roomId: string) => {\r\n+      console.log(\"✅ Successfully joined room:\", roomId);\r\n+    });\r\n   }\r\n };\r\n \r\n /**\r\n@@ -45,8 +50,15 @@\n   socket?.emit(\"join-room\", roomId);\r\n };\r\n \r\n /**\r\n+ * Listen for joined-room confirmation.\r\n+ */\r\n+export const onJoinedRoom = (callback: (roomId: string) => void) => {\r\n+  socket?.on(\"joined-room\", callback);\r\n+};\r\n+\r\n+/**\r\n  * Listen for when another user joins.\r\n  */\r\n export const onUserJoined = (callback: (userId: string) => void) => {\r\n   socket?.on(\"user-joined\", callback);\r\n@@ -112,8 +124,9 @@\n export default {\r\n   connectSocket,\r\n   disconnectSocket,\r\n   joinRoom,\r\n+  onJoinedRoom, // ✅ added joined-room listener\r\n   onUserJoined,\r\n   sendOffer,\r\n   onOffer,\r\n   sendAnswer,\r\n"
                },
                {
                    "date": 1752298791627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,11 +6,8 @@\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"https://akku-production.up.railway.app\";\r\n \r\n let socket: Socket | null = null;\r\n \r\n-/**\r\n- * Connects to the Socket.IO server if not already connected.\r\n- */\r\n export const connectSocket = () => {\r\n   if (!socket) {\r\n     socket = io(SOCKET_URL, {\r\n       transports: [\"websocket\"],\r\n@@ -25,109 +22,67 @@\n     socket.on(\"disconnect\", () => {\r\n       console.log(\"❌ Disconnected from signaling server\");\r\n     });\r\n \r\n-    // ✅ Listen for joined-room confirmation\r\n     socket.on(\"joined-room\", (roomId: string) => {\r\n       console.log(\"✅ Successfully joined room:\", roomId);\r\n     });\r\n   }\r\n };\r\n \r\n-/**\r\n- * Disconnects the Socket.IO connection.\r\n- */\r\n export const disconnectSocket = () => {\r\n   if (socket) {\r\n     socket.disconnect();\r\n     socket = null;\r\n   }\r\n };\r\n \r\n-/**\r\n- * Joins a room with given roomId.\r\n- */\r\n export const joinRoom = (roomId: string) => {\r\n   socket?.emit(\"join-room\", roomId);\r\n };\r\n \r\n-/**\r\n- * Listen for joined-room confirmation.\r\n- */\r\n export const onJoinedRoom = (callback: (roomId: string) => void) => {\r\n   socket?.on(\"joined-room\", callback);\r\n };\r\n \r\n-/**\r\n- * Listen for when another user joins.\r\n- */\r\n-export const onUserJoined = (callback: (userId: string) => void) => {\r\n-  socket?.on(\"user-joined\", callback);\r\n-};\r\n-\r\n-/**\r\n- * Sends an offer to the room.\r\n- */\r\n export const sendOffer = (offer: RTCSessionDescriptionInit, roomId: string) => {\r\n   socket?.emit(\"offer\", { offer, roomId });\r\n };\r\n \r\n-/**\r\n- * Listen for an offer.\r\n- */\r\n export const onOffer = (callback: (data: { offer: RTCSessionDescriptionInit; sender: string }) => void) => {\r\n   socket?.on(\"offer\", callback);\r\n };\r\n \r\n-/**\r\n- * Sends an answer to the room.\r\n- */\r\n export const sendAnswer = (answer: RTCSessionDescriptionInit, roomId: string) => {\r\n   socket?.emit(\"answer\", { answer, roomId });\r\n };\r\n \r\n-/**\r\n- * Listen for an answer.\r\n- */\r\n export const onAnswer = (callback: (data: { answer: RTCSessionDescriptionInit; sender: string }) => void) => {\r\n   socket?.on(\"answer\", callback);\r\n };\r\n \r\n-/**\r\n- * Sends ICE candidate to the room.\r\n- */\r\n export const sendIceCandidate = (candidate: RTCIceCandidateInit, roomId: string) => {\r\n   socket?.emit(\"ice-candidate\", { candidate, roomId });\r\n };\r\n \r\n-/**\r\n- * Listen for ICE candidates.\r\n- */\r\n export const onIceCandidate = (callback: (data: { candidate: RTCIceCandidateInit; sender: string }) => void) => {\r\n   socket?.on(\"ice-candidate\", callback);\r\n };\r\n \r\n-/**\r\n- * Sends a chat message to the room with UUID.\r\n- */\r\n export const sendMessage = (message: string, roomId: string) => {\r\n   const messageId = uuidv4();\r\n   socket?.emit(\"send-message\", { messageId, message, roomId });\r\n };\r\n \r\n-/**\r\n- * Listen for chat messages.\r\n- */\r\n export const onReceiveMessage = (callback: (data: { messageId: string; message: string; sender: string }) => void) => {\r\n   socket?.on(\"receive-message\", callback);\r\n };\r\n \r\n export default {\r\n   connectSocket,\r\n   disconnectSocket,\r\n   joinRoom,\r\n-  onJoinedRoom, // ✅ added joined-room listener\r\n-  onUserJoined,\r\n+  onJoinedRoom,\r\n   sendOffer,\r\n   onOffer,\r\n   sendAnswer,\r\n   onAnswer,\r\n"
                },
                {
                    "date": 1752311455387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,20 @@\n export const joinRoom = (roomId: string) => {\r\n   socket?.emit(\"join-room\", roomId);\r\n };\r\n \r\n+export const leaveRoom = (roomId: string) => {\r\n+  socket?.emit(\"leave-room\", roomId);\r\n+};\r\n+\r\n+export const startLooking = () => {\r\n+  socket?.emit(\"start-looking\");\r\n+};\r\n+\r\n+export const skipPartner = () => {\r\n+  socket?.emit(\"skip\");\r\n+};\r\n+\r\n export const onJoinedRoom = (callback: (roomId: string) => void) => {\r\n   socket?.on(\"joined-room\", callback);\r\n };\r\n \r\n@@ -80,8 +92,11 @@\n export default {\r\n   connectSocket,\r\n   disconnectSocket,\r\n   joinRoom,\r\n+  leaveRoom,\r\n+  startLooking,\r\n+  skipPartner,\r\n   onJoinedRoom,\r\n   sendOffer,\r\n   onOffer,\r\n   sendAnswer,\r\n"
                },
                {
                    "date": 1752321437827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,28 +35,25 @@\n     socket = null;\r\n   }\r\n };\r\n \r\n+export const startLooking = () => {\r\n+  socket?.emit(\"start-looking\");\r\n+};\r\n+\r\n export const joinRoom = (roomId: string) => {\r\n   socket?.emit(\"join-room\", roomId);\r\n };\r\n \r\n export const leaveRoom = (roomId: string) => {\r\n   socket?.emit(\"leave-room\", roomId);\r\n };\r\n \r\n-export const startLooking = () => {\r\n-  socket?.emit(\"start-looking\");\r\n-};\r\n-\r\n export const skipPartner = () => {\r\n   socket?.emit(\"skip\");\r\n };\r\n \r\n-export const onJoinedRoom = (callback: (roomId: string) => void) => {\r\n-  socket?.on(\"joined-room\", callback);\r\n-};\r\n-\r\n+// WebRTC events\r\n export const sendOffer = (offer: RTCSessionDescriptionInit, roomId: string) => {\r\n   socket?.emit(\"offer\", { offer, roomId });\r\n };\r\n \r\n@@ -79,17 +76,86 @@\n export const onIceCandidate = (callback: (data: { candidate: RTCIceCandidateInit; sender: string }) => void) => {\r\n   socket?.on(\"ice-candidate\", callback);\r\n };\r\n \r\n-export const sendMessage = (message: string, roomId: string) => {\r\n-  const messageId = uuidv4();\r\n-  socket?.emit(\"send-message\", { messageId, message, roomId });\r\n+// Messaging\r\n+export const sendMessage = ({\r\n+  roomId,\r\n+  content,\r\n+  type = \"text\"\r\n+}: {\r\n+  roomId: string;\r\n+  content: string;\r\n+  type?: \"text\" | \"image\" | \"audio\" | \"video\";\r\n+}) => {\r\n+  const message = {\r\n+    id: uuidv4(),\r\n+    content,\r\n+    type,\r\n+    timestamp: new Date().toISOString(),\r\n+    status: \"sent\",\r\n+    sender: socket?.id,\r\n+  };\r\n+  socket?.emit(\"send-message\", { roomId, message });\r\n };\r\n \r\n-export const onReceiveMessage = (callback: (data: { messageId: string; message: string; sender: string }) => void) => {\r\n+export const onReceiveMessage = (\r\n+  callback: (data: { message: any; sender: string }) => void\r\n+) => {\r\n   socket?.on(\"receive-message\", callback);\r\n };\r\n \r\n+// Typing\r\n+export const sendTyping = (roomId: string) => {\r\n+  socket?.emit(\"typing\", { roomId, sender: socket?.id });\r\n+};\r\n+\r\n+export const onTyping = (callback: ({ sender }: { sender: string }) => void) => {\r\n+  socket?.on(\"typing\", callback);\r\n+};\r\n+\r\n+// Message Status\r\n+export const sendMessageStatus = ({\r\n+  roomId,\r\n+  messageId,\r\n+  status,\r\n+}: {\r\n+  roomId: string;\r\n+  messageId: string;\r\n+  status: \"delivered\" | \"seen\";\r\n+}) => {\r\n+  socket?.emit(\"message-status\", { roomId, messageId, status });\r\n+};\r\n+\r\n+export const onMessageStatusUpdate = (\r\n+  callback: ({ messageId, status }: { messageId: string; status: string }) => void\r\n+) => {\r\n+  socket?.on(\"message-status-update\", callback);\r\n+};\r\n+\r\n+// Delete/Edit/React\r\n+export const deleteMessage = (roomId: string, messageId: string) => {\r\n+  socket?.emit(\"delete-message\", { roomId, messageId });\r\n+};\r\n+\r\n+export const onMessageDeleted = (callback: ({ messageId }: { messageId: string }) => void) => {\r\n+  socket?.on(\"message-deleted\", callback);\r\n+};\r\n+\r\n+export const editMessage = (roomId: string, messageId: string, content: string) => {\r\n+  socket?.emit(\"edit-message\", { roomId, messageId, content });\r\n+};\r\n+\r\n+export const reactToMessage = (roomId: string, messageId: string, reaction: string) => {\r\n+  socket?.emit(\"react-message\", { roomId, messageId, reaction, user: socket?.id });\r\n+};\r\n+\r\n+export const onMessageReacted = (\r\n+  callback: ({ messageId, reaction, user }: { messageId: string; reaction: string; user: string }) => void\r\n+) => {\r\n+  socket?.on(\"message-react\", callback);\r\n+};\r\n+\r\n export default {\r\n   connectSocket,\r\n   disconnectSocket,\r\n   joinRoom,\r\n@@ -104,5 +170,14 @@\n   sendIceCandidate,\r\n   onIceCandidate,\r\n   sendMessage,\r\n   onReceiveMessage,\r\n+  sendTyping,\r\n+  onTyping,\r\n+  sendMessageStatus,\r\n+  onMessageStatusUpdate,\r\n+  deleteMessage,\r\n+  onMessageDeleted,\r\n+  editMessage,\r\n+  reactToMessage,\r\n+  onMessageReacted,\r\n };\r\n"
                },
                {
                    "date": 1752323108420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,9 +161,8 @@\n   joinRoom,\r\n   leaveRoom,\r\n   startLooking,\r\n   skipPartner,\r\n-  onJoinedRoom,\r\n   sendOffer,\r\n   onOffer,\r\n   sendAnswer,\r\n   onAnswer,\r\n"
                },
                {
                    "date": 1752337282908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n-// features/anonymousChat/services/signalingService.ts\r\n-\r\n import { io, Socket } from \"socket.io-client\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"https://akku-production.up.railway.app\";\r\n \r\n let socket: Socket | null = null;\r\n \r\n+// --- CONNECTION ---\r\n+\r\n export const connectSocket = () => {\r\n   if (!socket) {\r\n     socket = io(SOCKET_URL, {\r\n       transports: [\"websocket\"],\r\n@@ -15,28 +15,31 @@\n       reconnectionDelay: 1000,\r\n     });\r\n \r\n     socket.on(\"connect\", () => {\r\n-      console.log(\"✅ Connected to signaling server:\", socket?.id);\r\n+      console.log(\"✅ Connected to signaling server:\", socket.id);\r\n     });\r\n \r\n     socket.on(\"disconnect\", () => {\r\n       console.log(\"❌ Disconnected from signaling server\");\r\n     });\r\n \r\n     socket.on(\"joined-room\", (roomId: string) => {\r\n-      console.log(\"✅ Successfully joined room:\", roomId);\r\n+      console.log(\"✅ Joined room:\", roomId);\r\n     });\r\n   }\r\n };\r\n \r\n export const disconnectSocket = () => {\r\n-  if (socket) {\r\n-    socket.disconnect();\r\n-    socket = null;\r\n-  }\r\n+  socket?.disconnect();\r\n+  socket = null;\r\n };\r\n \r\n+export const getSocket = () => socket;\r\n+export const getSocketId = () => socket?.id ?? null;\r\n+\r\n+// --- ROOM CONTROL ---\r\n+\r\n export const startLooking = () => {\r\n   socket?.emit(\"start-looking\");\r\n };\r\n \r\n@@ -51,38 +54,40 @@\n export const skipPartner = () => {\r\n   socket?.emit(\"skip\");\r\n };\r\n \r\n-// WebRTC events\r\n+// --- WEBRTC SIGNALING ---\r\n+\r\n export const sendOffer = (offer: RTCSessionDescriptionInit, roomId: string) => {\r\n   socket?.emit(\"offer\", { offer, roomId });\r\n };\r\n \r\n export const onOffer = (callback: (data: { offer: RTCSessionDescriptionInit; sender: string }) => void) => {\r\n-  socket?.on(\"offer\", callback);\r\n+  socket?.off(\"offer\").on(\"offer\", callback);\r\n };\r\n \r\n export const sendAnswer = (answer: RTCSessionDescriptionInit, roomId: string) => {\r\n   socket?.emit(\"answer\", { answer, roomId });\r\n };\r\n \r\n export const onAnswer = (callback: (data: { answer: RTCSessionDescriptionInit; sender: string }) => void) => {\r\n-  socket?.on(\"answer\", callback);\r\n+  socket?.off(\"answer\").on(\"answer\", callback);\r\n };\r\n \r\n export const sendIceCandidate = (candidate: RTCIceCandidateInit, roomId: string) => {\r\n   socket?.emit(\"ice-candidate\", { candidate, roomId });\r\n };\r\n \r\n export const onIceCandidate = (callback: (data: { candidate: RTCIceCandidateInit; sender: string }) => void) => {\r\n-  socket?.on(\"ice-candidate\", callback);\r\n+  socket?.off(\"ice-candidate\").on(\"ice-candidate\", callback);\r\n };\r\n \r\n-// Messaging\r\n+// --- MESSAGING ---\r\n+\r\n export const sendMessage = ({\r\n   roomId,\r\n   content,\r\n-  type = \"text\"\r\n+  type = \"text\",\r\n }: {\r\n   roomId: string;\r\n   content: string;\r\n   type?: \"text\" | \"image\" | \"audio\" | \"video\";\r\n@@ -100,21 +105,23 @@\n \r\n export const onReceiveMessage = (\r\n   callback: (data: { message: any; sender: string }) => void\r\n ) => {\r\n-  socket?.on(\"receive-message\", callback);\r\n+  socket?.off(\"receive-message\").on(\"receive-message\", callback);\r\n };\r\n \r\n-// Typing\r\n+// --- TYPING INDICATOR ---\r\n+\r\n export const sendTyping = (roomId: string) => {\r\n   socket?.emit(\"typing\", { roomId, sender: socket?.id });\r\n };\r\n \r\n export const onTyping = (callback: ({ sender }: { sender: string }) => void) => {\r\n-  socket?.on(\"typing\", callback);\r\n+  socket?.off(\"typing\").on(\"typing\", callback);\r\n };\r\n \r\n-// Message Status\r\n+// --- MESSAGE STATUS ---\r\n+\r\n export const sendMessageStatus = ({\r\n   roomId,\r\n   messageId,\r\n   status,\r\n@@ -128,18 +135,19 @@\n \r\n export const onMessageStatusUpdate = (\r\n   callback: ({ messageId, status }: { messageId: string; status: string }) => void\r\n ) => {\r\n-  socket?.on(\"message-status-update\", callback);\r\n+  socket?.off(\"message-status-update\").on(\"message-status-update\", callback);\r\n };\r\n \r\n-// Delete/Edit/React\r\n+// --- DELETE / EDIT / REACT ---\r\n+\r\n export const deleteMessage = (roomId: string, messageId: string) => {\r\n   socket?.emit(\"delete-message\", { roomId, messageId });\r\n };\r\n \r\n export const onMessageDeleted = (callback: ({ messageId }: { messageId: string }) => void) => {\r\n-  socket?.on(\"message-deleted\", callback);\r\n+  socket?.off(\"message-deleted\").on(\"message-deleted\", callback);\r\n };\r\n \r\n export const editMessage = (roomId: string, messageId: string, content: string) => {\r\n   socket?.emit(\"edit-message\", { roomId, messageId, content });\r\n@@ -151,17 +159,21 @@\n \r\n export const onMessageReacted = (\r\n   callback: ({ messageId, reaction, user }: { messageId: string; reaction: string; user: string }) => void\r\n ) => {\r\n-  socket?.on(\"message-react\", callback);\r\n+  socket?.off(\"message-react\").on(\"message-react\", callback);\r\n };\r\n \r\n+// --- EXPORT AS MODULE ---\r\n+\r\n export default {\r\n   connectSocket,\r\n   disconnectSocket,\r\n+  getSocket,\r\n+  getSocketId,\r\n+  startLooking,\r\n   joinRoom,\r\n   leaveRoom,\r\n-  startLooking,\r\n   skipPartner,\r\n   sendOffer,\r\n   onOffer,\r\n   sendAnswer,\r\n"
                },
                {
                    "date": 1752337517396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,10 @@\n       reconnectionDelay: 1000,\r\n     });\r\n \r\n     socket.on(\"connect\", () => {\r\n-      console.log(\"✅ Connected to signaling server:\", socket.id);\r\n-    });\r\n+      console.log(\"✅ Connected to signaling server:\", socket?.id);\r\n+     });\r\n \r\n     socket.on(\"disconnect\", () => {\r\n       console.log(\"❌ Disconnected from signaling server\");\r\n     });\r\n"
                },
                {
                    "date": 1752398564574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { io, Socket } from \"socket.io-client\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n \r\n-const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"https://akku-production.up.railway.app\";\r\n+const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"https://connectify-z9gv.onrender.com/\";\r\n \r\n let socket: Socket | null = null;\r\n \r\n // --- CONNECTION ---\r\n"
                }
            ],
            "date": 1752230077724,
            "name": "Commit-0",
            "content": "// features/anonymousChat/services/signalingService.ts\r\n\r\nimport { io, Socket } from \"socket.io-client\";\r\n\r\nconst SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"http://localhost:3001\";\r\n\r\nlet socket: Socket | null = null;\r\n\r\nexport const connectSocket = () => {\r\n  if (!socket) {\r\n    socket = io(SOCKET_URL);\r\n  }\r\n};\r\n\r\nexport const disconnectSocket = () => {\r\n  if (socket) {\r\n    socket.disconnect();\r\n    socket = null;\r\n  }\r\n};\r\n\r\nexport const joinRoom = (roomId: string) => {\r\n  socket?.emit(\"join-room\", roomId);\r\n};\r\n\r\nexport const onUserJoined = (callback: () => void) => {\r\n  socket?.on(\"user-joined\", callback);\r\n};\r\n\r\nexport const sendOffer = (offer: RTCSessionDescriptionInit, roomId: string) => {\r\n  socket?.emit(\"offer\", offer, roomId);\r\n};\r\n\r\nexport const onOffer = (callback: (offer: RTCSessionDescriptionInit) => void) => {\r\n  socket?.on(\"offer\", callback);\r\n};\r\n\r\nexport const sendAnswer = (answer: RTCSessionDescriptionInit, roomId: string) => {\r\n  socket?.emit(\"answer\", answer, roomId);\r\n};\r\n\r\nexport const onAnswer = (callback: (answer: RTCSessionDescriptionInit) => void) => {\r\n  socket?.on(\"answer\", callback);\r\n};\r\n\r\nexport const sendIceCandidate = (candidate: RTCIceCandidateInit, roomId: string) => {\r\n  socket?.emit(\"ice-candidate\", candidate, roomId);\r\n};\r\n\r\nexport const onIceCandidate = (callback: (candidate: RTCIceCandidateInit) => void) => {\r\n  socket?.on(\"ice-candidate\", callback);\r\n};\r\n\r\nexport default {\r\n  connectSocket,\r\n  disconnectSocket,\r\n  joinRoom,\r\n  onUserJoined,\r\n  sendOffer,\r\n  onOffer,\r\n  sendAnswer,\r\n  onAnswer,\r\n  sendIceCandidate,\r\n  onIceCandidate,\r\n};\r\n"
        }
    ]
}