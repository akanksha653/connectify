{
    "sourceFile": "features/anonymousChat/services/signalingService.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1752230077724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752234979869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n // features/anonymousChat/services/signalingService.ts\r\n \r\n import { io, Socket } from \"socket.io-client\";\r\n \r\n-const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"http://localhost:3001\";\r\n+const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"https://akku-production.up.railway.app\";\r\n \r\n let socket: Socket | null = null;\r\n \r\n export const connectSocket = () => {\r\n"
                },
                {
                    "date": 1752253554503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,57 +1,115 @@\n // features/anonymousChat/services/signalingService.ts\r\n \r\n import { io, Socket } from \"socket.io-client\";\r\n+import { v4 as uuidv4 } from \"uuid\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"https://akku-production.up.railway.app\";\r\n \r\n let socket: Socket | null = null;\r\n \r\n+/**\r\n+ * Connects to the Socket.IO server if not already connected.\r\n+ */\r\n export const connectSocket = () => {\r\n   if (!socket) {\r\n-    socket = io(SOCKET_URL);\r\n+    socket = io(SOCKET_URL, {\r\n+      transports: [\"websocket\"],\r\n+      reconnectionAttempts: 5,\r\n+      reconnectionDelay: 1000,\r\n+    });\r\n+\r\n+    socket.on(\"connect\", () => {\r\n+      console.log(\"✅ Connected to signaling server:\", socket?.id);\r\n+    });\r\n+\r\n+    socket.on(\"disconnect\", () => {\r\n+      console.log(\"❌ Disconnected from signaling server\");\r\n+    });\r\n   }\r\n };\r\n \r\n+/**\r\n+ * Disconnects the Socket.IO connection.\r\n+ */\r\n export const disconnectSocket = () => {\r\n   if (socket) {\r\n     socket.disconnect();\r\n     socket = null;\r\n   }\r\n };\r\n \r\n+/**\r\n+ * Joins a room with given roomId.\r\n+ */\r\n export const joinRoom = (roomId: string) => {\r\n   socket?.emit(\"join-room\", roomId);\r\n };\r\n \r\n-export const onUserJoined = (callback: () => void) => {\r\n+/**\r\n+ * Listen for when another user joins.\r\n+ */\r\n+export const onUserJoined = (callback: (userId: string) => void) => {\r\n   socket?.on(\"user-joined\", callback);\r\n };\r\n \r\n+/**\r\n+ * Sends an offer to the room.\r\n+ */\r\n export const sendOffer = (offer: RTCSessionDescriptionInit, roomId: string) => {\r\n-  socket?.emit(\"offer\", offer, roomId);\r\n+  socket?.emit(\"offer\", { offer, roomId });\r\n };\r\n \r\n-export const onOffer = (callback: (offer: RTCSessionDescriptionInit) => void) => {\r\n+/**\r\n+ * Listen for an offer.\r\n+ */\r\n+export const onOffer = (callback: (data: { offer: RTCSessionDescriptionInit; sender: string }) => void) => {\r\n   socket?.on(\"offer\", callback);\r\n };\r\n \r\n+/**\r\n+ * Sends an answer to the room.\r\n+ */\r\n export const sendAnswer = (answer: RTCSessionDescriptionInit, roomId: string) => {\r\n-  socket?.emit(\"answer\", answer, roomId);\r\n+  socket?.emit(\"answer\", { answer, roomId });\r\n };\r\n \r\n-export const onAnswer = (callback: (answer: RTCSessionDescriptionInit) => void) => {\r\n+/**\r\n+ * Listen for an answer.\r\n+ */\r\n+export const onAnswer = (callback: (data: { answer: RTCSessionDescriptionInit; sender: string }) => void) => {\r\n   socket?.on(\"answer\", callback);\r\n };\r\n \r\n+/**\r\n+ * Sends ICE candidate to the room.\r\n+ */\r\n export const sendIceCandidate = (candidate: RTCIceCandidateInit, roomId: string) => {\r\n-  socket?.emit(\"ice-candidate\", candidate, roomId);\r\n+  socket?.emit(\"ice-candidate\", { candidate, roomId });\r\n };\r\n \r\n-export const onIceCandidate = (callback: (candidate: RTCIceCandidateInit) => void) => {\r\n+/**\r\n+ * Listen for ICE candidates.\r\n+ */\r\n+export const onIceCandidate = (callback: (data: { candidate: RTCIceCandidateInit; sender: string }) => void) => {\r\n   socket?.on(\"ice-candidate\", callback);\r\n };\r\n \r\n+/**\r\n+ * Sends a chat message to the room with UUID.\r\n+ */\r\n+export const sendMessage = (message: string, roomId: string) => {\r\n+  const messageId = uuidv4();\r\n+  socket?.emit(\"send-message\", { messageId, message, roomId });\r\n+};\r\n+\r\n+/**\r\n+ * Listen for chat messages.\r\n+ */\r\n+export const onReceiveMessage = (callback: (data: { messageId: string; message: string; sender: string }) => void) => {\r\n+  socket?.on(\"receive-message\", callback);\r\n+};\r\n+\r\n export default {\r\n   connectSocket,\r\n   disconnectSocket,\r\n   joinRoom,\r\n@@ -61,5 +119,7 @@\n   sendAnswer,\r\n   onAnswer,\r\n   sendIceCandidate,\r\n   onIceCandidate,\r\n+  sendMessage,\r\n+  onReceiveMessage,\r\n };\r\n"
                },
                {
                    "date": 1752298068441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,13 @@\n \r\n     socket.on(\"disconnect\", () => {\r\n       console.log(\"❌ Disconnected from signaling server\");\r\n     });\r\n+\r\n+    // ✅ Listen for joined-room confirmation\r\n+    socket.on(\"joined-room\", (roomId: string) => {\r\n+      console.log(\"✅ Successfully joined room:\", roomId);\r\n+    });\r\n   }\r\n };\r\n \r\n /**\r\n@@ -45,8 +50,15 @@\n   socket?.emit(\"join-room\", roomId);\r\n };\r\n \r\n /**\r\n+ * Listen for joined-room confirmation.\r\n+ */\r\n+export const onJoinedRoom = (callback: (roomId: string) => void) => {\r\n+  socket?.on(\"joined-room\", callback);\r\n+};\r\n+\r\n+/**\r\n  * Listen for when another user joins.\r\n  */\r\n export const onUserJoined = (callback: (userId: string) => void) => {\r\n   socket?.on(\"user-joined\", callback);\r\n@@ -112,8 +124,9 @@\n export default {\r\n   connectSocket,\r\n   disconnectSocket,\r\n   joinRoom,\r\n+  onJoinedRoom, // ✅ added joined-room listener\r\n   onUserJoined,\r\n   sendOffer,\r\n   onOffer,\r\n   sendAnswer,\r\n"
                },
                {
                    "date": 1752298791627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,11 +6,8 @@\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"https://akku-production.up.railway.app\";\r\n \r\n let socket: Socket | null = null;\r\n \r\n-/**\r\n- * Connects to the Socket.IO server if not already connected.\r\n- */\r\n export const connectSocket = () => {\r\n   if (!socket) {\r\n     socket = io(SOCKET_URL, {\r\n       transports: [\"websocket\"],\r\n@@ -25,109 +22,67 @@\n     socket.on(\"disconnect\", () => {\r\n       console.log(\"❌ Disconnected from signaling server\");\r\n     });\r\n \r\n-    // ✅ Listen for joined-room confirmation\r\n     socket.on(\"joined-room\", (roomId: string) => {\r\n       console.log(\"✅ Successfully joined room:\", roomId);\r\n     });\r\n   }\r\n };\r\n \r\n-/**\r\n- * Disconnects the Socket.IO connection.\r\n- */\r\n export const disconnectSocket = () => {\r\n   if (socket) {\r\n     socket.disconnect();\r\n     socket = null;\r\n   }\r\n };\r\n \r\n-/**\r\n- * Joins a room with given roomId.\r\n- */\r\n export const joinRoom = (roomId: string) => {\r\n   socket?.emit(\"join-room\", roomId);\r\n };\r\n \r\n-/**\r\n- * Listen for joined-room confirmation.\r\n- */\r\n export const onJoinedRoom = (callback: (roomId: string) => void) => {\r\n   socket?.on(\"joined-room\", callback);\r\n };\r\n \r\n-/**\r\n- * Listen for when another user joins.\r\n- */\r\n-export const onUserJoined = (callback: (userId: string) => void) => {\r\n-  socket?.on(\"user-joined\", callback);\r\n-};\r\n-\r\n-/**\r\n- * Sends an offer to the room.\r\n- */\r\n export const sendOffer = (offer: RTCSessionDescriptionInit, roomId: string) => {\r\n   socket?.emit(\"offer\", { offer, roomId });\r\n };\r\n \r\n-/**\r\n- * Listen for an offer.\r\n- */\r\n export const onOffer = (callback: (data: { offer: RTCSessionDescriptionInit; sender: string }) => void) => {\r\n   socket?.on(\"offer\", callback);\r\n };\r\n \r\n-/**\r\n- * Sends an answer to the room.\r\n- */\r\n export const sendAnswer = (answer: RTCSessionDescriptionInit, roomId: string) => {\r\n   socket?.emit(\"answer\", { answer, roomId });\r\n };\r\n \r\n-/**\r\n- * Listen for an answer.\r\n- */\r\n export const onAnswer = (callback: (data: { answer: RTCSessionDescriptionInit; sender: string }) => void) => {\r\n   socket?.on(\"answer\", callback);\r\n };\r\n \r\n-/**\r\n- * Sends ICE candidate to the room.\r\n- */\r\n export const sendIceCandidate = (candidate: RTCIceCandidateInit, roomId: string) => {\r\n   socket?.emit(\"ice-candidate\", { candidate, roomId });\r\n };\r\n \r\n-/**\r\n- * Listen for ICE candidates.\r\n- */\r\n export const onIceCandidate = (callback: (data: { candidate: RTCIceCandidateInit; sender: string }) => void) => {\r\n   socket?.on(\"ice-candidate\", callback);\r\n };\r\n \r\n-/**\r\n- * Sends a chat message to the room with UUID.\r\n- */\r\n export const sendMessage = (message: string, roomId: string) => {\r\n   const messageId = uuidv4();\r\n   socket?.emit(\"send-message\", { messageId, message, roomId });\r\n };\r\n \r\n-/**\r\n- * Listen for chat messages.\r\n- */\r\n export const onReceiveMessage = (callback: (data: { messageId: string; message: string; sender: string }) => void) => {\r\n   socket?.on(\"receive-message\", callback);\r\n };\r\n \r\n export default {\r\n   connectSocket,\r\n   disconnectSocket,\r\n   joinRoom,\r\n-  onJoinedRoom, // ✅ added joined-room listener\r\n-  onUserJoined,\r\n+  onJoinedRoom,\r\n   sendOffer,\r\n   onOffer,\r\n   sendAnswer,\r\n   onAnswer,\r\n"
                },
                {
                    "date": 1752311455387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,20 @@\n export const joinRoom = (roomId: string) => {\r\n   socket?.emit(\"join-room\", roomId);\r\n };\r\n \r\n+export const leaveRoom = (roomId: string) => {\r\n+  socket?.emit(\"leave-room\", roomId);\r\n+};\r\n+\r\n+export const startLooking = () => {\r\n+  socket?.emit(\"start-looking\");\r\n+};\r\n+\r\n+export const skipPartner = () => {\r\n+  socket?.emit(\"skip\");\r\n+};\r\n+\r\n export const onJoinedRoom = (callback: (roomId: string) => void) => {\r\n   socket?.on(\"joined-room\", callback);\r\n };\r\n \r\n@@ -80,8 +92,11 @@\n export default {\r\n   connectSocket,\r\n   disconnectSocket,\r\n   joinRoom,\r\n+  leaveRoom,\r\n+  startLooking,\r\n+  skipPartner,\r\n   onJoinedRoom,\r\n   sendOffer,\r\n   onOffer,\r\n   sendAnswer,\r\n"
                },
                {
                    "date": 1752321437827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,28 +35,25 @@\n     socket = null;\r\n   }\r\n };\r\n \r\n+export const startLooking = () => {\r\n+  socket?.emit(\"start-looking\");\r\n+};\r\n+\r\n export const joinRoom = (roomId: string) => {\r\n   socket?.emit(\"join-room\", roomId);\r\n };\r\n \r\n export const leaveRoom = (roomId: string) => {\r\n   socket?.emit(\"leave-room\", roomId);\r\n };\r\n \r\n-export const startLooking = () => {\r\n-  socket?.emit(\"start-looking\");\r\n-};\r\n-\r\n export const skipPartner = () => {\r\n   socket?.emit(\"skip\");\r\n };\r\n \r\n-export const onJoinedRoom = (callback: (roomId: string) => void) => {\r\n-  socket?.on(\"joined-room\", callback);\r\n-};\r\n-\r\n+// WebRTC events\r\n export const sendOffer = (offer: RTCSessionDescriptionInit, roomId: string) => {\r\n   socket?.emit(\"offer\", { offer, roomId });\r\n };\r\n \r\n@@ -79,17 +76,86 @@\n export const onIceCandidate = (callback: (data: { candidate: RTCIceCandidateInit; sender: string }) => void) => {\r\n   socket?.on(\"ice-candidate\", callback);\r\n };\r\n \r\n-export const sendMessage = (message: string, roomId: string) => {\r\n-  const messageId = uuidv4();\r\n-  socket?.emit(\"send-message\", { messageId, message, roomId });\r\n+// Messaging\r\n+export const sendMessage = ({\r\n+  roomId,\r\n+  content,\r\n+  type = \"text\"\r\n+}: {\r\n+  roomId: string;\r\n+  content: string;\r\n+  type?: \"text\" | \"image\" | \"audio\" | \"video\";\r\n+}) => {\r\n+  const message = {\r\n+    id: uuidv4(),\r\n+    content,\r\n+    type,\r\n+    timestamp: new Date().toISOString(),\r\n+    status: \"sent\",\r\n+    sender: socket?.id,\r\n+  };\r\n+  socket?.emit(\"send-message\", { roomId, message });\r\n };\r\n \r\n-export const onReceiveMessage = (callback: (data: { messageId: string; message: string; sender: string }) => void) => {\r\n+export const onReceiveMessage = (\r\n+  callback: (data: { message: any; sender: string }) => void\r\n+) => {\r\n   socket?.on(\"receive-message\", callback);\r\n };\r\n \r\n+// Typing\r\n+export const sendTyping = (roomId: string) => {\r\n+  socket?.emit(\"typing\", { roomId, sender: socket?.id });\r\n+};\r\n+\r\n+export const onTyping = (callback: ({ sender }: { sender: string }) => void) => {\r\n+  socket?.on(\"typing\", callback);\r\n+};\r\n+\r\n+// Message Status\r\n+export const sendMessageStatus = ({\r\n+  roomId,\r\n+  messageId,\r\n+  status,\r\n+}: {\r\n+  roomId: string;\r\n+  messageId: string;\r\n+  status: \"delivered\" | \"seen\";\r\n+}) => {\r\n+  socket?.emit(\"message-status\", { roomId, messageId, status });\r\n+};\r\n+\r\n+export const onMessageStatusUpdate = (\r\n+  callback: ({ messageId, status }: { messageId: string; status: string }) => void\r\n+) => {\r\n+  socket?.on(\"message-status-update\", callback);\r\n+};\r\n+\r\n+// Delete/Edit/React\r\n+export const deleteMessage = (roomId: string, messageId: string) => {\r\n+  socket?.emit(\"delete-message\", { roomId, messageId });\r\n+};\r\n+\r\n+export const onMessageDeleted = (callback: ({ messageId }: { messageId: string }) => void) => {\r\n+  socket?.on(\"message-deleted\", callback);\r\n+};\r\n+\r\n+export const editMessage = (roomId: string, messageId: string, content: string) => {\r\n+  socket?.emit(\"edit-message\", { roomId, messageId, content });\r\n+};\r\n+\r\n+export const reactToMessage = (roomId: string, messageId: string, reaction: string) => {\r\n+  socket?.emit(\"react-message\", { roomId, messageId, reaction, user: socket?.id });\r\n+};\r\n+\r\n+export const onMessageReacted = (\r\n+  callback: ({ messageId, reaction, user }: { messageId: string; reaction: string; user: string }) => void\r\n+) => {\r\n+  socket?.on(\"message-react\", callback);\r\n+};\r\n+\r\n export default {\r\n   connectSocket,\r\n   disconnectSocket,\r\n   joinRoom,\r\n@@ -104,5 +170,14 @@\n   sendIceCandidate,\r\n   onIceCandidate,\r\n   sendMessage,\r\n   onReceiveMessage,\r\n+  sendTyping,\r\n+  onTyping,\r\n+  sendMessageStatus,\r\n+  onMessageStatusUpdate,\r\n+  deleteMessage,\r\n+  onMessageDeleted,\r\n+  editMessage,\r\n+  reactToMessage,\r\n+  onMessageReacted,\r\n };\r\n"
                },
                {
                    "date": 1752323108420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,9 +161,8 @@\n   joinRoom,\r\n   leaveRoom,\r\n   startLooking,\r\n   skipPartner,\r\n-  onJoinedRoom,\r\n   sendOffer,\r\n   onOffer,\r\n   sendAnswer,\r\n   onAnswer,\r\n"
                },
                {
                    "date": 1752337282908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n-// features/anonymousChat/services/signalingService.ts\r\n-\r\n import { io, Socket } from \"socket.io-client\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"https://akku-production.up.railway.app\";\r\n \r\n let socket: Socket | null = null;\r\n \r\n+// --- CONNECTION ---\r\n+\r\n export const connectSocket = () => {\r\n   if (!socket) {\r\n     socket = io(SOCKET_URL, {\r\n       transports: [\"websocket\"],\r\n@@ -15,28 +15,31 @@\n       reconnectionDelay: 1000,\r\n     });\r\n \r\n     socket.on(\"connect\", () => {\r\n-      console.log(\"✅ Connected to signaling server:\", socket?.id);\r\n+      console.log(\"✅ Connected to signaling server:\", socket.id);\r\n     });\r\n \r\n     socket.on(\"disconnect\", () => {\r\n       console.log(\"❌ Disconnected from signaling server\");\r\n     });\r\n \r\n     socket.on(\"joined-room\", (roomId: string) => {\r\n-      console.log(\"✅ Successfully joined room:\", roomId);\r\n+      console.log(\"✅ Joined room:\", roomId);\r\n     });\r\n   }\r\n };\r\n \r\n export const disconnectSocket = () => {\r\n-  if (socket) {\r\n-    socket.disconnect();\r\n-    socket = null;\r\n-  }\r\n+  socket?.disconnect();\r\n+  socket = null;\r\n };\r\n \r\n+export const getSocket = () => socket;\r\n+export const getSocketId = () => socket?.id ?? null;\r\n+\r\n+// --- ROOM CONTROL ---\r\n+\r\n export const startLooking = () => {\r\n   socket?.emit(\"start-looking\");\r\n };\r\n \r\n@@ -51,38 +54,40 @@\n export const skipPartner = () => {\r\n   socket?.emit(\"skip\");\r\n };\r\n \r\n-// WebRTC events\r\n+// --- WEBRTC SIGNALING ---\r\n+\r\n export const sendOffer = (offer: RTCSessionDescriptionInit, roomId: string) => {\r\n   socket?.emit(\"offer\", { offer, roomId });\r\n };\r\n \r\n export const onOffer = (callback: (data: { offer: RTCSessionDescriptionInit; sender: string }) => void) => {\r\n-  socket?.on(\"offer\", callback);\r\n+  socket?.off(\"offer\").on(\"offer\", callback);\r\n };\r\n \r\n export const sendAnswer = (answer: RTCSessionDescriptionInit, roomId: string) => {\r\n   socket?.emit(\"answer\", { answer, roomId });\r\n };\r\n \r\n export const onAnswer = (callback: (data: { answer: RTCSessionDescriptionInit; sender: string }) => void) => {\r\n-  socket?.on(\"answer\", callback);\r\n+  socket?.off(\"answer\").on(\"answer\", callback);\r\n };\r\n \r\n export const sendIceCandidate = (candidate: RTCIceCandidateInit, roomId: string) => {\r\n   socket?.emit(\"ice-candidate\", { candidate, roomId });\r\n };\r\n \r\n export const onIceCandidate = (callback: (data: { candidate: RTCIceCandidateInit; sender: string }) => void) => {\r\n-  socket?.on(\"ice-candidate\", callback);\r\n+  socket?.off(\"ice-candidate\").on(\"ice-candidate\", callback);\r\n };\r\n \r\n-// Messaging\r\n+// --- MESSAGING ---\r\n+\r\n export const sendMessage = ({\r\n   roomId,\r\n   content,\r\n-  type = \"text\"\r\n+  type = \"text\",\r\n }: {\r\n   roomId: string;\r\n   content: string;\r\n   type?: \"text\" | \"image\" | \"audio\" | \"video\";\r\n@@ -100,21 +105,23 @@\n \r\n export const onReceiveMessage = (\r\n   callback: (data: { message: any; sender: string }) => void\r\n ) => {\r\n-  socket?.on(\"receive-message\", callback);\r\n+  socket?.off(\"receive-message\").on(\"receive-message\", callback);\r\n };\r\n \r\n-// Typing\r\n+// --- TYPING INDICATOR ---\r\n+\r\n export const sendTyping = (roomId: string) => {\r\n   socket?.emit(\"typing\", { roomId, sender: socket?.id });\r\n };\r\n \r\n export const onTyping = (callback: ({ sender }: { sender: string }) => void) => {\r\n-  socket?.on(\"typing\", callback);\r\n+  socket?.off(\"typing\").on(\"typing\", callback);\r\n };\r\n \r\n-// Message Status\r\n+// --- MESSAGE STATUS ---\r\n+\r\n export const sendMessageStatus = ({\r\n   roomId,\r\n   messageId,\r\n   status,\r\n@@ -128,18 +135,19 @@\n \r\n export const onMessageStatusUpdate = (\r\n   callback: ({ messageId, status }: { messageId: string; status: string }) => void\r\n ) => {\r\n-  socket?.on(\"message-status-update\", callback);\r\n+  socket?.off(\"message-status-update\").on(\"message-status-update\", callback);\r\n };\r\n \r\n-// Delete/Edit/React\r\n+// --- DELETE / EDIT / REACT ---\r\n+\r\n export const deleteMessage = (roomId: string, messageId: string) => {\r\n   socket?.emit(\"delete-message\", { roomId, messageId });\r\n };\r\n \r\n export const onMessageDeleted = (callback: ({ messageId }: { messageId: string }) => void) => {\r\n-  socket?.on(\"message-deleted\", callback);\r\n+  socket?.off(\"message-deleted\").on(\"message-deleted\", callback);\r\n };\r\n \r\n export const editMessage = (roomId: string, messageId: string, content: string) => {\r\n   socket?.emit(\"edit-message\", { roomId, messageId, content });\r\n@@ -151,17 +159,21 @@\n \r\n export const onMessageReacted = (\r\n   callback: ({ messageId, reaction, user }: { messageId: string; reaction: string; user: string }) => void\r\n ) => {\r\n-  socket?.on(\"message-react\", callback);\r\n+  socket?.off(\"message-react\").on(\"message-react\", callback);\r\n };\r\n \r\n+// --- EXPORT AS MODULE ---\r\n+\r\n export default {\r\n   connectSocket,\r\n   disconnectSocket,\r\n+  getSocket,\r\n+  getSocketId,\r\n+  startLooking,\r\n   joinRoom,\r\n   leaveRoom,\r\n-  startLooking,\r\n   skipPartner,\r\n   sendOffer,\r\n   onOffer,\r\n   sendAnswer,\r\n"
                },
                {
                    "date": 1752337517396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,10 @@\n       reconnectionDelay: 1000,\r\n     });\r\n \r\n     socket.on(\"connect\", () => {\r\n-      console.log(\"✅ Connected to signaling server:\", socket.id);\r\n-    });\r\n+      console.log(\"✅ Connected to signaling server:\", socket?.id);\r\n+     });\r\n \r\n     socket.on(\"disconnect\", () => {\r\n       console.log(\"❌ Disconnected from signaling server\");\r\n     });\r\n"
                },
                {
                    "date": 1752398564574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { io, Socket } from \"socket.io-client\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n \r\n-const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"https://akku-production.up.railway.app\";\r\n+const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"https://connectify-z9gv.onrender.com/\";\r\n \r\n let socket: Socket | null = null;\r\n \r\n // --- CONNECTION ---\r\n"
                },
                {
                    "date": 1758889343107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     });\r\n \r\n     socket.on(\"connect\", () => {\r\n       console.log(\"✅ Connected to signaling server:\", socket?.id);\r\n-     });\r\n+    });\r\n \r\n     socket.on(\"disconnect\", () => {\r\n       console.log(\"❌ Disconnected from signaling server\");\r\n     });\r\n@@ -36,26 +36,28 @@\n \r\n export const getSocket = () => socket;\r\n export const getSocketId = () => socket?.id ?? null;\r\n \r\n-// --- ROOM CONTROL ---\r\n+// --- 1-1 ANONYMOUS CHAT ---\r\n \r\n-export const startLooking = () => {\r\n-  socket?.emit(\"start-looking\");\r\n+export const startLooking = (userInfo?: Record<string, any>) => {\r\n+  socket?.emit(\"start-looking\", userInfo || {});\r\n };\r\n \r\n+export const skipPartner = () => {\r\n+  socket?.emit(\"skip\");\r\n+};\r\n+\r\n+// --- ROOM CONTROL ---\r\n+\r\n export const joinRoom = (roomId: string) => {\r\n   socket?.emit(\"join-room\", roomId);\r\n };\r\n \r\n export const leaveRoom = (roomId: string) => {\r\n   socket?.emit(\"leave-room\", roomId);\r\n };\r\n \r\n-export const skipPartner = () => {\r\n-  socket?.emit(\"skip\");\r\n-};\r\n-\r\n // --- WEBRTC SIGNALING ---\r\n \r\n export const sendOffer = (offer: RTCSessionDescriptionInit, roomId: string) => {\r\n   socket?.emit(\"offer\", { offer, roomId });\r\n@@ -162,19 +164,19 @@\n ) => {\r\n   socket?.off(\"message-react\").on(\"message-react\", callback);\r\n };\r\n \r\n-// --- EXPORT AS MODULE ---\r\n+// --- EXPORT MODULE ---\r\n \r\n export default {\r\n   connectSocket,\r\n   disconnectSocket,\r\n   getSocket,\r\n   getSocketId,\r\n   startLooking,\r\n+  skipPartner,\r\n   joinRoom,\r\n   leaveRoom,\r\n-  skipPartner,\r\n   sendOffer,\r\n   onOffer,\r\n   sendAnswer,\r\n   onAnswer,\r\n"
                },
                {
                    "date": 1758891704083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     });\r\n \r\n     socket.on(\"connect\", () => {\r\n       console.log(\"✅ Connected to signaling server:\", socket?.id);\r\n-    });\r\n+     });\r\n \r\n     socket.on(\"disconnect\", () => {\r\n       console.log(\"❌ Disconnected from signaling server\");\r\n     });\r\n@@ -36,28 +36,26 @@\n \r\n export const getSocket = () => socket;\r\n export const getSocketId = () => socket?.id ?? null;\r\n \r\n-// --- 1-1 ANONYMOUS CHAT ---\r\n+// --- ROOM CONTROL ---\r\n \r\n-export const startLooking = (userInfo?: Record<string, any>) => {\r\n-  socket?.emit(\"start-looking\", userInfo || {});\r\n+export const startLooking = () => {\r\n+  socket?.emit(\"start-looking\");\r\n };\r\n \r\n-export const skipPartner = () => {\r\n-  socket?.emit(\"skip\");\r\n-};\r\n-\r\n-// --- ROOM CONTROL ---\r\n-\r\n export const joinRoom = (roomId: string) => {\r\n   socket?.emit(\"join-room\", roomId);\r\n };\r\n \r\n export const leaveRoom = (roomId: string) => {\r\n   socket?.emit(\"leave-room\", roomId);\r\n };\r\n \r\n+export const skipPartner = () => {\r\n+  socket?.emit(\"skip\");\r\n+};\r\n+\r\n // --- WEBRTC SIGNALING ---\r\n \r\n export const sendOffer = (offer: RTCSessionDescriptionInit, roomId: string) => {\r\n   socket?.emit(\"offer\", { offer, roomId });\r\n@@ -164,19 +162,19 @@\n ) => {\r\n   socket?.off(\"message-react\").on(\"message-react\", callback);\r\n };\r\n \r\n-// --- EXPORT MODULE ---\r\n+// --- EXPORT AS MODULE ---\r\n \r\n export default {\r\n   connectSocket,\r\n   disconnectSocket,\r\n   getSocket,\r\n   getSocketId,\r\n   startLooking,\r\n-  skipPartner,\r\n   joinRoom,\r\n   leaveRoom,\r\n+  skipPartner,\r\n   sendOffer,\r\n   onOffer,\r\n   sendAnswer,\r\n   onAnswer,\r\n"
                },
                {
                    "date": 1758893582364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,8 @@\n \r\n let socket: Socket | null = null;\r\n \r\n // --- CONNECTION ---\r\n-\r\n export const connectSocket = () => {\r\n   if (!socket) {\r\n     socket = io(SOCKET_URL, {\r\n       transports: [\"websocket\"],\r\n@@ -16,9 +15,9 @@\n     });\r\n \r\n     socket.on(\"connect\", () => {\r\n       console.log(\"✅ Connected to signaling server:\", socket?.id);\r\n-     });\r\n+    });\r\n \r\n     socket.on(\"disconnect\", () => {\r\n       console.log(\"❌ Disconnected from signaling server\");\r\n     });\r\n@@ -36,12 +35,21 @@\n \r\n export const getSocket = () => socket;\r\n export const getSocketId = () => socket?.id ?? null;\r\n \r\n-// --- ROOM CONTROL ---\r\n+// --- ROOM SYSTEM ---\r\n+export const createRoom = (roomData: {\r\n+  name: string;\r\n+  topic: string;\r\n+  description?: string;\r\n+  password?: string;\r\n+}) => {\r\n+  const room = { id: uuidv4(), ...roomData, userCount: 0 };\r\n+  socket?.emit(\"create-room\", room);\r\n+};\r\n \r\n-export const startLooking = () => {\r\n-  socket?.emit(\"start-looking\");\r\n+export const listRooms = () => {\r\n+  socket?.emit(\"list-rooms\");\r\n };\r\n \r\n export const joinRoom = (roomId: string) => {\r\n   socket?.emit(\"join-room\", roomId);\r\n@@ -50,14 +58,18 @@\n export const leaveRoom = (roomId: string) => {\r\n   socket?.emit(\"leave-room\", roomId);\r\n };\r\n \r\n+// --- 1-1 ANONYMOUS CHAT ---\r\n+export const startLooking = (userInfo?: any) => {\r\n+  socket?.emit(\"start-looking\", userInfo);\r\n+};\r\n+\r\n export const skipPartner = () => {\r\n   socket?.emit(\"skip\");\r\n };\r\n \r\n // --- WEBRTC SIGNALING ---\r\n-\r\n export const sendOffer = (offer: RTCSessionDescriptionInit, roomId: string) => {\r\n   socket?.emit(\"offer\", { offer, roomId });\r\n };\r\n \r\n@@ -81,9 +93,8 @@\n   socket?.off(\"ice-candidate\").on(\"ice-candidate\", callback);\r\n };\r\n \r\n // --- MESSAGING ---\r\n-\r\n export const sendMessage = ({\r\n   roomId,\r\n   content,\r\n   type = \"text\",\r\n@@ -109,19 +120,17 @@\n   socket?.off(\"receive-message\").on(\"receive-message\", callback);\r\n };\r\n \r\n // --- TYPING INDICATOR ---\r\n-\r\n export const sendTyping = (roomId: string) => {\r\n   socket?.emit(\"typing\", { roomId, sender: socket?.id });\r\n };\r\n \r\n-export const onTyping = (callback: ({ sender }: { sender: string }) => void) => {\r\n+export const onTyping = (callback: ({ sender, roomId }: { sender: string; roomId: string }) => void) => {\r\n   socket?.off(\"typing\").on(\"typing\", callback);\r\n };\r\n \r\n // --- MESSAGE STATUS ---\r\n-\r\n export const sendMessageStatus = ({\r\n   roomId,\r\n   messageId,\r\n   status,\r\n@@ -133,20 +142,19 @@\n   socket?.emit(\"message-status\", { roomId, messageId, status });\r\n };\r\n \r\n export const onMessageStatusUpdate = (\r\n-  callback: ({ messageId, status }: { messageId: string; status: string }) => void\r\n+  callback: ({ messageId, status, roomId }: { messageId: string; status: string; roomId: string }) => void\r\n ) => {\r\n   socket?.off(\"message-status-update\").on(\"message-status-update\", callback);\r\n };\r\n \r\n // --- DELETE / EDIT / REACT ---\r\n-\r\n export const deleteMessage = (roomId: string, messageId: string) => {\r\n   socket?.emit(\"delete-message\", { roomId, messageId });\r\n };\r\n \r\n-export const onMessageDeleted = (callback: ({ messageId }: { messageId: string }) => void) => {\r\n+export const onMessageDeleted = (callback: ({ messageId, roomId }: { messageId: string; roomId: string }) => void) => {\r\n   socket?.off(\"message-deleted\").on(\"message-deleted\", callback);\r\n };\r\n \r\n export const editMessage = (roomId: string, messageId: string, content: string) => {\r\n@@ -157,15 +165,14 @@\n   socket?.emit(\"react-message\", { roomId, messageId, reaction, user: socket?.id });\r\n };\r\n \r\n export const onMessageReacted = (\r\n-  callback: ({ messageId, reaction, user }: { messageId: string; reaction: string; user: string }) => void\r\n+  callback: ({ messageId, reaction, user, roomId }: { messageId: string; reaction: string; user: string; roomId: string }) => void\r\n ) => {\r\n   socket?.off(\"message-react\").on(\"message-react\", callback);\r\n };\r\n \r\n-// --- EXPORT AS MODULE ---\r\n-\r\n+// --- EXPORT ---\r\n export default {\r\n   connectSocket,\r\n   disconnectSocket,\r\n   getSocket,\r\n@@ -173,8 +180,10 @@\n   startLooking,\r\n   joinRoom,\r\n   leaveRoom,\r\n   skipPartner,\r\n+  createRoom,\r\n+  listRooms,\r\n   sendOffer,\r\n   onOffer,\r\n   sendAnswer,\r\n   onAnswer,\r\n"
                },
                {
                    "date": 1758897487555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n \r\n let socket: Socket | null = null;\r\n \r\n // --- CONNECTION ---\r\n+\r\n export const connectSocket = () => {\r\n   if (!socket) {\r\n     socket = io(SOCKET_URL, {\r\n       transports: [\"websocket\"],\r\n@@ -15,9 +16,9 @@\n     });\r\n \r\n     socket.on(\"connect\", () => {\r\n       console.log(\"✅ Connected to signaling server:\", socket?.id);\r\n-    });\r\n+     });\r\n \r\n     socket.on(\"disconnect\", () => {\r\n       console.log(\"❌ Disconnected from signaling server\");\r\n     });\r\n@@ -35,21 +36,12 @@\n \r\n export const getSocket = () => socket;\r\n export const getSocketId = () => socket?.id ?? null;\r\n \r\n-// --- ROOM SYSTEM ---\r\n-export const createRoom = (roomData: {\r\n-  name: string;\r\n-  topic: string;\r\n-  description?: string;\r\n-  password?: string;\r\n-}) => {\r\n-  const room = { id: uuidv4(), ...roomData, userCount: 0 };\r\n-  socket?.emit(\"create-room\", room);\r\n-};\r\n+// --- ROOM CONTROL ---\r\n \r\n-export const listRooms = () => {\r\n-  socket?.emit(\"list-rooms\");\r\n+export const startLooking = () => {\r\n+  socket?.emit(\"start-looking\");\r\n };\r\n \r\n export const joinRoom = (roomId: string) => {\r\n   socket?.emit(\"join-room\", roomId);\r\n@@ -58,18 +50,14 @@\n export const leaveRoom = (roomId: string) => {\r\n   socket?.emit(\"leave-room\", roomId);\r\n };\r\n \r\n-// --- 1-1 ANONYMOUS CHAT ---\r\n-export const startLooking = (userInfo?: any) => {\r\n-  socket?.emit(\"start-looking\", userInfo);\r\n-};\r\n-\r\n export const skipPartner = () => {\r\n   socket?.emit(\"skip\");\r\n };\r\n \r\n // --- WEBRTC SIGNALING ---\r\n+\r\n export const sendOffer = (offer: RTCSessionDescriptionInit, roomId: string) => {\r\n   socket?.emit(\"offer\", { offer, roomId });\r\n };\r\n \r\n@@ -93,8 +81,9 @@\n   socket?.off(\"ice-candidate\").on(\"ice-candidate\", callback);\r\n };\r\n \r\n // --- MESSAGING ---\r\n+\r\n export const sendMessage = ({\r\n   roomId,\r\n   content,\r\n   type = \"text\",\r\n@@ -120,17 +109,19 @@\n   socket?.off(\"receive-message\").on(\"receive-message\", callback);\r\n };\r\n \r\n // --- TYPING INDICATOR ---\r\n+\r\n export const sendTyping = (roomId: string) => {\r\n   socket?.emit(\"typing\", { roomId, sender: socket?.id });\r\n };\r\n \r\n-export const onTyping = (callback: ({ sender, roomId }: { sender: string; roomId: string }) => void) => {\r\n+export const onTyping = (callback: ({ sender }: { sender: string }) => void) => {\r\n   socket?.off(\"typing\").on(\"typing\", callback);\r\n };\r\n \r\n // --- MESSAGE STATUS ---\r\n+\r\n export const sendMessageStatus = ({\r\n   roomId,\r\n   messageId,\r\n   status,\r\n@@ -142,19 +133,20 @@\n   socket?.emit(\"message-status\", { roomId, messageId, status });\r\n };\r\n \r\n export const onMessageStatusUpdate = (\r\n-  callback: ({ messageId, status, roomId }: { messageId: string; status: string; roomId: string }) => void\r\n+  callback: ({ messageId, status }: { messageId: string; status: string }) => void\r\n ) => {\r\n   socket?.off(\"message-status-update\").on(\"message-status-update\", callback);\r\n };\r\n \r\n // --- DELETE / EDIT / REACT ---\r\n+\r\n export const deleteMessage = (roomId: string, messageId: string) => {\r\n   socket?.emit(\"delete-message\", { roomId, messageId });\r\n };\r\n \r\n-export const onMessageDeleted = (callback: ({ messageId, roomId }: { messageId: string; roomId: string }) => void) => {\r\n+export const onMessageDeleted = (callback: ({ messageId }: { messageId: string }) => void) => {\r\n   socket?.off(\"message-deleted\").on(\"message-deleted\", callback);\r\n };\r\n \r\n export const editMessage = (roomId: string, messageId: string, content: string) => {\r\n@@ -165,14 +157,15 @@\n   socket?.emit(\"react-message\", { roomId, messageId, reaction, user: socket?.id });\r\n };\r\n \r\n export const onMessageReacted = (\r\n-  callback: ({ messageId, reaction, user, roomId }: { messageId: string; reaction: string; user: string; roomId: string }) => void\r\n+  callback: ({ messageId, reaction, user }: { messageId: string; reaction: string; user: string }) => void\r\n ) => {\r\n   socket?.off(\"message-react\").on(\"message-react\", callback);\r\n };\r\n \r\n-// --- EXPORT ---\r\n+// --- EXPORT AS MODULE ---\r\n+\r\n export default {\r\n   connectSocket,\r\n   disconnectSocket,\r\n   getSocket,\r\n@@ -180,10 +173,8 @@\n   startLooking,\r\n   joinRoom,\r\n   leaveRoom,\r\n   skipPartner,\r\n-  createRoom,\r\n-  listRooms,\r\n   sendOffer,\r\n   onOffer,\r\n   sendAnswer,\r\n   onAnswer,\r\n"
                },
                {
                    "date": 1759345293608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,11 @@\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"https://connectify-z9gv.onrender.com/\";\r\n \r\n let socket: Socket | null = null;\r\n \r\n-// --- CONNECTION ---\r\n+// -------------------------\r\n+// --- CONNECTION & ROOM ---\r\n+// -------------------------\r\n \r\n export const connectSocket = () => {\r\n   if (!socket) {\r\n     socket = io(SOCKET_URL, {\r\n@@ -14,19 +16,11 @@\n       reconnectionAttempts: 5,\r\n       reconnectionDelay: 1000,\r\n     });\r\n \r\n-    socket.on(\"connect\", () => {\r\n-      console.log(\"✅ Connected to signaling server:\", socket?.id);\r\n-     });\r\n-\r\n-    socket.on(\"disconnect\", () => {\r\n-      console.log(\"❌ Disconnected from signaling server\");\r\n-    });\r\n-\r\n-    socket.on(\"joined-room\", (roomId: string) => {\r\n-      console.log(\"✅ Joined room:\", roomId);\r\n-    });\r\n+    socket.on(\"connect\", () => console.log(\"✅ Connected to server:\", socket?.id));\r\n+    socket.on(\"disconnect\", () => console.log(\"❌ Disconnected from server\"));\r\n+    socket.on(\"joined-room\", (roomId: string) => console.log(\"✅ Joined room:\", roomId));\r\n   }\r\n };\r\n \r\n export const disconnectSocket = () => {\r\n@@ -36,12 +30,10 @@\n \r\n export const getSocket = () => socket;\r\n export const getSocketId = () => socket?.id ?? null;\r\n \r\n-// --- ROOM CONTROL ---\r\n-\r\n-export const startLooking = () => {\r\n-  socket?.emit(\"start-looking\");\r\n+export const startLooking = (userInfo?: any) => {\r\n+  socket?.emit(\"start-looking\", userInfo);\r\n };\r\n \r\n export const joinRoom = (roomId: string) => {\r\n   socket?.emit(\"join-room\", roomId);\r\n@@ -54,9 +46,11 @@\n export const skipPartner = () => {\r\n   socket?.emit(\"skip\");\r\n };\r\n \r\n+// -------------------------\r\n // --- WEBRTC SIGNALING ---\r\n+// -------------------------\r\n \r\n export const sendOffer = (offer: RTCSessionDescriptionInit, roomId: string) => {\r\n   socket?.emit(\"offer\", { offer, roomId });\r\n };\r\n@@ -80,37 +74,44 @@\n export const onIceCandidate = (callback: (data: { candidate: RTCIceCandidateInit; sender: string }) => void) => {\r\n   socket?.off(\"ice-candidate\").on(\"ice-candidate\", callback);\r\n };\r\n \r\n+// -------------------------\r\n // --- MESSAGING ---\r\n+// -------------------------\r\n \r\n-export const sendMessage = ({\r\n-  roomId,\r\n-  content,\r\n-  type = \"text\",\r\n-}: {\r\n+export interface MessagePayload {\r\n   roomId: string;\r\n-  content: string;\r\n-  type?: \"text\" | \"image\" | \"audio\" | \"video\";\r\n-}) => {\r\n+  content: string; // for files, this is the URL or base64\r\n+  type?: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\";\r\n+  sender?: string;\r\n+  id?: string;\r\n+  timestamp?: string;\r\n+  status?: \"sent\" | \"delivered\" | \"seen\";\r\n+}\r\n+\r\n+export const sendMessage = ({ roomId, content, type = \"text\" }: MessagePayload) => {\r\n+  if (!socket || !roomId || !content) return;\r\n+\r\n   const message = {\r\n     id: uuidv4(),\r\n     content,\r\n     type,\r\n     timestamp: new Date().toISOString(),\r\n     status: \"sent\",\r\n-    sender: socket?.id,\r\n+    sender: socket.id,\r\n   };\r\n-  socket?.emit(\"send-message\", { roomId, message });\r\n+\r\n+  socket.emit(\"send-message\", { roomId, message });\r\n };\r\n \r\n-export const onReceiveMessage = (\r\n-  callback: (data: { message: any; sender: string }) => void\r\n-) => {\r\n+export const onReceiveMessage = (callback: (data: { message: MessagePayload; sender: string }) => void) => {\r\n   socket?.off(\"receive-message\").on(\"receive-message\", callback);\r\n };\r\n \r\n+// -------------------------\r\n // --- TYPING INDICATOR ---\r\n+// -------------------------\r\n \r\n export const sendTyping = (roomId: string) => {\r\n   socket?.emit(\"typing\", { roomId, sender: socket?.id });\r\n };\r\n@@ -118,29 +119,23 @@\n export const onTyping = (callback: ({ sender }: { sender: string }) => void) => {\r\n   socket?.off(\"typing\").on(\"typing\", callback);\r\n };\r\n \r\n+// -------------------------\r\n // --- MESSAGE STATUS ---\r\n+// -------------------------\r\n \r\n-export const sendMessageStatus = ({\r\n-  roomId,\r\n-  messageId,\r\n-  status,\r\n-}: {\r\n-  roomId: string;\r\n-  messageId: string;\r\n-  status: \"delivered\" | \"seen\";\r\n-}) => {\r\n+export const sendMessageStatus = ({ roomId, messageId, status }: { roomId: string; messageId: string; status: \"delivered\" | \"seen\" }) => {\r\n   socket?.emit(\"message-status\", { roomId, messageId, status });\r\n };\r\n \r\n-export const onMessageStatusUpdate = (\r\n-  callback: ({ messageId, status }: { messageId: string; status: string }) => void\r\n-) => {\r\n+export const onMessageStatusUpdate = (callback: ({ messageId, status }: { messageId: string; status: string }) => void) => {\r\n   socket?.off(\"message-status-update\").on(\"message-status-update\", callback);\r\n };\r\n \r\n+// -------------------------\r\n // --- DELETE / EDIT / REACT ---\r\n+// -------------------------\r\n \r\n export const deleteMessage = (roomId: string, messageId: string) => {\r\n   socket?.emit(\"delete-message\", { roomId, messageId });\r\n };\r\n@@ -156,16 +151,29 @@\n export const reactToMessage = (roomId: string, messageId: string, reaction: string) => {\r\n   socket?.emit(\"react-message\", { roomId, messageId, reaction, user: socket?.id });\r\n };\r\n \r\n-export const onMessageReacted = (\r\n-  callback: ({ messageId, reaction, user }: { messageId: string; reaction: string; user: string }) => void\r\n-) => {\r\n+export const onMessageReacted = (callback: ({ messageId, reaction, user }: { messageId: string; reaction: string; user: string }) => void) => {\r\n   socket?.off(\"message-react\").on(\"message-react\", callback);\r\n };\r\n \r\n-// --- EXPORT AS MODULE ---\r\n+// -------------------------\r\n+// --- FILES SUPPORT ---\r\n+// -------------------------\r\n \r\n+export const sendFile = async (roomId: string, file: File) => {\r\n+  if (!file || !roomId) return;\r\n+\r\n+  const url = URL.createObjectURL(file); // can replace with cloud upload if needed\r\n+  let type: MessagePayload[\"type\"] = \"file\";\r\n+\r\n+  if (file.type.startsWith(\"image\")) type = \"image\";\r\n+  else if (file.type.startsWith(\"audio\")) type = \"audio\";\r\n+  else if (file.type.startsWith(\"video\")) type = \"video\";\r\n+\r\n+  sendMessage({ roomId, content: url, type });\r\n+};\r\n+\r\n export default {\r\n   connectSocket,\r\n   disconnectSocket,\r\n   getSocket,\r\n@@ -190,5 +198,6 @@\n   onMessageDeleted,\r\n   editMessage,\r\n   reactToMessage,\r\n   onMessageReacted,\r\n+  sendFile,\r\n };\r\n"
                },
                {
                    "date": 1759757420475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,138 @@\n+// src/lib/socketClient.ts\r\n+import { io, Socket } from \"socket.io-client\";\r\n+import { v4 as uuidv4 } from \"uuid\";\r\n+\r\n+const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"https://connectify-z9gv.onrender.com/\";\r\n+\r\n+let socket: Socket | null = null;\r\n+\r\n+export const connectSocket = () => {\r\n+  if (socket) return;\r\n+  socket = io(SOCKET_URL, {\r\n+    transports: [\"websocket\"],\r\n+    reconnectionAttempts: 5,\r\n+    reconnectionDelay: 1000,\r\n+  });\r\n+\r\n+  socket.on(\"connect\", () => console.log(\"✅ Connected to server:\", socket?.id));\r\n+  socket.on(\"disconnect\", (reason) => console.log(\"❌ Disconnected from server:\", reason));\r\n+  socket.on(\"connect_error\", (err) => console.warn(\"Socket connect_error:\", err));\r\n+};\r\n+\r\n+export const disconnectSocket = () => {\r\n+  socket?.disconnect();\r\n+  socket = null;\r\n+};\r\n+\r\n+export const getSocket = () => socket;\r\n+export const getSocketId = () => socket?.id ?? null;\r\n+\r\n+/* Room / matching */\r\n+export const startLooking = (userInfo?: any) => socket?.emit(\"start-looking\", userInfo);\r\n+export const joinRoom = (roomId: string) => socket?.emit(\"join-room\", roomId);\r\n+export const leaveRoom = (roomId: string) => socket?.emit(\"leave-room\", roomId);\r\n+export const skipPartner = () => socket?.emit(\"skip\");\r\n+\r\n+/* WebRTC Signaling */\r\n+export const sendOffer = (offer: RTCSessionDescriptionInit, roomId: string) =>\r\n+  socket?.emit(\"offer\", { offer, roomId });\r\n+export const onOffer = (cb: (data: any) => void) => socket?.off(\"offer\").on(\"offer\", cb);\r\n+export const sendAnswer = (answer: RTCSessionDescriptionInit, roomId: string) =>\r\n+  socket?.emit(\"answer\", { answer, roomId });\r\n+export const onAnswer = (cb: (data: any) => void) => socket?.off(\"answer\").on(\"answer\", cb);\r\n+export const sendIceCandidate = (candidate: RTCIceCandidateInit, roomId: string) =>\r\n+  socket?.emit(\"ice-candidate\", { candidate, roomId });\r\n+export const onIceCandidate = (cb: (data: any) => void) =>\r\n+  socket?.off(\"ice-candidate\").on(\"ice-candidate\", cb);\r\n+\r\n+/* Messaging */\r\n+export interface MessagePayload {\r\n+  id?: string;\r\n+  sender?: string;\r\n+  content: string;\r\n+  type?: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\";\r\n+  timestamp?: string;\r\n+  status?: \"sent\" | \"delivered\" | \"seen\";\r\n+  reactions?: Record<string, string>;\r\n+}\r\n+\r\n+export const sendMessage = (roomId: string, message: MessagePayload) => {\r\n+  if (!socket || !roomId || !message) return;\r\n+  const msg = {\r\n+    id: message.id ?? uuidv4(),\r\n+    ...message,\r\n+    timestamp: message.timestamp ?? new Date().toISOString(),\r\n+    sender: socket.id ?? message.sender,\r\n+    status: message.status ?? \"sent\",\r\n+  };\r\n+  socket.emit(\"send-message\", { roomId, message: msg });\r\n+};\r\n+\r\n+export const onReceiveMessage = (cb: (data: { message: MessagePayload; sender: string }) => void) =>\r\n+  socket?.off(\"receive-message\").on(\"receive-message\", cb);\r\n+\r\n+/* Typing */\r\n+export const sendTyping = (roomId: string) => socket?.emit(\"typing\", { roomId, sender: socket?.id });\r\n+export const onTyping = (cb: ({ sender }: { sender: string }) => void) => socket?.off(\"typing\").on(\"typing\", cb);\r\n+\r\n+/* Message status */\r\n+export const sendMessageStatus = (roomId: string, messageId: string, status: \"delivered\" | \"seen\") =>\r\n+  socket?.emit(\"message-status\", { roomId, messageId, status });\r\n+export const onMessageStatusUpdate = (cb: (data: { messageId: string; status: string }) => void) =>\r\n+  socket?.off(\"message-status-update\").on(\"message-status-update\", cb);\r\n+\r\n+/* Edit / Delete / React */\r\n+export const editMessage = (roomId: string, messageId: string, content: string) =>\r\n+  socket?.emit(\"edit-message\", { roomId, messageId, content });\r\n+export const onMessageEdited = (cb: (data: any) => void) => socket?.off(\"message-edited\").on(\"message-edited\", cb);\r\n+\r\n+export const deleteMessage = (roomId: string, messageId: string) =>\r\n+  socket?.emit(\"delete-message\", { roomId, messageId });\r\n+export const onMessageDeleted = (cb: (data: { messageId: string }) => void) =>\r\n+  socket?.off(\"message-deleted\").on(\"message-deleted\", cb);\r\n+\r\n+export const reactToMessage = (roomId: string, messageId: string, reaction: string) =>\r\n+  socket?.emit(\"react-message\", { roomId, messageId, reaction, user: socket?.id });\r\n+export const onMessageReacted = (cb: (data: { messageId: string; reaction: string; user: string }) => void) =>\r\n+  socket?.off(\"message-react\").on(\"message-react\", cb);\r\n+\r\n+/* File helper (local blob -> for preview). For production use storage upload returnable URL */\r\n+export const sendFile = async (roomId: string, file: File) => {\r\n+  if (!file || !roomId) return;\r\n+  const url = URL.createObjectURL(file);\r\n+  let type: MessagePayload[\"type\"] = \"file\";\r\n+  if (file.type.startsWith(\"image\")) type = \"image\";\r\n+  else if (file.type.startsWith(\"audio\")) type = \"audio\";\r\n+  else if (file.type.startsWith(\"video\")) type = \"video\";\r\n+  sendMessage(roomId, { content: url, type });\r\n+};\r\n+\r\n+export default {\r\n+  connectSocket,\r\n+  disconnectSocket,\r\n+  getSocket,\r\n+  getSocketId,\r\n+  startLooking,\r\n+  joinRoom,\r\n+  leaveRoom,\r\n+  skipPartner,\r\n+  sendOffer,\r\n+  onOffer,\r\n+  sendAnswer,\r\n+  onAnswer,\r\n+  sendIceCandidate,\r\n+  onIceCandidate,\r\n+  sendMessage,\r\n+  onReceiveMessage,\r\n+  sendTyping,\r\n+  onTyping,\r\n+  sendMessageStatus,\r\n+  onMessageStatusUpdate,\r\n+  editMessage,\r\n+  onMessageEdited,\r\n+  deleteMessage,\r\n+  onMessageDeleted,\r\n+  reactToMessage,\r\n+  onMessageReacted,\r\n+  sendFile,\r\n+};\r\n"
                },
                {
                    "date": 1759757518661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,149 +1,11 @@\n-// src/lib/socketClient.ts\r\n import { io, Socket } from \"socket.io-client\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"https://connectify-z9gv.onrender.com/\";\r\n \r\n let socket: Socket | null = null;\r\n \r\n-export const connectSocket = () => {\r\n-  if (socket) return;\r\n-  socket = io(SOCKET_URL, {\r\n-    transports: [\"websocket\"],\r\n-    reconnectionAttempts: 5,\r\n-    reconnectionDelay: 1000,\r\n-  });\r\n-\r\n-  socket.on(\"connect\", () => console.log(\"✅ Connected to server:\", socket?.id));\r\n-  socket.on(\"disconnect\", (reason) => console.log(\"❌ Disconnected from server:\", reason));\r\n-  socket.on(\"connect_error\", (err) => console.warn(\"Socket connect_error:\", err));\r\n-};\r\n-\r\n-export const disconnectSocket = () => {\r\n-  socket?.disconnect();\r\n-  socket = null;\r\n-};\r\n-\r\n-export const getSocket = () => socket;\r\n-export const getSocketId = () => socket?.id ?? null;\r\n-\r\n-/* Room / matching */\r\n-export const startLooking = (userInfo?: any) => socket?.emit(\"start-looking\", userInfo);\r\n-export const joinRoom = (roomId: string) => socket?.emit(\"join-room\", roomId);\r\n-export const leaveRoom = (roomId: string) => socket?.emit(\"leave-room\", roomId);\r\n-export const skipPartner = () => socket?.emit(\"skip\");\r\n-\r\n-/* WebRTC Signaling */\r\n-export const sendOffer = (offer: RTCSessionDescriptionInit, roomId: string) =>\r\n-  socket?.emit(\"offer\", { offer, roomId });\r\n-export const onOffer = (cb: (data: any) => void) => socket?.off(\"offer\").on(\"offer\", cb);\r\n-export const sendAnswer = (answer: RTCSessionDescriptionInit, roomId: string) =>\r\n-  socket?.emit(\"answer\", { answer, roomId });\r\n-export const onAnswer = (cb: (data: any) => void) => socket?.off(\"answer\").on(\"answer\", cb);\r\n-export const sendIceCandidate = (candidate: RTCIceCandidateInit, roomId: string) =>\r\n-  socket?.emit(\"ice-candidate\", { candidate, roomId });\r\n-export const onIceCandidate = (cb: (data: any) => void) =>\r\n-  socket?.off(\"ice-candidate\").on(\"ice-candidate\", cb);\r\n-\r\n-/* Messaging */\r\n-export interface MessagePayload {\r\n-  id?: string;\r\n-  sender?: string;\r\n-  content: string;\r\n-  type?: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\";\r\n-  timestamp?: string;\r\n-  status?: \"sent\" | \"delivered\" | \"seen\";\r\n-  reactions?: Record<string, string>;\r\n-}\r\n-\r\n-export const sendMessage = (roomId: string, message: MessagePayload) => {\r\n-  if (!socket || !roomId || !message) return;\r\n-  const msg = {\r\n-    id: message.id ?? uuidv4(),\r\n-    ...message,\r\n-    timestamp: message.timestamp ?? new Date().toISOString(),\r\n-    sender: socket.id ?? message.sender,\r\n-    status: message.status ?? \"sent\",\r\n-  };\r\n-  socket.emit(\"send-message\", { roomId, message: msg });\r\n-};\r\n-\r\n-export const onReceiveMessage = (cb: (data: { message: MessagePayload; sender: string }) => void) =>\r\n-  socket?.off(\"receive-message\").on(\"receive-message\", cb);\r\n-\r\n-/* Typing */\r\n-export const sendTyping = (roomId: string) => socket?.emit(\"typing\", { roomId, sender: socket?.id });\r\n-export const onTyping = (cb: ({ sender }: { sender: string }) => void) => socket?.off(\"typing\").on(\"typing\", cb);\r\n-\r\n-/* Message status */\r\n-export const sendMessageStatus = (roomId: string, messageId: string, status: \"delivered\" | \"seen\") =>\r\n-  socket?.emit(\"message-status\", { roomId, messageId, status });\r\n-export const onMessageStatusUpdate = (cb: (data: { messageId: string; status: string }) => void) =>\r\n-  socket?.off(\"message-status-update\").on(\"message-status-update\", cb);\r\n-\r\n-/* Edit / Delete / React */\r\n-export const editMessage = (roomId: string, messageId: string, content: string) =>\r\n-  socket?.emit(\"edit-message\", { roomId, messageId, content });\r\n-export const onMessageEdited = (cb: (data: any) => void) => socket?.off(\"message-edited\").on(\"message-edited\", cb);\r\n-\r\n-export const deleteMessage = (roomId: string, messageId: string) =>\r\n-  socket?.emit(\"delete-message\", { roomId, messageId });\r\n-export const onMessageDeleted = (cb: (data: { messageId: string }) => void) =>\r\n-  socket?.off(\"message-deleted\").on(\"message-deleted\", cb);\r\n-\r\n-export const reactToMessage = (roomId: string, messageId: string, reaction: string) =>\r\n-  socket?.emit(\"react-message\", { roomId, messageId, reaction, user: socket?.id });\r\n-export const onMessageReacted = (cb: (data: { messageId: string; reaction: string; user: string }) => void) =>\r\n-  socket?.off(\"message-react\").on(\"message-react\", cb);\r\n-\r\n-/* File helper (local blob -> for preview). For production use storage upload returnable URL */\r\n-export const sendFile = async (roomId: string, file: File) => {\r\n-  if (!file || !roomId) return;\r\n-  const url = URL.createObjectURL(file);\r\n-  let type: MessagePayload[\"type\"] = \"file\";\r\n-  if (file.type.startsWith(\"image\")) type = \"image\";\r\n-  else if (file.type.startsWith(\"audio\")) type = \"audio\";\r\n-  else if (file.type.startsWith(\"video\")) type = \"video\";\r\n-  sendMessage(roomId, { content: url, type });\r\n-};\r\n-\r\n-export default {\r\n-  connectSocket,\r\n-  disconnectSocket,\r\n-  getSocket,\r\n-  getSocketId,\r\n-  startLooking,\r\n-  joinRoom,\r\n-  leaveRoom,\r\n-  skipPartner,\r\n-  sendOffer,\r\n-  onOffer,\r\n-  sendAnswer,\r\n-  onAnswer,\r\n-  sendIceCandidate,\r\n-  onIceCandidate,\r\n-  sendMessage,\r\n-  onReceiveMessage,\r\n-  sendTyping,\r\n-  onTyping,\r\n-  sendMessageStatus,\r\n-  onMessageStatusUpdate,\r\n-  editMessage,\r\n-  onMessageEdited,\r\n-  deleteMessage,\r\n-  onMessageDeleted,\r\n-  reactToMessage,\r\n-  onMessageReacted,\r\n-  sendFile,\r\n-};\r\n-import { io, Socket } from \"socket.io-client\";\r\n-import { v4 as uuidv4 } from \"uuid\";\r\n-\r\n-const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"https://connectify-z9gv.onrender.com/\";\r\n-\r\n-let socket: Socket | null = null;\r\n-\r\n // -------------------------\r\n // --- CONNECTION & ROOM ---\r\n // -------------------------\r\n \r\n"
                },
                {
                    "date": 1759757648951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,53 @@\n+// features/anonymousChat/services/signalingService.ts\r\n import { io, Socket } from \"socket.io-client\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"https://connectify-z9gv.onrender.com/\";\r\n \r\n let socket: Socket | null = null;\r\n \r\n-// -------------------------\r\n-// --- CONNECTION & ROOM ---\r\n-// -------------------------\r\n+/* -------------------------\r\n+   Connection & lifecycle\r\n+   ------------------------- */\r\n \r\n export const connectSocket = () => {\r\n-  if (!socket) {\r\n-    socket = io(SOCKET_URL, {\r\n-      transports: [\"websocket\"],\r\n-      reconnectionAttempts: 5,\r\n-      reconnectionDelay: 1000,\r\n-    });\r\n+  if (socket) return;\r\n \r\n-    socket.on(\"connect\", () => console.log(\"✅ Connected to server:\", socket?.id));\r\n-    socket.on(\"disconnect\", () => console.log(\"❌ Disconnected from server\"));\r\n-    socket.on(\"joined-room\", (roomId: string) => console.log(\"✅ Joined room:\", roomId));\r\n-  }\r\n+  socket = io(SOCKET_URL, {\r\n+    transports: [\"websocket\"],\r\n+    reconnectionAttempts: 5,\r\n+    reconnectionDelay: 1000,\r\n+  });\r\n+\r\n+  socket.on(\"connect\", () => {\r\n+    console.log(\"✅ Signaling connected:\", socket?.id);\r\n+  });\r\n+\r\n+  socket.on(\"disconnect\", (reason) => {\r\n+    console.log(\"❌ Signaling disconnected:\", reason);\r\n+  });\r\n+\r\n+  socket.on(\"connect_error\", (err) => {\r\n+    console.warn(\"⚠️ Signaling connect error:\", err);\r\n+  });\r\n };\r\n \r\n export const disconnectSocket = () => {\r\n-  socket?.disconnect();\r\n+  if (!socket) return;\r\n+  socket.disconnect();\r\n   socket = null;\r\n };\r\n \r\n export const getSocket = () => socket;\r\n export const getSocketId = () => socket?.id ?? null;\r\n \r\n+/* -------------------------\r\n+   Room / matchmaking helpers\r\n+   ------------------------- */\r\n+\r\n export const startLooking = (userInfo?: any) => {\r\n-  socket?.emit(\"start-looking\", userInfo);\r\n+  socket?.emit(\"start-looking\", userInfo || {});\r\n };\r\n \r\n export const joinRoom = (roomId: string) => {\r\n   socket?.emit(\"join-room\", roomId);\r\n@@ -46,134 +60,136 @@\n export const skipPartner = () => {\r\n   socket?.emit(\"skip\");\r\n };\r\n \r\n-// -------------------------\r\n-// --- WEBRTC SIGNALING ---\r\n-// -------------------------\r\n+/* -------------------------\r\n+   WebRTC signaling helpers\r\n+   ------------------------- */\r\n \r\n-export const sendOffer = (offer: RTCSessionDescriptionInit, roomId: string) => {\r\n+export const sendOffer = (offer: RTCSessionDescriptionInit, roomId: string) =>\r\n   socket?.emit(\"offer\", { offer, roomId });\r\n-};\r\n \r\n-export const onOffer = (callback: (data: { offer: RTCSessionDescriptionInit; sender: string }) => void) => {\r\n-  socket?.off(\"offer\").on(\"offer\", callback);\r\n+export const onOffer = (cb: (data: { offer: RTCSessionDescriptionInit; sender: string }) => void) => {\r\n+  socket?.off(\"offer\").on(\"offer\", cb);\r\n };\r\n \r\n-export const sendAnswer = (answer: RTCSessionDescriptionInit, roomId: string) => {\r\n+export const sendAnswer = (answer: RTCSessionDescriptionInit, roomId: string) =>\r\n   socket?.emit(\"answer\", { answer, roomId });\r\n-};\r\n \r\n-export const onAnswer = (callback: (data: { answer: RTCSessionDescriptionInit; sender: string }) => void) => {\r\n-  socket?.off(\"answer\").on(\"answer\", callback);\r\n+export const onAnswer = (cb: (data: { answer: RTCSessionDescriptionInit; sender: string }) => void) => {\r\n+  socket?.off(\"answer\").on(\"answer\", cb);\r\n };\r\n \r\n-export const sendIceCandidate = (candidate: RTCIceCandidateInit, roomId: string) => {\r\n+export const sendIceCandidate = (candidate: RTCIceCandidateInit, roomId: string) =>\r\n   socket?.emit(\"ice-candidate\", { candidate, roomId });\r\n-};\r\n \r\n-export const onIceCandidate = (callback: (data: { candidate: RTCIceCandidateInit; sender: string }) => void) => {\r\n-  socket?.off(\"ice-candidate\").on(\"ice-candidate\", callback);\r\n+export const onIceCandidate = (cb: (data: { candidate: RTCIceCandidateInit; sender: string }) => void) => {\r\n+  socket?.off(\"ice-candidate\").on(\"ice-candidate\", cb);\r\n };\r\n \r\n-// -------------------------\r\n-// --- MESSAGING ---\r\n-// -------------------------\r\n+/* -------------------------\r\n+   Messaging API (real-time)\r\n+   ------------------------- */\r\n \r\n export interface MessagePayload {\r\n-  roomId: string;\r\n-  content: string; // for files, this is the URL or base64\r\n+  id?: string;\r\n+  sender?: string;\r\n+  content: string; // text or file URL\r\n   type?: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\";\r\n-  sender?: string;\r\n-  id?: string;\r\n   timestamp?: string;\r\n   status?: \"sent\" | \"delivered\" | \"seen\";\r\n+  reactions?: Record<string, string>;\r\n }\r\n \r\n-export const sendMessage = ({ roomId, content, type = \"text\" }: MessagePayload) => {\r\n+export const sendMessage = ({ roomId, content, type = \"text\", id, timestamp }: { roomId: string; content: string; type?: MessagePayload[\"type\"]; id?: string; timestamp?: string }) => {\r\n   if (!socket || !roomId || !content) return;\r\n \r\n-  const message = {\r\n-    id: uuidv4(),\r\n+  const message: MessagePayload = {\r\n+    id: id ?? uuidv4(),\r\n     content,\r\n     type,\r\n-    timestamp: new Date().toISOString(),\r\n+    timestamp: timestamp ?? new Date().toISOString(),\r\n     status: \"sent\",\r\n-    sender: socket.id,\r\n+    sender: socket.id ?? undefined,\r\n+    reactions: {},\r\n   };\r\n \r\n   socket.emit(\"send-message\", { roomId, message });\r\n };\r\n \r\n-export const onReceiveMessage = (callback: (data: { message: MessagePayload; sender: string }) => void) => {\r\n-  socket?.off(\"receive-message\").on(\"receive-message\", callback);\r\n+export const onReceiveMessage = (cb: (data: { message: MessagePayload; sender: string }) => void) => {\r\n+  socket?.off(\"receive-message\").on(\"receive-message\", cb);\r\n };\r\n \r\n-// -------------------------\r\n-// --- TYPING INDICATOR ---\r\n-// -------------------------\r\n+/* -------------------------\r\n+   Typing indicator\r\n+   ------------------------- */\r\n \r\n export const sendTyping = (roomId: string) => {\r\n   socket?.emit(\"typing\", { roomId, sender: socket?.id });\r\n };\r\n \r\n-export const onTyping = (callback: ({ sender }: { sender: string }) => void) => {\r\n-  socket?.off(\"typing\").on(\"typing\", callback);\r\n+export const onTyping = (cb: ({ sender }: { sender: string }) => void) => {\r\n+  socket?.off(\"typing\").on(\"typing\", cb);\r\n };\r\n \r\n-// -------------------------\r\n-// --- MESSAGE STATUS ---\r\n-// -------------------------\r\n+/* -------------------------\r\n+   Message status (delivered/seen)\r\n+   ------------------------- */\r\n \r\n-export const sendMessageStatus = ({ roomId, messageId, status }: { roomId: string; messageId: string; status: \"delivered\" | \"seen\" }) => {\r\n+export const sendMessageStatus = (roomId: string, messageId: string, status: \"delivered\" | \"seen\") => {\r\n   socket?.emit(\"message-status\", { roomId, messageId, status });\r\n };\r\n \r\n-export const onMessageStatusUpdate = (callback: ({ messageId, status }: { messageId: string; status: string }) => void) => {\r\n-  socket?.off(\"message-status-update\").on(\"message-status-update\", callback);\r\n+export const onMessageStatusUpdate = (cb: (data: { messageId: string; status: string }) => void) => {\r\n+  socket?.off(\"message-status-update\").on(\"message-status-update\", cb);\r\n };\r\n \r\n-// -------------------------\r\n-// --- DELETE / EDIT / REACT ---\r\n-// -------------------------\r\n+/* -------------------------\r\n+   Edit / Delete / React\r\n+   ------------------------- */\r\n \r\n+export const editMessage = (roomId: string, messageId: string, content: string) => {\r\n+  socket?.emit(\"edit-message\", { roomId, messageId, content });\r\n+};\r\n+\r\n+export const onMessageEdited = (cb: (data: { messageId: string; content: string; sender?: string }) => void) => {\r\n+  socket?.off(\"message-edited\").on(\"message-edited\", cb);\r\n+};\r\n+\r\n export const deleteMessage = (roomId: string, messageId: string) => {\r\n   socket?.emit(\"delete-message\", { roomId, messageId });\r\n };\r\n \r\n-export const onMessageDeleted = (callback: ({ messageId }: { messageId: string }) => void) => {\r\n-  socket?.off(\"message-deleted\").on(\"message-deleted\", callback);\r\n+export const onMessageDeleted = (cb: (data: { messageId: string }) => void) => {\r\n+  socket?.off(\"message-deleted\").on(\"message-deleted\", cb);\r\n };\r\n \r\n-export const editMessage = (roomId: string, messageId: string, content: string) => {\r\n-  socket?.emit(\"edit-message\", { roomId, messageId, content });\r\n-};\r\n-\r\n export const reactToMessage = (roomId: string, messageId: string, reaction: string) => {\r\n   socket?.emit(\"react-message\", { roomId, messageId, reaction, user: socket?.id });\r\n };\r\n \r\n-export const onMessageReacted = (callback: ({ messageId, reaction, user }: { messageId: string; reaction: string; user: string }) => void) => {\r\n-  socket?.off(\"message-react\").on(\"message-react\", callback);\r\n+export const onMessageReacted = (cb: (data: { messageId: string; reaction: string; user: string }) => void) => {\r\n+  socket?.off(\"message-react\").on(\"message-react\", cb);\r\n };\r\n \r\n-// -------------------------\r\n-// --- FILES SUPPORT ---\r\n-// -------------------------\r\n+/* -------------------------\r\n+   Files helper (preview)\r\n+   ------------------------- */\r\n \r\n export const sendFile = async (roomId: string, file: File) => {\r\n   if (!file || !roomId) return;\r\n-\r\n-  const url = URL.createObjectURL(file); // can replace with cloud upload if needed\r\n+  // NOTE: blob URLs are ephemeral. For production upload to storage and send stored URL.\r\n+  const url = URL.createObjectURL(file);\r\n   let type: MessagePayload[\"type\"] = \"file\";\r\n-\r\n   if (file.type.startsWith(\"image\")) type = \"image\";\r\n   else if (file.type.startsWith(\"audio\")) type = \"audio\";\r\n   else if (file.type.startsWith(\"video\")) type = \"video\";\r\n \r\n   sendMessage({ roomId, content: url, type });\r\n };\r\n \r\n+/* default export for convenience */\r\n export default {\r\n   connectSocket,\r\n   disconnectSocket,\r\n   getSocket,\r\n@@ -193,11 +209,12 @@\n   sendTyping,\r\n   onTyping,\r\n   sendMessageStatus,\r\n   onMessageStatusUpdate,\r\n+  editMessage,\r\n+  onMessageEdited,\r\n   deleteMessage,\r\n   onMessageDeleted,\r\n-  editMessage,\r\n   reactToMessage,\r\n   onMessageReacted,\r\n   sendFile,\r\n };\r\n"
                },
                {
                    "date": 1759970663712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,264 @@\n+// features/anonymousChat/services/signalingService.ts\r\n+import { io, Socket } from \"socket.io-client\";\r\n+import { v4 as uuidv4 } from \"uuid\";\r\n+\r\n+const SOCKET_URL =\r\n+  process.env.NEXT_PUBLIC_SOCKET_URL || \"https://connectify-z9gv.onrender.com\";\r\n+\r\n+let socket: Socket | null = null;\r\n+\r\n+/* -------------------------\r\n+   Connection lifecycle\r\n+-------------------------- */\r\n+\r\n+export const connectSocket = () => {\r\n+  if (socket?.connected) return;\r\n+\r\n+  socket = io(SOCKET_URL, {\r\n+    transports: [\"websocket\"],\r\n+    reconnectionAttempts: 5,\r\n+    reconnectionDelay: 1000,\r\n+  });\r\n+\r\n+  socket.on(\"connect\", () => {\r\n+    console.log(\"✅ Signaling connected:\", socket?.id);\r\n+  });\r\n+\r\n+  socket.on(\"disconnect\", (reason) => {\r\n+    console.log(\"❌ Disconnected from signaling:\", reason);\r\n+  });\r\n+\r\n+  socket.on(\"connect_error\", (err) => {\r\n+    console.warn(\"⚠️ Socket connect error:\", err.message);\r\n+  });\r\n+};\r\n+\r\n+export const disconnectSocket = () => {\r\n+  if (!socket) return;\r\n+  socket.disconnect();\r\n+  socket = null;\r\n+};\r\n+\r\n+export const getSocket = () => socket;\r\n+export const getSocketId = () => socket?.id ?? null;\r\n+\r\n+/* -------------------------\r\n+   Matchmaking helpers\r\n+-------------------------- */\r\n+\r\n+export const startLooking = (userInfo?: any) => {\r\n+  socket?.emit(\"start-looking\", userInfo || {});\r\n+};\r\n+\r\n+export const joinRoom = (roomId: string) => {\r\n+  socket?.emit(\"join-room\", roomId);\r\n+};\r\n+\r\n+export const leaveRoom = (roomId: string) => {\r\n+  socket?.emit(\"leave-room\", roomId);\r\n+};\r\n+\r\n+export const skipPartner = () => {\r\n+  socket?.emit(\"skip\");\r\n+};\r\n+\r\n+/* -------------------------\r\n+   WebRTC signaling\r\n+-------------------------- */\r\n+\r\n+export const sendOffer = (offer: RTCSessionDescriptionInit, roomId: string) =>\r\n+  socket?.emit(\"offer\", { offer, roomId });\r\n+\r\n+export const onOffer = (\r\n+  cb: (data: { offer: RTCSessionDescriptionInit; sender: string }) => void\r\n+) => {\r\n+  socket?.off(\"offer\").on(\"offer\", cb);\r\n+};\r\n+\r\n+export const sendAnswer = (answer: RTCSessionDescriptionInit, roomId: string) =>\r\n+  socket?.emit(\"answer\", { answer, roomId });\r\n+\r\n+export const onAnswer = (\r\n+  cb: (data: { answer: RTCSessionDescriptionInit; sender: string }) => void\r\n+) => {\r\n+  socket?.off(\"answer\").on(\"answer\", cb);\r\n+};\r\n+\r\n+export const sendIceCandidate = (candidate: RTCIceCandidateInit, roomId: string) =>\r\n+  socket?.emit(\"ice-candidate\", { candidate, roomId });\r\n+\r\n+export const onIceCandidate = (\r\n+  cb: (data: { candidate: RTCIceCandidateInit; sender: string }) => void\r\n+) => {\r\n+  socket?.off(\"ice-candidate\").on(\"ice-candidate\", cb);\r\n+};\r\n+\r\n+/* -------------------------\r\n+   Messaging system\r\n+-------------------------- */\r\n+\r\n+export interface MessagePayload {\r\n+  id?: string;\r\n+  sender?: string;\r\n+  content: string; // text or media URL\r\n+  type?: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\";\r\n+  timestamp?: string;\r\n+  status?: \"sent\" | \"delivered\" | \"seen\";\r\n+  reactions?: Record<string, string>;\r\n+}\r\n+\r\n+export const sendMessage = ({\r\n+  roomId,\r\n+  content,\r\n+  type = \"text\",\r\n+  id,\r\n+  timestamp,\r\n+}: {\r\n+  roomId: string;\r\n+  content: string;\r\n+  type?: MessagePayload[\"type\"];\r\n+  id?: string;\r\n+  timestamp?: string;\r\n+}) => {\r\n+  if (!socket || !roomId || !content.trim()) return;\r\n+\r\n+  const message: MessagePayload = {\r\n+    id: id ?? uuidv4(),\r\n+    content,\r\n+    type,\r\n+    timestamp: timestamp ?? new Date().toISOString(),\r\n+    status: \"sent\",\r\n+    sender: socket.id ?? undefined,\r\n+    reactions: {},\r\n+  };\r\n+\r\n+  socket.emit(\"send-message\", { ...message, roomId });\r\n+  return message;\r\n+};\r\n+\r\n+export const onReceiveMessage = (\r\n+  cb: (message: MessagePayload, sender: string) => void\r\n+) => {\r\n+  socket\r\n+    ?.off(\"receive-message\")\r\n+    .on(\"receive-message\", (data: MessagePayload) => {\r\n+      cb(data, data.sender ?? \"\");\r\n+    });\r\n+};\r\n+\r\n+/* -------------------------\r\n+   Typing indicator\r\n+-------------------------- */\r\n+\r\n+export const sendTyping = (roomId: string) => {\r\n+  socket?.emit(\"typing\", { roomId, sender: socket?.id });\r\n+};\r\n+\r\n+export const onTyping = (cb: ({ sender }: { sender: string }) => void) => {\r\n+  socket?.off(\"typing\").on(\"typing\", cb);\r\n+};\r\n+\r\n+/* -------------------------\r\n+   Message status (✔)\r\n+-------------------------- */\r\n+\r\n+// Called by receiver when message is viewed\r\n+export const sendSeenStatus = (roomId: string, messageId: string) => {\r\n+  socket?.emit(\"seen-message\", { roomId, messageId });\r\n+};\r\n+\r\n+// Called by both ends for status updates\r\n+export const onMessageStatusUpdate = (\r\n+  cb: (data: { messageId: string; status: \"delivered\" | \"seen\" }) => void\r\n+) => {\r\n+  socket?.off(\"message-status-update\").on(\"message-status-update\", cb);\r\n+};\r\n+\r\n+/* -------------------------\r\n+   Edit / Delete / React\r\n+-------------------------- */\r\n+\r\n+export const editMessage = (roomId: string, messageId: string, content: string) => {\r\n+  socket?.emit(\"edit-message\", { roomId, messageId, content });\r\n+};\r\n+\r\n+export const onMessageEdited = (\r\n+  cb: (data: { id: string; content: string; edited?: boolean }) => void\r\n+) => {\r\n+  socket?.off(\"message-edited\").on(\"message-edited\", cb);\r\n+};\r\n+\r\n+export const deleteMessage = (roomId: string, messageId: string) => {\r\n+  socket?.emit(\"delete-message\", { roomId, messageId });\r\n+};\r\n+\r\n+export const onMessageDeleted = (cb: (data: { messageId: string }) => void) => {\r\n+  socket?.off(\"message-deleted\").on(\"message-deleted\", cb);\r\n+};\r\n+\r\n+export const reactToMessage = (\r\n+  roomId: string,\r\n+  messageId: string,\r\n+  reaction: string\r\n+) => {\r\n+  socket?.emit(\"react-message\", {\r\n+    roomId,\r\n+    messageId,\r\n+    reaction,\r\n+    user: socket?.id,\r\n+  });\r\n+};\r\n+\r\n+export const onMessageReacted = (\r\n+  cb: (data: { messageId: string; reaction: string; user: string }) => void\r\n+) => {\r\n+  socket?.off(\"message-react\").on(\"message-react\", cb);\r\n+};\r\n+\r\n+/* -------------------------\r\n+   File helper (preview only)\r\n+-------------------------- */\r\n+\r\n+export const sendFile = async (roomId: string, file: File) => {\r\n+  if (!file || !roomId) return;\r\n+  const url = URL.createObjectURL(file);\r\n+  let type: MessagePayload[\"type\"] = \"file\";\r\n+  if (file.type.startsWith(\"image\")) type = \"image\";\r\n+  else if (file.type.startsWith(\"audio\")) type = \"audio\";\r\n+  else if (file.type.startsWith(\"video\")) type = \"video\";\r\n+\r\n+  return sendMessage({ roomId, content: url, type });\r\n+};\r\n+\r\n+/* -------------------------\r\n+   Default export\r\n+-------------------------- */\r\n+export default {\r\n+  connectSocket,\r\n+  disconnectSocket,\r\n+  getSocket,\r\n+  getSocketId,\r\n+  startLooking,\r\n+  joinRoom,\r\n+  leaveRoom,\r\n+  skipPartner,\r\n+  sendOffer,\r\n+  onOffer,\r\n+  sendAnswer,\r\n+  onAnswer,\r\n+  sendIceCandidate,\r\n+  onIceCandidate,\r\n+  sendMessage,\r\n+  onReceiveMessage,\r\n+  sendTyping,\r\n+  onTyping,\r\n+  sendSeenStatus,\r\n+  onMessageStatusUpdate,\r\n+  editMessage,\r\n+  onMessageEdited,\r\n+  deleteMessage,\r\n+  onMessageDeleted,\r\n+  reactToMessage,\r\n+  onMessageReacted,\r\n+  sendFile,\r\n+};\r\n"
                },
                {
                    "date": 1759971626194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,11 @@\n   socket?.emit(\"join-room\", roomId);\r\n };\r\n \r\n export const leaveRoom = (roomId: string) => {\r\n-  socket?.emit(\"leave-room\", roomId);\r\n+  if (!socket || !roomId) return;\r\n+  socket.emit(\"leave-room\", roomId);\r\n+  // Optional: notify frontend to reset local room/messages\r\n };\r\n \r\n export const skipPartner = () => {\r\n   socket?.emit(\"skip\");\r\n@@ -71,37 +73,43 @@\n \r\n export const onOffer = (\r\n   cb: (data: { offer: RTCSessionDescriptionInit; sender: string }) => void\r\n ) => {\r\n-  socket?.off(\"offer\").on(\"offer\", cb);\r\n+  if (!socket) return;\r\n+  socket.off(\"offer\");\r\n+  socket.on(\"offer\", cb);\r\n };\r\n \r\n export const sendAnswer = (answer: RTCSessionDescriptionInit, roomId: string) =>\r\n   socket?.emit(\"answer\", { answer, roomId });\r\n \r\n export const onAnswer = (\r\n   cb: (data: { answer: RTCSessionDescriptionInit; sender: string }) => void\r\n ) => {\r\n-  socket?.off(\"answer\").on(\"answer\", cb);\r\n+  if (!socket) return;\r\n+  socket.off(\"answer\");\r\n+  socket.on(\"answer\", cb);\r\n };\r\n \r\n export const sendIceCandidate = (candidate: RTCIceCandidateInit, roomId: string) =>\r\n   socket?.emit(\"ice-candidate\", { candidate, roomId });\r\n \r\n export const onIceCandidate = (\r\n   cb: (data: { candidate: RTCIceCandidateInit; sender: string }) => void\r\n ) => {\r\n-  socket?.off(\"ice-candidate\").on(\"ice-candidate\", cb);\r\n+  if (!socket) return;\r\n+  socket.off(\"ice-candidate\");\r\n+  socket.on(\"ice-candidate\", cb);\r\n };\r\n \r\n /* -------------------------\r\n    Messaging system\r\n -------------------------- */\r\n \r\n export interface MessagePayload {\r\n   id?: string;\r\n-  sender?: string;\r\n-  content: string; // text or media URL\r\n+  sender: string;\r\n+  content: string;\r\n   type?: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\";\r\n   timestamp?: string;\r\n   status?: \"sent\" | \"delivered\" | \"seen\";\r\n   reactions?: Record<string, string>;\r\n@@ -112,24 +120,26 @@\n   content,\r\n   type = \"text\",\r\n   id,\r\n   timestamp,\r\n+  userId,\r\n }: {\r\n   roomId: string;\r\n   content: string;\r\n   type?: MessagePayload[\"type\"];\r\n   id?: string;\r\n   timestamp?: string;\r\n+  userId: string;\r\n }) => {\r\n   if (!socket || !roomId || !content.trim()) return;\r\n \r\n   const message: MessagePayload = {\r\n     id: id ?? uuidv4(),\r\n+    sender: userId,\r\n     content,\r\n     type,\r\n     timestamp: timestamp ?? new Date().toISOString(),\r\n     status: \"sent\",\r\n-    sender: socket.id ?? undefined,\r\n     reactions: {},\r\n   };\r\n \r\n   socket.emit(\"send-message\", { ...message, roomId });\r\n@@ -138,41 +148,43 @@\n \r\n export const onReceiveMessage = (\r\n   cb: (message: MessagePayload, sender: string) => void\r\n ) => {\r\n-  socket\r\n-    ?.off(\"receive-message\")\r\n-    .on(\"receive-message\", (data: MessagePayload) => {\r\n-      cb(data, data.sender ?? \"\");\r\n-    });\r\n+  if (!socket) return;\r\n+  socket.off(\"receive-message\");\r\n+  socket.on(\"receive-message\", (data: MessagePayload) => {\r\n+    cb(data, data.sender);\r\n+  });\r\n };\r\n \r\n /* -------------------------\r\n    Typing indicator\r\n -------------------------- */\r\n \r\n-export const sendTyping = (roomId: string) => {\r\n-  socket?.emit(\"typing\", { roomId, sender: socket?.id });\r\n+export const sendTyping = (roomId: string, userId: string) => {\r\n+  socket?.emit(\"typing\", { roomId, sender: userId });\r\n };\r\n \r\n export const onTyping = (cb: ({ sender }: { sender: string }) => void) => {\r\n-  socket?.off(\"typing\").on(\"typing\", cb);\r\n+  if (!socket) return;\r\n+  socket.off(\"typing\");\r\n+  socket.on(\"typing\", cb);\r\n };\r\n \r\n /* -------------------------\r\n    Message status (✔)\r\n -------------------------- */\r\n \r\n-// Called by receiver when message is viewed\r\n export const sendSeenStatus = (roomId: string, messageId: string) => {\r\n   socket?.emit(\"seen-message\", { roomId, messageId });\r\n };\r\n \r\n-// Called by both ends for status updates\r\n export const onMessageStatusUpdate = (\r\n   cb: (data: { messageId: string; status: \"delivered\" | \"seen\" }) => void\r\n ) => {\r\n-  socket?.off(\"message-status-update\").on(\"message-status-update\", cb);\r\n+  if (!socket) return;\r\n+  socket.off(\"message-status-update\");\r\n+  socket.on(\"message-status-update\", cb);\r\n };\r\n \r\n /* -------------------------\r\n    Edit / Delete / React\r\n@@ -184,51 +196,53 @@\n \r\n export const onMessageEdited = (\r\n   cb: (data: { id: string; content: string; edited?: boolean }) => void\r\n ) => {\r\n-  socket?.off(\"message-edited\").on(\"message-edited\", cb);\r\n+  if (!socket) return;\r\n+  socket.off(\"message-edited\");\r\n+  socket.on(\"message-edited\", cb);\r\n };\r\n \r\n export const deleteMessage = (roomId: string, messageId: string) => {\r\n   socket?.emit(\"delete-message\", { roomId, messageId });\r\n };\r\n \r\n export const onMessageDeleted = (cb: (data: { messageId: string }) => void) => {\r\n-  socket?.off(\"message-deleted\").on(\"message-deleted\", cb);\r\n+  if (!socket) return;\r\n+  socket.off(\"message-deleted\");\r\n+  socket.on(\"message-deleted\", cb);\r\n };\r\n \r\n export const reactToMessage = (\r\n   roomId: string,\r\n   messageId: string,\r\n-  reaction: string\r\n+  reaction: string,\r\n+  userId: string\r\n ) => {\r\n-  socket?.emit(\"react-message\", {\r\n-    roomId,\r\n-    messageId,\r\n-    reaction,\r\n-    user: socket?.id,\r\n-  });\r\n+  socket?.emit(\"react-message\", { roomId, messageId, reaction, user: userId });\r\n };\r\n \r\n export const onMessageReacted = (\r\n   cb: (data: { messageId: string; reaction: string; user: string }) => void\r\n ) => {\r\n-  socket?.off(\"message-react\").on(\"message-react\", cb);\r\n+  if (!socket) return;\r\n+  socket.off(\"message-react\");\r\n+  socket.on(\"message-react\", cb);\r\n };\r\n \r\n /* -------------------------\r\n    File helper (preview only)\r\n -------------------------- */\r\n \r\n-export const sendFile = async (roomId: string, file: File) => {\r\n+export const sendFile = async (roomId: string, file: File, userId: string) => {\r\n   if (!file || !roomId) return;\r\n   const url = URL.createObjectURL(file);\r\n   let type: MessagePayload[\"type\"] = \"file\";\r\n   if (file.type.startsWith(\"image\")) type = \"image\";\r\n   else if (file.type.startsWith(\"audio\")) type = \"audio\";\r\n   else if (file.type.startsWith(\"video\")) type = \"video\";\r\n \r\n-  return sendMessage({ roomId, content: url, type });\r\n+  return sendMessage({ roomId, content: url, type, userId });\r\n };\r\n \r\n /* -------------------------\r\n    Default export\r\n@@ -261,224 +275,4 @@\n   reactToMessage,\r\n   onMessageReacted,\r\n   sendFile,\r\n };\r\n-// features/anonymousChat/services/signalingService.ts\r\n-import { io, Socket } from \"socket.io-client\";\r\n-import { v4 as uuidv4 } from \"uuid\";\r\n-\r\n-const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"https://connectify-z9gv.onrender.com/\";\r\n-\r\n-let socket: Socket | null = null;\r\n-\r\n-/* -------------------------\r\n-   Connection & lifecycle\r\n-   ------------------------- */\r\n-\r\n-export const connectSocket = () => {\r\n-  if (socket) return;\r\n-\r\n-  socket = io(SOCKET_URL, {\r\n-    transports: [\"websocket\"],\r\n-    reconnectionAttempts: 5,\r\n-    reconnectionDelay: 1000,\r\n-  });\r\n-\r\n-  socket.on(\"connect\", () => {\r\n-    console.log(\"✅ Signaling connected:\", socket?.id);\r\n-  });\r\n-\r\n-  socket.on(\"disconnect\", (reason) => {\r\n-    console.log(\"❌ Signaling disconnected:\", reason);\r\n-  });\r\n-\r\n-  socket.on(\"connect_error\", (err) => {\r\n-    console.warn(\"⚠️ Signaling connect error:\", err);\r\n-  });\r\n-};\r\n-\r\n-export const disconnectSocket = () => {\r\n-  if (!socket) return;\r\n-  socket.disconnect();\r\n-  socket = null;\r\n-};\r\n-\r\n-export const getSocket = () => socket;\r\n-export const getSocketId = () => socket?.id ?? null;\r\n-\r\n-/* -------------------------\r\n-   Room / matchmaking helpers\r\n-   ------------------------- */\r\n-\r\n-export const startLooking = (userInfo?: any) => {\r\n-  socket?.emit(\"start-looking\", userInfo || {});\r\n-};\r\n-\r\n-export const joinRoom = (roomId: string) => {\r\n-  socket?.emit(\"join-room\", roomId);\r\n-};\r\n-\r\n-export const leaveRoom = (roomId: string) => {\r\n-  socket?.emit(\"leave-room\", roomId);\r\n-};\r\n-\r\n-export const skipPartner = () => {\r\n-  socket?.emit(\"skip\");\r\n-};\r\n-\r\n-/* -------------------------\r\n-   WebRTC signaling helpers\r\n-   ------------------------- */\r\n-\r\n-export const sendOffer = (offer: RTCSessionDescriptionInit, roomId: string) =>\r\n-  socket?.emit(\"offer\", { offer, roomId });\r\n-\r\n-export const onOffer = (cb: (data: { offer: RTCSessionDescriptionInit; sender: string }) => void) => {\r\n-  socket?.off(\"offer\").on(\"offer\", cb);\r\n-};\r\n-\r\n-export const sendAnswer = (answer: RTCSessionDescriptionInit, roomId: string) =>\r\n-  socket?.emit(\"answer\", { answer, roomId });\r\n-\r\n-export const onAnswer = (cb: (data: { answer: RTCSessionDescriptionInit; sender: string }) => void) => {\r\n-  socket?.off(\"answer\").on(\"answer\", cb);\r\n-};\r\n-\r\n-export const sendIceCandidate = (candidate: RTCIceCandidateInit, roomId: string) =>\r\n-  socket?.emit(\"ice-candidate\", { candidate, roomId });\r\n-\r\n-export const onIceCandidate = (cb: (data: { candidate: RTCIceCandidateInit; sender: string }) => void) => {\r\n-  socket?.off(\"ice-candidate\").on(\"ice-candidate\", cb);\r\n-};\r\n-\r\n-/* -------------------------\r\n-   Messaging API (real-time)\r\n-   ------------------------- */\r\n-\r\n-export interface MessagePayload {\r\n-  id?: string;\r\n-  sender?: string;\r\n-  content: string; // text or file URL\r\n-  type?: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\";\r\n-  timestamp?: string;\r\n-  status?: \"sent\" | \"delivered\" | \"seen\";\r\n-  reactions?: Record<string, string>;\r\n-}\r\n-\r\n-export const sendMessage = ({ roomId, content, type = \"text\", id, timestamp }: { roomId: string; content: string; type?: MessagePayload[\"type\"]; id?: string; timestamp?: string }) => {\r\n-  if (!socket || !roomId || !content) return;\r\n-\r\n-  const message: MessagePayload = {\r\n-    id: id ?? uuidv4(),\r\n-    content,\r\n-    type,\r\n-    timestamp: timestamp ?? new Date().toISOString(),\r\n-    status: \"sent\",\r\n-    sender: socket.id ?? undefined,\r\n-    reactions: {},\r\n-  };\r\n-\r\n-  socket.emit(\"send-message\", { roomId, message });\r\n-};\r\n-\r\n-export const onReceiveMessage = (cb: (data: { message: MessagePayload; sender: string }) => void) => {\r\n-  socket?.off(\"receive-message\").on(\"receive-message\", cb);\r\n-};\r\n-\r\n-/* -------------------------\r\n-   Typing indicator\r\n-   ------------------------- */\r\n-\r\n-export const sendTyping = (roomId: string) => {\r\n-  socket?.emit(\"typing\", { roomId, sender: socket?.id });\r\n-};\r\n-\r\n-export const onTyping = (cb: ({ sender }: { sender: string }) => void) => {\r\n-  socket?.off(\"typing\").on(\"typing\", cb);\r\n-};\r\n-\r\n-/* -------------------------\r\n-   Message status (delivered/seen)\r\n-   ------------------------- */\r\n-\r\n-export const sendMessageStatus = (roomId: string, messageId: string, status: \"delivered\" | \"seen\") => {\r\n-  socket?.emit(\"message-status\", { roomId, messageId, status });\r\n-};\r\n-\r\n-export const onMessageStatusUpdate = (cb: (data: { messageId: string; status: string }) => void) => {\r\n-  socket?.off(\"message-status-update\").on(\"message-status-update\", cb);\r\n-};\r\n-\r\n-/* -------------------------\r\n-   Edit / Delete / React\r\n-   ------------------------- */\r\n-\r\n-export const editMessage = (roomId: string, messageId: string, content: string) => {\r\n-  socket?.emit(\"edit-message\", { roomId, messageId, content });\r\n-};\r\n-\r\n-export const onMessageEdited = (cb: (data: { messageId: string; content: string; sender?: string }) => void) => {\r\n-  socket?.off(\"message-edited\").on(\"message-edited\", cb);\r\n-};\r\n-\r\n-export const deleteMessage = (roomId: string, messageId: string) => {\r\n-  socket?.emit(\"delete-message\", { roomId, messageId });\r\n-};\r\n-\r\n-export const onMessageDeleted = (cb: (data: { messageId: string }) => void) => {\r\n-  socket?.off(\"message-deleted\").on(\"message-deleted\", cb);\r\n-};\r\n-\r\n-export const reactToMessage = (roomId: string, messageId: string, reaction: string) => {\r\n-  socket?.emit(\"react-message\", { roomId, messageId, reaction, user: socket?.id });\r\n-};\r\n-\r\n-export const onMessageReacted = (cb: (data: { messageId: string; reaction: string; user: string }) => void) => {\r\n-  socket?.off(\"message-react\").on(\"message-react\", cb);\r\n-};\r\n-\r\n-/* -------------------------\r\n-   Files helper (preview)\r\n-   ------------------------- */\r\n-\r\n-export const sendFile = async (roomId: string, file: File) => {\r\n-  if (!file || !roomId) return;\r\n-  // NOTE: blob URLs are ephemeral. For production upload to storage and send stored URL.\r\n-  const url = URL.createObjectURL(file);\r\n-  let type: MessagePayload[\"type\"] = \"file\";\r\n-  if (file.type.startsWith(\"image\")) type = \"image\";\r\n-  else if (file.type.startsWith(\"audio\")) type = \"audio\";\r\n-  else if (file.type.startsWith(\"video\")) type = \"video\";\r\n-\r\n-  sendMessage({ roomId, content: url, type });\r\n-};\r\n-\r\n-/* default export for convenience */\r\n-export default {\r\n-  connectSocket,\r\n-  disconnectSocket,\r\n-  getSocket,\r\n-  getSocketId,\r\n-  startLooking,\r\n-  joinRoom,\r\n-  leaveRoom,\r\n-  skipPartner,\r\n-  sendOffer,\r\n-  onOffer,\r\n-  sendAnswer,\r\n-  onAnswer,\r\n-  sendIceCandidate,\r\n-  onIceCandidate,\r\n-  sendMessage,\r\n-  onReceiveMessage,\r\n-  sendTyping,\r\n-  onTyping,\r\n-  sendMessageStatus,\r\n-  onMessageStatusUpdate,\r\n-  editMessage,\r\n-  onMessageEdited,\r\n-  deleteMessage,\r\n-  onMessageDeleted,\r\n-  reactToMessage,\r\n-  onMessageReacted,\r\n-  sendFile,\r\n-};\r\n"
                }
            ],
            "date": 1752230077724,
            "name": "Commit-0",
            "content": "// features/anonymousChat/services/signalingService.ts\r\n\r\nimport { io, Socket } from \"socket.io-client\";\r\n\r\nconst SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"http://localhost:3001\";\r\n\r\nlet socket: Socket | null = null;\r\n\r\nexport const connectSocket = () => {\r\n  if (!socket) {\r\n    socket = io(SOCKET_URL);\r\n  }\r\n};\r\n\r\nexport const disconnectSocket = () => {\r\n  if (socket) {\r\n    socket.disconnect();\r\n    socket = null;\r\n  }\r\n};\r\n\r\nexport const joinRoom = (roomId: string) => {\r\n  socket?.emit(\"join-room\", roomId);\r\n};\r\n\r\nexport const onUserJoined = (callback: () => void) => {\r\n  socket?.on(\"user-joined\", callback);\r\n};\r\n\r\nexport const sendOffer = (offer: RTCSessionDescriptionInit, roomId: string) => {\r\n  socket?.emit(\"offer\", offer, roomId);\r\n};\r\n\r\nexport const onOffer = (callback: (offer: RTCSessionDescriptionInit) => void) => {\r\n  socket?.on(\"offer\", callback);\r\n};\r\n\r\nexport const sendAnswer = (answer: RTCSessionDescriptionInit, roomId: string) => {\r\n  socket?.emit(\"answer\", answer, roomId);\r\n};\r\n\r\nexport const onAnswer = (callback: (answer: RTCSessionDescriptionInit) => void) => {\r\n  socket?.on(\"answer\", callback);\r\n};\r\n\r\nexport const sendIceCandidate = (candidate: RTCIceCandidateInit, roomId: string) => {\r\n  socket?.emit(\"ice-candidate\", candidate, roomId);\r\n};\r\n\r\nexport const onIceCandidate = (callback: (candidate: RTCIceCandidateInit) => void) => {\r\n  socket?.on(\"ice-candidate\", callback);\r\n};\r\n\r\nexport default {\r\n  connectSocket,\r\n  disconnectSocket,\r\n  joinRoom,\r\n  onUserJoined,\r\n  sendOffer,\r\n  onOffer,\r\n  sendAnswer,\r\n  onAnswer,\r\n  sendIceCandidate,\r\n  onIceCandidate,\r\n};\r\n"
        }
    ]
}