{
    "sourceFile": "features/anonymousChat/components/AnonymousChatRoom.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 33,
            "patches": [
                {
                    "date": 1752230193627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752231306073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,17 +8,18 @@\n import ChatBox from \"../../../components/chat/ChatBox\";\r\n import FindingPartner from \"./FindingPartner\";\r\n \r\n export default function AnonymousChatRoom() {\r\n-  const { localStream, remoteStream, isConnected } = useWebRTC();\r\n-  const { socket } = useSocket();\r\n+  const roomId = \"anonymous-room\"; // You may want to generate or fetch this dynamically\r\n+  const { localStream, remoteStream } = useWebRTC(roomId);\r\n+  const socket = useSocket();\r\n   const [loading, setLoading] = useState(true);\r\n \r\n   useEffect(() => {\r\n-    if (isConnected) {\r\n+    if (remoteStream) {\r\n       setLoading(false);\r\n     }\r\n-  }, [isConnected]);\r\n+  }, [remoteStream]);\r\n \r\n   return (\r\n     <div className=\"flex flex-col md:flex-row h-screen\">\r\n       <div className=\"flex-1 bg-black flex items-center justify-center\">\r\n"
                },
                {
                    "date": 1752252789578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import ChatBox from \"../../../components/chat/ChatBox\";\r\n import FindingPartner from \"./FindingPartner\";\r\n \r\n export default function AnonymousChatRoom() {\r\n-  const roomId = \"anonymous-room\"; // You may want to generate or fetch this dynamically\r\n+  const roomId = \"anonymous-room\"; // TODO: Replace with dynamic room id generation\r\n   const { localStream, remoteStream } = useWebRTC(roomId);\r\n   const socket = useSocket();\r\n   const [loading, setLoading] = useState(true);\r\n \r\n@@ -21,20 +21,26 @@\n   }, [remoteStream]);\r\n \r\n   return (\r\n     <div className=\"flex flex-col md:flex-row h-screen\">\r\n-      <div className=\"flex-1 bg-black flex items-center justify-center\">\r\n+      {/* Video section */}\r\n+      <div className=\"flex-1 bg-black flex items-center justify-center relative\">\r\n         {loading ? (\r\n           <FindingPartner />\r\n         ) : (\r\n           <>\r\n-            <LocalVideo stream={localStream} />\r\n+            <div className=\"absolute bottom-4 right-4 w-40 h-40 border-2 border-white rounded-md overflow-hidden\">\r\n+              <LocalVideo stream={localStream} />\r\n+            </div>\r\n             <RemoteVideo stream={remoteStream} />\r\n           </>\r\n         )}\r\n       </div>\r\n+\r\n+      {/* Chat section */}\r\n       <div className=\"md:w-1/3 bg-neutral-100 dark:bg-neutral-800 border-l border-neutral-300 dark:border-neutral-700 flex flex-col\">\r\n-        <ChatBox socket={socket} />\r\n+        {/* Pass roomId for accurate messaging */}\r\n+        <ChatBox socket={socket} roomId={roomId} />\r\n       </div>\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1752253188505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,19 @@\n \"use client\";\r\n \r\n import React, { useEffect, useState } from \"react\";\r\n+import { v4 as uuidv4 } from \"uuid\";\r\n import useWebRTC from \"../hooks/useWebRTC\";\r\n import useSocket from \"../hooks/useSocket\";\r\n import LocalVideo from \"../../../components/video/LocalVideo\";\r\n import RemoteVideo from \"../../../components/video/RemoteVideo\";\r\n import ChatBox from \"../../../components/chat/ChatBox\";\r\n import FindingPartner from \"./FindingPartner\";\r\n \r\n export default function AnonymousChatRoom() {\r\n-  const roomId = \"anonymous-room\"; // TODO: Replace with dynamic room id generation\r\n+  // 🔥 Generate dynamic roomId using UUID\r\n+  const [roomId] = useState(() => uuidv4());\r\n+\r\n   const { localStream, remoteStream } = useWebRTC(roomId);\r\n   const socket = useSocket();\r\n   const [loading, setLoading] = useState(true);\r\n \r\n"
                },
                {
                    "date": 1752253201707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,4 +46,5 @@\n       </div>\r\n     </div>\r\n   );\r\n }\r\n+          \n\\ No newline at end of file\n"
                },
                {
                    "date": 1752256737410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,16 +9,30 @@\n import ChatBox from \"../../../components/chat/ChatBox\";\r\n import FindingPartner from \"./FindingPartner\";\r\n \r\n export default function AnonymousChatRoom() {\r\n-  // 🔥 Generate dynamic roomId using UUID\r\n-  const [roomId] = useState(() => uuidv4());\r\n-\r\n-  const { localStream, remoteStream } = useWebRTC(roomId);\r\n+  const [roomId, setRoomId] = useState<string | null>(null);\r\n   const socket = useSocket();\r\n+  const { localStream, remoteStream } = useWebRTC(roomId ?? \"\");\r\n   const [loading, setLoading] = useState(true);\r\n \r\n   useEffect(() => {\r\n+    if (!socket) return;\r\n+\r\n+    // ✅ Generate and set roomId only after socket is connected\r\n+    const newRoomId = uuidv4();\r\n+    setRoomId(newRoomId);\r\n+\r\n+    // ✅ Join room via socket after generating roomId\r\n+    socket.emit(\"join-room\", newRoomId);\r\n+    console.log(\"🔗 Joined room:\", newRoomId);\r\n+\r\n+    return () => {\r\n+      socket.emit(\"leave-room\", newRoomId); // Optional: implement leave-room on server\r\n+    };\r\n+  }, [socket]);\r\n+\r\n+  useEffect(() => {\r\n     if (remoteStream) {\r\n       setLoading(false);\r\n     }\r\n   }, [remoteStream]);\r\n@@ -40,11 +54,9 @@\n       </div>\r\n \r\n       {/* Chat section */}\r\n       <div className=\"md:w-1/3 bg-neutral-100 dark:bg-neutral-800 border-l border-neutral-300 dark:border-neutral-700 flex flex-col\">\r\n-        {/* Pass roomId for accurate messaging */}\r\n-        <ChatBox socket={socket} roomId={roomId} />\r\n+        {roomId && <ChatBox socket={socket} roomId={roomId} />}\r\n       </div>\r\n     </div>\r\n   );\r\n }\r\n\\ No newline at end of file\n-          \n"
                },
                {
                    "date": 1752257163237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n \"use client\";\r\n \r\n import React, { useEffect, useState } from \"react\";\r\n-import { v4 as uuidv4 } from \"uuid\";\r\n import useWebRTC from \"../hooks/useWebRTC\";\r\n import useSocket from \"../hooks/useSocket\";\r\n import LocalVideo from \"../../../components/video/LocalVideo\";\r\n import RemoteVideo from \"../../../components/video/RemoteVideo\";\r\n@@ -14,30 +13,42 @@\n   const socket = useSocket();\r\n   const { localStream, remoteStream } = useWebRTC(roomId ?? \"\");\r\n   const [loading, setLoading] = useState(true);\r\n \r\n+  // ✅ Handle 'matched' event from server to join room\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n-    // ✅ Generate and set roomId only after socket is connected\r\n-    const newRoomId = uuidv4();\r\n-    setRoomId(newRoomId);\r\n+    const handleMatched = ({ roomId, partnerId }: { roomId: string; partnerId: string }) => {\r\n+      console.log(\"🎉 Matched in room:\", roomId);\r\n+      setRoomId(roomId);\r\n+      socket.emit(\"join-room\", roomId);\r\n+    };\r\n \r\n-    // ✅ Join room via socket after generating roomId\r\n-    socket.emit(\"join-room\", newRoomId);\r\n-    console.log(\"🔗 Joined room:\", newRoomId);\r\n+    socket.on(\"matched\", handleMatched);\r\n \r\n     return () => {\r\n-      socket.emit(\"leave-room\", newRoomId); // Optional: implement leave-room on server\r\n+      socket.off(\"matched\", handleMatched);\r\n     };\r\n   }, [socket]);\r\n \r\n+  // ✅ Update loading state based on remoteStream availability\r\n   useEffect(() => {\r\n     if (remoteStream) {\r\n       setLoading(false);\r\n     }\r\n   }, [remoteStream]);\r\n \r\n+  // ✅ Optional: implement leave-room on unmount\r\n+  useEffect(() => {\r\n+    return () => {\r\n+      if (socket && roomId) {\r\n+        socket.emit(\"leave-room\", roomId);\r\n+        console.log(\"👋 Left room:\", roomId);\r\n+      }\r\n+    };\r\n+  }, [socket, roomId]);\r\n+\r\n   return (\r\n     <div className=\"flex flex-col md:flex-row h-screen\">\r\n       {/* Video section */}\r\n       <div className=\"flex-1 bg-black flex items-center justify-center relative\">\r\n@@ -58,5 +69,5 @@\n         {roomId && <ChatBox socket={socket} roomId={roomId} />}\r\n       </div>\r\n     </div>\r\n   );\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1752257651733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,15 +13,17 @@\n   const socket = useSocket();\r\n   const { localStream, remoteStream } = useWebRTC(roomId ?? \"\");\r\n   const [loading, setLoading] = useState(true);\r\n \r\n-  // ✅ Handle 'matched' event from server to join room\r\n+  // ✅ Listen for 'matched' event from server\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n     const handleMatched = ({ roomId, partnerId }: { roomId: string; partnerId: string }) => {\r\n       console.log(\"🎉 Matched in room:\", roomId);\r\n       setRoomId(roomId);\r\n+\r\n+      // ✅ Join room with server-assigned roomId\r\n       socket.emit(\"join-room\", roomId);\r\n     };\r\n \r\n     socket.on(\"matched\", handleMatched);\r\n@@ -30,16 +32,16 @@\n       socket.off(\"matched\", handleMatched);\r\n     };\r\n   }, [socket]);\r\n \r\n-  // ✅ Update loading state based on remoteStream availability\r\n+  // ✅ Update loading state when remote stream arrives\r\n   useEffect(() => {\r\n     if (remoteStream) {\r\n       setLoading(false);\r\n     }\r\n   }, [remoteStream]);\r\n \r\n-  // ✅ Optional: implement leave-room on unmount\r\n+  // ✅ Leave room on unmount (optional cleanup)\r\n   useEffect(() => {\r\n     return () => {\r\n       if (socket && roomId) {\r\n         socket.emit(\"leave-room\", roomId);\r\n"
                },
                {
                    "date": 1752258229606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,20 +10,26 @@\n \r\n export default function AnonymousChatRoom() {\r\n   const [roomId, setRoomId] = useState<string | null>(null);\r\n   const socket = useSocket();\r\n+\r\n+  // ✅ Initialize WebRTC only when roomId is available\r\n   const { localStream, remoteStream } = useWebRTC(roomId ?? \"\");\r\n   const [loading, setLoading] = useState(true);\r\n \r\n-  // ✅ Listen for 'matched' event from server\r\n+  /**\r\n+   * ✅ Listen for 'matched' event from server\r\n+   * Sets roomId only after server assigns it\r\n+   * Emits join-room after receiving assigned roomId\r\n+   */\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n     const handleMatched = ({ roomId, partnerId }: { roomId: string; partnerId: string }) => {\r\n       console.log(\"🎉 Matched in room:\", roomId);\r\n       setRoomId(roomId);\r\n \r\n-      // ✅ Join room with server-assigned roomId\r\n+      // ✅ Join the assigned room\r\n       socket.emit(\"join-room\", roomId);\r\n     };\r\n \r\n     socket.on(\"matched\", handleMatched);\r\n@@ -32,16 +38,20 @@\n       socket.off(\"matched\", handleMatched);\r\n     };\r\n   }, [socket]);\r\n \r\n-  // ✅ Update loading state when remote stream arrives\r\n+  /**\r\n+   * ✅ Update loading state when remote stream arrives\r\n+   */\r\n   useEffect(() => {\r\n     if (remoteStream) {\r\n       setLoading(false);\r\n     }\r\n   }, [remoteStream]);\r\n \r\n-  // ✅ Leave room on unmount (optional cleanup)\r\n+  /**\r\n+   * ✅ Leave room on unmount for cleanup\r\n+   */\r\n   useEffect(() => {\r\n     return () => {\r\n       if (socket && roomId) {\r\n         socket.emit(\"leave-room\", roomId);\r\n"
                },
                {
                    "date": 1752258942785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,12 @@\n export default function AnonymousChatRoom() {\r\n   const [roomId, setRoomId] = useState<string | null>(null);\r\n   const socket = useSocket();\r\n \r\n-  // ✅ Initialize WebRTC only when roomId is available\r\n+  /**\r\n+   * ✅ Initialize WebRTC only when roomId is available\r\n+   * No client-side UUID roomId generation here\r\n+   */\r\n   const { localStream, remoteStream } = useWebRTC(roomId ?? \"\");\r\n   const [loading, setLoading] = useState(true);\r\n \r\n   /**\r\n@@ -27,9 +30,9 @@\n     const handleMatched = ({ roomId, partnerId }: { roomId: string; partnerId: string }) => {\r\n       console.log(\"🎉 Matched in room:\", roomId);\r\n       setRoomId(roomId);\r\n \r\n-      // ✅ Join the assigned room\r\n+      // ✅ Join the assigned room after server matching\r\n       socket.emit(\"join-room\", roomId);\r\n     };\r\n \r\n     socket.on(\"matched\", handleMatched);\r\n"
                },
                {
                    "date": 1752260132201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,31 +7,39 @@\n import RemoteVideo from \"../../../components/video/RemoteVideo\";\r\n import ChatBox from \"../../../components/chat/ChatBox\";\r\n import FindingPartner from \"./FindingPartner\";\r\n \r\n+interface MatchedPayload {\r\n+  roomId: string;\r\n+  partnerId: string;\r\n+  isOfferer: boolean;\r\n+}\r\n+\r\n export default function AnonymousChatRoom() {\r\n   const [roomId, setRoomId] = useState<string | null>(null);\r\n+  const [isOfferer, setIsOfferer] = useState<boolean | null>(null);\r\n   const socket = useSocket();\r\n \r\n-  /**\r\n-   * ✅ Initialize WebRTC only when roomId is available\r\n-   * No client-side UUID roomId generation here\r\n-   */\r\n-  const { localStream, remoteStream } = useWebRTC(roomId ?? \"\");\r\n+  // ✅ Initialize WebRTC only when roomId is available\r\n+  const { localStream, remoteStream } = useWebRTC(roomId, isOfferer, socket);\r\n   const [loading, setLoading] = useState(true);\r\n \r\n   /**\r\n    * ✅ Listen for 'matched' event from server\r\n-   * Sets roomId only after server assigns it\r\n+   * Sets roomId & isOfferer only after server assigns it\r\n    * Emits join-room after receiving assigned roomId\r\n    */\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n-    const handleMatched = ({ roomId, partnerId }: { roomId: string; partnerId: string }) => {\r\n+    const handleMatched = ({ roomId, partnerId }: MatchedPayload) => {\r\n       console.log(\"🎉 Matched in room:\", roomId);\r\n       setRoomId(roomId);\r\n \r\n+      // ✅ Determine if this user is offerer based on socket.id vs partnerId\r\n+      const amIOfferer = socket.id < partnerId;\r\n+      setIsOfferer(amIOfferer);\r\n+\r\n       // ✅ Join the assigned room after server matching\r\n       socket.emit(\"join-room\", roomId);\r\n     };\r\n \r\n"
                },
                {
                    "date": 1752260314387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,29 +28,35 @@\n    * Sets roomId & isOfferer only after server assigns it\r\n    * Emits join-room after receiving assigned roomId\r\n    */\r\n   useEffect(() => {\r\n-    if (!socket) return;\r\n+  if (!socket) return;\r\n \r\n-    const handleMatched = ({ roomId, partnerId }: MatchedPayload) => {\r\n-      console.log(\"🎉 Matched in room:\", roomId);\r\n-      setRoomId(roomId);\r\n+  const handleMatched = ({ roomId, partnerId }: MatchedPayload) => {\r\n+    console.log(\"🎉 Matched in room:\", roomId);\r\n+    setRoomId(roomId);\r\n \r\n-      // ✅ Determine if this user is offerer based on socket.id vs partnerId\r\n+    if (socket.id && partnerId) {\r\n       const amIOfferer = socket.id < partnerId;\r\n       setIsOfferer(amIOfferer);\r\n+      console.log(\"✅ I am offerer:\", amIOfferer);\r\n+    } else {\r\n+      console.warn(\"⚠️ socket.id or partnerId missing, defaulting to not offerer\");\r\n+      setIsOfferer(false);\r\n+    }\r\n \r\n-      // ✅ Join the assigned room after server matching\r\n-      socket.emit(\"join-room\", roomId);\r\n-    };\r\n+    // ✅ Join the assigned room after server matching\r\n+    socket.emit(\"join-room\", roomId);\r\n+  };\r\n \r\n-    socket.on(\"matched\", handleMatched);\r\n+  socket.on(\"matched\", handleMatched);\r\n \r\n-    return () => {\r\n-      socket.off(\"matched\", handleMatched);\r\n-    };\r\n-  }, [socket]);\r\n+  return () => {\r\n+    socket.off(\"matched\", handleMatched);\r\n+  };\r\n+}, [socket]);\r\n \r\n+\r\n   /**\r\n    * ✅ Update loading state when remote stream arrives\r\n    */\r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1752261668543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,74 +1,45 @@\n-\"use client\";\r\n-\r\n import React, { useEffect, useState } from \"react\";\r\n import useWebRTC from \"../hooks/useWebRTC\";\r\n import useSocket from \"../hooks/useSocket\";\r\n import LocalVideo from \"../../../components/video/LocalVideo\";\r\n import RemoteVideo from \"../../../components/video/RemoteVideo\";\r\n import ChatBox from \"../../../components/chat/ChatBox\";\r\n import FindingPartner from \"./FindingPartner\";\r\n \r\n-interface MatchedPayload {\r\n-  roomId: string;\r\n-  partnerId: string;\r\n-  isOfferer: boolean;\r\n-}\r\n-\r\n export default function AnonymousChatRoom() {\r\n   const [roomId, setRoomId] = useState<string | null>(null);\r\n-  const [isOfferer, setIsOfferer] = useState<boolean | null>(null);\r\n+  const [isOfferer, setIsOfferer] = useState<boolean>(false);\r\n   const socket = useSocket();\r\n \r\n-  // ✅ Initialize WebRTC only when roomId is available\r\n-  const { localStream, remoteStream } = useWebRTC(roomId, isOfferer, socket);\r\n+  // ✅ Initialize WebRTC with isOfferer\r\n+  const { localStream, remoteStream } = useWebRTC(roomId, isOfferer);\r\n   const [loading, setLoading] = useState(true);\r\n \r\n-  /**\r\n-   * ✅ Listen for 'matched' event from server\r\n-   * Sets roomId & isOfferer only after server assigns it\r\n-   * Emits join-room after receiving assigned roomId\r\n-   */\r\n   useEffect(() => {\r\n-  if (!socket) return;\r\n+    if (!socket) return;\r\n \r\n-  const handleMatched = ({ roomId, partnerId }: MatchedPayload) => {\r\n-    console.log(\"🎉 Matched in room:\", roomId);\r\n-    setRoomId(roomId);\r\n+    const handleMatched = ({ roomId, partnerId, isOfferer }: { roomId: string; partnerId: string; isOfferer: boolean }) => {\r\n+      console.log(\"🎉 Matched in room:\", roomId);\r\n+      setRoomId(roomId);\r\n+      setIsOfferer(isOfferer);\r\n \r\n-    if (socket.id && partnerId) {\r\n-      const amIOfferer = socket.id < partnerId;\r\n-      setIsOfferer(amIOfferer);\r\n-      console.log(\"✅ I am offerer:\", amIOfferer);\r\n-    } else {\r\n-      console.warn(\"⚠️ socket.id or partnerId missing, defaulting to not offerer\");\r\n-      setIsOfferer(false);\r\n-    }\r\n+      socket.emit(\"join-room\", roomId);\r\n+    };\r\n \r\n-    // ✅ Join the assigned room after server matching\r\n-    socket.emit(\"join-room\", roomId);\r\n-  };\r\n+    socket.on(\"matched\", handleMatched);\r\n \r\n-  socket.on(\"matched\", handleMatched);\r\n+    return () => {\r\n+      socket.off(\"matched\", handleMatched);\r\n+    };\r\n+  }, [socket]);\r\n \r\n-  return () => {\r\n-    socket.off(\"matched\", handleMatched);\r\n-  };\r\n-}, [socket]);\r\n-\r\n-\r\n-  /**\r\n-   * ✅ Update loading state when remote stream arrives\r\n-   */\r\n   useEffect(() => {\r\n     if (remoteStream) {\r\n       setLoading(false);\r\n     }\r\n   }, [remoteStream]);\r\n \r\n-  /**\r\n-   * ✅ Leave room on unmount for cleanup\r\n-   */\r\n   useEffect(() => {\r\n     return () => {\r\n       if (socket && roomId) {\r\n         socket.emit(\"leave-room\", roomId);\r\n@@ -78,9 +49,8 @@\n   }, [socket, roomId]);\r\n \r\n   return (\r\n     <div className=\"flex flex-col md:flex-row h-screen\">\r\n-      {/* Video section */}\r\n       <div className=\"flex-1 bg-black flex items-center justify-center relative\">\r\n         {loading ? (\r\n           <FindingPartner />\r\n         ) : (\r\n@@ -92,9 +62,8 @@\n           </>\r\n         )}\r\n       </div>\r\n \r\n-      {/* Chat section */}\r\n       <div className=\"md:w-1/3 bg-neutral-100 dark:bg-neutral-800 border-l border-neutral-300 dark:border-neutral-700 flex flex-col\">\r\n         {roomId && <ChatBox socket={socket} roomId={roomId} />}\r\n       </div>\r\n     </div>\r\n"
                },
                {
                    "date": 1752261953299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+\"use client\";\r\n+\r\n import React, { useEffect, useState } from \"react\";\r\n import useWebRTC from \"../hooks/useWebRTC\";\r\n import useSocket from \"../hooks/useSocket\";\r\n import LocalVideo from \"../../../components/video/LocalVideo\";\r\n@@ -7,12 +9,11 @@\n import FindingPartner from \"./FindingPartner\";\r\n \r\n export default function AnonymousChatRoom() {\r\n   const [roomId, setRoomId] = useState<string | null>(null);\r\n-  const [isOfferer, setIsOfferer] = useState<boolean>(false);\r\n+  const [isOfferer, setIsOfferer] = useState<boolean | null>(null);\r\n   const socket = useSocket();\r\n \r\n-  // ✅ Initialize WebRTC with isOfferer\r\n   const { localStream, remoteStream } = useWebRTC(roomId, isOfferer);\r\n   const [loading, setLoading] = useState(true);\r\n \r\n   useEffect(() => {\r\n@@ -21,9 +22,8 @@\n     const handleMatched = ({ roomId, partnerId, isOfferer }: { roomId: string; partnerId: string; isOfferer: boolean }) => {\r\n       console.log(\"🎉 Matched in room:\", roomId);\r\n       setRoomId(roomId);\r\n       setIsOfferer(isOfferer);\r\n-\r\n       socket.emit(\"join-room\", roomId);\r\n     };\r\n \r\n     socket.on(\"matched\", handleMatched);\r\n"
                },
                {
                    "date": 1752262415978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,20 +10,32 @@\n \r\n export default function AnonymousChatRoom() {\r\n   const [roomId, setRoomId] = useState<string | null>(null);\r\n   const [isOfferer, setIsOfferer] = useState<boolean | null>(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+\r\n   const socket = useSocket();\r\n \r\n+  // ✅ Initialize WebRTC only when roomId & isOfferer are assigned\r\n   const { localStream, remoteStream } = useWebRTC(roomId, isOfferer);\r\n-  const [loading, setLoading] = useState(true);\r\n \r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n-    const handleMatched = ({ roomId, partnerId, isOfferer }: { roomId: string; partnerId: string; isOfferer: boolean }) => {\r\n-      console.log(\"🎉 Matched in room:\", roomId);\r\n+    const handleMatched = ({\r\n+      roomId,\r\n+      partnerId,\r\n+      isOfferer,\r\n+    }: {\r\n+      roomId: string;\r\n+      partnerId: string;\r\n+      isOfferer: boolean;\r\n+    }) => {\r\n+      console.log(\"🎉 Matched in room:\", roomId, \"Offerer:\", isOfferer);\r\n       setRoomId(roomId);\r\n       setIsOfferer(isOfferer);\r\n+\r\n+      // ✅ Join assigned room after server matching\r\n       socket.emit(\"join-room\", roomId);\r\n     };\r\n \r\n     socket.on(\"matched\", handleMatched);\r\n@@ -32,14 +44,16 @@\n       socket.off(\"matched\", handleMatched);\r\n     };\r\n   }, [socket]);\r\n \r\n+  // ✅ Update loading state when remote stream arrives\r\n   useEffect(() => {\r\n     if (remoteStream) {\r\n       setLoading(false);\r\n     }\r\n   }, [remoteStream]);\r\n \r\n+  // ✅ Leave room on unmount for cleanup\r\n   useEffect(() => {\r\n     return () => {\r\n       if (socket && roomId) {\r\n         socket.emit(\"leave-room\", roomId);\r\n@@ -49,8 +63,9 @@\n   }, [socket, roomId]);\r\n \r\n   return (\r\n     <div className=\"flex flex-col md:flex-row h-screen\">\r\n+      {/* Video Section */}\r\n       <div className=\"flex-1 bg-black flex items-center justify-center relative\">\r\n         {loading ? (\r\n           <FindingPartner />\r\n         ) : (\r\n@@ -62,8 +77,9 @@\n           </>\r\n         )}\r\n       </div>\r\n \r\n+      {/* Chat Section */}\r\n       <div className=\"md:w-1/3 bg-neutral-100 dark:bg-neutral-800 border-l border-neutral-300 dark:border-neutral-700 flex flex-col\">\r\n         {roomId && <ChatBox socket={socket} roomId={roomId} />}\r\n       </div>\r\n     </div>\r\n"
                },
                {
                    "date": 1752298273963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\";\r\n \r\n-import React, { useEffect, useState } from \"react\";\r\n+import React, { useEffect, useState, useCallback } from \"react\";\r\n import useWebRTC from \"../hooks/useWebRTC\";\r\n import useSocket from \"../hooks/useSocket\";\r\n import LocalVideo from \"../../../components/video/LocalVideo\";\r\n import RemoteVideo from \"../../../components/video/RemoteVideo\";\r\n@@ -17,12 +17,13 @@\n \r\n   // ✅ Initialize WebRTC only when roomId & isOfferer are assigned\r\n   const { localStream, remoteStream } = useWebRTC(roomId, isOfferer);\r\n \r\n-  useEffect(() => {\r\n-    if (!socket) return;\r\n-\r\n-    const handleMatched = ({\r\n+  /**\r\n+   * ✅ Handle 'matched' event from server with useCallback\r\n+   */\r\n+  const handleMatched = useCallback(\r\n+    ({\r\n       roomId,\r\n       partnerId,\r\n       isOfferer,\r\n     }: {\r\n@@ -34,26 +35,63 @@\n       setRoomId(roomId);\r\n       setIsOfferer(isOfferer);\r\n \r\n       // ✅ Join assigned room after server matching\r\n-      socket.emit(\"join-room\", roomId);\r\n-    };\r\n+      socket?.emit(\"join-room\", roomId);\r\n+    },\r\n+    [socket]\r\n+  );\r\n \r\n+  /**\r\n+   * ✅ Register matched event listener\r\n+   */\r\n+  useEffect(() => {\r\n+    if (!socket) return;\r\n+\r\n+    socket.off(\"matched\", handleMatched); // Prevent duplicate listeners\r\n     socket.on(\"matched\", handleMatched);\r\n \r\n     return () => {\r\n       socket.off(\"matched\", handleMatched);\r\n     };\r\n+  }, [socket, handleMatched]);\r\n+\r\n+  /**\r\n+   * ✅ Listen for socket connect/disconnect for stability\r\n+   */\r\n+  useEffect(() => {\r\n+    if (!socket) return;\r\n+\r\n+    const handleDisconnect = () => {\r\n+      console.log(\"⚠️ Disconnected from socket server\");\r\n+      setLoading(true);\r\n+    };\r\n+\r\n+    const handleConnect = () => {\r\n+      console.log(\"✅ Connected to socket server:\", socket.id);\r\n+    };\r\n+\r\n+    socket.on(\"disconnect\", handleDisconnect);\r\n+    socket.on(\"connect\", handleConnect);\r\n+\r\n+    return () => {\r\n+      socket.off(\"disconnect\", handleDisconnect);\r\n+      socket.off(\"connect\", handleConnect);\r\n+    };\r\n   }, [socket]);\r\n \r\n-  // ✅ Update loading state when remote stream arrives\r\n+  /**\r\n+   * ✅ Update loading state when remote stream arrives\r\n+   */\r\n   useEffect(() => {\r\n     if (remoteStream) {\r\n       setLoading(false);\r\n     }\r\n   }, [remoteStream]);\r\n \r\n-  // ✅ Leave room on unmount for cleanup\r\n+  /**\r\n+   * ✅ Leave room on unmount for cleanup\r\n+   */\r\n   useEffect(() => {\r\n     return () => {\r\n       if (socket && roomId) {\r\n         socket.emit(\"leave-room\", roomId);\r\n@@ -70,9 +108,13 @@\n           <FindingPartner />\r\n         ) : (\r\n           <>\r\n             <div className=\"absolute bottom-4 right-4 w-40 h-40 border-2 border-white rounded-md overflow-hidden\">\r\n-              <LocalVideo stream={localStream} />\r\n+              {localStream ? (\r\n+                <LocalVideo stream={localStream} />\r\n+              ) : (\r\n+                <div className=\"text-white text-sm\">Loading camera...</div>\r\n+              )}\r\n             </div>\r\n             <RemoteVideo stream={remoteStream} />\r\n           </>\r\n         )}\r\n"
                },
                {
                    "date": 1752300505513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,18 +6,20 @@\n import LocalVideo from \"../../../components/video/LocalVideo\";\r\n import RemoteVideo from \"../../../components/video/RemoteVideo\";\r\n import ChatBox from \"../../../components/chat/ChatBox\";\r\n import FindingPartner from \"./FindingPartner\";\r\n+import Button from \"../../../components/common/Button\";\r\n \r\n export default function AnonymousChatRoom() {\r\n   const [roomId, setRoomId] = useState<string | null>(null);\r\n   const [isOfferer, setIsOfferer] = useState<boolean | null>(null);\r\n-  const [loading, setLoading] = useState(true);\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [chatStarted, setChatStarted] = useState(false);\r\n \r\n   const socket = useSocket();\r\n \r\n   // ✅ Initialize WebRTC only when roomId & isOfferer are assigned\r\n-  const { localStream, remoteStream } = useWebRTC(roomId, isOfferer);\r\n+  const { localStream, remoteStream, stopWebRTC } = useWebRTC(roomId, isOfferer);\r\n \r\n   /**\r\n    * ✅ Handle 'matched' event from server with useCallback\r\n    */\r\n@@ -33,8 +35,9 @@\n     }) => {\r\n       console.log(\"🎉 Matched in room:\", roomId, \"Offerer:\", isOfferer);\r\n       setRoomId(roomId);\r\n       setIsOfferer(isOfferer);\r\n+      setLoading(true);\r\n \r\n       // ✅ Join assigned room after server matching\r\n       socket?.emit(\"join-room\", roomId);\r\n     },\r\n@@ -62,21 +65,29 @@\n     if (!socket) return;\r\n \r\n     const handleDisconnect = () => {\r\n       console.log(\"⚠️ Disconnected from socket server\");\r\n-      setLoading(true);\r\n+      setLoading(false);\r\n+      setChatStarted(false);\r\n     };\r\n \r\n     const handleConnect = () => {\r\n       console.log(\"✅ Connected to socket server:\", socket.id);\r\n     };\r\n \r\n+    const handlePartnerLeft = () => {\r\n+      console.log(\"👋 Partner left the chat\");\r\n+      handleStop(); // Auto stop and show Start button\r\n+    };\r\n+\r\n     socket.on(\"disconnect\", handleDisconnect);\r\n     socket.on(\"connect\", handleConnect);\r\n+    socket.on(\"partner-left\", handlePartnerLeft);\r\n \r\n     return () => {\r\n       socket.off(\"disconnect\", handleDisconnect);\r\n       socket.off(\"connect\", handleConnect);\r\n+      socket.off(\"partner-left\", handlePartnerLeft);\r\n     };\r\n   }, [socket]);\r\n \r\n   /**\r\n@@ -88,24 +99,53 @@\n     }\r\n   }, [remoteStream]);\r\n \r\n   /**\r\n+   * ✅ Start chat handler\r\n+   */\r\n+  const handleStart = () => {\r\n+    if (!socket) return;\r\n+    console.log(\"🔍 Looking for partner...\");\r\n+    setChatStarted(true);\r\n+    setLoading(true);\r\n+    // Emit to server to enter matchmaking (server auto matches if someone waiting)\r\n+    // In your current signaling.js, just connecting triggers matchmaking\r\n+  };\r\n+\r\n+  /**\r\n+   * ✅ Stop chat handler\r\n+   */\r\n+  const handleStop = () => {\r\n+    console.log(\"🛑 Stopping chat...\");\r\n+    if (socket && roomId) {\r\n+      socket.emit(\"leave-room\", roomId);\r\n+    }\r\n+    stopWebRTC(); // Clean up WebRTC connection\r\n+    setRoomId(null);\r\n+    setIsOfferer(null);\r\n+    setChatStarted(false);\r\n+    setLoading(false);\r\n+  };\r\n+\r\n+  /**\r\n    * ✅ Leave room on unmount for cleanup\r\n    */\r\n   useEffect(() => {\r\n     return () => {\r\n-      if (socket && roomId) {\r\n-        socket.emit(\"leave-room\", roomId);\r\n-        console.log(\"👋 Left room:\", roomId);\r\n-      }\r\n+      handleStop();\r\n     };\r\n-  }, [socket, roomId]);\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, []);\r\n \r\n   return (\r\n     <div className=\"flex flex-col md:flex-row h-screen\">\r\n       {/* Video Section */}\r\n       <div className=\"flex-1 bg-black flex items-center justify-center relative\">\r\n-        {loading ? (\r\n+        {!chatStarted ? (\r\n+          <div className=\"flex flex-col items-center justify-center space-y-4\">\r\n+            <Button onClick={handleStart}>Start</Button>\r\n+          </div>\r\n+        ) : loading ? (\r\n           <FindingPartner />\r\n         ) : (\r\n           <>\r\n             <div className=\"absolute bottom-4 right-4 w-40 h-40 border-2 border-white rounded-md overflow-hidden\">\r\n@@ -115,8 +155,13 @@\n                 <div className=\"text-white text-sm\">Loading camera...</div>\r\n               )}\r\n             </div>\r\n             <RemoteVideo stream={remoteStream} />\r\n+\r\n+            {/* Stop button */}\r\n+            <div className=\"absolute top-4 right-4\">\r\n+              <Button onClick={handleStop}>Stop</Button>\r\n+            </div>\r\n           </>\r\n         )}\r\n       </div>\r\n \r\n"
                },
                {
                    "date": 1752301037648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,20 @@\n       {/* Video Section */}\r\n       <div className=\"flex-1 bg-black flex items-center justify-center relative\">\r\n         {!chatStarted ? (\r\n           <div className=\"flex flex-col items-center justify-center space-y-4\">\r\n-            <Button onClick={handleStart}>Start</Button>\r\n+            <Button\r\n+  label=\"Start\"\r\n+  variant=\"start\"\r\n+  onClick={handleStart}\r\n+/>\r\n+\r\n+<Button\r\n+  label=\"Stop\"\r\n+  variant=\"stop\"\r\n+  onClick={handleStop}\r\n+/>\r\n+\r\n           </div>\r\n         ) : loading ? (\r\n           <FindingPartner />\r\n         ) : (\r\n"
                },
                {
                    "date": 1752301047978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,20 +141,9 @@\n       {/* Video Section */}\r\n       <div className=\"flex-1 bg-black flex items-center justify-center relative\">\r\n         {!chatStarted ? (\r\n           <div className=\"flex flex-col items-center justify-center space-y-4\">\r\n-            <Button\r\n-  label=\"Start\"\r\n-  variant=\"start\"\r\n-  onClick={handleStart}\r\n-/>\r\n-\r\n-<Button\r\n-  label=\"Stop\"\r\n-  variant=\"stop\"\r\n-  onClick={handleStop}\r\n-/>\r\n-\r\n+            <Button onClick={handleStart}>Start</Button>\r\n           </div>\r\n         ) : loading ? (\r\n           <FindingPartner />\r\n         ) : (\r\n"
                },
                {
                    "date": 1752301057380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,10 +141,13 @@\n       {/* Video Section */}\r\n       <div className=\"flex-1 bg-black flex items-center justify-center relative\">\r\n         {!chatStarted ? (\r\n           <div className=\"flex flex-col items-center justify-center space-y-4\">\r\n-            <Button onClick={handleStart}>Start</Button>\r\n-          </div>\r\n+<Button\r\n+  label=\"Start\"\r\n+  variant=\"start\"\r\n+  onClick={handleStart}\r\n+/>          </div>\r\n         ) : loading ? (\r\n           <FindingPartner />\r\n         ) : (\r\n           <>\r\n"
                },
                {
                    "date": 1752301066386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,10 +161,13 @@\n             <RemoteVideo stream={remoteStream} />\r\n \r\n             {/* Stop button */}\r\n             <div className=\"absolute top-4 right-4\">\r\n-              <Button onClick={handleStop}>Stop</Button>\r\n-            </div>\r\n+<Button\r\n+  label=\"Stop\"\r\n+  variant=\"stop\"\r\n+  onClick={handleStop}\r\n+/>            </div>\r\n           </>\r\n         )}\r\n       </div>\r\n \r\n"
                },
                {
                    "date": 1752301558326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,20 +6,18 @@\n import LocalVideo from \"../../../components/video/LocalVideo\";\r\n import RemoteVideo from \"../../../components/video/RemoteVideo\";\r\n import ChatBox from \"../../../components/chat/ChatBox\";\r\n import FindingPartner from \"./FindingPartner\";\r\n-import Button from \"../../../components/common/Button\";\r\n \r\n export default function AnonymousChatRoom() {\r\n   const [roomId, setRoomId] = useState<string | null>(null);\r\n   const [isOfferer, setIsOfferer] = useState<boolean | null>(null);\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [chatStarted, setChatStarted] = useState(false);\r\n+  const [loading, setLoading] = useState(true);\r\n \r\n   const socket = useSocket();\r\n \r\n   // ✅ Initialize WebRTC only when roomId & isOfferer are assigned\r\n-  const { localStream, remoteStream, stopWebRTC } = useWebRTC(roomId, isOfferer);\r\n+  const { localStream, remoteStream } = useWebRTC(roomId, isOfferer);\r\n \r\n   /**\r\n    * ✅ Handle 'matched' event from server with useCallback\r\n    */\r\n@@ -35,9 +33,8 @@\n     }) => {\r\n       console.log(\"🎉 Matched in room:\", roomId, \"Offerer:\", isOfferer);\r\n       setRoomId(roomId);\r\n       setIsOfferer(isOfferer);\r\n-      setLoading(true);\r\n \r\n       // ✅ Join assigned room after server matching\r\n       socket?.emit(\"join-room\", roomId);\r\n     },\r\n@@ -65,29 +62,21 @@\n     if (!socket) return;\r\n \r\n     const handleDisconnect = () => {\r\n       console.log(\"⚠️ Disconnected from socket server\");\r\n-      setLoading(false);\r\n-      setChatStarted(false);\r\n+      setLoading(true);\r\n     };\r\n \r\n     const handleConnect = () => {\r\n       console.log(\"✅ Connected to socket server:\", socket.id);\r\n     };\r\n \r\n-    const handlePartnerLeft = () => {\r\n-      console.log(\"👋 Partner left the chat\");\r\n-      handleStop(); // Auto stop and show Start button\r\n-    };\r\n-\r\n     socket.on(\"disconnect\", handleDisconnect);\r\n     socket.on(\"connect\", handleConnect);\r\n-    socket.on(\"partner-left\", handlePartnerLeft);\r\n \r\n     return () => {\r\n       socket.off(\"disconnect\", handleDisconnect);\r\n       socket.off(\"connect\", handleConnect);\r\n-      socket.off(\"partner-left\", handlePartnerLeft);\r\n     };\r\n   }, [socket]);\r\n \r\n   /**\r\n@@ -99,56 +88,24 @@\n     }\r\n   }, [remoteStream]);\r\n \r\n   /**\r\n-   * ✅ Start chat handler\r\n-   */\r\n-  const handleStart = () => {\r\n-    if (!socket) return;\r\n-    console.log(\"🔍 Looking for partner...\");\r\n-    setChatStarted(true);\r\n-    setLoading(true);\r\n-    // Emit to server to enter matchmaking (server auto matches if someone waiting)\r\n-    // In your current signaling.js, just connecting triggers matchmaking\r\n-  };\r\n-\r\n-  /**\r\n-   * ✅ Stop chat handler\r\n-   */\r\n-  const handleStop = () => {\r\n-    console.log(\"🛑 Stopping chat...\");\r\n-    if (socket && roomId) {\r\n-      socket.emit(\"leave-room\", roomId);\r\n-    }\r\n-    stopWebRTC(); // Clean up WebRTC connection\r\n-    setRoomId(null);\r\n-    setIsOfferer(null);\r\n-    setChatStarted(false);\r\n-    setLoading(false);\r\n-  };\r\n-\r\n-  /**\r\n    * ✅ Leave room on unmount for cleanup\r\n    */\r\n   useEffect(() => {\r\n     return () => {\r\n-      handleStop();\r\n+      if (socket && roomId) {\r\n+        socket.emit(\"leave-room\", roomId);\r\n+        console.log(\"👋 Left room:\", roomId);\r\n+      }\r\n     };\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, []);\r\n+  }, [socket, roomId]);\r\n \r\n   return (\r\n     <div className=\"flex flex-col md:flex-row h-screen\">\r\n       {/* Video Section */}\r\n       <div className=\"flex-1 bg-black flex items-center justify-center relative\">\r\n-        {!chatStarted ? (\r\n-          <div className=\"flex flex-col items-center justify-center space-y-4\">\r\n-<Button\r\n-  label=\"Start\"\r\n-  variant=\"start\"\r\n-  onClick={handleStart}\r\n-/>          </div>\r\n-        ) : loading ? (\r\n+        {loading ? (\r\n           <FindingPartner />\r\n         ) : (\r\n           <>\r\n             <div className=\"absolute bottom-4 right-4 w-40 h-40 border-2 border-white rounded-md overflow-hidden\">\r\n@@ -158,16 +115,8 @@\n                 <div className=\"text-white text-sm\">Loading camera...</div>\r\n               )}\r\n             </div>\r\n             <RemoteVideo stream={remoteStream} />\r\n-\r\n-            {/* Stop button */}\r\n-            <div className=\"absolute top-4 right-4\">\r\n-<Button\r\n-  label=\"Stop\"\r\n-  variant=\"stop\"\r\n-  onClick={handleStop}\r\n-/>            </div>\r\n           </>\r\n         )}\r\n       </div>\r\n \r\n"
                },
                {
                    "date": 1752306490981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,21 +6,23 @@\n import LocalVideo from \"../../../components/video/LocalVideo\";\r\n import RemoteVideo from \"../../../components/video/RemoteVideo\";\r\n import ChatBox from \"../../../components/chat/ChatBox\";\r\n import FindingPartner from \"./FindingPartner\";\r\n+import Button from \"../../../components/common/Button\";\r\n \r\n export default function AnonymousChatRoom() {\r\n   const [roomId, setRoomId] = useState<string | null>(null);\r\n   const [isOfferer, setIsOfferer] = useState<boolean | null>(null);\r\n-  const [loading, setLoading] = useState(true);\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [chatStarted, setChatStarted] = useState(false);\r\n \r\n   const socket = useSocket();\r\n \r\n   // ✅ Initialize WebRTC only when roomId & isOfferer are assigned\r\n-  const { localStream, remoteStream } = useWebRTC(roomId, isOfferer);\r\n+  const { localStream, remoteStream, stopWebRTC } = useWebRTC(roomId, isOfferer);\r\n \r\n   /**\r\n-   * ✅ Handle 'matched' event from server with useCallback\r\n+   * ✅ Handle 'matched' event from server\r\n    */\r\n   const handleMatched = useCallback(\r\n     ({\r\n       roomId,\r\n@@ -33,8 +35,9 @@\n     }) => {\r\n       console.log(\"🎉 Matched in room:\", roomId, \"Offerer:\", isOfferer);\r\n       setRoomId(roomId);\r\n       setIsOfferer(isOfferer);\r\n+      setLoading(false);\r\n \r\n       // ✅ Join assigned room after server matching\r\n       socket?.emit(\"join-room\", roomId);\r\n     },\r\n@@ -55,9 +58,9 @@\n     };\r\n   }, [socket, handleMatched]);\r\n \r\n   /**\r\n-   * ✅ Listen for socket connect/disconnect for stability\r\n+   * ✅ Listen for socket connect/disconnect\r\n    */\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n@@ -88,27 +91,68 @@\n     }\r\n   }, [remoteStream]);\r\n \r\n   /**\r\n-   * ✅ Leave room on unmount for cleanup\r\n+   * ✅ Leave room on unmount\r\n    */\r\n   useEffect(() => {\r\n     return () => {\r\n       if (socket && roomId) {\r\n         socket.emit(\"leave-room\", roomId);\r\n         console.log(\"👋 Left room:\", roomId);\r\n+        stopWebRTC();\r\n       }\r\n     };\r\n-  }, [socket, roomId]);\r\n+  }, [socket, roomId, stopWebRTC]);\r\n \r\n+  /**\r\n+   * ✅ Start chat handler\r\n+   */\r\n+  const handleStart = () => {\r\n+    setLoading(true);\r\n+    setChatStarted(true);\r\n+    socket?.emit(\"find-partner\");\r\n+    console.log(\"🔍 Looking for partner...\");\r\n+  };\r\n+\r\n+  /**\r\n+   * ✅ Stop chat handler\r\n+   */\r\n+  const handleStop = () => {\r\n+    if (roomId) {\r\n+      socket?.emit(\"leave-room\", roomId);\r\n+      console.log(\"🛑 Stopped chat, left room:\", roomId);\r\n+    }\r\n+    stopWebRTC();\r\n+    setRoomId(null);\r\n+    setIsOfferer(null);\r\n+    setChatStarted(false);\r\n+    setLoading(false);\r\n+  };\r\n+\r\n+  /**\r\n+   * ✅ Skip partner handler\r\n+   */\r\n+  const handleSkip = () => {\r\n+    console.log(\"⏭️ Skipping to next partner...\");\r\n+    handleStop(); // Leave current room & cleanup\r\n+    handleStart(); // Find next partner\r\n+  };\r\n+\r\n   return (\r\n     <div className=\"flex flex-col md:flex-row h-screen\">\r\n       {/* Video Section */}\r\n       <div className=\"flex-1 bg-black flex items-center justify-center relative\">\r\n-        {loading ? (\r\n+        {!chatStarted ? (\r\n+          <Button label=\"Start\" onClick={handleStart} />\r\n+        ) : loading ? (\r\n           <FindingPartner />\r\n         ) : (\r\n           <>\r\n+            <div className=\"absolute top-4 left-4 flex gap-2\">\r\n+              <Button label=\"Stop\" onClick={handleStop} className=\"bg-red-600 hover:bg-red-700\" />\r\n+              <Button label=\"Skip\" onClick={handleSkip} className=\"bg-yellow-600 hover:bg-yellow-700\" />\r\n+            </div>\r\n             <div className=\"absolute bottom-4 right-4 w-40 h-40 border-2 border-white rounded-md overflow-hidden\">\r\n               {localStream ? (\r\n                 <LocalVideo stream={localStream} />\r\n               ) : (\r\n"
                },
                {
                    "date": 1752307453523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,23 +6,21 @@\n import LocalVideo from \"../../../components/video/LocalVideo\";\r\n import RemoteVideo from \"../../../components/video/RemoteVideo\";\r\n import ChatBox from \"../../../components/chat/ChatBox\";\r\n import FindingPartner from \"./FindingPartner\";\r\n-import Button from \"../../../components/common/Button\";\r\n \r\n export default function AnonymousChatRoom() {\r\n   const [roomId, setRoomId] = useState<string | null>(null);\r\n   const [isOfferer, setIsOfferer] = useState<boolean | null>(null);\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [chatStarted, setChatStarted] = useState(false);\r\n+  const [loading, setLoading] = useState(true);\r\n \r\n   const socket = useSocket();\r\n \r\n   // ✅ Initialize WebRTC only when roomId & isOfferer are assigned\r\n-  const { localStream, remoteStream, stopWebRTC } = useWebRTC(roomId, isOfferer);\r\n+  const { localStream, remoteStream } = useWebRTC(roomId, isOfferer);\r\n \r\n   /**\r\n-   * ✅ Handle 'matched' event from server\r\n+   * ✅ Handle 'matched' event from server with useCallback\r\n    */\r\n   const handleMatched = useCallback(\r\n     ({\r\n       roomId,\r\n@@ -35,9 +33,8 @@\n     }) => {\r\n       console.log(\"🎉 Matched in room:\", roomId, \"Offerer:\", isOfferer);\r\n       setRoomId(roomId);\r\n       setIsOfferer(isOfferer);\r\n-      setLoading(false);\r\n \r\n       // ✅ Join assigned room after server matching\r\n       socket?.emit(\"join-room\", roomId);\r\n     },\r\n@@ -58,9 +55,9 @@\n     };\r\n   }, [socket, handleMatched]);\r\n \r\n   /**\r\n-   * ✅ Listen for socket connect/disconnect\r\n+   * ✅ Listen for socket connect/disconnect for stability\r\n    */\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n@@ -91,68 +88,27 @@\n     }\r\n   }, [remoteStream]);\r\n \r\n   /**\r\n-   * ✅ Leave room on unmount\r\n+   * ✅ Leave room on unmount for cleanup\r\n    */\r\n   useEffect(() => {\r\n     return () => {\r\n       if (socket && roomId) {\r\n         socket.emit(\"leave-room\", roomId);\r\n         console.log(\"👋 Left room:\", roomId);\r\n-        stopWebRTC();\r\n       }\r\n     };\r\n-  }, [socket, roomId, stopWebRTC]);\r\n+  }, [socket, roomId]);\r\n \r\n-  /**\r\n-   * ✅ Start chat handler\r\n-   */\r\n-  const handleStart = () => {\r\n-    setLoading(true);\r\n-    setChatStarted(true);\r\n-    socket?.emit(\"find-partner\");\r\n-    console.log(\"🔍 Looking for partner...\");\r\n-  };\r\n-\r\n-  /**\r\n-   * ✅ Stop chat handler\r\n-   */\r\n-  const handleStop = () => {\r\n-    if (roomId) {\r\n-      socket?.emit(\"leave-room\", roomId);\r\n-      console.log(\"🛑 Stopped chat, left room:\", roomId);\r\n-    }\r\n-    stopWebRTC();\r\n-    setRoomId(null);\r\n-    setIsOfferer(null);\r\n-    setChatStarted(false);\r\n-    setLoading(false);\r\n-  };\r\n-\r\n-  /**\r\n-   * ✅ Skip partner handler\r\n-   */\r\n-  const handleSkip = () => {\r\n-    console.log(\"⏭️ Skipping to next partner...\");\r\n-    handleStop(); // Leave current room & cleanup\r\n-    handleStart(); // Find next partner\r\n-  };\r\n-\r\n   return (\r\n     <div className=\"flex flex-col md:flex-row h-screen\">\r\n       {/* Video Section */}\r\n       <div className=\"flex-1 bg-black flex items-center justify-center relative\">\r\n-        {!chatStarted ? (\r\n-          <Button label=\"Start\" onClick={handleStart} />\r\n-        ) : loading ? (\r\n+        {loading ? (\r\n           <FindingPartner />\r\n         ) : (\r\n           <>\r\n-            <div className=\"absolute top-4 left-4 flex gap-2\">\r\n-              <Button label=\"Stop\" onClick={handleStop} className=\"bg-red-600 hover:bg-red-700\" />\r\n-              <Button label=\"Skip\" onClick={handleSkip} className=\"bg-yellow-600 hover:bg-yellow-700\" />\r\n-            </div>\r\n             <div className=\"absolute bottom-4 right-4 w-40 h-40 border-2 border-white rounded-md overflow-hidden\">\r\n               {localStream ? (\r\n                 <LocalVideo stream={localStream} />\r\n               ) : (\r\n"
                },
                {
                    "date": 1752309718605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,61 +10,52 @@\n \r\n export default function AnonymousChatRoom() {\r\n   const [roomId, setRoomId] = useState<string | null>(null);\r\n   const [isOfferer, setIsOfferer] = useState<boolean | null>(null);\r\n-  const [loading, setLoading] = useState(true);\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [sessionStarted, setSessionStarted] = useState(false);\r\n \r\n   const socket = useSocket();\r\n \r\n-  // ✅ Initialize WebRTC only when roomId & isOfferer are assigned\r\n-  const { localStream, remoteStream } = useWebRTC(roomId, isOfferer);\r\n+  const { localStream, remoteStream, start, stop, isStarted } = useWebRTC(roomId, isOfferer);\r\n \r\n   /**\r\n-   * ✅ Handle 'matched' event from server with useCallback\r\n+   * ✅ Handle 'matched' event from server\r\n    */\r\n   const handleMatched = useCallback(\r\n-    ({\r\n-      roomId,\r\n-      partnerId,\r\n-      isOfferer,\r\n-    }: {\r\n-      roomId: string;\r\n-      partnerId: string;\r\n-      isOfferer: boolean;\r\n-    }) => {\r\n+    ({ roomId, isOfferer }: { roomId: string; partnerId: string; isOfferer: boolean }) => {\r\n       console.log(\"🎉 Matched in room:\", roomId, \"Offerer:\", isOfferer);\r\n       setRoomId(roomId);\r\n       setIsOfferer(isOfferer);\r\n-\r\n-      // ✅ Join assigned room after server matching\r\n-      socket?.emit(\"join-room\", roomId);\r\n+      setLoading(false);\r\n     },\r\n-    [socket]\r\n+    []\r\n   );\r\n \r\n   /**\r\n    * ✅ Register matched event listener\r\n    */\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n-    socket.off(\"matched\", handleMatched); // Prevent duplicate listeners\r\n+    socket.off(\"matched\", handleMatched);\r\n     socket.on(\"matched\", handleMatched);\r\n \r\n     return () => {\r\n       socket.off(\"matched\", handleMatched);\r\n     };\r\n   }, [socket, handleMatched]);\r\n \r\n   /**\r\n-   * ✅ Listen for socket connect/disconnect for stability\r\n+   * ✅ Socket connect/disconnect handlers\r\n    */\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n     const handleDisconnect = () => {\r\n       console.log(\"⚠️ Disconnected from socket server\");\r\n-      setLoading(true);\r\n+      setLoading(false);\r\n+      setSessionStarted(false);\r\n     };\r\n \r\n     const handleConnect = () => {\r\n       console.log(\"✅ Connected to socket server:\", socket.id);\r\n@@ -79,37 +70,92 @@\n     };\r\n   }, [socket]);\r\n \r\n   /**\r\n-   * ✅ Update loading state when remote stream arrives\r\n+   * ✅ Leave room on unmount\r\n    */\r\n   useEffect(() => {\r\n-    if (remoteStream) {\r\n-      setLoading(false);\r\n-    }\r\n-  }, [remoteStream]);\r\n-\r\n-  /**\r\n-   * ✅ Leave room on unmount for cleanup\r\n-   */\r\n-  useEffect(() => {\r\n     return () => {\r\n       if (socket && roomId) {\r\n         socket.emit(\"leave-room\", roomId);\r\n         console.log(\"👋 Left room:\", roomId);\r\n       }\r\n+      stop();\r\n     };\r\n-  }, [socket, roomId]);\r\n+  }, [socket, roomId, stop]);\r\n \r\n+  /**\r\n+   * 🔘 Start, Stop, and Skip Handlers\r\n+   */\r\n+  const handleStart = () => {\r\n+    if (!sessionStarted) {\r\n+      setLoading(true);\r\n+      setSessionStarted(true);\r\n+      socket?.emit(\"start-looking\");\r\n+      console.log(\"🔎 Started looking for partner\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleStop = () => {\r\n+    stop();\r\n+    setRoomId(null);\r\n+    setIsOfferer(null);\r\n+    setSessionStarted(false);\r\n+    setLoading(false);\r\n+    console.log(\"🛑 Stopped session\");\r\n+  };\r\n+\r\n+  const handleSkip = () => {\r\n+    handleStop();\r\n+    handleStart();\r\n+    console.log(\"⏭️ Skipped to new partner\");\r\n+  };\r\n+\r\n+  /**\r\n+   * ✅ Dynamic Button Label\r\n+   */\r\n+  const renderControlButton = () => {\r\n+    if (!sessionStarted) {\r\n+      return (\r\n+        <button\r\n+          onClick={handleStart}\r\n+          className=\"bg-green-600 hover:bg-green-700 text-white font-semibold px-4 py-2 rounded-lg shadow\"\r\n+        >\r\n+          Start\r\n+        </button>\r\n+      );\r\n+    } else if (loading) {\r\n+      return (\r\n+        <button\r\n+          onClick={handleStop}\r\n+          className=\"bg-red-600 hover:bg-red-700 text-white font-semibold px-4 py-2 rounded-lg shadow\"\r\n+        >\r\n+          Stop\r\n+        </button>\r\n+      );\r\n+    } else {\r\n+      return (\r\n+        <button\r\n+          onClick={handleSkip}\r\n+          className=\"bg-yellow-500 hover:bg-yellow-600 text-white font-semibold px-4 py-2 rounded-lg shadow\"\r\n+        >\r\n+          Skip\r\n+        </button>\r\n+      );\r\n+    }\r\n+  };\r\n+\r\n   return (\r\n-    <div className=\"flex flex-col md:flex-row h-screen\">\r\n+    <div className=\"flex flex-col md:flex-row h-screen bg-neutral-50 dark:bg-neutral-900\">\r\n       {/* Video Section */}\r\n       <div className=\"flex-1 bg-black flex items-center justify-center relative\">\r\n-        {loading ? (\r\n+        {!sessionStarted ? (\r\n+          <div className=\"text-white text-xl font-semibold\">Click Start to begin searching</div>\r\n+        ) : loading ? (\r\n           <FindingPartner />\r\n         ) : (\r\n           <>\r\n-            <div className=\"absolute bottom-4 right-4 w-40 h-40 border-2 border-white rounded-md overflow-hidden\">\r\n+            <div className=\"absolute bottom-4 right-4 w-40 h-40 border-2 border-white rounded-md overflow-hidden shadow-lg\">\r\n               {localStream ? (\r\n                 <LocalVideo stream={localStream} />\r\n               ) : (\r\n                 <div className=\"text-white text-sm\">Loading camera...</div>\r\n@@ -121,9 +167,16 @@\n       </div>\r\n \r\n       {/* Chat Section */}\r\n       <div className=\"md:w-1/3 bg-neutral-100 dark:bg-neutral-800 border-l border-neutral-300 dark:border-neutral-700 flex flex-col\">\r\n-        {roomId && <ChatBox socket={socket} roomId={roomId} />}\r\n+        <div className=\"flex-grow\">\r\n+          {roomId && <ChatBox socket={socket} roomId={roomId} />}\r\n+        </div>\r\n+\r\n+        {/* Dynamic Start/Stop/Skip Button */}\r\n+        <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 flex justify-end\">\r\n+          {renderControlButton()}\r\n+        </div>\r\n       </div>\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1752310542803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   const [sessionStarted, setSessionStarted] = useState(false);\r\n \r\n   const socket = useSocket();\r\n \r\n-  const { localStream, remoteStream, start, stop, isStarted } = useWebRTC(roomId, isOfferer);\r\n+  const { localStream, remoteStream } = useWebRTC(roomId, isOfferer);\r\n \r\n   /**\r\n    * ✅ Handle 'matched' event from server\r\n    */\r\n@@ -78,11 +78,10 @@\n       if (socket && roomId) {\r\n         socket.emit(\"leave-room\", roomId);\r\n         console.log(\"👋 Left room:\", roomId);\r\n       }\r\n-      stop();\r\n     };\r\n-  }, [socket, roomId, stop]);\r\n+  }, [socket, roomId]);\r\n \r\n   /**\r\n    * 🔘 Start, Stop, and Skip Handlers\r\n    */\r\n@@ -95,14 +94,16 @@\n     }\r\n   };\r\n \r\n   const handleStop = () => {\r\n-    stop();\r\n+    if (roomId) {\r\n+      socket?.emit(\"leave-room\", roomId);\r\n+      console.log(\"🛑 Stopped session and left room:\", roomId);\r\n+    }\r\n     setRoomId(null);\r\n     setIsOfferer(null);\r\n     setSessionStarted(false);\r\n     setLoading(false);\r\n-    console.log(\"🛑 Stopped session\");\r\n   };\r\n \r\n   const handleSkip = () => {\r\n     handleStop();\r\n"
                },
                {
                    "date": 1752311652784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,12 @@\n   const [sessionStarted, setSessionStarted] = useState(false);\r\n \r\n   const socket = useSocket();\r\n \r\n-  const { localStream, remoteStream } = useWebRTC(roomId, isOfferer);\r\n+  /**\r\n+   * ✅ Initialize WebRTC only when session starts\r\n+   */\r\n+  const { localStream, remoteStream } = useWebRTC(roomId, isOfferer, sessionStarted);\r\n \r\n   /**\r\n    * ✅ Handle 'matched' event from server\r\n    */\r\n@@ -118,27 +121,27 @@\n     if (!sessionStarted) {\r\n       return (\r\n         <button\r\n           onClick={handleStart}\r\n-          className=\"bg-green-600 hover:bg-green-700 text-white font-semibold px-4 py-2 rounded-lg shadow\"\r\n+          className=\"bg-green-600 hover:bg-green-700 text-white font-semibold px-4 py-2 rounded-lg shadow transition duration-200\"\r\n         >\r\n           Start\r\n         </button>\r\n       );\r\n     } else if (loading) {\r\n       return (\r\n         <button\r\n           onClick={handleStop}\r\n-          className=\"bg-red-600 hover:bg-red-700 text-white font-semibold px-4 py-2 rounded-lg shadow\"\r\n+          className=\"bg-red-600 hover:bg-red-700 text-white font-semibold px-4 py-2 rounded-lg shadow transition duration-200\"\r\n         >\r\n           Stop\r\n         </button>\r\n       );\r\n     } else {\r\n       return (\r\n         <button\r\n           onClick={handleSkip}\r\n-          className=\"bg-yellow-500 hover:bg-yellow-600 text-white font-semibold px-4 py-2 rounded-lg shadow\"\r\n+          className=\"bg-yellow-500 hover:bg-yellow-600 text-white font-semibold px-4 py-2 rounded-lg shadow transition duration-200\"\r\n         >\r\n           Skip\r\n         </button>\r\n       );\r\n@@ -154,16 +157,16 @@\n         ) : loading ? (\r\n           <FindingPartner />\r\n         ) : (\r\n           <>\r\n+            <RemoteVideo stream={remoteStream} />\r\n             <div className=\"absolute bottom-4 right-4 w-40 h-40 border-2 border-white rounded-md overflow-hidden shadow-lg\">\r\n               {localStream ? (\r\n                 <LocalVideo stream={localStream} />\r\n               ) : (\r\n                 <div className=\"text-white text-sm\">Loading camera...</div>\r\n               )}\r\n             </div>\r\n-            <RemoteVideo stream={remoteStream} />\r\n           </>\r\n         )}\r\n       </div>\r\n \r\n"
                },
                {
                    "date": 1752319407180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,168 @@\n+\"use client\";\r\n+\r\n+import React, { useEffect, useState, useCallback } from \"react\";\r\n+import useWebRTC from \"../hooks/useWebRTC\";\r\n+import useSocket from \"../hooks/useSocket\";\r\n+import LocalVideo from \"../../../components/video/LocalVideo\";\r\n+import RemoteVideo from \"../../../components/video/RemoteVideo\";\r\n+import ChatBox from \"../../../components/chat/ChatBox\";\r\n+import FindingPartner from \"./FindingPartner\";\r\n+import { Video, Users, RefreshCcw, CircleStop } from \"lucide-react\";\r\n+\r\n+export default function AnonymousChatRoom() {\r\n+  const [roomId, setRoomId] = useState<string | null>(null);\r\n+  const [isOfferer, setIsOfferer] = useState<boolean | null>(null);\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [sessionStarted, setSessionStarted] = useState(false);\r\n+\r\n+  const socket = useSocket();\r\n+  const { localStream, remoteStream } = useWebRTC(roomId, isOfferer, sessionStarted);\r\n+\r\n+  const handleMatched = useCallback(({ roomId, isOfferer }: { roomId: string; partnerId: string; isOfferer: boolean }) => {\r\n+    console.log(\"🎉 Matched in room:\", roomId, \"Offerer:\", isOfferer);\r\n+    setRoomId(roomId);\r\n+    setIsOfferer(isOfferer);\r\n+    setLoading(false);\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (!socket) return;\r\n+    socket.off(\"matched\", handleMatched);\r\n+    socket.on(\"matched\", handleMatched);\r\n+    return () => {\r\n+      socket.off(\"matched\", handleMatched);\r\n+    };\r\n+  }, [socket, handleMatched]);\r\n+\r\n+  useEffect(() => {\r\n+    if (!socket) return;\r\n+\r\n+    const handleDisconnect = () => {\r\n+      console.log(\"⚠️ Disconnected from socket server\");\r\n+      setLoading(false);\r\n+      setSessionStarted(false);\r\n+    };\r\n+\r\n+    const handleConnect = () => {\r\n+      console.log(\"✅ Connected to socket server:\", socket.id);\r\n+    };\r\n+\r\n+    socket.on(\"disconnect\", handleDisconnect);\r\n+    socket.on(\"connect\", handleConnect);\r\n+\r\n+    return () => {\r\n+      socket.off(\"disconnect\", handleDisconnect);\r\n+      socket.off(\"connect\", handleConnect);\r\n+    };\r\n+  }, [socket]);\r\n+\r\n+  useEffect(() => {\r\n+    return () => {\r\n+      if (socket && roomId) {\r\n+        socket.emit(\"leave-room\", roomId);\r\n+        console.log(\"👋 Left room:\", roomId);\r\n+      }\r\n+    };\r\n+  }, [socket, roomId]);\r\n+\r\n+  const handleStart = () => {\r\n+    if (!sessionStarted) {\r\n+      setLoading(true);\r\n+      setSessionStarted(true);\r\n+      socket?.emit(\"start-looking\");\r\n+      console.log(\"🔎 Started looking for partner\");\r\n+    }\r\n+  };\r\n+\r\n+  const handleStop = () => {\r\n+    if (roomId) {\r\n+      socket?.emit(\"leave-room\", roomId);\r\n+      console.log(\"🛑 Stopped session and left room:\", roomId);\r\n+    }\r\n+    setRoomId(null);\r\n+    setIsOfferer(null);\r\n+    setSessionStarted(false);\r\n+    setLoading(false);\r\n+  };\r\n+\r\n+  const handleSkip = () => {\r\n+    handleStop();\r\n+    handleStart();\r\n+    console.log(\"⏭️ Skipped to new partner\");\r\n+  };\r\n+\r\n+  const renderControlButton = () => {\r\n+    const baseClasses = \"flex items-center gap-2 px-4 py-2 rounded-lg shadow font-medium transition\";\r\n+    if (!sessionStarted) {\r\n+      return (\r\n+        <button\r\n+          onClick={handleStart}\r\n+          className={`${baseClasses} bg-green-600 hover:bg-green-700 text-white`}\r\n+        >\r\n+          <Users className=\"w-5 h-5\" />\r\n+          Start\r\n+        </button>\r\n+      );\r\n+    } else if (loading) {\r\n+      return (\r\n+        <button\r\n+          onClick={handleStop}\r\n+          className={`${baseClasses} bg-red-600 hover:bg-red-700 text-white`}\r\n+        >\r\n+          <CircleStop className=\"w-5 h-5\" />\r\n+          Stop\r\n+        </button>\r\n+      );\r\n+    } else {\r\n+      return (\r\n+        <button\r\n+          onClick={handleSkip}\r\n+          className={`${baseClasses} bg-yellow-500 hover:bg-yellow-600 text-white`}\r\n+        >\r\n+          <RefreshCcw className=\"w-5 h-5\" />\r\n+          Skip\r\n+        </button>\r\n+      );\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"grid md:grid-cols-3 h-screen bg-neutral-100 dark:bg-neutral-900\">\r\n+      {/* Video Section */}\r\n+      <div className=\"md:col-span-2 relative flex items-center justify-center bg-black\">\r\n+        {!sessionStarted ? (\r\n+          <div className=\"text-white text-xl font-semibold\">Click Start to begin searching</div>\r\n+        ) : loading ? (\r\n+          <FindingPartner />\r\n+        ) : (\r\n+          <>\r\n+            <RemoteVideo stream={remoteStream} />\r\n+            <div className=\"absolute bottom-5 right-5 w-36 h-36 border-2 border-white rounded overflow-hidden\">\r\n+              {localStream ? (\r\n+                <LocalVideo stream={localStream} />\r\n+              ) : (\r\n+                <div className=\"text-white text-sm p-2\">Loading camera...</div>\r\n+              )}\r\n+            </div>\r\n+          </>\r\n+        )}\r\n+      </div>\r\n+\r\n+      {/* Chat + Controls */}\r\n+      <div className=\"flex flex-col border-l border-neutral-300 dark:border-neutral-700\">\r\n+        <div className=\"flex-grow overflow-y-auto\">\r\n+          {roomId ? (\r\n+            <ChatBox socket={socket} roomId={roomId} />\r\n+          ) : (\r\n+            <div className=\"flex items-center justify-center h-full text-neutral-400 text-sm px-4\">\r\n+              You’ll be able to chat once you’re matched.\r\n+            </div>\r\n+          )}\r\n+        </div>\r\n+        <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 bg-white dark:bg-neutral-800 flex justify-end\">\r\n+          {renderControlButton()}\r\n+        </div>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1752324807137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n import useWebRTC from \"../hooks/useWebRTC\";\r\n import useSocket from \"../hooks/useSocket\";\r\n import LocalVideo from \"../../../components/video/LocalVideo\";\r\n import RemoteVideo from \"../../../components/video/RemoteVideo\";\r\n-import ChatBox from \"../../../components/chat/ChatBox\";\r\n-import FindingPartner from \"./FindingPartner\";\r\n+import ChatBox from \"../\";\r\n+import FindingPartner from \"./FindingPartner.jsx\";\r\n import { Video, Users, RefreshCcw, CircleStop } from \"lucide-react\";\r\n \r\n export default function AnonymousChatRoom() {\r\n   const [roomId, setRoomId] = useState<string | null>(null);\r\n@@ -165,190 +165,4 @@\n       </div>\r\n     </div>\r\n   );\r\n }\r\n-\"use client\";\r\n-\r\n-import React, { useEffect, useState, useCallback } from \"react\";\r\n-import useWebRTC from \"../hooks/useWebRTC\";\r\n-import useSocket from \"../hooks/useSocket\";\r\n-import LocalVideo from \"../../../components/video/LocalVideo\";\r\n-import RemoteVideo from \"../../../components/video/RemoteVideo\";\r\n-import ChatBox from \"../../../components/chat/ChatBox\";\r\n-import FindingPartner from \"./FindingPartner\";\r\n-\r\n-export default function AnonymousChatRoom() {\r\n-  const [roomId, setRoomId] = useState<string | null>(null);\r\n-  const [isOfferer, setIsOfferer] = useState<boolean | null>(null);\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [sessionStarted, setSessionStarted] = useState(false);\r\n-\r\n-  const socket = useSocket();\r\n-\r\n-  /**\r\n-   * ✅ Initialize WebRTC only when session starts\r\n-   */\r\n-  const { localStream, remoteStream } = useWebRTC(roomId, isOfferer, sessionStarted);\r\n-\r\n-  /**\r\n-   * ✅ Handle 'matched' event from server\r\n-   */\r\n-  const handleMatched = useCallback(\r\n-    ({ roomId, isOfferer }: { roomId: string; partnerId: string; isOfferer: boolean }) => {\r\n-      console.log(\"🎉 Matched in room:\", roomId, \"Offerer:\", isOfferer);\r\n-      setRoomId(roomId);\r\n-      setIsOfferer(isOfferer);\r\n-      setLoading(false);\r\n-    },\r\n-    []\r\n-  );\r\n-\r\n-  /**\r\n-   * ✅ Register matched event listener\r\n-   */\r\n-  useEffect(() => {\r\n-    if (!socket) return;\r\n-\r\n-    socket.off(\"matched\", handleMatched);\r\n-    socket.on(\"matched\", handleMatched);\r\n-\r\n-    return () => {\r\n-      socket.off(\"matched\", handleMatched);\r\n-    };\r\n-  }, [socket, handleMatched]);\r\n-\r\n-  /**\r\n-   * ✅ Socket connect/disconnect handlers\r\n-   */\r\n-  useEffect(() => {\r\n-    if (!socket) return;\r\n-\r\n-    const handleDisconnect = () => {\r\n-      console.log(\"⚠️ Disconnected from socket server\");\r\n-      setLoading(false);\r\n-      setSessionStarted(false);\r\n-    };\r\n-\r\n-    const handleConnect = () => {\r\n-      console.log(\"✅ Connected to socket server:\", socket.id);\r\n-    };\r\n-\r\n-    socket.on(\"disconnect\", handleDisconnect);\r\n-    socket.on(\"connect\", handleConnect);\r\n-\r\n-    return () => {\r\n-      socket.off(\"disconnect\", handleDisconnect);\r\n-      socket.off(\"connect\", handleConnect);\r\n-    };\r\n-  }, [socket]);\r\n-\r\n-  /**\r\n-   * ✅ Leave room on unmount\r\n-   */\r\n-  useEffect(() => {\r\n-    return () => {\r\n-      if (socket && roomId) {\r\n-        socket.emit(\"leave-room\", roomId);\r\n-        console.log(\"👋 Left room:\", roomId);\r\n-      }\r\n-    };\r\n-  }, [socket, roomId]);\r\n-\r\n-  /**\r\n-   * 🔘 Start, Stop, and Skip Handlers\r\n-   */\r\n-  const handleStart = () => {\r\n-    if (!sessionStarted) {\r\n-      setLoading(true);\r\n-      setSessionStarted(true);\r\n-      socket?.emit(\"start-looking\");\r\n-      console.log(\"🔎 Started looking for partner\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleStop = () => {\r\n-    if (roomId) {\r\n-      socket?.emit(\"leave-room\", roomId);\r\n-      console.log(\"🛑 Stopped session and left room:\", roomId);\r\n-    }\r\n-    setRoomId(null);\r\n-    setIsOfferer(null);\r\n-    setSessionStarted(false);\r\n-    setLoading(false);\r\n-  };\r\n-\r\n-  const handleSkip = () => {\r\n-    handleStop();\r\n-    handleStart();\r\n-    console.log(\"⏭️ Skipped to new partner\");\r\n-  };\r\n-\r\n-  /**\r\n-   * ✅ Dynamic Button Label\r\n-   */\r\n-  const renderControlButton = () => {\r\n-    if (!sessionStarted) {\r\n-      return (\r\n-        <button\r\n-          onClick={handleStart}\r\n-          className=\"bg-green-600 hover:bg-green-700 text-white font-semibold px-4 py-2 rounded-lg shadow transition duration-200\"\r\n-        >\r\n-          Start\r\n-        </button>\r\n-      );\r\n-    } else if (loading) {\r\n-      return (\r\n-        <button\r\n-          onClick={handleStop}\r\n-          className=\"bg-red-600 hover:bg-red-700 text-white font-semibold px-4 py-2 rounded-lg shadow transition duration-200\"\r\n-        >\r\n-          Stop\r\n-        </button>\r\n-      );\r\n-    } else {\r\n-      return (\r\n-        <button\r\n-          onClick={handleSkip}\r\n-          className=\"bg-yellow-500 hover:bg-yellow-600 text-white font-semibold px-4 py-2 rounded-lg shadow transition duration-200\"\r\n-        >\r\n-          Skip\r\n-        </button>\r\n-      );\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"flex flex-col md:flex-row h-screen bg-neutral-50 dark:bg-neutral-900\">\r\n-      {/* Video Section */}\r\n-      <div className=\"flex-1 bg-black flex items-center justify-center relative\">\r\n-        {!sessionStarted ? (\r\n-          <div className=\"text-white text-xl font-semibold\">Click Start to begin searching</div>\r\n-        ) : loading ? (\r\n-          <FindingPartner />\r\n-        ) : (\r\n-          <>\r\n-            <RemoteVideo stream={remoteStream} />\r\n-            <div className=\"absolute bottom-4 right-4 w-40 h-40 border-2 border-white rounded-md overflow-hidden shadow-lg\">\r\n-              {localStream ? (\r\n-                <LocalVideo stream={localStream} />\r\n-              ) : (\r\n-                <div className=\"text-white text-sm\">Loading camera...</div>\r\n-              )}\r\n-            </div>\r\n-          </>\r\n-        )}\r\n-      </div>\r\n-\r\n-      {/* Chat Section */}\r\n-      <div className=\"md:w-1/3 bg-neutral-100 dark:bg-neutral-800 border-l border-neutral-300 dark:border-neutral-700 flex flex-col\">\r\n-        <div className=\"flex-grow\">\r\n-          {roomId && <ChatBox socket={socket} roomId={roomId} />}\r\n-        </div>\r\n-\r\n-        {/* Dynamic Start/Stop/Skip Button */}\r\n-        <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 flex justify-end\">\r\n-          {renderControlButton()}\r\n-        </div>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1752324863191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import useWebRTC from \"../hooks/useWebRTC\";\r\n import useSocket from \"../hooks/useSocket\";\r\n import LocalVideo from \"../../../components/video/LocalVideo\";\r\n import RemoteVideo from \"../../../components/video/RemoteVideo\";\r\n-import ChatBox from \"../\";\r\n+import ChatBox from \"../services/\";\r\n import FindingPartner from \"./FindingPartner.jsx\";\r\n import { Video, Users, RefreshCcw, CircleStop } from \"lucide-react\";\r\n \r\n export default function AnonymousChatRoom() {\r\n"
                },
                {
                    "date": 1752324981391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import useWebRTC from \"../hooks/useWebRTC\";\r\n import useSocket from \"../hooks/useSocket\";\r\n import LocalVideo from \"../../../components/video/LocalVideo\";\r\n import RemoteVideo from \"../../../components/video/RemoteVideo\";\r\n-import ChatBox from \"../services/\";\r\n+import ChatBox from \"../../../components/chat/ChatBox\";\r\n import FindingPartner from \"./FindingPartner.jsx\";\r\n import { Video, Users, RefreshCcw, CircleStop } from \"lucide-react\";\r\n \r\n export default function AnonymousChatRoom() {\r\n"
                },
                {
                    "date": 1752325879772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import useSocket from \"../hooks/useSocket\";\r\n import LocalVideo from \"../../../components/video/LocalVideo\";\r\n import RemoteVideo from \"../../../components/video/RemoteVideo\";\r\n import ChatBox from \"../../../components/chat/ChatBox\";\r\n-import FindingPartner from \"./FindingPartner.jsx\";\r\n+import FindingPartner from \"./FindingPartner\";\r\n import { Video, Users, RefreshCcw, CircleStop } from \"lucide-react\";\r\n \r\n export default function AnonymousChatRoom() {\r\n   const [roomId, setRoomId] = useState<string | null>(null);\r\n"
                },
                {
                    "date": 1752334456520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n import LocalVideo from \"../../../components/video/LocalVideo\";\r\n import RemoteVideo from \"../../../components/video/RemoteVideo\";\r\n import ChatBox from \"../../../components/chat/ChatBox\";\r\n import FindingPartner from \"./FindingPartner\";\r\n-import { Video, Users, RefreshCcw, CircleStop } from \"lucide-react\";\r\n \r\n export default function AnonymousChatRoom() {\r\n   const [roomId, setRoomId] = useState<string | null>(null);\r\n   const [isOfferer, setIsOfferer] = useState<boolean | null>(null);\r\n@@ -64,8 +63,9 @@\n       }\r\n     };\r\n   }, [socket, roomId]);\r\n \r\n+  // 🔁 Control functions passed into ChatBox\r\n   const handleStart = () => {\r\n     if (!sessionStarted) {\r\n       setLoading(true);\r\n       setSessionStarted(true);\r\n@@ -90,43 +90,8 @@\n     handleStart();\r\n     console.log(\"⏭️ Skipped to new partner\");\r\n   };\r\n \r\n-  const renderControlButton = () => {\r\n-    const baseClasses = \"flex items-center gap-2 px-4 py-2 rounded-lg shadow font-medium transition\";\r\n-    if (!sessionStarted) {\r\n-      return (\r\n-        <button\r\n-          onClick={handleStart}\r\n-          className={`${baseClasses} bg-green-600 hover:bg-green-700 text-white`}\r\n-        >\r\n-          <Users className=\"w-5 h-5\" />\r\n-          Start\r\n-        </button>\r\n-      );\r\n-    } else if (loading) {\r\n-      return (\r\n-        <button\r\n-          onClick={handleStop}\r\n-          className={`${baseClasses} bg-red-600 hover:bg-red-700 text-white`}\r\n-        >\r\n-          <CircleStop className=\"w-5 h-5\" />\r\n-          Stop\r\n-        </button>\r\n-      );\r\n-    } else {\r\n-      return (\r\n-        <button\r\n-          onClick={handleSkip}\r\n-          className={`${baseClasses} bg-yellow-500 hover:bg-yellow-600 text-white`}\r\n-        >\r\n-          <RefreshCcw className=\"w-5 h-5\" />\r\n-          Skip\r\n-        </button>\r\n-      );\r\n-    }\r\n-  };\r\n-\r\n   return (\r\n     <div className=\"grid md:grid-cols-3 h-screen bg-neutral-100 dark:bg-neutral-900\">\r\n       {/* Video Section */}\r\n       <div className=\"md:col-span-2 relative flex items-center justify-center bg-black\">\r\n@@ -151,18 +116,23 @@\n       {/* Chat + Controls */}\r\n       <div className=\"flex flex-col border-l border-neutral-300 dark:border-neutral-700\">\r\n         <div className=\"flex-grow overflow-y-auto\">\r\n           {roomId ? (\r\n-            <ChatBox socket={socket} roomId={roomId} />\r\n+            <ChatBox\r\n+              socket={socket}\r\n+              roomId={roomId}\r\n+              onStart={handleStart}\r\n+              onStop={handleStop}\r\n+              onSkip={handleSkip}\r\n+              sessionStarted={sessionStarted}\r\n+              loading={loading}\r\n+            />\r\n           ) : (\r\n             <div className=\"flex items-center justify-center h-full text-neutral-400 text-sm px-4\">\r\n               You’ll be able to chat once you’re matched.\r\n             </div>\r\n           )}\r\n         </div>\r\n-        <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 bg-white dark:bg-neutral-800 flex justify-end\">\r\n-          {renderControlButton()}\r\n-        </div>\r\n       </div>\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1752335633773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import LocalVideo from \"../../../components/video/LocalVideo\";\r\n import RemoteVideo from \"../../../components/video/RemoteVideo\";\r\n import ChatBox from \"../../../components/chat/ChatBox\";\r\n import FindingPartner from \"./FindingPartner\";\r\n+import { Video, Users, RefreshCcw, CircleStop } from \"lucide-react\";\r\n \r\n export default function AnonymousChatRoom() {\r\n   const [roomId, setRoomId] = useState<string | null>(null);\r\n   const [isOfferer, setIsOfferer] = useState<boolean | null>(null);\r\n@@ -63,9 +64,8 @@\n       }\r\n     };\r\n   }, [socket, roomId]);\r\n \r\n-  // 🔁 Control functions passed into ChatBox\r\n   const handleStart = () => {\r\n     if (!sessionStarted) {\r\n       setLoading(true);\r\n       setSessionStarted(true);\r\n@@ -90,8 +90,43 @@\n     handleStart();\r\n     console.log(\"⏭️ Skipped to new partner\");\r\n   };\r\n \r\n+  const renderControlButton = () => {\r\n+    const baseClasses = \"flex items-center gap-2 px-4 py-2 rounded-lg shadow font-medium transition\";\r\n+    if (!sessionStarted) {\r\n+      return (\r\n+        <button\r\n+          onClick={handleStart}\r\n+          className={`${baseClasses} bg-green-600 hover:bg-green-700 text-white`}\r\n+        >\r\n+          <Users className=\"w-5 h-5\" />\r\n+          Start\r\n+        </button>\r\n+      );\r\n+    } else if (loading) {\r\n+      return (\r\n+        <button\r\n+          onClick={handleStop}\r\n+          className={`${baseClasses} bg-red-600 hover:bg-red-700 text-white`}\r\n+        >\r\n+          <CircleStop className=\"w-5 h-5\" />\r\n+          Stop\r\n+        </button>\r\n+      );\r\n+    } else {\r\n+      return (\r\n+        <button\r\n+          onClick={handleSkip}\r\n+          className={`${baseClasses} bg-yellow-500 hover:bg-yellow-600 text-white`}\r\n+        >\r\n+          <RefreshCcw className=\"w-5 h-5\" />\r\n+          Skip\r\n+        </button>\r\n+      );\r\n+    }\r\n+  };\r\n+\r\n   return (\r\n     <div className=\"grid md:grid-cols-3 h-screen bg-neutral-100 dark:bg-neutral-900\">\r\n       {/* Video Section */}\r\n       <div className=\"md:col-span-2 relative flex items-center justify-center bg-black\">\r\n@@ -116,23 +151,18 @@\n       {/* Chat + Controls */}\r\n       <div className=\"flex flex-col border-l border-neutral-300 dark:border-neutral-700\">\r\n         <div className=\"flex-grow overflow-y-auto\">\r\n           {roomId ? (\r\n-            <ChatBox\r\n-              socket={socket}\r\n-              roomId={roomId}\r\n-              onStart={handleStart}\r\n-              onStop={handleStop}\r\n-              onSkip={handleSkip}\r\n-              sessionStarted={sessionStarted}\r\n-              loading={loading}\r\n-            />\r\n+            <ChatBox socket={socket} roomId={roomId} />\r\n           ) : (\r\n             <div className=\"flex items-center justify-center h-full text-neutral-400 text-sm px-4\">\r\n               You’ll be able to chat once you’re matched.\r\n             </div>\r\n           )}\r\n         </div>\r\n+        <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 bg-white dark:bg-neutral-800 flex justify-end\">\r\n+          {renderControlButton()}\r\n+        </div>\r\n       </div>\r\n     </div>\r\n   );\r\n }\r\n"
                }
            ],
            "date": 1752230193627,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport useWebRTC from \"../hooks/useWebRTC\";\r\nimport useSocket from \"../hooks/useSocket\";\r\nimport LocalVideo from \"../../../components/video/LocalVideo\";\r\nimport RemoteVideo from \"../../../components/video/RemoteVideo\";\r\nimport ChatBox from \"../../../components/chat/ChatBox\";\r\nimport FindingPartner from \"./FindingPartner\";\r\n\r\nexport default function AnonymousChatRoom() {\r\n  const { localStream, remoteStream, isConnected } = useWebRTC();\r\n  const { socket } = useSocket();\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (isConnected) {\r\n      setLoading(false);\r\n    }\r\n  }, [isConnected]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col md:flex-row h-screen\">\r\n      <div className=\"flex-1 bg-black flex items-center justify-center\">\r\n        {loading ? (\r\n          <FindingPartner />\r\n        ) : (\r\n          <>\r\n            <LocalVideo stream={localStream} />\r\n            <RemoteVideo stream={remoteStream} />\r\n          </>\r\n        )}\r\n      </div>\r\n      <div className=\"md:w-1/3 bg-neutral-100 dark:bg-neutral-800 border-l border-neutral-300 dark:border-neutral-700 flex flex-col\">\r\n        <ChatBox socket={socket} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}