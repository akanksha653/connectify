{
    "sourceFile": "server/signaling.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1752233201298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752239482766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,55 +1,64 @@\n // server/signaling.js\r\n \r\n+const express = require(\"express\");\r\n+const http = require(\"http\");\r\n const { Server } = require(\"socket.io\");\r\n \r\n-const PORT = process.env.PORT || 3001;\r\n+const app = express();\r\n+const server = http.createServer(app);\r\n \r\n-const io = new Server(PORT, {\r\n+const io = new Server(server, {\r\n   cors: {\r\n     origin: \"*\", // ⚠️ Replace with your frontend URL in production for security\r\n     methods: [\"GET\", \"POST\"],\r\n   },\r\n });\r\n \r\n+/**\r\n+ * Test route to confirm server is reachable\r\n+ */\r\n+app.get(\"/\", (req, res) => {\r\n+  res.send(\"🚀 Signaling server is running and reachable!\");\r\n+});\r\n+\r\n+/**\r\n+ * Socket.io signaling logic\r\n+ */\r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  /**\r\n-   * User joins a room\r\n-   */\r\n+  // User joins a room\r\n   socket.on(\"join-room\", (roomId) => {\r\n     socket.join(roomId);\r\n     console.log(`📥 User ${socket.id} joined room ${roomId}`);\r\n     socket.to(roomId).emit(\"user-joined\", socket.id);\r\n   });\r\n \r\n-  /**\r\n-   * Handle offer\r\n-   */\r\n+  // Handle offer\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n     socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n \r\n-  /**\r\n-   * Handle answer\r\n-   */\r\n+  // Handle answer\r\n   socket.on(\"answer\", ({ answer, roomId }) => {\r\n     socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n   });\r\n \r\n-  /**\r\n-   * Handle ICE candidates\r\n-   */\r\n+  // Handle ICE candidates\r\n   socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n     socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n-  /**\r\n-   * Handle disconnect\r\n-   */\r\n+  // Handle disconnect\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n   });\r\n });\r\n \r\n-console.log(`🚀 Signaling server is running on port ${PORT}`);\r\n+/**\r\n+ * Start server on Railway provided port or default to 3001\r\n+ */\r\n+const PORT = process.env.PORT || 3001;\r\n+server.listen(PORT, () => {\r\n+  console.log(`🚀 Signaling server is running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1752240930312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"*\", // ⚠️ Replace with your frontend URL in production for security\r\n+    origin: \"https://my-omegle-clone.vercel.app\", // ⚠️ Replace with your frontend URL in production for security\r\n     methods: [\"GET\", \"POST\"],\r\n   },\r\n });\r\n \r\n"
                },
                {
                    "date": 1752241570584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,57 +8,46 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://my-omegle-clone.vercel.app\", // ⚠️ Replace with your frontend URL in production for security\r\n+    origin: \"https://my-omegle-clone.vercel.app\", // ✅ Replace with frontend URL\r\n     methods: [\"GET\", \"POST\"],\r\n   },\r\n });\r\n \r\n-/**\r\n- * Test route to confirm server is reachable\r\n- */\r\n+// ✅ Test route for health check\r\n app.get(\"/\", (req, res) => {\r\n   res.send(\"🚀 Signaling server is running and reachable!\");\r\n });\r\n \r\n-/**\r\n- * Socket.io signaling logic\r\n- */\r\n+// ✅ Socket.io signaling logic\r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  // User joins a room\r\n   socket.on(\"join-room\", (roomId) => {\r\n     socket.join(roomId);\r\n     console.log(`📥 User ${socket.id} joined room ${roomId}`);\r\n     socket.to(roomId).emit(\"user-joined\", socket.id);\r\n   });\r\n \r\n-  // Handle offer\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n     socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n \r\n-  // Handle answer\r\n   socket.on(\"answer\", ({ answer, roomId }) => {\r\n     socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n   });\r\n \r\n-  // Handle ICE candidates\r\n   socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n     socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n-  // Handle disconnect\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n   });\r\n });\r\n \r\n-/**\r\n- * Start server on Railway provided port or default to 3001\r\n- */\r\n+// ✅ Start server\r\n const PORT = process.env.PORT || 3001;\r\n server.listen(PORT, () => {\r\n   console.log(`🚀 Signaling server is running on port ${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1752256607809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,28 +2,51 @@\n \r\n const express = require(\"express\");\r\n const http = require(\"http\");\r\n const { Server } = require(\"socket.io\");\r\n+const { v4: uuidv4 } = require(\"uuid\");\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://my-omegle-clone.vercel.app\", // ✅ Replace with frontend URL\r\n+    origin: \"https://my-omegle-clone.vercel.app\", // ✅ Replace with your frontend URL\r\n     methods: [\"GET\", \"POST\"],\r\n   },\r\n });\r\n \r\n-// ✅ Test route for health check\r\n app.get(\"/\", (req, res) => {\r\n   res.send(\"🚀 Signaling server is running and reachable!\");\r\n });\r\n \r\n-// ✅ Socket.io signaling logic\r\n+let waitingUser = null; // Queue for matchmaking\r\n+\r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n+  // Matchmaking logic\r\n+  if (waitingUser) {\r\n+    const roomId = uuidv4();\r\n+\r\n+    // Join both users into the same room\r\n+    socket.join(roomId);\r\n+    waitingUser.join(roomId);\r\n+\r\n+    console.log(`🔗 Matched ${waitingUser.id} & ${socket.id} in room ${roomId}`);\r\n+\r\n+    // Notify both users of match\r\n+    waitingUser.emit(\"matched\", { roomId, partnerId: socket.id });\r\n+    socket.emit(\"matched\", { roomId, partnerId: waitingUser.id });\r\n+\r\n+    // Clear waiting user\r\n+    waitingUser = null;\r\n+  } else {\r\n+    console.log(`⏳ No match yet. User ${socket.id} is waiting.`);\r\n+    waitingUser = socket;\r\n+  }\r\n+\r\n+  // Listen for WebRTC and chat events\r\n   socket.on(\"join-room\", (roomId) => {\r\n     socket.join(roomId);\r\n     console.log(`📥 User ${socket.id} joined room ${roomId}`);\r\n     socket.to(roomId).emit(\"user-joined\", socket.id);\r\n@@ -40,14 +63,23 @@\n   socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n     socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n+  socket.on(\"send-message\", ({ roomId, message }) => {\r\n+    console.log(`💬 Message from ${socket.id} to room ${roomId}: ${message}`);\r\n+    socket.to(roomId).emit(\"receive-message\", { message, sender: \"partner\" });\r\n+  });\r\n+\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n+\r\n+    // Remove from waiting if they disconnect\r\n+    if (waitingUser && waitingUser.id === socket.id) {\r\n+      waitingUser = null;\r\n+    }\r\n   });\r\n });\r\n \r\n-// ✅ Start server\r\n const PORT = process.env.PORT || 3001;\r\n server.listen(PORT, () => {\r\n-  console.log(`🚀 Signaling server is running on port ${PORT}`);\r\n+  console.log(`🚀 Signaling server running on port ${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1752256966292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-// server/signaling.js\r\n-\r\n const express = require(\"express\");\r\n const http = require(\"http\");\r\n const { Server } = require(\"socket.io\");\r\n const { v4: uuidv4 } = require(\"uuid\");\r\n@@ -14,45 +12,63 @@\n     methods: [\"GET\", \"POST\"],\r\n   },\r\n });\r\n \r\n+// ✅ Health check endpoint\r\n app.get(\"/\", (req, res) => {\r\n   res.send(\"🚀 Signaling server is running and reachable!\");\r\n });\r\n \r\n-let waitingUser = null; // Queue for matchmaking\r\n+// 🔗 Matchmaking queue\r\n+let waitingUser = null;\r\n \r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  // Matchmaking logic\r\n-  if (waitingUser) {\r\n+  /**\r\n+   * 🔗 Matchmaking logic\r\n+   * If there is a waiting user, create a room and match them\r\n+   * Otherwise, set this user as waiting\r\n+   */\r\n+  if (waitingUser && waitingUser.connected) {\r\n     const roomId = uuidv4();\r\n \r\n-    // Join both users into the same room\r\n     socket.join(roomId);\r\n     waitingUser.join(roomId);\r\n \r\n     console.log(`🔗 Matched ${waitingUser.id} & ${socket.id} in room ${roomId}`);\r\n \r\n-    // Notify both users of match\r\n+    // Notify both users\r\n     waitingUser.emit(\"matched\", { roomId, partnerId: socket.id });\r\n     socket.emit(\"matched\", { roomId, partnerId: waitingUser.id });\r\n \r\n-    // Clear waiting user\r\n-    waitingUser = null;\r\n+    waitingUser = null; // Clear waiting user\r\n   } else {\r\n     console.log(`⏳ No match yet. User ${socket.id} is waiting.`);\r\n     waitingUser = socket;\r\n   }\r\n \r\n-  // Listen for WebRTC and chat events\r\n+  /**\r\n+   * 🏠 Join room explicitly if needed\r\n+   */\r\n   socket.on(\"join-room\", (roomId) => {\r\n     socket.join(roomId);\r\n     console.log(`📥 User ${socket.id} joined room ${roomId}`);\r\n     socket.to(roomId).emit(\"user-joined\", socket.id);\r\n   });\r\n \r\n+  /**\r\n+   * ❌ Leave room gracefully\r\n+   */\r\n+  socket.on(\"leave-room\", (roomId) => {\r\n+    socket.leave(roomId);\r\n+    console.log(`👋 User ${socket.id} left room ${roomId}`);\r\n+    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+  });\r\n+\r\n+  /**\r\n+   * 📞 WebRTC signaling events\r\n+   */\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n     socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n \r\n@@ -63,23 +79,35 @@\n   socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n     socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n+  /**\r\n+   * 💬 Chat messaging\r\n+   */\r\n   socket.on(\"send-message\", ({ roomId, message }) => {\r\n     console.log(`💬 Message from ${socket.id} to room ${roomId}: ${message}`);\r\n     socket.to(roomId).emit(\"receive-message\", { message, sender: \"partner\" });\r\n   });\r\n \r\n+  /**\r\n+   * 🔌 Disconnect handler\r\n+   */\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n \r\n-    // Remove from waiting if they disconnect\r\n+    // Remove from waiting queue if disconnected\r\n     if (waitingUser && waitingUser.id === socket.id) {\r\n       waitingUser = null;\r\n     }\r\n+\r\n+    // Optional: broadcast to room that partner disconnected\r\n+    socket.rooms.forEach((roomId) => {\r\n+      socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+    });\r\n   });\r\n });\r\n \r\n+// ✅ Start server\r\n const PORT = process.env.PORT || 3001;\r\n server.listen(PORT, () => {\r\n   console.log(`🚀 Signaling server running on port ${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1752258088636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,14 +31,15 @@\n    */\r\n   if (waitingUser && waitingUser.connected) {\r\n     const roomId = uuidv4();\r\n \r\n+    // Server assigns room ID and joins both users\r\n     socket.join(roomId);\r\n     waitingUser.join(roomId);\r\n \r\n     console.log(`🔗 Matched ${waitingUser.id} & ${socket.id} in room ${roomId}`);\r\n \r\n-    // Notify both users\r\n+    // Notify both users of match and assigned roomId\r\n     waitingUser.emit(\"matched\", { roomId, partnerId: socket.id });\r\n     socket.emit(\"matched\", { roomId, partnerId: waitingUser.id });\r\n \r\n     waitingUser = null; // Clear waiting user\r\n@@ -47,17 +48,8 @@\n     waitingUser = socket;\r\n   }\r\n \r\n   /**\r\n-   * 🏠 Join room explicitly if needed\r\n-   */\r\n-  socket.on(\"join-room\", (roomId) => {\r\n-    socket.join(roomId);\r\n-    console.log(`📥 User ${socket.id} joined room ${roomId}`);\r\n-    socket.to(roomId).emit(\"user-joined\", socket.id);\r\n-  });\r\n-\r\n-  /**\r\n    * ❌ Leave room gracefully\r\n    */\r\n   socket.on(\"leave-room\", (roomId) => {\r\n     socket.leave(roomId);\r\n@@ -98,11 +90,13 @@\n     if (waitingUser && waitingUser.id === socket.id) {\r\n       waitingUser = null;\r\n     }\r\n \r\n-    // Optional: broadcast to room that partner disconnected\r\n+    // Notify partners in all rooms this socket was in\r\n     socket.rooms.forEach((roomId) => {\r\n-      socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+      if (roomId !== socket.id) {\r\n+        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+      }\r\n     });\r\n   });\r\n });\r\n \r\n"
                },
                {
                    "date": 1752260498775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,10 +25,8 @@\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n   /**\r\n    * 🔗 Matchmaking logic\r\n-   * If there is a waiting user, create a room and match them\r\n-   * Otherwise, set this user as waiting\r\n    */\r\n   if (waitingUser && waitingUser.connected) {\r\n     const roomId = uuidv4();\r\n \r\n@@ -37,12 +35,21 @@\n     waitingUser.join(roomId);\r\n \r\n     console.log(`🔗 Matched ${waitingUser.id} & ${socket.id} in room ${roomId}`);\r\n \r\n-    // Notify both users of match and assigned roomId\r\n-    waitingUser.emit(\"matched\", { roomId, partnerId: socket.id });\r\n-    socket.emit(\"matched\", { roomId, partnerId: waitingUser.id });\r\n+    // Notify both users of match, assigned roomId, and isOfferer boolean\r\n+    waitingUser.emit(\"matched\", {\r\n+      roomId,\r\n+      partnerId: socket.id,\r\n+      isOfferer: true, // ✅ waitingUser becomes offerer\r\n+    });\r\n \r\n+    socket.emit(\"matched\", {\r\n+      roomId,\r\n+      partnerId: waitingUser.id,\r\n+      isOfferer: false, // ✅ new user is answerer\r\n+    });\r\n+\r\n     waitingUser = null; // Clear waiting user\r\n   } else {\r\n     console.log(`⏳ No match yet. User ${socket.id} is waiting.`);\r\n     waitingUser = socket;\r\n"
                },
                {
                    "date": 1752262281675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+// signaling.js\r\n+\r\n const express = require(\"express\");\r\n const http = require(\"http\");\r\n const { Server } = require(\"socket.io\");\r\n const { v4: uuidv4 } = require(\"uuid\");\r\n@@ -17,57 +19,51 @@\n app.get(\"/\", (req, res) => {\r\n   res.send(\"🚀 Signaling server is running and reachable!\");\r\n });\r\n \r\n-// 🔗 Matchmaking queue\r\n+// 🔗 Matchmaking queue (only one user waiting at a time)\r\n let waitingUser = null;\r\n \r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  /**\r\n-   * 🔗 Matchmaking logic\r\n-   */\r\n+  // 🔗 Matchmaking logic\r\n   if (waitingUser && waitingUser.connected) {\r\n     const roomId = uuidv4();\r\n \r\n-    // Server assigns room ID and joins both users\r\n+    // ✅ Server assigns room ID and joins both users\r\n     socket.join(roomId);\r\n     waitingUser.join(roomId);\r\n \r\n     console.log(`🔗 Matched ${waitingUser.id} & ${socket.id} in room ${roomId}`);\r\n \r\n-    // Notify both users of match, assigned roomId, and isOfferer boolean\r\n+    // ✅ Notify both users of match, assigned roomId, and their offerer role\r\n     waitingUser.emit(\"matched\", {\r\n       roomId,\r\n       partnerId: socket.id,\r\n-      isOfferer: true, // ✅ waitingUser becomes offerer\r\n+      isOfferer: true, // waitingUser is the offerer\r\n     });\r\n \r\n     socket.emit(\"matched\", {\r\n       roomId,\r\n       partnerId: waitingUser.id,\r\n-      isOfferer: false, // ✅ new user is answerer\r\n+      isOfferer: false, // new user is the answerer\r\n     });\r\n \r\n     waitingUser = null; // Clear waiting user\r\n   } else {\r\n     console.log(`⏳ No match yet. User ${socket.id} is waiting.`);\r\n     waitingUser = socket;\r\n   }\r\n \r\n-  /**\r\n-   * ❌ Leave room gracefully\r\n-   */\r\n+  // ❌ Leave room gracefully\r\n   socket.on(\"leave-room\", (roomId) => {\r\n     socket.leave(roomId);\r\n     console.log(`👋 User ${socket.id} left room ${roomId}`);\r\n     socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n   });\r\n \r\n-  /**\r\n-   * 📞 WebRTC signaling events\r\n-   */\r\n+  // 📞 WebRTC signaling events\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n     socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n \r\n@@ -78,19 +74,15 @@\n   socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n     socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n-  /**\r\n-   * 💬 Chat messaging\r\n-   */\r\n+  // 💬 Chat messaging\r\n   socket.on(\"send-message\", ({ roomId, message }) => {\r\n     console.log(`💬 Message from ${socket.id} to room ${roomId}: ${message}`);\r\n     socket.to(roomId).emit(\"receive-message\", { message, sender: \"partner\" });\r\n   });\r\n \r\n-  /**\r\n-   * 🔌 Disconnect handler\r\n-   */\r\n+  // 🔌 Disconnect handler\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n \r\n     // Remove from waiting queue if disconnected\r\n"
                },
                {
                    "date": 1752298774294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// signaling.js\r\n+// server/signaling.js\r\n \r\n const express = require(\"express\");\r\n const http = require(\"http\");\r\n const { Server } = require(\"socket.io\");\r\n@@ -19,60 +19,64 @@\n app.get(\"/\", (req, res) => {\r\n   res.send(\"🚀 Signaling server is running and reachable!\");\r\n });\r\n \r\n-// 🔗 Matchmaking queue (only one user waiting at a time)\r\n-let waitingUser = null;\r\n+let waitingUser = null; // 🔗 Matchmaking queue\r\n \r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  // 🔗 Matchmaking logic\r\n   if (waitingUser && waitingUser.connected) {\r\n     const roomId = uuidv4();\r\n \r\n-    // ✅ Server assigns room ID and joins both users\r\n     socket.join(roomId);\r\n     waitingUser.join(roomId);\r\n \r\n     console.log(`🔗 Matched ${waitingUser.id} & ${socket.id} in room ${roomId}`);\r\n \r\n-    // ✅ Notify both users of match, assigned roomId, and their offerer role\r\n     waitingUser.emit(\"matched\", {\r\n       roomId,\r\n       partnerId: socket.id,\r\n-      isOfferer: true, // waitingUser is the offerer\r\n+      isOfferer: true,\r\n     });\r\n \r\n     socket.emit(\"matched\", {\r\n       roomId,\r\n       partnerId: waitingUser.id,\r\n-      isOfferer: false, // new user is the answerer\r\n+      isOfferer: false,\r\n     });\r\n \r\n-    waitingUser = null; // Clear waiting user\r\n+    waitingUser = null;\r\n   } else {\r\n     console.log(`⏳ No match yet. User ${socket.id} is waiting.`);\r\n     waitingUser = socket;\r\n   }\r\n \r\n-  // ❌ Leave room gracefully\r\n+  socket.on(\"join-room\", (roomId) => {\r\n+    socket.join(roomId);\r\n+    console.log(`✅ User ${socket.id} joined room ${roomId}`);\r\n+    socket.emit(\"joined-room\", roomId);\r\n+  });\r\n+\r\n   socket.on(\"leave-room\", (roomId) => {\r\n     socket.leave(roomId);\r\n     console.log(`👋 User ${socket.id} left room ${roomId}`);\r\n     socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n   });\r\n \r\n   // 📞 WebRTC signaling events\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n+    console.log(`📤 Offer from ${socket.id} to room ${roomId}`);\r\n     socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n \r\n   socket.on(\"answer\", ({ answer, roomId }) => {\r\n+    console.log(`📤 Answer from ${socket.id} to room ${roomId}`);\r\n     socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n   });\r\n \r\n   socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n+    console.log(`📤 ICE candidate from ${socket.id} to room ${roomId}`);\r\n     socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n   // 💬 Chat messaging\r\n@@ -80,27 +84,22 @@\n     console.log(`💬 Message from ${socket.id} to room ${roomId}: ${message}`);\r\n     socket.to(roomId).emit(\"receive-message\", { message, sender: \"partner\" });\r\n   });\r\n \r\n-  // 🔌 Disconnect handler\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n-\r\n-    // Remove from waiting queue if disconnected\r\n     if (waitingUser && waitingUser.id === socket.id) {\r\n       waitingUser = null;\r\n     }\r\n \r\n-    // Notify partners in all rooms this socket was in\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n     });\r\n   });\r\n });\r\n \r\n-// ✅ Start server\r\n const PORT = process.env.PORT || 3001;\r\n server.listen(PORT, () => {\r\n   console.log(`🚀 Signaling server running on port ${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1752311389754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,34 +24,39 @@\n \r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  if (waitingUser && waitingUser.connected) {\r\n-    const roomId = uuidv4();\r\n+  // ✅ Handle user starting to look for partner\r\n+  socket.on(\"start-looking\", () => {\r\n+    console.log(`🔎 User ${socket.id} started looking for a partner`);\r\n \r\n-    socket.join(roomId);\r\n-    waitingUser.join(roomId);\r\n+    if (waitingUser && waitingUser.connected) {\r\n+      const roomId = uuidv4();\r\n \r\n-    console.log(`🔗 Matched ${waitingUser.id} & ${socket.id} in room ${roomId}`);\r\n+      socket.join(roomId);\r\n+      waitingUser.join(roomId);\r\n \r\n-    waitingUser.emit(\"matched\", {\r\n-      roomId,\r\n-      partnerId: socket.id,\r\n-      isOfferer: true,\r\n-    });\r\n+      console.log(`🤝 Matched ${waitingUser.id} & ${socket.id} in room ${roomId}`);\r\n \r\n-    socket.emit(\"matched\", {\r\n-      roomId,\r\n-      partnerId: waitingUser.id,\r\n-      isOfferer: false,\r\n-    });\r\n+      waitingUser.emit(\"matched\", {\r\n+        roomId,\r\n+        partnerId: socket.id,\r\n+        isOfferer: true,\r\n+      });\r\n \r\n-    waitingUser = null;\r\n-  } else {\r\n-    console.log(`⏳ No match yet. User ${socket.id} is waiting.`);\r\n-    waitingUser = socket;\r\n-  }\r\n+      socket.emit(\"matched\", {\r\n+        roomId,\r\n+        partnerId: waitingUser.id,\r\n+        isOfferer: false,\r\n+      });\r\n \r\n+      waitingUser = null;\r\n+    } else {\r\n+      console.log(`⏳ No match yet. User ${socket.id} is waiting.`);\r\n+      waitingUser = socket;\r\n+    }\r\n+  });\r\n+\r\n   socket.on(\"join-room\", (roomId) => {\r\n     socket.join(roomId);\r\n     console.log(`✅ User ${socket.id} joined room ${roomId}`);\r\n     socket.emit(\"joined-room\", roomId);\r\n@@ -59,11 +64,38 @@\n \r\n   socket.on(\"leave-room\", (roomId) => {\r\n     socket.leave(roomId);\r\n     console.log(`👋 User ${socket.id} left room ${roomId}`);\r\n+\r\n     socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+\r\n+    if (waitingUser && waitingUser.id === socket.id) {\r\n+      console.log(`🗑️ Removing ${socket.id} from waiting queue`);\r\n+      waitingUser = null;\r\n+    }\r\n   });\r\n \r\n+  // ✅ Skip functionality (leave current room and re-queue)\r\n+  socket.on(\"skip\", () => {\r\n+    console.log(`⏭️ User ${socket.id} skipped current partner`);\r\n+\r\n+    // Remove from current room\r\n+    socket.rooms.forEach((roomId) => {\r\n+      if (roomId !== socket.id) {\r\n+        socket.leave(roomId);\r\n+        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+      }\r\n+    });\r\n+\r\n+    // Remove from waiting queue if present\r\n+    if (waitingUser && waitingUser.id === socket.id) {\r\n+      waitingUser = null;\r\n+    }\r\n+\r\n+    // Re-add to queue by emitting start-looking\r\n+    socket.emit(\"start-looking\");\r\n+  });\r\n+\r\n   // 📞 WebRTC signaling events\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n     console.log(`📤 Offer from ${socket.id} to room ${roomId}`);\r\n     socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n@@ -86,9 +118,11 @@\n   });\r\n \r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n+\r\n     if (waitingUser && waitingUser.id === socket.id) {\r\n+      console.log(`🗑️ Removing ${socket.id} from waiting queue`);\r\n       waitingUser = null;\r\n     }\r\n \r\n     socket.rooms.forEach((roomId) => {\r\n"
                },
                {
                    "date": 1752321371855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-// server/signaling.js\r\n-\r\n const express = require(\"express\");\r\n const http = require(\"http\");\r\n const { Server } = require(\"socket.io\");\r\n const { v4: uuidv4 } = require(\"uuid\");\r\n@@ -9,35 +7,29 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://my-omegle-clone.vercel.app\", // ✅ Replace with your frontend URL\r\n-    methods: [\"GET\", \"POST\"],\r\n+    origin: \"https://my-omegle-clone.vercel.app\", // ✅ Update to your deployed frontend\r\n+    methods: [\"GET\", \"POST\"]\r\n   },\r\n });\r\n \r\n-// ✅ Health check endpoint\r\n app.get(\"/\", (req, res) => {\r\n-  res.send(\"🚀 Signaling server is running and reachable!\");\r\n+  res.send(\"🚀 Signaling server is running!\");\r\n });\r\n \r\n-let waitingUser = null; // 🔗 Matchmaking queue\r\n+let waitingUser = null;\r\n \r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  // ✅ Handle user starting to look for partner\r\n   socket.on(\"start-looking\", () => {\r\n-    console.log(`🔎 User ${socket.id} started looking for a partner`);\r\n-\r\n     if (waitingUser && waitingUser.connected) {\r\n       const roomId = uuidv4();\r\n \r\n       socket.join(roomId);\r\n       waitingUser.join(roomId);\r\n \r\n-      console.log(`🤝 Matched ${waitingUser.id} & ${socket.id} in room ${roomId}`);\r\n-\r\n       waitingUser.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: socket.id,\r\n         isOfferer: true,\r\n@@ -50,79 +42,98 @@\n       });\r\n \r\n       waitingUser = null;\r\n     } else {\r\n-      console.log(`⏳ No match yet. User ${socket.id} is waiting.`);\r\n       waitingUser = socket;\r\n     }\r\n   });\r\n \r\n   socket.on(\"join-room\", (roomId) => {\r\n     socket.join(roomId);\r\n-    console.log(`✅ User ${socket.id} joined room ${roomId}`);\r\n     socket.emit(\"joined-room\", roomId);\r\n   });\r\n \r\n   socket.on(\"leave-room\", (roomId) => {\r\n     socket.leave(roomId);\r\n-    console.log(`👋 User ${socket.id} left room ${roomId}`);\r\n-\r\n     socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n \r\n     if (waitingUser && waitingUser.id === socket.id) {\r\n-      console.log(`🗑️ Removing ${socket.id} from waiting queue`);\r\n       waitingUser = null;\r\n     }\r\n   });\r\n \r\n-  // ✅ Skip functionality (leave current room and re-queue)\r\n+  // Skip and requeue\r\n   socket.on(\"skip\", () => {\r\n-    console.log(`⏭️ User ${socket.id} skipped current partner`);\r\n-\r\n-    // Remove from current room\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.leave(roomId);\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n     });\r\n \r\n-    // Remove from waiting queue if present\r\n     if (waitingUser && waitingUser.id === socket.id) {\r\n       waitingUser = null;\r\n     }\r\n \r\n-    // Re-add to queue by emitting start-looking\r\n     socket.emit(\"start-looking\");\r\n   });\r\n \r\n-  // 📞 WebRTC signaling events\r\n+  // --- WebRTC signaling ---\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n-    console.log(`📤 Offer from ${socket.id} to room ${roomId}`);\r\n     socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n \r\n   socket.on(\"answer\", ({ answer, roomId }) => {\r\n-    console.log(`📤 Answer from ${socket.id} to room ${roomId}`);\r\n     socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n   });\r\n \r\n   socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n-    console.log(`📤 ICE candidate from ${socket.id} to room ${roomId}`);\r\n     socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n-  // 💬 Chat messaging\r\n-  socket.on(\"send-message\", ({ roomId, message }) => {\r\n-    console.log(`💬 Message from ${socket.id} to room ${roomId}: ${message}`);\r\n-    socket.to(roomId).emit(\"receive-message\", { message, sender: \"partner\" });\r\n+  // --- Chat Features ---\r\n+\r\n+  // Chat message\r\n+  socket.on(\"send-message\", (msg) => {\r\n+    const { roomId } = msg;\r\n+    console.log(`💬 New message in ${roomId}:`, msg);\r\n+    socket.to(roomId).emit(\"receive-message\", msg);\r\n   });\r\n \r\n+  // Typing indicator\r\n+  socket.on(\"typing\", ({ roomId, sender }) => {\r\n+    socket.to(roomId).emit(\"typing\", { sender });\r\n+  });\r\n+\r\n+  // Seen/Delivered\r\n+  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n+    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n+  });\r\n+\r\n+  // Edit\r\n+  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n+    socket.to(roomId).emit(\"receive-message\", {\r\n+      id: messageId,\r\n+      content,\r\n+      type: \"text\",\r\n+      edited: true\r\n+    });\r\n+  });\r\n+\r\n+  // Delete\r\n+  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n+    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n+  });\r\n+\r\n+  // React\r\n+  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n+    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n+  });\r\n+\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n \r\n     if (waitingUser && waitingUser.id === socket.id) {\r\n-      console.log(`🗑️ Removing ${socket.id} from waiting queue`);\r\n       waitingUser = null;\r\n     }\r\n \r\n     socket.rooms.forEach((roomId) => {\r\n"
                }
            ],
            "date": 1752233201298,
            "name": "Commit-0",
            "content": "// server/signaling.js\r\n\r\nconst { Server } = require(\"socket.io\");\r\n\r\nconst PORT = process.env.PORT || 3001;\r\n\r\nconst io = new Server(PORT, {\r\n  cors: {\r\n    origin: \"*\", // ⚠️ Replace with your frontend URL in production for security\r\n    methods: [\"GET\", \"POST\"],\r\n  },\r\n});\r\n\r\nio.on(\"connection\", (socket) => {\r\n  console.log(\"✅ User connected:\", socket.id);\r\n\r\n  /**\r\n   * User joins a room\r\n   */\r\n  socket.on(\"join-room\", (roomId) => {\r\n    socket.join(roomId);\r\n    console.log(`📥 User ${socket.id} joined room ${roomId}`);\r\n    socket.to(roomId).emit(\"user-joined\", socket.id);\r\n  });\r\n\r\n  /**\r\n   * Handle offer\r\n   */\r\n  socket.on(\"offer\", ({ offer, roomId }) => {\r\n    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n  });\r\n\r\n  /**\r\n   * Handle answer\r\n   */\r\n  socket.on(\"answer\", ({ answer, roomId }) => {\r\n    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n  });\r\n\r\n  /**\r\n   * Handle ICE candidates\r\n   */\r\n  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n  });\r\n\r\n  /**\r\n   * Handle disconnect\r\n   */\r\n  socket.on(\"disconnect\", () => {\r\n    console.log(\"❌ User disconnected:\", socket.id);\r\n  });\r\n});\r\n\r\nconsole.log(`🚀 Signaling server is running on port ${PORT}`);\r\n"
        }
    ]
}