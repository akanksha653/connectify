{
    "sourceFile": "server/signaling.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 45,
            "patches": [
                {
                    "date": 1752233201298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752239482766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,55 +1,64 @@\n // server/signaling.js\r\n \r\n+const express = require(\"express\");\r\n+const http = require(\"http\");\r\n const { Server } = require(\"socket.io\");\r\n \r\n-const PORT = process.env.PORT || 3001;\r\n+const app = express();\r\n+const server = http.createServer(app);\r\n \r\n-const io = new Server(PORT, {\r\n+const io = new Server(server, {\r\n   cors: {\r\n     origin: \"*\", // ⚠️ Replace with your frontend URL in production for security\r\n     methods: [\"GET\", \"POST\"],\r\n   },\r\n });\r\n \r\n+/**\r\n+ * Test route to confirm server is reachable\r\n+ */\r\n+app.get(\"/\", (req, res) => {\r\n+  res.send(\"🚀 Signaling server is running and reachable!\");\r\n+});\r\n+\r\n+/**\r\n+ * Socket.io signaling logic\r\n+ */\r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  /**\r\n-   * User joins a room\r\n-   */\r\n+  // User joins a room\r\n   socket.on(\"join-room\", (roomId) => {\r\n     socket.join(roomId);\r\n     console.log(`📥 User ${socket.id} joined room ${roomId}`);\r\n     socket.to(roomId).emit(\"user-joined\", socket.id);\r\n   });\r\n \r\n-  /**\r\n-   * Handle offer\r\n-   */\r\n+  // Handle offer\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n     socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n \r\n-  /**\r\n-   * Handle answer\r\n-   */\r\n+  // Handle answer\r\n   socket.on(\"answer\", ({ answer, roomId }) => {\r\n     socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n   });\r\n \r\n-  /**\r\n-   * Handle ICE candidates\r\n-   */\r\n+  // Handle ICE candidates\r\n   socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n     socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n-  /**\r\n-   * Handle disconnect\r\n-   */\r\n+  // Handle disconnect\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n   });\r\n });\r\n \r\n-console.log(`🚀 Signaling server is running on port ${PORT}`);\r\n+/**\r\n+ * Start server on Railway provided port or default to 3001\r\n+ */\r\n+const PORT = process.env.PORT || 3001;\r\n+server.listen(PORT, () => {\r\n+  console.log(`🚀 Signaling server is running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1752240930312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"*\", // ⚠️ Replace with your frontend URL in production for security\r\n+    origin: \"https://my-omegle-clone.vercel.app\", // ⚠️ Replace with your frontend URL in production for security\r\n     methods: [\"GET\", \"POST\"],\r\n   },\r\n });\r\n \r\n"
                },
                {
                    "date": 1752241570584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,57 +8,46 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://my-omegle-clone.vercel.app\", // ⚠️ Replace with your frontend URL in production for security\r\n+    origin: \"https://my-omegle-clone.vercel.app\", // ✅ Replace with frontend URL\r\n     methods: [\"GET\", \"POST\"],\r\n   },\r\n });\r\n \r\n-/**\r\n- * Test route to confirm server is reachable\r\n- */\r\n+// ✅ Test route for health check\r\n app.get(\"/\", (req, res) => {\r\n   res.send(\"🚀 Signaling server is running and reachable!\");\r\n });\r\n \r\n-/**\r\n- * Socket.io signaling logic\r\n- */\r\n+// ✅ Socket.io signaling logic\r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  // User joins a room\r\n   socket.on(\"join-room\", (roomId) => {\r\n     socket.join(roomId);\r\n     console.log(`📥 User ${socket.id} joined room ${roomId}`);\r\n     socket.to(roomId).emit(\"user-joined\", socket.id);\r\n   });\r\n \r\n-  // Handle offer\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n     socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n \r\n-  // Handle answer\r\n   socket.on(\"answer\", ({ answer, roomId }) => {\r\n     socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n   });\r\n \r\n-  // Handle ICE candidates\r\n   socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n     socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n-  // Handle disconnect\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n   });\r\n });\r\n \r\n-/**\r\n- * Start server on Railway provided port or default to 3001\r\n- */\r\n+// ✅ Start server\r\n const PORT = process.env.PORT || 3001;\r\n server.listen(PORT, () => {\r\n   console.log(`🚀 Signaling server is running on port ${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1752256607809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,28 +2,51 @@\n \r\n const express = require(\"express\");\r\n const http = require(\"http\");\r\n const { Server } = require(\"socket.io\");\r\n+const { v4: uuidv4 } = require(\"uuid\");\r\n \r\n const app = express();\r\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://my-omegle-clone.vercel.app\", // ✅ Replace with frontend URL\r\n+    origin: \"https://my-omegle-clone.vercel.app\", // ✅ Replace with your frontend URL\r\n     methods: [\"GET\", \"POST\"],\r\n   },\r\n });\r\n \r\n-// ✅ Test route for health check\r\n app.get(\"/\", (req, res) => {\r\n   res.send(\"🚀 Signaling server is running and reachable!\");\r\n });\r\n \r\n-// ✅ Socket.io signaling logic\r\n+let waitingUser = null; // Queue for matchmaking\r\n+\r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n+  // Matchmaking logic\r\n+  if (waitingUser) {\r\n+    const roomId = uuidv4();\r\n+\r\n+    // Join both users into the same room\r\n+    socket.join(roomId);\r\n+    waitingUser.join(roomId);\r\n+\r\n+    console.log(`🔗 Matched ${waitingUser.id} & ${socket.id} in room ${roomId}`);\r\n+\r\n+    // Notify both users of match\r\n+    waitingUser.emit(\"matched\", { roomId, partnerId: socket.id });\r\n+    socket.emit(\"matched\", { roomId, partnerId: waitingUser.id });\r\n+\r\n+    // Clear waiting user\r\n+    waitingUser = null;\r\n+  } else {\r\n+    console.log(`⏳ No match yet. User ${socket.id} is waiting.`);\r\n+    waitingUser = socket;\r\n+  }\r\n+\r\n+  // Listen for WebRTC and chat events\r\n   socket.on(\"join-room\", (roomId) => {\r\n     socket.join(roomId);\r\n     console.log(`📥 User ${socket.id} joined room ${roomId}`);\r\n     socket.to(roomId).emit(\"user-joined\", socket.id);\r\n@@ -40,14 +63,23 @@\n   socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n     socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n+  socket.on(\"send-message\", ({ roomId, message }) => {\r\n+    console.log(`💬 Message from ${socket.id} to room ${roomId}: ${message}`);\r\n+    socket.to(roomId).emit(\"receive-message\", { message, sender: \"partner\" });\r\n+  });\r\n+\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n+\r\n+    // Remove from waiting if they disconnect\r\n+    if (waitingUser && waitingUser.id === socket.id) {\r\n+      waitingUser = null;\r\n+    }\r\n   });\r\n });\r\n \r\n-// ✅ Start server\r\n const PORT = process.env.PORT || 3001;\r\n server.listen(PORT, () => {\r\n-  console.log(`🚀 Signaling server is running on port ${PORT}`);\r\n+  console.log(`🚀 Signaling server running on port ${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1752256966292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-// server/signaling.js\r\n-\r\n const express = require(\"express\");\r\n const http = require(\"http\");\r\n const { Server } = require(\"socket.io\");\r\n const { v4: uuidv4 } = require(\"uuid\");\r\n@@ -14,45 +12,63 @@\n     methods: [\"GET\", \"POST\"],\r\n   },\r\n });\r\n \r\n+// ✅ Health check endpoint\r\n app.get(\"/\", (req, res) => {\r\n   res.send(\"🚀 Signaling server is running and reachable!\");\r\n });\r\n \r\n-let waitingUser = null; // Queue for matchmaking\r\n+// 🔗 Matchmaking queue\r\n+let waitingUser = null;\r\n \r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  // Matchmaking logic\r\n-  if (waitingUser) {\r\n+  /**\r\n+   * 🔗 Matchmaking logic\r\n+   * If there is a waiting user, create a room and match them\r\n+   * Otherwise, set this user as waiting\r\n+   */\r\n+  if (waitingUser && waitingUser.connected) {\r\n     const roomId = uuidv4();\r\n \r\n-    // Join both users into the same room\r\n     socket.join(roomId);\r\n     waitingUser.join(roomId);\r\n \r\n     console.log(`🔗 Matched ${waitingUser.id} & ${socket.id} in room ${roomId}`);\r\n \r\n-    // Notify both users of match\r\n+    // Notify both users\r\n     waitingUser.emit(\"matched\", { roomId, partnerId: socket.id });\r\n     socket.emit(\"matched\", { roomId, partnerId: waitingUser.id });\r\n \r\n-    // Clear waiting user\r\n-    waitingUser = null;\r\n+    waitingUser = null; // Clear waiting user\r\n   } else {\r\n     console.log(`⏳ No match yet. User ${socket.id} is waiting.`);\r\n     waitingUser = socket;\r\n   }\r\n \r\n-  // Listen for WebRTC and chat events\r\n+  /**\r\n+   * 🏠 Join room explicitly if needed\r\n+   */\r\n   socket.on(\"join-room\", (roomId) => {\r\n     socket.join(roomId);\r\n     console.log(`📥 User ${socket.id} joined room ${roomId}`);\r\n     socket.to(roomId).emit(\"user-joined\", socket.id);\r\n   });\r\n \r\n+  /**\r\n+   * ❌ Leave room gracefully\r\n+   */\r\n+  socket.on(\"leave-room\", (roomId) => {\r\n+    socket.leave(roomId);\r\n+    console.log(`👋 User ${socket.id} left room ${roomId}`);\r\n+    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+  });\r\n+\r\n+  /**\r\n+   * 📞 WebRTC signaling events\r\n+   */\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n     socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n \r\n@@ -63,23 +79,35 @@\n   socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n     socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n+  /**\r\n+   * 💬 Chat messaging\r\n+   */\r\n   socket.on(\"send-message\", ({ roomId, message }) => {\r\n     console.log(`💬 Message from ${socket.id} to room ${roomId}: ${message}`);\r\n     socket.to(roomId).emit(\"receive-message\", { message, sender: \"partner\" });\r\n   });\r\n \r\n+  /**\r\n+   * 🔌 Disconnect handler\r\n+   */\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n \r\n-    // Remove from waiting if they disconnect\r\n+    // Remove from waiting queue if disconnected\r\n     if (waitingUser && waitingUser.id === socket.id) {\r\n       waitingUser = null;\r\n     }\r\n+\r\n+    // Optional: broadcast to room that partner disconnected\r\n+    socket.rooms.forEach((roomId) => {\r\n+      socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+    });\r\n   });\r\n });\r\n \r\n+// ✅ Start server\r\n const PORT = process.env.PORT || 3001;\r\n server.listen(PORT, () => {\r\n   console.log(`🚀 Signaling server running on port ${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1752258088636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,14 +31,15 @@\n    */\r\n   if (waitingUser && waitingUser.connected) {\r\n     const roomId = uuidv4();\r\n \r\n+    // Server assigns room ID and joins both users\r\n     socket.join(roomId);\r\n     waitingUser.join(roomId);\r\n \r\n     console.log(`🔗 Matched ${waitingUser.id} & ${socket.id} in room ${roomId}`);\r\n \r\n-    // Notify both users\r\n+    // Notify both users of match and assigned roomId\r\n     waitingUser.emit(\"matched\", { roomId, partnerId: socket.id });\r\n     socket.emit(\"matched\", { roomId, partnerId: waitingUser.id });\r\n \r\n     waitingUser = null; // Clear waiting user\r\n@@ -47,17 +48,8 @@\n     waitingUser = socket;\r\n   }\r\n \r\n   /**\r\n-   * 🏠 Join room explicitly if needed\r\n-   */\r\n-  socket.on(\"join-room\", (roomId) => {\r\n-    socket.join(roomId);\r\n-    console.log(`📥 User ${socket.id} joined room ${roomId}`);\r\n-    socket.to(roomId).emit(\"user-joined\", socket.id);\r\n-  });\r\n-\r\n-  /**\r\n    * ❌ Leave room gracefully\r\n    */\r\n   socket.on(\"leave-room\", (roomId) => {\r\n     socket.leave(roomId);\r\n@@ -98,11 +90,13 @@\n     if (waitingUser && waitingUser.id === socket.id) {\r\n       waitingUser = null;\r\n     }\r\n \r\n-    // Optional: broadcast to room that partner disconnected\r\n+    // Notify partners in all rooms this socket was in\r\n     socket.rooms.forEach((roomId) => {\r\n-      socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+      if (roomId !== socket.id) {\r\n+        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+      }\r\n     });\r\n   });\r\n });\r\n \r\n"
                },
                {
                    "date": 1752260498775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,10 +25,8 @@\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n   /**\r\n    * 🔗 Matchmaking logic\r\n-   * If there is a waiting user, create a room and match them\r\n-   * Otherwise, set this user as waiting\r\n    */\r\n   if (waitingUser && waitingUser.connected) {\r\n     const roomId = uuidv4();\r\n \r\n@@ -37,12 +35,21 @@\n     waitingUser.join(roomId);\r\n \r\n     console.log(`🔗 Matched ${waitingUser.id} & ${socket.id} in room ${roomId}`);\r\n \r\n-    // Notify both users of match and assigned roomId\r\n-    waitingUser.emit(\"matched\", { roomId, partnerId: socket.id });\r\n-    socket.emit(\"matched\", { roomId, partnerId: waitingUser.id });\r\n+    // Notify both users of match, assigned roomId, and isOfferer boolean\r\n+    waitingUser.emit(\"matched\", {\r\n+      roomId,\r\n+      partnerId: socket.id,\r\n+      isOfferer: true, // ✅ waitingUser becomes offerer\r\n+    });\r\n \r\n+    socket.emit(\"matched\", {\r\n+      roomId,\r\n+      partnerId: waitingUser.id,\r\n+      isOfferer: false, // ✅ new user is answerer\r\n+    });\r\n+\r\n     waitingUser = null; // Clear waiting user\r\n   } else {\r\n     console.log(`⏳ No match yet. User ${socket.id} is waiting.`);\r\n     waitingUser = socket;\r\n"
                },
                {
                    "date": 1752262281675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+// signaling.js\r\n+\r\n const express = require(\"express\");\r\n const http = require(\"http\");\r\n const { Server } = require(\"socket.io\");\r\n const { v4: uuidv4 } = require(\"uuid\");\r\n@@ -17,57 +19,51 @@\n app.get(\"/\", (req, res) => {\r\n   res.send(\"🚀 Signaling server is running and reachable!\");\r\n });\r\n \r\n-// 🔗 Matchmaking queue\r\n+// 🔗 Matchmaking queue (only one user waiting at a time)\r\n let waitingUser = null;\r\n \r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  /**\r\n-   * 🔗 Matchmaking logic\r\n-   */\r\n+  // 🔗 Matchmaking logic\r\n   if (waitingUser && waitingUser.connected) {\r\n     const roomId = uuidv4();\r\n \r\n-    // Server assigns room ID and joins both users\r\n+    // ✅ Server assigns room ID and joins both users\r\n     socket.join(roomId);\r\n     waitingUser.join(roomId);\r\n \r\n     console.log(`🔗 Matched ${waitingUser.id} & ${socket.id} in room ${roomId}`);\r\n \r\n-    // Notify both users of match, assigned roomId, and isOfferer boolean\r\n+    // ✅ Notify both users of match, assigned roomId, and their offerer role\r\n     waitingUser.emit(\"matched\", {\r\n       roomId,\r\n       partnerId: socket.id,\r\n-      isOfferer: true, // ✅ waitingUser becomes offerer\r\n+      isOfferer: true, // waitingUser is the offerer\r\n     });\r\n \r\n     socket.emit(\"matched\", {\r\n       roomId,\r\n       partnerId: waitingUser.id,\r\n-      isOfferer: false, // ✅ new user is answerer\r\n+      isOfferer: false, // new user is the answerer\r\n     });\r\n \r\n     waitingUser = null; // Clear waiting user\r\n   } else {\r\n     console.log(`⏳ No match yet. User ${socket.id} is waiting.`);\r\n     waitingUser = socket;\r\n   }\r\n \r\n-  /**\r\n-   * ❌ Leave room gracefully\r\n-   */\r\n+  // ❌ Leave room gracefully\r\n   socket.on(\"leave-room\", (roomId) => {\r\n     socket.leave(roomId);\r\n     console.log(`👋 User ${socket.id} left room ${roomId}`);\r\n     socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n   });\r\n \r\n-  /**\r\n-   * 📞 WebRTC signaling events\r\n-   */\r\n+  // 📞 WebRTC signaling events\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n     socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n \r\n@@ -78,19 +74,15 @@\n   socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n     socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n-  /**\r\n-   * 💬 Chat messaging\r\n-   */\r\n+  // 💬 Chat messaging\r\n   socket.on(\"send-message\", ({ roomId, message }) => {\r\n     console.log(`💬 Message from ${socket.id} to room ${roomId}: ${message}`);\r\n     socket.to(roomId).emit(\"receive-message\", { message, sender: \"partner\" });\r\n   });\r\n \r\n-  /**\r\n-   * 🔌 Disconnect handler\r\n-   */\r\n+  // 🔌 Disconnect handler\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n \r\n     // Remove from waiting queue if disconnected\r\n"
                },
                {
                    "date": 1752298774294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// signaling.js\r\n+// server/signaling.js\r\n \r\n const express = require(\"express\");\r\n const http = require(\"http\");\r\n const { Server } = require(\"socket.io\");\r\n@@ -19,60 +19,64 @@\n app.get(\"/\", (req, res) => {\r\n   res.send(\"🚀 Signaling server is running and reachable!\");\r\n });\r\n \r\n-// 🔗 Matchmaking queue (only one user waiting at a time)\r\n-let waitingUser = null;\r\n+let waitingUser = null; // 🔗 Matchmaking queue\r\n \r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  // 🔗 Matchmaking logic\r\n   if (waitingUser && waitingUser.connected) {\r\n     const roomId = uuidv4();\r\n \r\n-    // ✅ Server assigns room ID and joins both users\r\n     socket.join(roomId);\r\n     waitingUser.join(roomId);\r\n \r\n     console.log(`🔗 Matched ${waitingUser.id} & ${socket.id} in room ${roomId}`);\r\n \r\n-    // ✅ Notify both users of match, assigned roomId, and their offerer role\r\n     waitingUser.emit(\"matched\", {\r\n       roomId,\r\n       partnerId: socket.id,\r\n-      isOfferer: true, // waitingUser is the offerer\r\n+      isOfferer: true,\r\n     });\r\n \r\n     socket.emit(\"matched\", {\r\n       roomId,\r\n       partnerId: waitingUser.id,\r\n-      isOfferer: false, // new user is the answerer\r\n+      isOfferer: false,\r\n     });\r\n \r\n-    waitingUser = null; // Clear waiting user\r\n+    waitingUser = null;\r\n   } else {\r\n     console.log(`⏳ No match yet. User ${socket.id} is waiting.`);\r\n     waitingUser = socket;\r\n   }\r\n \r\n-  // ❌ Leave room gracefully\r\n+  socket.on(\"join-room\", (roomId) => {\r\n+    socket.join(roomId);\r\n+    console.log(`✅ User ${socket.id} joined room ${roomId}`);\r\n+    socket.emit(\"joined-room\", roomId);\r\n+  });\r\n+\r\n   socket.on(\"leave-room\", (roomId) => {\r\n     socket.leave(roomId);\r\n     console.log(`👋 User ${socket.id} left room ${roomId}`);\r\n     socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n   });\r\n \r\n   // 📞 WebRTC signaling events\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n+    console.log(`📤 Offer from ${socket.id} to room ${roomId}`);\r\n     socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n \r\n   socket.on(\"answer\", ({ answer, roomId }) => {\r\n+    console.log(`📤 Answer from ${socket.id} to room ${roomId}`);\r\n     socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n   });\r\n \r\n   socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n+    console.log(`📤 ICE candidate from ${socket.id} to room ${roomId}`);\r\n     socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n   // 💬 Chat messaging\r\n@@ -80,27 +84,22 @@\n     console.log(`💬 Message from ${socket.id} to room ${roomId}: ${message}`);\r\n     socket.to(roomId).emit(\"receive-message\", { message, sender: \"partner\" });\r\n   });\r\n \r\n-  // 🔌 Disconnect handler\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n-\r\n-    // Remove from waiting queue if disconnected\r\n     if (waitingUser && waitingUser.id === socket.id) {\r\n       waitingUser = null;\r\n     }\r\n \r\n-    // Notify partners in all rooms this socket was in\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n     });\r\n   });\r\n });\r\n \r\n-// ✅ Start server\r\n const PORT = process.env.PORT || 3001;\r\n server.listen(PORT, () => {\r\n   console.log(`🚀 Signaling server running on port ${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1752311389754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,34 +24,39 @@\n \r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  if (waitingUser && waitingUser.connected) {\r\n-    const roomId = uuidv4();\r\n+  // ✅ Handle user starting to look for partner\r\n+  socket.on(\"start-looking\", () => {\r\n+    console.log(`🔎 User ${socket.id} started looking for a partner`);\r\n \r\n-    socket.join(roomId);\r\n-    waitingUser.join(roomId);\r\n+    if (waitingUser && waitingUser.connected) {\r\n+      const roomId = uuidv4();\r\n \r\n-    console.log(`🔗 Matched ${waitingUser.id} & ${socket.id} in room ${roomId}`);\r\n+      socket.join(roomId);\r\n+      waitingUser.join(roomId);\r\n \r\n-    waitingUser.emit(\"matched\", {\r\n-      roomId,\r\n-      partnerId: socket.id,\r\n-      isOfferer: true,\r\n-    });\r\n+      console.log(`🤝 Matched ${waitingUser.id} & ${socket.id} in room ${roomId}`);\r\n \r\n-    socket.emit(\"matched\", {\r\n-      roomId,\r\n-      partnerId: waitingUser.id,\r\n-      isOfferer: false,\r\n-    });\r\n+      waitingUser.emit(\"matched\", {\r\n+        roomId,\r\n+        partnerId: socket.id,\r\n+        isOfferer: true,\r\n+      });\r\n \r\n-    waitingUser = null;\r\n-  } else {\r\n-    console.log(`⏳ No match yet. User ${socket.id} is waiting.`);\r\n-    waitingUser = socket;\r\n-  }\r\n+      socket.emit(\"matched\", {\r\n+        roomId,\r\n+        partnerId: waitingUser.id,\r\n+        isOfferer: false,\r\n+      });\r\n \r\n+      waitingUser = null;\r\n+    } else {\r\n+      console.log(`⏳ No match yet. User ${socket.id} is waiting.`);\r\n+      waitingUser = socket;\r\n+    }\r\n+  });\r\n+\r\n   socket.on(\"join-room\", (roomId) => {\r\n     socket.join(roomId);\r\n     console.log(`✅ User ${socket.id} joined room ${roomId}`);\r\n     socket.emit(\"joined-room\", roomId);\r\n@@ -59,11 +64,38 @@\n \r\n   socket.on(\"leave-room\", (roomId) => {\r\n     socket.leave(roomId);\r\n     console.log(`👋 User ${socket.id} left room ${roomId}`);\r\n+\r\n     socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+\r\n+    if (waitingUser && waitingUser.id === socket.id) {\r\n+      console.log(`🗑️ Removing ${socket.id} from waiting queue`);\r\n+      waitingUser = null;\r\n+    }\r\n   });\r\n \r\n+  // ✅ Skip functionality (leave current room and re-queue)\r\n+  socket.on(\"skip\", () => {\r\n+    console.log(`⏭️ User ${socket.id} skipped current partner`);\r\n+\r\n+    // Remove from current room\r\n+    socket.rooms.forEach((roomId) => {\r\n+      if (roomId !== socket.id) {\r\n+        socket.leave(roomId);\r\n+        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+      }\r\n+    });\r\n+\r\n+    // Remove from waiting queue if present\r\n+    if (waitingUser && waitingUser.id === socket.id) {\r\n+      waitingUser = null;\r\n+    }\r\n+\r\n+    // Re-add to queue by emitting start-looking\r\n+    socket.emit(\"start-looking\");\r\n+  });\r\n+\r\n   // 📞 WebRTC signaling events\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n     console.log(`📤 Offer from ${socket.id} to room ${roomId}`);\r\n     socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n@@ -86,9 +118,11 @@\n   });\r\n \r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n+\r\n     if (waitingUser && waitingUser.id === socket.id) {\r\n+      console.log(`🗑️ Removing ${socket.id} from waiting queue`);\r\n       waitingUser = null;\r\n     }\r\n \r\n     socket.rooms.forEach((roomId) => {\r\n"
                },
                {
                    "date": 1752321371855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-// server/signaling.js\r\n-\r\n const express = require(\"express\");\r\n const http = require(\"http\");\r\n const { Server } = require(\"socket.io\");\r\n const { v4: uuidv4 } = require(\"uuid\");\r\n@@ -9,35 +7,29 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://my-omegle-clone.vercel.app\", // ✅ Replace with your frontend URL\r\n-    methods: [\"GET\", \"POST\"],\r\n+    origin: \"https://my-omegle-clone.vercel.app\", // ✅ Update to your deployed frontend\r\n+    methods: [\"GET\", \"POST\"]\r\n   },\r\n });\r\n \r\n-// ✅ Health check endpoint\r\n app.get(\"/\", (req, res) => {\r\n-  res.send(\"🚀 Signaling server is running and reachable!\");\r\n+  res.send(\"🚀 Signaling server is running!\");\r\n });\r\n \r\n-let waitingUser = null; // 🔗 Matchmaking queue\r\n+let waitingUser = null;\r\n \r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  // ✅ Handle user starting to look for partner\r\n   socket.on(\"start-looking\", () => {\r\n-    console.log(`🔎 User ${socket.id} started looking for a partner`);\r\n-\r\n     if (waitingUser && waitingUser.connected) {\r\n       const roomId = uuidv4();\r\n \r\n       socket.join(roomId);\r\n       waitingUser.join(roomId);\r\n \r\n-      console.log(`🤝 Matched ${waitingUser.id} & ${socket.id} in room ${roomId}`);\r\n-\r\n       waitingUser.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: socket.id,\r\n         isOfferer: true,\r\n@@ -50,79 +42,98 @@\n       });\r\n \r\n       waitingUser = null;\r\n     } else {\r\n-      console.log(`⏳ No match yet. User ${socket.id} is waiting.`);\r\n       waitingUser = socket;\r\n     }\r\n   });\r\n \r\n   socket.on(\"join-room\", (roomId) => {\r\n     socket.join(roomId);\r\n-    console.log(`✅ User ${socket.id} joined room ${roomId}`);\r\n     socket.emit(\"joined-room\", roomId);\r\n   });\r\n \r\n   socket.on(\"leave-room\", (roomId) => {\r\n     socket.leave(roomId);\r\n-    console.log(`👋 User ${socket.id} left room ${roomId}`);\r\n-\r\n     socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n \r\n     if (waitingUser && waitingUser.id === socket.id) {\r\n-      console.log(`🗑️ Removing ${socket.id} from waiting queue`);\r\n       waitingUser = null;\r\n     }\r\n   });\r\n \r\n-  // ✅ Skip functionality (leave current room and re-queue)\r\n+  // Skip and requeue\r\n   socket.on(\"skip\", () => {\r\n-    console.log(`⏭️ User ${socket.id} skipped current partner`);\r\n-\r\n-    // Remove from current room\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.leave(roomId);\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n     });\r\n \r\n-    // Remove from waiting queue if present\r\n     if (waitingUser && waitingUser.id === socket.id) {\r\n       waitingUser = null;\r\n     }\r\n \r\n-    // Re-add to queue by emitting start-looking\r\n     socket.emit(\"start-looking\");\r\n   });\r\n \r\n-  // 📞 WebRTC signaling events\r\n+  // --- WebRTC signaling ---\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n-    console.log(`📤 Offer from ${socket.id} to room ${roomId}`);\r\n     socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n \r\n   socket.on(\"answer\", ({ answer, roomId }) => {\r\n-    console.log(`📤 Answer from ${socket.id} to room ${roomId}`);\r\n     socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n   });\r\n \r\n   socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n-    console.log(`📤 ICE candidate from ${socket.id} to room ${roomId}`);\r\n     socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n-  // 💬 Chat messaging\r\n-  socket.on(\"send-message\", ({ roomId, message }) => {\r\n-    console.log(`💬 Message from ${socket.id} to room ${roomId}: ${message}`);\r\n-    socket.to(roomId).emit(\"receive-message\", { message, sender: \"partner\" });\r\n+  // --- Chat Features ---\r\n+\r\n+  // Chat message\r\n+  socket.on(\"send-message\", (msg) => {\r\n+    const { roomId } = msg;\r\n+    console.log(`💬 New message in ${roomId}:`, msg);\r\n+    socket.to(roomId).emit(\"receive-message\", msg);\r\n   });\r\n \r\n+  // Typing indicator\r\n+  socket.on(\"typing\", ({ roomId, sender }) => {\r\n+    socket.to(roomId).emit(\"typing\", { sender });\r\n+  });\r\n+\r\n+  // Seen/Delivered\r\n+  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n+    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n+  });\r\n+\r\n+  // Edit\r\n+  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n+    socket.to(roomId).emit(\"receive-message\", {\r\n+      id: messageId,\r\n+      content,\r\n+      type: \"text\",\r\n+      edited: true\r\n+    });\r\n+  });\r\n+\r\n+  // Delete\r\n+  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n+    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n+  });\r\n+\r\n+  // React\r\n+  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n+    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n+  });\r\n+\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n \r\n     if (waitingUser && waitingUser.id === socket.id) {\r\n-      console.log(`🗑️ Removing ${socket.id} from waiting queue`);\r\n       waitingUser = null;\r\n     }\r\n \r\n     socket.rooms.forEach((roomId) => {\r\n"
                },
                {
                    "date": 1752518382894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://my-omegle-clone.vercel.app\", // ✅ Update to your deployed frontend\r\n+    origin: \"https://connectify-hub.vercel.app/\", // ✅ Update to your deployed frontend\r\n     methods: [\"GET\", \"POST\"]\r\n   },\r\n });\r\n \r\n"
                },
                {
                    "date": 1752518554478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,44 +7,65 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://connectify-hub.vercel.app/\", // ✅ Update to your deployed frontend\r\n+    origin: \"https://connectify-hub.vercel.app/\", // ✅ Update if needed\r\n     methods: [\"GET\", \"POST\"]\r\n   },\r\n });\r\n \r\n app.get(\"/\", (req, res) => {\r\n   res.send(\"🚀 Signaling server is running!\");\r\n });\r\n \r\n-let waitingUser = null;\r\n+// Store all waiting users with their metadata\r\n+let waitingUsers = [];\r\n \r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  socket.on(\"start-looking\", () => {\r\n-    if (waitingUser && waitingUser.connected) {\r\n+  socket.on(\"start-looking\", (userInfo) => {\r\n+    const { gender, country, age, name } = userInfo || {};\r\n+\r\n+    // Attach user info to socket\r\n+    socket.userData = { gender, country, age, name };\r\n+\r\n+    // Try to match with another waiting user\r\n+    const index = waitingUsers.findIndex((other) => {\r\n+      if (!other.connected) return false;\r\n+      if (!other.userData) return false;\r\n+\r\n+      // 🔍 Customize filtering logic as needed\r\n+      return (\r\n+        other.userData.gender !== gender && // example: opposite gender\r\n+        other.userData.country === country // same country match\r\n+        // You can add age range matching here if needed\r\n+      );\r\n+    });\r\n+\r\n+    if (index !== -1) {\r\n+      const partner = waitingUsers.splice(index, 1)[0];\r\n+\r\n       const roomId = uuidv4();\r\n-\r\n       socket.join(roomId);\r\n-      waitingUser.join(roomId);\r\n+      partner.join(roomId);\r\n \r\n-      waitingUser.emit(\"matched\", {\r\n+      // Send match info to both users\r\n+      partner.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: socket.id,\r\n         isOfferer: true,\r\n+        partnerName: socket.userData?.name || \"Stranger\"\r\n       });\r\n \r\n       socket.emit(\"matched\", {\r\n         roomId,\r\n-        partnerId: waitingUser.id,\r\n+        partnerId: partner.id,\r\n         isOfferer: false,\r\n+        partnerName: partner.userData?.name || \"Stranger\"\r\n       });\r\n-\r\n-      waitingUser = null;\r\n     } else {\r\n-      waitingUser = socket;\r\n+      waitingUsers.push(socket);\r\n     }\r\n   });\r\n \r\n   socket.on(\"join-room\", (roomId) => {\r\n@@ -55,11 +76,10 @@\n   socket.on(\"leave-room\", (roomId) => {\r\n     socket.leave(roomId);\r\n     socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n \r\n-    if (waitingUser && waitingUser.id === socket.id) {\r\n-      waitingUser = null;\r\n-    }\r\n+    // Remove from waitingUsers if still waiting\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n   });\r\n \r\n   // Skip and requeue\r\n   socket.on(\"skip\", () => {\r\n@@ -69,13 +89,10 @@\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n     });\r\n \r\n-    if (waitingUser && waitingUser.id === socket.id) {\r\n-      waitingUser = null;\r\n-    }\r\n-\r\n-    socket.emit(\"start-looking\");\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+    socket.emit(\"start-looking\", socket.userData); // retry with current user info\r\n   });\r\n \r\n   // --- WebRTC signaling ---\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n@@ -91,26 +108,22 @@\n   });\r\n \r\n   // --- Chat Features ---\r\n \r\n-  // Chat message\r\n   socket.on(\"send-message\", (msg) => {\r\n     const { roomId } = msg;\r\n     console.log(`💬 New message in ${roomId}:`, msg);\r\n     socket.to(roomId).emit(\"receive-message\", msg);\r\n   });\r\n \r\n-  // Typing indicator\r\n   socket.on(\"typing\", ({ roomId, sender }) => {\r\n     socket.to(roomId).emit(\"typing\", { sender });\r\n   });\r\n \r\n-  // Seen/Delivered\r\n   socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n     socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n   });\r\n \r\n-  // Edit\r\n   socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n     socket.to(roomId).emit(\"receive-message\", {\r\n       id: messageId,\r\n       content,\r\n@@ -118,25 +131,20 @@\n       edited: true\r\n     });\r\n   });\r\n \r\n-  // Delete\r\n   socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n     socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n   });\r\n \r\n-  // React\r\n   socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n     socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n   });\r\n \r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n \r\n-    if (waitingUser && waitingUser.id === socket.id) {\r\n-      waitingUser = null;\r\n-    }\r\n-\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n"
                },
                {
                    "date": 1752519102479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,24 +23,36 @@\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n   socket.on(\"start-looking\", (userInfo) => {\r\n-    const { gender, country, age, name } = userInfo || {};\r\n+    const {\r\n+      gender,\r\n+      country,\r\n+      age,\r\n+      name,\r\n+      filterGender = \"\",\r\n+      filterCountry = \"\"\r\n+    } = userInfo || {};\r\n \r\n-    // Attach user info to socket\r\n-    socket.userData = { gender, country, age, name };\r\n+    // Attach user info and filters to socket\r\n+    socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n \r\n     // Try to match with another waiting user\r\n     const index = waitingUsers.findIndex((other) => {\r\n-      if (!other.connected) return false;\r\n-      if (!other.userData) return false;\r\n+      if (!other.connected || !other.userData) return false;\r\n \r\n-      // 🔍 Customize filtering logic as needed\r\n-      return (\r\n-        other.userData.gender !== gender && // example: opposite gender\r\n-        other.userData.country === country // same country match\r\n-        // You can add age range matching here if needed\r\n-      );\r\n+      const my = socket.userData;\r\n+      const their = other.userData;\r\n+\r\n+      const mutualFilterMatch =\r\n+        // You match their preferences\r\n+        (!their.filterGender || their.filterGender === my.gender) &&\r\n+        (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n+        // They match your preferences\r\n+        (!my.filterGender || my.filterGender === their.gender) &&\r\n+        (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n+\r\n+      return mutualFilterMatch;\r\n     });\r\n \r\n     if (index !== -1) {\r\n       const partner = waitingUsers.splice(index, 1)[0];\r\n"
                },
                {
                    "date": 1753191276263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,18 +7,17 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://connectify-hub.vercel.app/\", // ✅ Update if needed\r\n+    origin: \"https://connectify-hub.vercel.app/\",\r\n     methods: [\"GET\", \"POST\"]\r\n   },\r\n });\r\n \r\n app.get(\"/\", (req, res) => {\r\n   res.send(\"🚀 Signaling server is running!\");\r\n });\r\n \r\n-// Store all waiting users with their metadata\r\n let waitingUsers = [];\r\n \r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n@@ -32,49 +31,50 @@\n       filterGender = \"\",\r\n       filterCountry = \"\"\r\n     } = userInfo || {};\r\n \r\n-    // Attach user info and filters to socket\r\n     socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n \r\n-    // Try to match with another waiting user\r\n     const index = waitingUsers.findIndex((other) => {\r\n       if (!other.connected || !other.userData) return false;\r\n \r\n       const my = socket.userData;\r\n       const their = other.userData;\r\n \r\n       const mutualFilterMatch =\r\n-        // You match their preferences\r\n         (!their.filterGender || their.filterGender === my.gender) &&\r\n         (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n-        // They match your preferences\r\n         (!my.filterGender || my.filterGender === their.gender) &&\r\n         (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n \r\n       return mutualFilterMatch;\r\n     });\r\n \r\n     if (index !== -1) {\r\n       const partner = waitingUsers.splice(index, 1)[0];\r\n+      const roomId = uuidv4();\r\n \r\n-      const roomId = uuidv4();\r\n       socket.join(roomId);\r\n       partner.join(roomId);\r\n \r\n-      // Send match info to both users\r\n+      // Emit match to partner\r\n       partner.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: socket.id,\r\n         isOfferer: true,\r\n-        partnerName: socket.userData?.name || \"Stranger\"\r\n+        partnerName: socket.userData?.name || \"Stranger\",\r\n+        partnerAge: socket.userData?.age || \"Unknown\",\r\n+        partnerCountry: socket.userData?.country || \"Unknown\"\r\n       });\r\n \r\n+      // Emit match to socket\r\n       socket.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: partner.id,\r\n         isOfferer: false,\r\n-        partnerName: partner.userData?.name || \"Stranger\"\r\n+        partnerName: partner.userData?.name || \"Stranger\",\r\n+        partnerAge: partner.userData?.age || \"Unknown\",\r\n+        partnerCountry: partner.userData?.country || \"Unknown\"\r\n       });\r\n     } else {\r\n       waitingUsers.push(socket);\r\n     }\r\n@@ -87,14 +87,11 @@\n \r\n   socket.on(\"leave-room\", (roomId) => {\r\n     socket.leave(roomId);\r\n     socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-\r\n-    // Remove from waitingUsers if still waiting\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n   });\r\n \r\n-  // Skip and requeue\r\n   socket.on(\"skip\", () => {\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.leave(roomId);\r\n@@ -102,12 +99,12 @@\n       }\r\n     });\r\n \r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-    socket.emit(\"start-looking\", socket.userData); // retry with current user info\r\n+    socket.emit(\"start-looking\", socket.userData);\r\n   });\r\n \r\n-  // --- WebRTC signaling ---\r\n+  // WebRTC signaling\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n     socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n \r\n@@ -118,10 +115,9 @@\n   socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n     socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n-  // --- Chat Features ---\r\n-\r\n+  // Chat features\r\n   socket.on(\"send-message\", (msg) => {\r\n     const { roomId } = msg;\r\n     console.log(`💬 New message in ${roomId}:`, msg);\r\n     socket.to(roomId).emit(\"receive-message\", msg);\r\n"
                },
                {
                    "date": 1758888602170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,30 +7,42 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://connectify-hub.vercel.app/\",\r\n-    methods: [\"GET\", \"POST\"]\r\n+    origin: \"https://connectify-hub.vercel.app\",\r\n+    methods: [\"GET\", \"POST\"],\r\n   },\r\n });\r\n \r\n-app.get(\"/\", (req, res) => {\r\n-  res.send(\"🚀 Signaling server is running!\");\r\n-});\r\n+app.get(\"/\", (_, res) => res.send(\"🚀 Signaling server is running!\"));\r\n \r\n+// ------------------ EXISTING 1-to-1 MATCH SYSTEM ------------------\r\n let waitingUsers = [];\r\n \r\n+// ------------------ NEW ROOM SYSTEM STORAGE ------------------\r\n+/*\r\n+rooms = {\r\n+  roomId: {\r\n+    name, topic, description, password,\r\n+    users: Map<socketId,{id,name}>\r\n+  }\r\n+}\r\n+*/\r\n+let rooms = {};\r\n+\r\n+// ------------------ SOCKET LOGIC ------------------\r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n+  // ---------- 1-to-1 Anonymous Chat ----------\r\n   socket.on(\"start-looking\", (userInfo) => {\r\n     const {\r\n       gender,\r\n       country,\r\n       age,\r\n       name,\r\n       filterGender = \"\",\r\n-      filterCountry = \"\"\r\n+      filterCountry = \"\",\r\n     } = userInfo || {};\r\n \r\n     socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n \r\n@@ -55,112 +67,153 @@\n \r\n       socket.join(roomId);\r\n       partner.join(roomId);\r\n \r\n-      // Emit match to partner\r\n       partner.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: socket.id,\r\n         isOfferer: true,\r\n         partnerName: socket.userData?.name || \"Stranger\",\r\n         partnerAge: socket.userData?.age || \"Unknown\",\r\n-        partnerCountry: socket.userData?.country || \"Unknown\"\r\n+        partnerCountry: socket.userData?.country || \"Unknown\",\r\n       });\r\n \r\n-      // Emit match to socket\r\n       socket.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: partner.id,\r\n         isOfferer: false,\r\n         partnerName: partner.userData?.name || \"Stranger\",\r\n         partnerAge: partner.userData?.age || \"Unknown\",\r\n-        partnerCountry: partner.userData?.country || \"Unknown\"\r\n+        partnerCountry: partner.userData?.country || \"Unknown\",\r\n       });\r\n     } else {\r\n       waitingUsers.push(socket);\r\n     }\r\n   });\r\n \r\n-  socket.on(\"join-room\", (roomId) => {\r\n-    socket.join(roomId);\r\n-    socket.emit(\"joined-room\", roomId);\r\n-  });\r\n-\r\n-  socket.on(\"leave-room\", (roomId) => {\r\n-    socket.leave(roomId);\r\n-    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-  });\r\n-\r\n   socket.on(\"skip\", () => {\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.leave(roomId);\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n     });\r\n-\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n     socket.emit(\"start-looking\", socket.userData);\r\n   });\r\n \r\n-  // WebRTC signaling\r\n-  socket.on(\"offer\", ({ offer, roomId }) => {\r\n-    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n-  });\r\n+  // ---------- WebRTC signaling (shared) ----------\r\n+  socket.on(\"offer\", ({ offer, roomId }) =>\r\n+    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id })\r\n+  );\r\n+  socket.on(\"answer\", ({ answer, roomId }) =>\r\n+    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id })\r\n+  );\r\n+  socket.on(\"ice-candidate\", ({ candidate, roomId }) =>\r\n+    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id })\r\n+  );\r\n \r\n-  socket.on(\"answer\", ({ answer, roomId }) => {\r\n-    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n-  });\r\n-\r\n-  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n-    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n-  });\r\n-\r\n-  // Chat features\r\n+  // ---------- Chat events (shared) ----------\r\n   socket.on(\"send-message\", (msg) => {\r\n     const { roomId } = msg;\r\n-    console.log(`💬 New message in ${roomId}:`, msg);\r\n     socket.to(roomId).emit(\"receive-message\", msg);\r\n   });\r\n-\r\n-  socket.on(\"typing\", ({ roomId, sender }) => {\r\n-    socket.to(roomId).emit(\"typing\", { sender });\r\n-  });\r\n-\r\n-  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n-    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n-  });\r\n-\r\n-  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n+  socket.on(\"typing\", ({ roomId, sender }) =>\r\n+    socket.to(roomId).emit(\"typing\", { sender })\r\n+  );\r\n+  socket.on(\"message-status\", ({ roomId, messageId, status }) =>\r\n+    socket.to(roomId).emit(\"message-status-update\", { messageId, status })\r\n+  );\r\n+  socket.on(\"edit-message\", ({ roomId, messageId, content }) =>\r\n     socket.to(roomId).emit(\"receive-message\", {\r\n       id: messageId,\r\n       content,\r\n       type: \"text\",\r\n-      edited: true\r\n-    });\r\n+      edited: true,\r\n+    })\r\n+  );\r\n+  socket.on(\"delete-message\", ({ roomId, messageId }) =>\r\n+    socket.to(roomId).emit(\"message-deleted\", { messageId })\r\n+  );\r\n+  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) =>\r\n+    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user })\r\n+  );\r\n+\r\n+  // ---------- NEW Group Room System ----------\r\n+  const broadcastRoomList = () => {\r\n+    const list = Object.entries(rooms).map(([id, r]) => ({\r\n+      id,\r\n+      name: r.name,\r\n+      topic: r.topic,\r\n+      description: r.description,\r\n+      count: r.users.size,\r\n+      locked: !!r.password,\r\n+    }));\r\n+    io.emit(\"rooms-list\", list);\r\n+  };\r\n+\r\n+  socket.on(\"create-room\", ({ name, topic, description, password, userName }) => {\r\n+    const roomId = uuidv4();\r\n+    rooms[roomId] = {\r\n+      name,\r\n+      topic,\r\n+      description,\r\n+      password: password || null,\r\n+      users: new Map(),\r\n+    };\r\n+    // auto join creator\r\n+    rooms[roomId].users.set(socket.id, { id: socket.id, name: userName || \"Anonymous\" });\r\n+    socket.join(roomId);\r\n+    socket.emit(\"room-created\", { roomId });\r\n+    io.to(roomId).emit(\"room-users\", [...rooms[roomId].users.values()]);\r\n+    broadcastRoomList();\r\n   });\r\n \r\n-  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n-    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n+  socket.on(\"join-room\", ({ roomId, password, userName }) => {\r\n+    const room = rooms[roomId];\r\n+    if (!room) return socket.emit(\"join-error\", \"Room not found\");\r\n+    if (room.password && room.password !== password)\r\n+      return socket.emit(\"join-error\", \"Incorrect password\");\r\n+\r\n+    room.users.set(socket.id, { id: socket.id, name: userName || \"Anonymous\" });\r\n+    socket.join(roomId);\r\n+    socket.emit(\"joined-room\", { roomId, room });\r\n+    io.to(roomId).emit(\"room-users\", [...room.users.values()]);\r\n+    broadcastRoomList();\r\n   });\r\n \r\n-  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n-    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n+  socket.on(\"leave-room\", (roomId) => {\r\n+    const room = rooms[roomId];\r\n+    if (!room) return;\r\n+    room.users.delete(socket.id);\r\n+    socket.leave(roomId);\r\n+    io.to(roomId).emit(\"room-users\", [...room.users.values()]);\r\n+    if (room.users.size === 0) delete rooms[roomId];\r\n+    broadcastRoomList();\r\n   });\r\n \r\n+  // ---------- Disconnect ----------\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n \r\n-    socket.rooms.forEach((roomId) => {\r\n-      if (roomId !== socket.id) {\r\n-        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+    // clean up group rooms\r\n+    for (const [rid, room] of Object.entries(rooms)) {\r\n+      if (room.users.delete(socket.id)) {\r\n+        io.to(rid).emit(\"room-users\", [...room.users.values()]);\r\n+        if (room.users.size === 0) delete rooms[rid];\r\n       }\r\n+    }\r\n+\r\n+    socket.rooms.forEach((rid) => {\r\n+      if (rid !== socket.id) {\r\n+        socket.to(rid).emit(\"partner-left\", { partnerId: socket.id });\r\n+      }\r\n     });\r\n+    broadcastRoomList();\r\n   });\r\n });\r\n \r\n const PORT = process.env.PORT || 3001;\r\n-server.listen(PORT, () => {\r\n-  console.log(`🚀 Signaling server running on port ${PORT}`);\r\n-});\r\n+server.listen(PORT, () =>\r\n+  console.log(`🚀 Signaling server running on port ${PORT}`)\r\n+);\r\n"
                },
                {
                    "date": 1758891850394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,42 +7,30 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://connectify-hub.vercel.app\",\r\n-    methods: [\"GET\", \"POST\"],\r\n+    origin: \"https://connectify-hub.vercel.app/\",\r\n+    methods: [\"GET\", \"POST\"]\r\n   },\r\n });\r\n \r\n-app.get(\"/\", (_, res) => res.send(\"🚀 Signaling server is running!\"));\r\n+app.get(\"/\", (req, res) => {\r\n+  res.send(\"🚀 Signaling server is running!\");\r\n+});\r\n \r\n-// ------------------ EXISTING 1-to-1 MATCH SYSTEM ------------------\r\n let waitingUsers = [];\r\n \r\n-// ------------------ NEW ROOM SYSTEM STORAGE ------------------\r\n-/*\r\n-rooms = {\r\n-  roomId: {\r\n-    name, topic, description, password,\r\n-    users: Map<socketId,{id,name}>\r\n-  }\r\n-}\r\n-*/\r\n-let rooms = {};\r\n-\r\n-// ------------------ SOCKET LOGIC ------------------\r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  // ---------- 1-to-1 Anonymous Chat ----------\r\n   socket.on(\"start-looking\", (userInfo) => {\r\n     const {\r\n       gender,\r\n       country,\r\n       age,\r\n       name,\r\n       filterGender = \"\",\r\n-      filterCountry = \"\",\r\n+      filterCountry = \"\"\r\n     } = userInfo || {};\r\n \r\n     socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n \r\n@@ -67,153 +55,112 @@\n \r\n       socket.join(roomId);\r\n       partner.join(roomId);\r\n \r\n+      // Emit match to partner\r\n       partner.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: socket.id,\r\n         isOfferer: true,\r\n         partnerName: socket.userData?.name || \"Stranger\",\r\n         partnerAge: socket.userData?.age || \"Unknown\",\r\n-        partnerCountry: socket.userData?.country || \"Unknown\",\r\n+        partnerCountry: socket.userData?.country || \"Unknown\"\r\n       });\r\n \r\n+      // Emit match to socket\r\n       socket.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: partner.id,\r\n         isOfferer: false,\r\n         partnerName: partner.userData?.name || \"Stranger\",\r\n         partnerAge: partner.userData?.age || \"Unknown\",\r\n-        partnerCountry: partner.userData?.country || \"Unknown\",\r\n+        partnerCountry: partner.userData?.country || \"Unknown\"\r\n       });\r\n     } else {\r\n       waitingUsers.push(socket);\r\n     }\r\n   });\r\n \r\n+  socket.on(\"join-room\", (roomId) => {\r\n+    socket.join(roomId);\r\n+    socket.emit(\"joined-room\", roomId);\r\n+  });\r\n+\r\n+  socket.on(\"leave-room\", (roomId) => {\r\n+    socket.leave(roomId);\r\n+    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+  });\r\n+\r\n   socket.on(\"skip\", () => {\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.leave(roomId);\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n     });\r\n+\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n     socket.emit(\"start-looking\", socket.userData);\r\n   });\r\n \r\n-  // ---------- WebRTC signaling (shared) ----------\r\n-  socket.on(\"offer\", ({ offer, roomId }) =>\r\n-    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id })\r\n-  );\r\n-  socket.on(\"answer\", ({ answer, roomId }) =>\r\n-    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id })\r\n-  );\r\n-  socket.on(\"ice-candidate\", ({ candidate, roomId }) =>\r\n-    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id })\r\n-  );\r\n+  // WebRTC signaling\r\n+  socket.on(\"offer\", ({ offer, roomId }) => {\r\n+    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n+  });\r\n \r\n-  // ---------- Chat events (shared) ----------\r\n+  socket.on(\"answer\", ({ answer, roomId }) => {\r\n+    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n+  });\r\n+\r\n+  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n+    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n+  });\r\n+\r\n+  // Chat features\r\n   socket.on(\"send-message\", (msg) => {\r\n     const { roomId } = msg;\r\n+    console.log(`💬 New message in ${roomId}:`, msg);\r\n     socket.to(roomId).emit(\"receive-message\", msg);\r\n   });\r\n-  socket.on(\"typing\", ({ roomId, sender }) =>\r\n-    socket.to(roomId).emit(\"typing\", { sender })\r\n-  );\r\n-  socket.on(\"message-status\", ({ roomId, messageId, status }) =>\r\n-    socket.to(roomId).emit(\"message-status-update\", { messageId, status })\r\n-  );\r\n-  socket.on(\"edit-message\", ({ roomId, messageId, content }) =>\r\n+\r\n+  socket.on(\"typing\", ({ roomId, sender }) => {\r\n+    socket.to(roomId).emit(\"typing\", { sender });\r\n+  });\r\n+\r\n+  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n+    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n+  });\r\n+\r\n+  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n     socket.to(roomId).emit(\"receive-message\", {\r\n       id: messageId,\r\n       content,\r\n       type: \"text\",\r\n-      edited: true,\r\n-    })\r\n-  );\r\n-  socket.on(\"delete-message\", ({ roomId, messageId }) =>\r\n-    socket.to(roomId).emit(\"message-deleted\", { messageId })\r\n-  );\r\n-  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) =>\r\n-    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user })\r\n-  );\r\n-\r\n-  // ---------- NEW Group Room System ----------\r\n-  const broadcastRoomList = () => {\r\n-    const list = Object.entries(rooms).map(([id, r]) => ({\r\n-      id,\r\n-      name: r.name,\r\n-      topic: r.topic,\r\n-      description: r.description,\r\n-      count: r.users.size,\r\n-      locked: !!r.password,\r\n-    }));\r\n-    io.emit(\"rooms-list\", list);\r\n-  };\r\n-\r\n-  socket.on(\"create-room\", ({ name, topic, description, password, userName }) => {\r\n-    const roomId = uuidv4();\r\n-    rooms[roomId] = {\r\n-      name,\r\n-      topic,\r\n-      description,\r\n-      password: password || null,\r\n-      users: new Map(),\r\n-    };\r\n-    // auto join creator\r\n-    rooms[roomId].users.set(socket.id, { id: socket.id, name: userName || \"Anonymous\" });\r\n-    socket.join(roomId);\r\n-    socket.emit(\"room-created\", { roomId });\r\n-    io.to(roomId).emit(\"room-users\", [...rooms[roomId].users.values()]);\r\n-    broadcastRoomList();\r\n+      edited: true\r\n+    });\r\n   });\r\n \r\n-  socket.on(\"join-room\", ({ roomId, password, userName }) => {\r\n-    const room = rooms[roomId];\r\n-    if (!room) return socket.emit(\"join-error\", \"Room not found\");\r\n-    if (room.password && room.password !== password)\r\n-      return socket.emit(\"join-error\", \"Incorrect password\");\r\n-\r\n-    room.users.set(socket.id, { id: socket.id, name: userName || \"Anonymous\" });\r\n-    socket.join(roomId);\r\n-    socket.emit(\"joined-room\", { roomId, room });\r\n-    io.to(roomId).emit(\"room-users\", [...room.users.values()]);\r\n-    broadcastRoomList();\r\n+  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n+    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n   });\r\n \r\n-  socket.on(\"leave-room\", (roomId) => {\r\n-    const room = rooms[roomId];\r\n-    if (!room) return;\r\n-    room.users.delete(socket.id);\r\n-    socket.leave(roomId);\r\n-    io.to(roomId).emit(\"room-users\", [...room.users.values()]);\r\n-    if (room.users.size === 0) delete rooms[roomId];\r\n-    broadcastRoomList();\r\n+  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n+    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n   });\r\n \r\n-  // ---------- Disconnect ----------\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n \r\n-    // clean up group rooms\r\n-    for (const [rid, room] of Object.entries(rooms)) {\r\n-      if (room.users.delete(socket.id)) {\r\n-        io.to(rid).emit(\"room-users\", [...room.users.values()]);\r\n-        if (room.users.size === 0) delete rooms[rid];\r\n+    socket.rooms.forEach((roomId) => {\r\n+      if (roomId !== socket.id) {\r\n+        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n-    }\r\n-\r\n-    socket.rooms.forEach((rid) => {\r\n-      if (rid !== socket.id) {\r\n-        socket.to(rid).emit(\"partner-left\", { partnerId: socket.id });\r\n-      }\r\n     });\r\n-    broadcastRoomList();\r\n   });\r\n });\r\n \r\n const PORT = process.env.PORT || 3001;\r\n-server.listen(PORT, () =>\r\n-  console.log(`🚀 Signaling server running on port ${PORT}`)\r\n-);\r\n+server.listen(PORT, () => {\r\n+  console.log(`🚀 Signaling server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1758893121270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,36 +8,28 @@\n \r\n const io = new Server(server, {\r\n   cors: {\r\n     origin: \"https://connectify-hub.vercel.app/\",\r\n-    methods: [\"GET\", \"POST\"]\r\n+    methods: [\"GET\", \"POST\"],\r\n   },\r\n });\r\n \r\n app.get(\"/\", (req, res) => {\r\n   res.send(\"🚀 Signaling server is running!\");\r\n });\r\n \r\n+// ------------------ 1-1 anonymous chat ------------------\r\n let waitingUsers = [];\r\n \r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n   socket.on(\"start-looking\", (userInfo) => {\r\n-    const {\r\n-      gender,\r\n-      country,\r\n-      age,\r\n-      name,\r\n-      filterGender = \"\",\r\n-      filterCountry = \"\"\r\n-    } = userInfo || {};\r\n-\r\n+    const { gender, country, age, name, filterGender = \"\", filterCountry = \"\" } = userInfo || {};\r\n     socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n \r\n     const index = waitingUsers.findIndex((other) => {\r\n       if (!other.connected || !other.userData) return false;\r\n-\r\n       const my = socket.userData;\r\n       const their = other.userData;\r\n \r\n       const mutualFilterMatch =\r\n@@ -55,26 +47,24 @@\n \r\n       socket.join(roomId);\r\n       partner.join(roomId);\r\n \r\n-      // Emit match to partner\r\n       partner.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: socket.id,\r\n         isOfferer: true,\r\n         partnerName: socket.userData?.name || \"Stranger\",\r\n         partnerAge: socket.userData?.age || \"Unknown\",\r\n-        partnerCountry: socket.userData?.country || \"Unknown\"\r\n+        partnerCountry: socket.userData?.country || \"Unknown\",\r\n       });\r\n \r\n-      // Emit match to socket\r\n       socket.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: partner.id,\r\n         isOfferer: false,\r\n         partnerName: partner.userData?.name || \"Stranger\",\r\n         partnerAge: partner.userData?.age || \"Unknown\",\r\n-        partnerCountry: partner.userData?.country || \"Unknown\"\r\n+        partnerCountry: partner.userData?.country || \"Unknown\",\r\n       });\r\n     } else {\r\n       waitingUsers.push(socket);\r\n     }\r\n@@ -102,65 +92,74 @@\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n     socket.emit(\"start-looking\", socket.userData);\r\n   });\r\n \r\n-  // WebRTC signaling\r\n-  socket.on(\"offer\", ({ offer, roomId }) => {\r\n-    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n-  });\r\n+  // WebRTC signaling for 1-1\r\n+  socket.on(\"offer\", ({ offer, roomId }) => socket.to(roomId).emit(\"offer\", { offer, sender: socket.id }));\r\n+  socket.on(\"answer\", ({ answer, roomId }) => socket.to(roomId).emit(\"answer\", { answer, sender: socket.id }));\r\n+  socket.on(\"ice-candidate\", ({ candidate, roomId }) => socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id }));\r\n \r\n-  socket.on(\"answer\", ({ answer, roomId }) => {\r\n-    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n-  });\r\n-\r\n-  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n-    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n-  });\r\n-\r\n-  // Chat features\r\n+  // Chat features for 1-1\r\n   socket.on(\"send-message\", (msg) => {\r\n     const { roomId } = msg;\r\n-    console.log(`💬 New message in ${roomId}:`, msg);\r\n     socket.to(roomId).emit(\"receive-message\", msg);\r\n   });\r\n+  socket.on(\"typing\", ({ roomId, sender }) => socket.to(roomId).emit(\"typing\", { sender }));\r\n+  socket.on(\"message-status\", ({ roomId, messageId, status }) => socket.to(roomId).emit(\"message-status-update\", { messageId, status }));\r\n+  socket.on(\"edit-message\", ({ roomId, messageId, content }) => socket.to(roomId).emit(\"receive-message\", { id: messageId, content, type: \"text\", edited: true }));\r\n+  socket.on(\"delete-message\", ({ roomId, messageId }) => socket.to(roomId).emit(\"message-deleted\", { messageId }));\r\n+  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => socket.to(roomId).emit(\"message-react\", { messageId, reaction, user }));\r\n \r\n-  socket.on(\"typing\", ({ roomId, sender }) => {\r\n-    socket.to(roomId).emit(\"typing\", { sender });\r\n-  });\r\n+  // ------------------ Rooms system ------------------\r\n+  let rooms = io.sockets.adapter.roomsMap || {}; // stores all rooms\r\n+  if (!socket.roomsList) socket.roomsList = new Set();\r\n \r\n-  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n-    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n+  socket.on(\"list-rooms\", () => {\r\n+    const allRooms = Array.from(io.sockets.adapter.rooms.entries())\r\n+      .filter(([roomId, s]) => !io.sockets.sockets.has(roomId))\r\n+      .map(([roomId, s]) => ({\r\n+        id: roomId,\r\n+        name: `Room ${roomId.substring(0, 5)}`,\r\n+        topic: \"General\",\r\n+        description: \"\",\r\n+        userCount: s.size,\r\n+        hasPassword: false,\r\n+      }));\r\n+    socket.emit(\"rooms\", allRooms);\r\n   });\r\n \r\n-  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n-    socket.to(roomId).emit(\"receive-message\", {\r\n-      id: messageId,\r\n-      content,\r\n-      type: \"text\",\r\n-      edited: true\r\n-    });\r\n-  });\r\n+  socket.on(\"create-room\", (roomData) => {\r\n+    const roomId = uuidv4();\r\n+    socket.join(roomId);\r\n+    socket.roomsList.add(roomId);\r\n \r\n-  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n-    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n+    const newRoom = {\r\n+      id: roomId,\r\n+      name: roomData.name,\r\n+      topic: roomData.topic,\r\n+      description: roomData.description || \"\",\r\n+      userCount: 1,\r\n+      hasPassword: !!roomData.password,\r\n+    };\r\n+\r\n+    io.emit(\"room-created\", newRoom);\r\n   });\r\n \r\n-  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n-    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n+  socket.on(\"join-room-dynamic\", ({ roomId, password }) => {\r\n+    socket.join(roomId);\r\n+    socket.roomsList.add(roomId);\r\n+    io.to(roomId).emit(\"room-update\", { id: roomId, users: Array.from(io.sockets.adapter.rooms.get(roomId) || []) });\r\n   });\r\n \r\n+  // Handle disconnect\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n \r\n     socket.rooms.forEach((roomId) => {\r\n-      if (roomId !== socket.id) {\r\n-        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-      }\r\n+      if (roomId !== socket.id) socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n     });\r\n   });\r\n });\r\n \r\n const PORT = process.env.PORT || 3001;\r\n-server.listen(PORT, () => {\r\n-  console.log(`🚀 Signaling server running on port ${PORT}`);\r\n-});\r\n+server.listen(PORT, () => console.log(`🚀 Signaling server running on port ${PORT}`));\r\n"
                },
                {
                    "date": 1758897496005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,28 +8,36 @@\n \r\n const io = new Server(server, {\r\n   cors: {\r\n     origin: \"https://connectify-hub.vercel.app/\",\r\n-    methods: [\"GET\", \"POST\"],\r\n+    methods: [\"GET\", \"POST\"]\r\n   },\r\n });\r\n \r\n app.get(\"/\", (req, res) => {\r\n   res.send(\"🚀 Signaling server is running!\");\r\n });\r\n \r\n-// ------------------ 1-1 anonymous chat ------------------\r\n let waitingUsers = [];\r\n \r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n   socket.on(\"start-looking\", (userInfo) => {\r\n-    const { gender, country, age, name, filterGender = \"\", filterCountry = \"\" } = userInfo || {};\r\n+    const {\r\n+      gender,\r\n+      country,\r\n+      age,\r\n+      name,\r\n+      filterGender = \"\",\r\n+      filterCountry = \"\"\r\n+    } = userInfo || {};\r\n+\r\n     socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n \r\n     const index = waitingUsers.findIndex((other) => {\r\n       if (!other.connected || !other.userData) return false;\r\n+\r\n       const my = socket.userData;\r\n       const their = other.userData;\r\n \r\n       const mutualFilterMatch =\r\n@@ -47,24 +55,26 @@\n \r\n       socket.join(roomId);\r\n       partner.join(roomId);\r\n \r\n+      // Emit match to partner\r\n       partner.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: socket.id,\r\n         isOfferer: true,\r\n         partnerName: socket.userData?.name || \"Stranger\",\r\n         partnerAge: socket.userData?.age || \"Unknown\",\r\n-        partnerCountry: socket.userData?.country || \"Unknown\",\r\n+        partnerCountry: socket.userData?.country || \"Unknown\"\r\n       });\r\n \r\n+      // Emit match to socket\r\n       socket.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: partner.id,\r\n         isOfferer: false,\r\n         partnerName: partner.userData?.name || \"Stranger\",\r\n         partnerAge: partner.userData?.age || \"Unknown\",\r\n-        partnerCountry: partner.userData?.country || \"Unknown\",\r\n+        partnerCountry: partner.userData?.country || \"Unknown\"\r\n       });\r\n     } else {\r\n       waitingUsers.push(socket);\r\n     }\r\n@@ -92,74 +102,65 @@\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n     socket.emit(\"start-looking\", socket.userData);\r\n   });\r\n \r\n-  // WebRTC signaling for 1-1\r\n-  socket.on(\"offer\", ({ offer, roomId }) => socket.to(roomId).emit(\"offer\", { offer, sender: socket.id }));\r\n-  socket.on(\"answer\", ({ answer, roomId }) => socket.to(roomId).emit(\"answer\", { answer, sender: socket.id }));\r\n-  socket.on(\"ice-candidate\", ({ candidate, roomId }) => socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id }));\r\n+  // WebRTC signaling\r\n+  socket.on(\"offer\", ({ offer, roomId }) => {\r\n+    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n+  });\r\n \r\n-  // Chat features for 1-1\r\n+  socket.on(\"answer\", ({ answer, roomId }) => {\r\n+    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n+  });\r\n+\r\n+  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n+    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n+  });\r\n+\r\n+  // Chat features\r\n   socket.on(\"send-message\", (msg) => {\r\n     const { roomId } = msg;\r\n+    console.log(`💬 New message in ${roomId}:`, msg);\r\n     socket.to(roomId).emit(\"receive-message\", msg);\r\n   });\r\n-  socket.on(\"typing\", ({ roomId, sender }) => socket.to(roomId).emit(\"typing\", { sender }));\r\n-  socket.on(\"message-status\", ({ roomId, messageId, status }) => socket.to(roomId).emit(\"message-status-update\", { messageId, status }));\r\n-  socket.on(\"edit-message\", ({ roomId, messageId, content }) => socket.to(roomId).emit(\"receive-message\", { id: messageId, content, type: \"text\", edited: true }));\r\n-  socket.on(\"delete-message\", ({ roomId, messageId }) => socket.to(roomId).emit(\"message-deleted\", { messageId }));\r\n-  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => socket.to(roomId).emit(\"message-react\", { messageId, reaction, user }));\r\n \r\n-  // ------------------ Rooms system ------------------\r\n-  let rooms = io.sockets.adapter.roomsMap || {}; // stores all rooms\r\n-  if (!socket.roomsList) socket.roomsList = new Set();\r\n+  socket.on(\"typing\", ({ roomId, sender }) => {\r\n+    socket.to(roomId).emit(\"typing\", { sender });\r\n+  });\r\n \r\n-  socket.on(\"list-rooms\", () => {\r\n-    const allRooms = Array.from(io.sockets.adapter.rooms.entries())\r\n-      .filter(([roomId, s]) => !io.sockets.sockets.has(roomId))\r\n-      .map(([roomId, s]) => ({\r\n-        id: roomId,\r\n-        name: `Room ${roomId.substring(0, 5)}`,\r\n-        topic: \"General\",\r\n-        description: \"\",\r\n-        userCount: s.size,\r\n-        hasPassword: false,\r\n-      }));\r\n-    socket.emit(\"rooms\", allRooms);\r\n+  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n+    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n   });\r\n \r\n-  socket.on(\"create-room\", (roomData) => {\r\n-    const roomId = uuidv4();\r\n-    socket.join(roomId);\r\n-    socket.roomsList.add(roomId);\r\n+  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n+    socket.to(roomId).emit(\"receive-message\", {\r\n+      id: messageId,\r\n+      content,\r\n+      type: \"text\",\r\n+      edited: true\r\n+    });\r\n+  });\r\n \r\n-    const newRoom = {\r\n-      id: roomId,\r\n-      name: roomData.name,\r\n-      topic: roomData.topic,\r\n-      description: roomData.description || \"\",\r\n-      userCount: 1,\r\n-      hasPassword: !!roomData.password,\r\n-    };\r\n-\r\n-    io.emit(\"room-created\", newRoom);\r\n+  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n+    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n   });\r\n \r\n-  socket.on(\"join-room-dynamic\", ({ roomId, password }) => {\r\n-    socket.join(roomId);\r\n-    socket.roomsList.add(roomId);\r\n-    io.to(roomId).emit(\"room-update\", { id: roomId, users: Array.from(io.sockets.adapter.rooms.get(roomId) || []) });\r\n+  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n+    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n   });\r\n \r\n-  // Handle disconnect\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n \r\n     socket.rooms.forEach((roomId) => {\r\n-      if (roomId !== socket.id) socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+      if (roomId !== socket.id) {\r\n+        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+      }\r\n     });\r\n   });\r\n });\r\n \r\n const PORT = process.env.PORT || 3001;\r\n-server.listen(PORT, () => console.log(`🚀 Signaling server running on port ${PORT}`));\r\n+server.listen(PORT, () => {\r\n+  console.log(`🚀 Signaling server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1758898211075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+// server/index.js\r\n const express = require(\"express\");\r\n const http = require(\"http\");\r\n const { Server } = require(\"socket.io\");\r\n const { v4: uuidv4 } = require(\"uuid\");\r\n@@ -8,88 +9,91 @@\n \r\n const io = new Server(server, {\r\n   cors: {\r\n     origin: \"https://connectify-hub.vercel.app/\",\r\n-    methods: [\"GET\", \"POST\"]\r\n+    methods: [\"GET\", \"POST\"],\r\n   },\r\n });\r\n \r\n app.get(\"/\", (req, res) => {\r\n   res.send(\"🚀 Signaling server is running!\");\r\n });\r\n \r\n+// ===== 1-1 Anonymous Chat =====\r\n let waitingUsers = [];\r\n \r\n+function matchUsers(socket) {\r\n+  const index = waitingUsers.findIndex((other) => {\r\n+    if (!other.connected || !other.userData) return false;\r\n+\r\n+    const my = socket.userData;\r\n+    const their = other.userData;\r\n+\r\n+    const mutualFilterMatch =\r\n+      (!their.filterGender || their.filterGender === my.gender) &&\r\n+      (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n+      (!my.filterGender || my.filterGender === their.gender) &&\r\n+      (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n+\r\n+    return mutualFilterMatch;\r\n+  });\r\n+\r\n+  if (index !== -1) {\r\n+    const partner = waitingUsers.splice(index, 1)[0];\r\n+    const roomId = uuidv4();\r\n+\r\n+    socket.join(roomId);\r\n+    partner.join(roomId);\r\n+\r\n+    // Emit match to partner\r\n+    partner.emit(\"matched\", {\r\n+      roomId,\r\n+      partnerId: socket.id,\r\n+      isOfferer: true,\r\n+      partnerName: socket.userData?.name || \"Stranger\",\r\n+      partnerAge: socket.userData?.age || \"Unknown\",\r\n+      partnerCountry: socket.userData?.country || \"Unknown\",\r\n+    });\r\n+\r\n+    // Emit match to socket\r\n+    socket.emit(\"matched\", {\r\n+      roomId,\r\n+      partnerId: partner.id,\r\n+      isOfferer: false,\r\n+      partnerName: partner.userData?.name || \"Stranger\",\r\n+      partnerAge: partner.userData?.age || \"Unknown\",\r\n+      partnerCountry: partner.userData?.country || \"Unknown\",\r\n+    });\r\n+  } else {\r\n+    waitingUsers.push(socket);\r\n+  }\r\n+}\r\n+\r\n+// ===== Room System =====\r\n+let rooms = {}; // { roomId: { id, name, topic, description, password, users: [] } }\r\n+\r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n+  // ---------- 1-1 Anonymous Chat ----------\r\n   socket.on(\"start-looking\", (userInfo) => {\r\n     const {\r\n       gender,\r\n       country,\r\n       age,\r\n       name,\r\n       filterGender = \"\",\r\n-      filterCountry = \"\"\r\n+      filterCountry = \"\",\r\n     } = userInfo || {};\r\n \r\n     socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n-\r\n-    const index = waitingUsers.findIndex((other) => {\r\n-      if (!other.connected || !other.userData) return false;\r\n-\r\n-      const my = socket.userData;\r\n-      const their = other.userData;\r\n-\r\n-      const mutualFilterMatch =\r\n-        (!their.filterGender || their.filterGender === my.gender) &&\r\n-        (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n-        (!my.filterGender || my.filterGender === their.gender) &&\r\n-        (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n-\r\n-      return mutualFilterMatch;\r\n-    });\r\n-\r\n-    if (index !== -1) {\r\n-      const partner = waitingUsers.splice(index, 1)[0];\r\n-      const roomId = uuidv4();\r\n-\r\n-      socket.join(roomId);\r\n-      partner.join(roomId);\r\n-\r\n-      // Emit match to partner\r\n-      partner.emit(\"matched\", {\r\n-        roomId,\r\n-        partnerId: socket.id,\r\n-        isOfferer: true,\r\n-        partnerName: socket.userData?.name || \"Stranger\",\r\n-        partnerAge: socket.userData?.age || \"Unknown\",\r\n-        partnerCountry: socket.userData?.country || \"Unknown\"\r\n-      });\r\n-\r\n-      // Emit match to socket\r\n-      socket.emit(\"matched\", {\r\n-        roomId,\r\n-        partnerId: partner.id,\r\n-        isOfferer: false,\r\n-        partnerName: partner.userData?.name || \"Stranger\",\r\n-        partnerAge: partner.userData?.age || \"Unknown\",\r\n-        partnerCountry: partner.userData?.country || \"Unknown\"\r\n-      });\r\n-    } else {\r\n-      waitingUsers.push(socket);\r\n-    }\r\n+    matchUsers(socket);\r\n   });\r\n \r\n-  socket.on(\"join-room\", (roomId) => {\r\n-    socket.join(roomId);\r\n-    socket.emit(\"joined-room\", roomId);\r\n-  });\r\n-\r\n   socket.on(\"leave-room\", (roomId) => {\r\n     socket.leave(roomId);\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n     socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n   });\r\n \r\n   socket.on(\"skip\", () => {\r\n     socket.rooms.forEach((roomId) => {\r\n@@ -97,14 +101,13 @@\n         socket.leave(roomId);\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n     });\r\n-\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n     socket.emit(\"start-looking\", socket.userData);\r\n   });\r\n \r\n-  // WebRTC signaling\r\n+  // ---------- WebRTC Signaling (1-1 & rooms) ----------\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n     socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n \r\n@@ -115,13 +118,11 @@\n   socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n     socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n-  // Chat features\r\n-  socket.on(\"send-message\", (msg) => {\r\n-    const { roomId } = msg;\r\n-    console.log(`💬 New message in ${roomId}:`, msg);\r\n-    socket.to(roomId).emit(\"receive-message\", msg);\r\n+  // ---------- Chat Features ----------\r\n+  socket.on(\"send-message\", ({ roomId, message }) => {\r\n+    socket.to(roomId).emit(\"receive-message\", message);\r\n   });\r\n \r\n   socket.on(\"typing\", ({ roomId, sender }) => {\r\n     socket.to(roomId).emit(\"typing\", { sender });\r\n@@ -135,9 +136,9 @@\n     socket.to(roomId).emit(\"receive-message\", {\r\n       id: messageId,\r\n       content,\r\n       type: \"text\",\r\n-      edited: true\r\n+      edited: true,\r\n     });\r\n   });\r\n \r\n   socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n@@ -147,12 +148,59 @@\n   socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n     socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n   });\r\n \r\n+  // ---------- Room System ----------\r\n+  socket.on(\"create-room\", (roomData) => {\r\n+    const roomId = roomData.id || uuidv4();\r\n+    rooms[roomId] = {\r\n+      ...roomData,\r\n+      id: roomId,\r\n+      users: [],\r\n+    };\r\n+    socket.emit(\"room-created\", rooms[roomId]);\r\n+    io.emit(\"rooms\", Object.values(rooms));\r\n+  });\r\n+\r\n+  socket.on(\"list-rooms\", () => {\r\n+    socket.emit(\"rooms\", Object.values(rooms));\r\n+  });\r\n+\r\n+  socket.on(\"join-room\", (roomId) => {\r\n+    const room = rooms[roomId];\r\n+    if (room) {\r\n+      socket.join(roomId);\r\n+      room.users.push(socket.id);\r\n+      io.to(roomId).emit(\"room-update\", room);\r\n+      socket.emit(\"joined-room\", roomId);\r\n+    }\r\n+  });\r\n+\r\n+  socket.on(\"leave-room\", (roomId) => {\r\n+    const room = rooms[roomId];\r\n+    if (room) {\r\n+      socket.leave(roomId);\r\n+      room.users = room.users.filter((id) => id !== socket.id);\r\n+      io.to(roomId).emit(\"room-update\", room);\r\n+    }\r\n+  });\r\n+\r\n+  // ---------- Disconnect ----------\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n+\r\n+    // Remove from waitingUsers\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n \r\n+    // Remove from rooms\r\n+    Object.values(rooms).forEach((room) => {\r\n+      if (room.users.includes(socket.id)) {\r\n+        room.users = room.users.filter((id) => id !== socket.id);\r\n+        io.to(room.id).emit(\"room-update\", room);\r\n+      }\r\n+    });\r\n+\r\n+    // Notify 1-1 partners\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n"
                },
                {
                    "date": 1758899443951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,183 @@\n+// server/index.js\r\n+const express = require(\"express\");\r\n+const http = require(\"http\");\r\n+const { Server } = require(\"socket.io\");\r\n+const { v4: uuidv4 } = require(\"uuid\");\r\n+\r\n+const app = express();\r\n+const server = http.createServer(app);\r\n+\r\n+const io = new Server(server, {\r\n+  cors: {\r\n+    origin: \"https://connectify-hub.vercel.app/\",\r\n+    methods: [\"GET\", \"POST\"],\r\n+  },\r\n+});\r\n+\r\n+app.get(\"/\", (req, res) => {\r\n+  res.send(\"🚀 Signaling server is running!\");\r\n+});\r\n+\r\n+// ===== 1-1 Anonymous Chat =====\r\n+let waitingUsers = [];\r\n+\r\n+function matchUsers(socket) {\r\n+  const index = waitingUsers.findIndex((other) => {\r\n+    if (!other.connected || !other.userData) return false;\r\n+\r\n+    const my = socket.userData;\r\n+    const their = other.userData;\r\n+\r\n+    const mutualFilterMatch =\r\n+      (!their.filterGender || their.filterGender === my.gender) &&\r\n+      (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n+      (!my.filterGender || my.filterGender === their.gender) &&\r\n+      (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n+\r\n+    return mutualFilterMatch;\r\n+  });\r\n+\r\n+  if (index !== -1) {\r\n+    const partner = waitingUsers.splice(index, 1)[0];\r\n+    const roomId = uuidv4();\r\n+\r\n+    socket.join(roomId);\r\n+    partner.join(roomId);\r\n+\r\n+    // Emit match to partner\r\n+    partner.emit(\"matched\", {\r\n+      roomId,\r\n+      partnerId: socket.id,\r\n+      isOfferer: true,\r\n+      partnerName: socket.userData?.name || \"Stranger\",\r\n+      partnerAge: socket.userData?.age || \"Unknown\",\r\n+      partnerCountry: socket.userData?.country || \"Unknown\",\r\n+    });\r\n+\r\n+    // Emit match to socket\r\n+    socket.emit(\"matched\", {\r\n+      roomId,\r\n+      partnerId: partner.id,\r\n+      isOfferer: false,\r\n+      partnerName: partner.userData?.name || \"Stranger\",\r\n+      partnerAge: partner.userData?.age || \"Unknown\",\r\n+      partnerCountry: partner.userData?.country || \"Unknown\",\r\n+    });\r\n+  } else {\r\n+    waitingUsers.push(socket);\r\n+  }\r\n+}\r\n+\r\n+// ===== Room System =====\r\n+let rooms = {}; // { roomId: { id, name, topic, description, password, users: [], sockets: [] } }\r\n+\r\n+io.on(\"connection\", (socket) => {\r\n+  console.log(\"✅ User connected:\", socket.id);\r\n+\r\n+  // ---------- 1-1 Anonymous Chat ----------\r\n+  socket.on(\"start-looking\", (userInfo) => {\r\n+    socket.userData = userInfo;\r\n+    matchUsers(socket);\r\n+  });\r\n+\r\n+  socket.on(\"skip\", () => {\r\n+    socket.rooms.forEach((roomId) => {\r\n+      if (roomId !== socket.id) {\r\n+        socket.leave(roomId);\r\n+        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+      }\r\n+    });\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+    socket.emit(\"start-looking\", socket.userData);\r\n+  });\r\n+\r\n+  // ---------- WebRTC Signaling for 1-1 & rooms ----------\r\n+  socket.on(\"offer\", ({ offer, roomId, to }) => {\r\n+    socket.to(to).emit(\"offer\", { offer, sender: socket.id });\r\n+  });\r\n+\r\n+  socket.on(\"answer\", ({ answer, roomId, to }) => {\r\n+    socket.to(to).emit(\"answer\", { answer, sender: socket.id });\r\n+  });\r\n+\r\n+  socket.on(\"ice-candidate\", ({ candidate, roomId, to }) => {\r\n+    socket.to(to).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n+  });\r\n+\r\n+  // ---------- Chat Features ----------\r\n+  socket.on(\"send-message\", ({ roomId, message }) => {\r\n+    socket.to(roomId).emit(\"receive-message\", message);\r\n+  });\r\n+\r\n+  socket.on(\"typing\", ({ roomId, sender }) => {\r\n+    socket.to(roomId).emit(\"typing\", { sender });\r\n+  });\r\n+\r\n+  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n+    socket.to(roomId).emit(\"receive-message\", { id: messageId, content, edited: true });\r\n+  });\r\n+\r\n+  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n+    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n+  });\r\n+\r\n+  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n+    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n+  });\r\n+\r\n+  // ---------- Room System ----------\r\n+  socket.on(\"create-room\", (roomData) => {\r\n+    const roomId = roomData.id || uuidv4();\r\n+    rooms[roomId] = { ...roomData, id: roomId, users: [] };\r\n+    io.emit(\"rooms\", Object.values(rooms));\r\n+    socket.emit(\"room-created\", rooms[roomId]);\r\n+  });\r\n+\r\n+  socket.on(\"list-rooms\", () => {\r\n+    socket.emit(\"rooms\", Object.values(rooms));\r\n+  });\r\n+\r\n+  socket.on(\"join-room-dynamic\", ({ roomId, userInfo }) => {\r\n+    const room = rooms[roomId];\r\n+    if (room) {\r\n+      socket.join(roomId);\r\n+      room.users.push({ id: socket.id, userInfo });\r\n+      io.to(roomId).emit(\"room-update\", room);\r\n+    }\r\n+  });\r\n+\r\n+  socket.on(\"leave-room\", (roomId) => {\r\n+    const room = rooms[roomId];\r\n+    if (room) {\r\n+      socket.leave(roomId);\r\n+      room.users = room.users.filter((u) => u.id !== socket.id);\r\n+      io.to(roomId).emit(\"room-update\", room);\r\n+    }\r\n+  });\r\n+\r\n+  // ---------- Disconnect ----------\r\n+  socket.on(\"disconnect\", () => {\r\n+    console.log(\"❌ User disconnected:\", socket.id);\r\n+\r\n+    // Remove from waitingUsers\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+\r\n+    // Remove from rooms\r\n+    Object.values(rooms).forEach((room) => {\r\n+      room.users = room.users.filter((u) => u.id !== socket.id);\r\n+      io.to(room.id).emit(\"room-update\", room);\r\n+    });\r\n+\r\n+    // Notify 1-1 partners\r\n+    socket.rooms.forEach((roomId) => {\r\n+      if (roomId !== socket.id) {\r\n+        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+      }\r\n+    });\r\n+  });\r\n+});\r\n+\r\n+const PORT = process.env.PORT || 3001;\r\n+server.listen(PORT, () => {\r\n+  console.log(`🚀 Signaling server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1758900958290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-// server/index.js\r\n const express = require(\"express\");\r\n const http = require(\"http\");\r\n const { Server } = require(\"socket.io\");\r\n const { v4: uuidv4 } = require(\"uuid\");\r\n@@ -9,113 +8,137 @@\n \r\n const io = new Server(server, {\r\n   cors: {\r\n     origin: \"https://connectify-hub.vercel.app/\",\r\n-    methods: [\"GET\", \"POST\"],\r\n+    methods: [\"GET\", \"POST\"]\r\n   },\r\n });\r\n \r\n app.get(\"/\", (req, res) => {\r\n   res.send(\"🚀 Signaling server is running!\");\r\n });\r\n \r\n-// ===== 1-1 Anonymous Chat =====\r\n let waitingUsers = [];\r\n \r\n-function matchUsers(socket) {\r\n-  const index = waitingUsers.findIndex((other) => {\r\n-    if (!other.connected || !other.userData) return false;\r\n+io.on(\"connection\", (socket) => {\r\n+  console.log(\"✅ User connected:\", socket.id);\r\n \r\n-    const my = socket.userData;\r\n-    const their = other.userData;\r\n+  socket.on(\"start-looking\", (userInfo) => {\r\n+    const {\r\n+      gender,\r\n+      country,\r\n+      age,\r\n+      name,\r\n+      filterGender = \"\",\r\n+      filterCountry = \"\"\r\n+    } = userInfo || {};\r\n \r\n-    const mutualFilterMatch =\r\n-      (!their.filterGender || their.filterGender === my.gender) &&\r\n-      (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n-      (!my.filterGender || my.filterGender === their.gender) &&\r\n-      (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n+    socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n \r\n-    return mutualFilterMatch;\r\n-  });\r\n+    const index = waitingUsers.findIndex((other) => {\r\n+      if (!other.connected || !other.userData) return false;\r\n \r\n-  if (index !== -1) {\r\n-    const partner = waitingUsers.splice(index, 1)[0];\r\n-    const roomId = uuidv4();\r\n+      const my = socket.userData;\r\n+      const their = other.userData;\r\n \r\n-    socket.join(roomId);\r\n-    partner.join(roomId);\r\n+      const mutualFilterMatch =\r\n+        (!their.filterGender || their.filterGender === my.gender) &&\r\n+        (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n+        (!my.filterGender || my.filterGender === their.gender) &&\r\n+        (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n \r\n-    // Emit match to partner\r\n-    partner.emit(\"matched\", {\r\n-      roomId,\r\n-      partnerId: socket.id,\r\n-      isOfferer: true,\r\n-      partnerName: socket.userData?.name || \"Stranger\",\r\n-      partnerAge: socket.userData?.age || \"Unknown\",\r\n-      partnerCountry: socket.userData?.country || \"Unknown\",\r\n+      return mutualFilterMatch;\r\n     });\r\n \r\n-    // Emit match to socket\r\n-    socket.emit(\"matched\", {\r\n-      roomId,\r\n-      partnerId: partner.id,\r\n-      isOfferer: false,\r\n-      partnerName: partner.userData?.name || \"Stranger\",\r\n-      partnerAge: partner.userData?.age || \"Unknown\",\r\n-      partnerCountry: partner.userData?.country || \"Unknown\",\r\n-    });\r\n-  } else {\r\n-    waitingUsers.push(socket);\r\n-  }\r\n-}\r\n+    if (index !== -1) {\r\n+      const partner = waitingUsers.splice(index, 1)[0];\r\n+      const roomId = uuidv4();\r\n \r\n-// ===== Room System =====\r\n-let rooms = {}; // { roomId: { id, name, topic, description, password, users: [], sockets: [] } }\r\n+      socket.join(roomId);\r\n+      partner.join(roomId);\r\n \r\n-io.on(\"connection\", (socket) => {\r\n-  console.log(\"✅ User connected:\", socket.id);\r\n+      // Emit match to partner\r\n+      partner.emit(\"matched\", {\r\n+        roomId,\r\n+        partnerId: socket.id,\r\n+        isOfferer: true,\r\n+        partnerName: socket.userData?.name || \"Stranger\",\r\n+        partnerAge: socket.userData?.age || \"Unknown\",\r\n+        partnerCountry: socket.userData?.country || \"Unknown\"\r\n+      });\r\n \r\n-  // ---------- 1-1 Anonymous Chat ----------\r\n-  socket.on(\"start-looking\", (userInfo) => {\r\n-    socket.userData = userInfo;\r\n-    matchUsers(socket);\r\n+      // Emit match to socket\r\n+      socket.emit(\"matched\", {\r\n+        roomId,\r\n+        partnerId: partner.id,\r\n+        isOfferer: false,\r\n+        partnerName: partner.userData?.name || \"Stranger\",\r\n+        partnerAge: partner.userData?.age || \"Unknown\",\r\n+        partnerCountry: partner.userData?.country || \"Unknown\"\r\n+      });\r\n+    } else {\r\n+      waitingUsers.push(socket);\r\n+    }\r\n   });\r\n \r\n+  socket.on(\"join-room\", (roomId) => {\r\n+    socket.join(roomId);\r\n+    socket.emit(\"joined-room\", roomId);\r\n+  });\r\n+\r\n+  socket.on(\"leave-room\", (roomId) => {\r\n+    socket.leave(roomId);\r\n+    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+  });\r\n+\r\n   socket.on(\"skip\", () => {\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.leave(roomId);\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n     });\r\n+\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n     socket.emit(\"start-looking\", socket.userData);\r\n   });\r\n \r\n-  // ---------- WebRTC Signaling for 1-1 & rooms ----------\r\n-  socket.on(\"offer\", ({ offer, roomId, to }) => {\r\n-    socket.to(to).emit(\"offer\", { offer, sender: socket.id });\r\n+  // WebRTC signaling\r\n+  socket.on(\"offer\", ({ offer, roomId }) => {\r\n+    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n \r\n-  socket.on(\"answer\", ({ answer, roomId, to }) => {\r\n-    socket.to(to).emit(\"answer\", { answer, sender: socket.id });\r\n+  socket.on(\"answer\", ({ answer, roomId }) => {\r\n+    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n   });\r\n \r\n-  socket.on(\"ice-candidate\", ({ candidate, roomId, to }) => {\r\n-    socket.to(to).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n+  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n+    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n-  // ---------- Chat Features ----------\r\n-  socket.on(\"send-message\", ({ roomId, message }) => {\r\n-    socket.to(roomId).emit(\"receive-message\", message);\r\n+  // Chat features\r\n+  socket.on(\"send-message\", (msg) => {\r\n+    const { roomId } = msg;\r\n+    console.log(`💬 New message in ${roomId}:`, msg);\r\n+    socket.to(roomId).emit(\"receive-message\", msg);\r\n   });\r\n \r\n   socket.on(\"typing\", ({ roomId, sender }) => {\r\n     socket.to(roomId).emit(\"typing\", { sender });\r\n   });\r\n \r\n+  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n+    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n+  });\r\n+\r\n   socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n-    socket.to(roomId).emit(\"receive-message\", { id: messageId, content, edited: true });\r\n+    socket.to(roomId).emit(\"receive-message\", {\r\n+      id: messageId,\r\n+      content,\r\n+      type: \"text\",\r\n+      edited: true\r\n+    });\r\n   });\r\n \r\n   socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n     socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n@@ -124,52 +147,12 @@\n   socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n     socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n   });\r\n \r\n-  // ---------- Room System ----------\r\n-  socket.on(\"create-room\", (roomData) => {\r\n-    const roomId = roomData.id || uuidv4();\r\n-    rooms[roomId] = { ...roomData, id: roomId, users: [] };\r\n-    io.emit(\"rooms\", Object.values(rooms));\r\n-    socket.emit(\"room-created\", rooms[roomId]);\r\n-  });\r\n-\r\n-  socket.on(\"list-rooms\", () => {\r\n-    socket.emit(\"rooms\", Object.values(rooms));\r\n-  });\r\n-\r\n-  socket.on(\"join-room-dynamic\", ({ roomId, userInfo }) => {\r\n-    const room = rooms[roomId];\r\n-    if (room) {\r\n-      socket.join(roomId);\r\n-      room.users.push({ id: socket.id, userInfo });\r\n-      io.to(roomId).emit(\"room-update\", room);\r\n-    }\r\n-  });\r\n-\r\n-  socket.on(\"leave-room\", (roomId) => {\r\n-    const room = rooms[roomId];\r\n-    if (room) {\r\n-      socket.leave(roomId);\r\n-      room.users = room.users.filter((u) => u.id !== socket.id);\r\n-      io.to(roomId).emit(\"room-update\", room);\r\n-    }\r\n-  });\r\n-\r\n-  // ---------- Disconnect ----------\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n-\r\n-    // Remove from waitingUsers\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n \r\n-    // Remove from rooms\r\n-    Object.values(rooms).forEach((room) => {\r\n-      room.users = room.users.filter((u) => u.id !== socket.id);\r\n-      io.to(room.id).emit(\"room-update\", room);\r\n-    });\r\n-\r\n-    // Notify 1-1 partners\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n"
                },
                {
                    "date": 1758902233323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,211 +7,40 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://connectify-hub.vercel.app/\",\r\n-    methods: [\"GET\", \"POST\"]\r\n-  },\r\n-});\r\n-\r\n-app.get(\"/\", (req, res) => {\r\n-  res.send(\"🚀 Signaling server is running!\");\r\n-});\r\n-\r\n-let waitingUsers = [];\r\n-\r\n-io.on(\"connection\", (socket) => {\r\n-  console.log(\"✅ User connected:\", socket.id);\r\n-\r\n-  socket.on(\"start-looking\", (userInfo) => {\r\n-    const {\r\n-      gender,\r\n-      country,\r\n-      age,\r\n-      name,\r\n-      filterGender = \"\",\r\n-      filterCountry = \"\"\r\n-    } = userInfo || {};\r\n-\r\n-    socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n-\r\n-    const index = waitingUsers.findIndex((other) => {\r\n-      if (!other.connected || !other.userData) return false;\r\n-\r\n-      const my = socket.userData;\r\n-      const their = other.userData;\r\n-\r\n-      const mutualFilterMatch =\r\n-        (!their.filterGender || their.filterGender === my.gender) &&\r\n-        (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n-        (!my.filterGender || my.filterGender === their.gender) &&\r\n-        (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n-\r\n-      return mutualFilterMatch;\r\n-    });\r\n-\r\n-    if (index !== -1) {\r\n-      const partner = waitingUsers.splice(index, 1)[0];\r\n-      const roomId = uuidv4();\r\n-\r\n-      socket.join(roomId);\r\n-      partner.join(roomId);\r\n-\r\n-      // Emit match to partner\r\n-      partner.emit(\"matched\", {\r\n-        roomId,\r\n-        partnerId: socket.id,\r\n-        isOfferer: true,\r\n-        partnerName: socket.userData?.name || \"Stranger\",\r\n-        partnerAge: socket.userData?.age || \"Unknown\",\r\n-        partnerCountry: socket.userData?.country || \"Unknown\"\r\n-      });\r\n-\r\n-      // Emit match to socket\r\n-      socket.emit(\"matched\", {\r\n-        roomId,\r\n-        partnerId: partner.id,\r\n-        isOfferer: false,\r\n-        partnerName: partner.userData?.name || \"Stranger\",\r\n-        partnerAge: partner.userData?.age || \"Unknown\",\r\n-        partnerCountry: partner.userData?.country || \"Unknown\"\r\n-      });\r\n-    } else {\r\n-      waitingUsers.push(socket);\r\n-    }\r\n-  });\r\n-\r\n-  socket.on(\"join-room\", (roomId) => {\r\n-    socket.join(roomId);\r\n-    socket.emit(\"joined-room\", roomId);\r\n-  });\r\n-\r\n-  socket.on(\"leave-room\", (roomId) => {\r\n-    socket.leave(roomId);\r\n-    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-  });\r\n-\r\n-  socket.on(\"skip\", () => {\r\n-    socket.rooms.forEach((roomId) => {\r\n-      if (roomId !== socket.id) {\r\n-        socket.leave(roomId);\r\n-        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-      }\r\n-    });\r\n-\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-    socket.emit(\"start-looking\", socket.userData);\r\n-  });\r\n-\r\n-  // WebRTC signaling\r\n-  socket.on(\"offer\", ({ offer, roomId }) => {\r\n-    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n-  });\r\n-\r\n-  socket.on(\"answer\", ({ answer, roomId }) => {\r\n-    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n-  });\r\n-\r\n-  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n-    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n-  });\r\n-\r\n-  // Chat features\r\n-  socket.on(\"send-message\", (msg) => {\r\n-    const { roomId } = msg;\r\n-    console.log(`💬 New message in ${roomId}:`, msg);\r\n-    socket.to(roomId).emit(\"receive-message\", msg);\r\n-  });\r\n-\r\n-  socket.on(\"typing\", ({ roomId, sender }) => {\r\n-    socket.to(roomId).emit(\"typing\", { sender });\r\n-  });\r\n-\r\n-  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n-    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n-  });\r\n-\r\n-  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n-    socket.to(roomId).emit(\"receive-message\", {\r\n-      id: messageId,\r\n-      content,\r\n-      type: \"text\",\r\n-      edited: true\r\n-    });\r\n-  });\r\n-\r\n-  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n-    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n-  });\r\n-\r\n-  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n-    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n-  });\r\n-\r\n-  socket.on(\"disconnect\", () => {\r\n-    console.log(\"❌ User disconnected:\", socket.id);\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-\r\n-    socket.rooms.forEach((roomId) => {\r\n-      if (roomId !== socket.id) {\r\n-        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-      }\r\n-    });\r\n-  });\r\n-});\r\n-\r\n-const PORT = process.env.PORT || 3001;\r\n-server.listen(PORT, () => {\r\n-  console.log(`🚀 Signaling server running on port ${PORT}`);\r\n-});\r\n-// server/index.js\r\n-const express = require(\"express\");\r\n-const http = require(\"http\");\r\n-const { Server } = require(\"socket.io\");\r\n-const { v4: uuidv4 } = require(\"uuid\");\r\n-\r\n-const app = express();\r\n-const server = http.createServer(app);\r\n-\r\n-const io = new Server(server, {\r\n-  cors: {\r\n-    origin: \"https://connectify-hub.vercel.app/\",\r\n+    origin: \"https://connectify-hub.vercel.app\",\r\n     methods: [\"GET\", \"POST\"],\r\n   },\r\n });\r\n \r\n app.get(\"/\", (req, res) => {\r\n-  res.send(\"🚀 Signaling server is running!\");\r\n+  res.send(\"🚀 Signaling server running!\");\r\n });\r\n \r\n // ===== 1-1 Anonymous Chat =====\r\n let waitingUsers = [];\r\n-\r\n function matchUsers(socket) {\r\n   const index = waitingUsers.findIndex((other) => {\r\n     if (!other.connected || !other.userData) return false;\r\n-\r\n     const my = socket.userData;\r\n     const their = other.userData;\r\n \r\n-    const mutualFilterMatch =\r\n+    return (\r\n       (!their.filterGender || their.filterGender === my.gender) &&\r\n       (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n       (!my.filterGender || my.filterGender === their.gender) &&\r\n-      (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n-\r\n-    return mutualFilterMatch;\r\n+      (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase())\r\n+    );\r\n   });\r\n \r\n   if (index !== -1) {\r\n     const partner = waitingUsers.splice(index, 1)[0];\r\n     const roomId = uuidv4();\r\n-\r\n     socket.join(roomId);\r\n     partner.join(roomId);\r\n \r\n-    // Emit match to partner\r\n+    // Emit to both\r\n     partner.emit(\"matched\", {\r\n       roomId,\r\n       partnerId: socket.id,\r\n       isOfferer: true,\r\n@@ -219,9 +48,8 @@\n       partnerAge: socket.userData?.age || \"Unknown\",\r\n       partnerCountry: socket.userData?.country || \"Unknown\",\r\n     });\r\n \r\n-    // Emit match to socket\r\n     socket.emit(\"matched\", {\r\n       roomId,\r\n       partnerId: partner.id,\r\n       isOfferer: false,\r\n@@ -234,34 +62,19 @@\n   }\r\n }\r\n \r\n // ===== Room System =====\r\n-let rooms = {}; // { roomId: { id, name, topic, description, password, users: [] } }\r\n+let rooms = {}; // { roomId: { id, name, topic, users: [] } }\r\n \r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  // ---------- 1-1 Anonymous Chat ----------\r\n+  // 1-1 Anonymous Chat\r\n   socket.on(\"start-looking\", (userInfo) => {\r\n-    const {\r\n-      gender,\r\n-      country,\r\n-      age,\r\n-      name,\r\n-      filterGender = \"\",\r\n-      filterCountry = \"\",\r\n-    } = userInfo || {};\r\n-\r\n-    socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n+    socket.userData = userInfo;\r\n     matchUsers(socket);\r\n   });\r\n \r\n-  socket.on(\"leave-room\", (roomId) => {\r\n-    socket.leave(roomId);\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-  });\r\n-\r\n   socket.on(\"skip\", () => {\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.leave(roomId);\r\n@@ -271,99 +84,77 @@\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n     socket.emit(\"start-looking\", socket.userData);\r\n   });\r\n \r\n-  // ---------- WebRTC Signaling (1-1 & rooms) ----------\r\n+  // WebRTC signaling for 1-1 and rooms\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n     socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n-\r\n   socket.on(\"answer\", ({ answer, roomId }) => {\r\n     socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n   });\r\n-\r\n   socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n     socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n-  // ---------- Chat Features ----------\r\n+  // Chat\r\n   socket.on(\"send-message\", ({ roomId, message }) => {\r\n     socket.to(roomId).emit(\"receive-message\", message);\r\n   });\r\n-\r\n   socket.on(\"typing\", ({ roomId, sender }) => {\r\n     socket.to(roomId).emit(\"typing\", { sender });\r\n   });\r\n-\r\n-  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n-    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n-  });\r\n-\r\n   socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n-    socket.to(roomId).emit(\"receive-message\", {\r\n-      id: messageId,\r\n-      content,\r\n-      type: \"text\",\r\n-      edited: true,\r\n-    });\r\n+    socket.to(roomId).emit(\"receive-message\", { id: messageId, content, edited: true });\r\n   });\r\n-\r\n   socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n     socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n   });\r\n-\r\n   socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n     socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n   });\r\n \r\n-  // ---------- Room System ----------\r\n+  // Rooms\r\n   socket.on(\"create-room\", (roomData) => {\r\n     const roomId = roomData.id || uuidv4();\r\n-    rooms[roomId] = {\r\n-      ...roomData,\r\n-      id: roomId,\r\n-      users: [],\r\n-    };\r\n+    rooms[roomId] = { ...roomData, id: roomId, users: [] };\r\n+    socket.join(roomId); // ✅ Important\r\n+    io.emit(\"rooms\", Object.values(rooms));\r\n     socket.emit(\"room-created\", rooms[roomId]);\r\n-    io.emit(\"rooms\", Object.values(rooms));\r\n   });\r\n \r\n   socket.on(\"list-rooms\", () => {\r\n     socket.emit(\"rooms\", Object.values(rooms));\r\n   });\r\n \r\n-  socket.on(\"join-room\", (roomId) => {\r\n+  socket.on(\"join-room-dynamic\", ({ roomId, userInfo }) => {\r\n     const room = rooms[roomId];\r\n     if (room) {\r\n       socket.join(roomId);\r\n-      room.users.push(socket.id);\r\n+      if (!room.users.find((u) => u.id === socket.id)) {\r\n+        room.users.push({ id: socket.id, userInfo });\r\n+      }\r\n       io.to(roomId).emit(\"room-update\", room);\r\n-      socket.emit(\"joined-room\", roomId);\r\n     }\r\n   });\r\n \r\n   socket.on(\"leave-room\", (roomId) => {\r\n     const room = rooms[roomId];\r\n     if (room) {\r\n       socket.leave(roomId);\r\n-      room.users = room.users.filter((id) => id !== socket.id);\r\n+      room.users = room.users.filter((u) => u.id !== socket.id);\r\n       io.to(roomId).emit(\"room-update\", room);\r\n     }\r\n   });\r\n \r\n-  // ---------- Disconnect ----------\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n-\r\n-    // Remove from waitingUsers\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n \r\n     // Remove from rooms\r\n     Object.values(rooms).forEach((room) => {\r\n-      if (room.users.includes(socket.id)) {\r\n-        room.users = room.users.filter((id) => id !== socket.id);\r\n-        io.to(room.id).emit(\"room-update\", room);\r\n-      }\r\n+      room.users = room.users.filter((u) => u.id !== socket.id);\r\n+      io.to(room.id).emit(\"room-update\", room);\r\n     });\r\n \r\n     // Notify 1-1 partners\r\n     socket.rooms.forEach((roomId) => {\r\n"
                },
                {
                    "date": 1758903180163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,157 +7,152 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://connectify-hub.vercel.app\",\r\n-    methods: [\"GET\", \"POST\"],\r\n+    origin: \"https://connectify-hub.vercel.app/\",\r\n+    methods: [\"GET\", \"POST\"]\r\n   },\r\n });\r\n \r\n app.get(\"/\", (req, res) => {\r\n-  res.send(\"🚀 Signaling server running!\");\r\n+  res.send(\"🚀 Signaling server is running!\");\r\n });\r\n \r\n-// ===== 1-1 Anonymous Chat =====\r\n let waitingUsers = [];\r\n-function matchUsers(socket) {\r\n-  const index = waitingUsers.findIndex((other) => {\r\n-    if (!other.connected || !other.userData) return false;\r\n-    const my = socket.userData;\r\n-    const their = other.userData;\r\n \r\n-    return (\r\n-      (!their.filterGender || their.filterGender === my.gender) &&\r\n-      (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n-      (!my.filterGender || my.filterGender === their.gender) &&\r\n-      (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase())\r\n-    );\r\n-  });\r\n+io.on(\"connection\", (socket) => {\r\n+  console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  if (index !== -1) {\r\n-    const partner = waitingUsers.splice(index, 1)[0];\r\n-    const roomId = uuidv4();\r\n-    socket.join(roomId);\r\n-    partner.join(roomId);\r\n+  socket.on(\"start-looking\", (userInfo) => {\r\n+    const {\r\n+      gender,\r\n+      country,\r\n+      age,\r\n+      name,\r\n+      filterGender = \"\",\r\n+      filterCountry = \"\"\r\n+    } = userInfo || {};\r\n \r\n-    // Emit to both\r\n-    partner.emit(\"matched\", {\r\n-      roomId,\r\n-      partnerId: socket.id,\r\n-      isOfferer: true,\r\n-      partnerName: socket.userData?.name || \"Stranger\",\r\n-      partnerAge: socket.userData?.age || \"Unknown\",\r\n-      partnerCountry: socket.userData?.country || \"Unknown\",\r\n-    });\r\n+    socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n \r\n-    socket.emit(\"matched\", {\r\n-      roomId,\r\n-      partnerId: partner.id,\r\n-      isOfferer: false,\r\n-      partnerName: partner.userData?.name || \"Stranger\",\r\n-      partnerAge: partner.userData?.age || \"Unknown\",\r\n-      partnerCountry: partner.userData?.country || \"Unknown\",\r\n+    const index = waitingUsers.findIndex((other) => {\r\n+      if (!other.connected || !other.userData) return false;\r\n+\r\n+      const my = socket.userData;\r\n+      const their = other.userData;\r\n+\r\n+      const mutualFilterMatch =\r\n+        (!their.filterGender || their.filterGender === my.gender) &&\r\n+        (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n+        (!my.filterGender || my.filterGender === their.gender) &&\r\n+        (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n+\r\n+      return mutualFilterMatch;\r\n     });\r\n-  } else {\r\n-    waitingUsers.push(socket);\r\n-  }\r\n-}\r\n \r\n-// ===== Room System =====\r\n-let rooms = {}; // { roomId: { id, name, topic, users: [] } }\r\n+    if (index !== -1) {\r\n+      const partner = waitingUsers.splice(index, 1)[0];\r\n+      const roomId = uuidv4();\r\n \r\n-io.on(\"connection\", (socket) => {\r\n-  console.log(\"✅ User connected:\", socket.id);\r\n+      socket.join(roomId);\r\n+      partner.join(roomId);\r\n \r\n-  // 1-1 Anonymous Chat\r\n-  socket.on(\"start-looking\", (userInfo) => {\r\n-    socket.userData = userInfo;\r\n-    matchUsers(socket);\r\n+      // Emit match to partner\r\n+      partner.emit(\"matched\", {\r\n+        roomId,\r\n+        partnerId: socket.id,\r\n+        isOfferer: true,\r\n+        partnerName: socket.userData?.name || \"Stranger\",\r\n+        partnerAge: socket.userData?.age || \"Unknown\",\r\n+        partnerCountry: socket.userData?.country || \"Unknown\"\r\n+      });\r\n+\r\n+      // Emit match to socket\r\n+      socket.emit(\"matched\", {\r\n+        roomId,\r\n+        partnerId: partner.id,\r\n+        isOfferer: false,\r\n+        partnerName: partner.userData?.name || \"Stranger\",\r\n+        partnerAge: partner.userData?.age || \"Unknown\",\r\n+        partnerCountry: partner.userData?.country || \"Unknown\"\r\n+      });\r\n+    } else {\r\n+      waitingUsers.push(socket);\r\n+    }\r\n   });\r\n \r\n+  socket.on(\"join-room\", (roomId) => {\r\n+    socket.join(roomId);\r\n+    socket.emit(\"joined-room\", roomId);\r\n+  });\r\n+\r\n+  socket.on(\"leave-room\", (roomId) => {\r\n+    socket.leave(roomId);\r\n+    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+  });\r\n+\r\n   socket.on(\"skip\", () => {\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.leave(roomId);\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n     });\r\n+\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n     socket.emit(\"start-looking\", socket.userData);\r\n   });\r\n \r\n-  // WebRTC signaling for 1-1 and rooms\r\n+  // WebRTC signaling\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n     socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n+\r\n   socket.on(\"answer\", ({ answer, roomId }) => {\r\n     socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n   });\r\n+\r\n   socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n     socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n-  // Chat\r\n-  socket.on(\"send-message\", ({ roomId, message }) => {\r\n-    socket.to(roomId).emit(\"receive-message\", message);\r\n+  // Chat features\r\n+  socket.on(\"send-message\", (msg) => {\r\n+    const { roomId } = msg;\r\n+    console.log(`💬 New message in ${roomId}:`, msg);\r\n+    socket.to(roomId).emit(\"receive-message\", msg);\r\n   });\r\n+\r\n   socket.on(\"typing\", ({ roomId, sender }) => {\r\n     socket.to(roomId).emit(\"typing\", { sender });\r\n   });\r\n+\r\n+  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n+    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n+  });\r\n+\r\n   socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n-    socket.to(roomId).emit(\"receive-message\", { id: messageId, content, edited: true });\r\n+    socket.to(roomId).emit(\"receive-message\", {\r\n+      id: messageId,\r\n+      content,\r\n+      type: \"text\",\r\n+      edited: true\r\n+    });\r\n   });\r\n+\r\n   socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n     socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n   });\r\n+\r\n   socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n     socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n   });\r\n \r\n-  // Rooms\r\n-  socket.on(\"create-room\", (roomData) => {\r\n-    const roomId = roomData.id || uuidv4();\r\n-    rooms[roomId] = { ...roomData, id: roomId, users: [] };\r\n-    socket.join(roomId); // ✅ Important\r\n-    io.emit(\"rooms\", Object.values(rooms));\r\n-    socket.emit(\"room-created\", rooms[roomId]);\r\n-  });\r\n-\r\n-  socket.on(\"list-rooms\", () => {\r\n-    socket.emit(\"rooms\", Object.values(rooms));\r\n-  });\r\n-\r\n-  socket.on(\"join-room-dynamic\", ({ roomId, userInfo }) => {\r\n-    const room = rooms[roomId];\r\n-    if (room) {\r\n-      socket.join(roomId);\r\n-      if (!room.users.find((u) => u.id === socket.id)) {\r\n-        room.users.push({ id: socket.id, userInfo });\r\n-      }\r\n-      io.to(roomId).emit(\"room-update\", room);\r\n-    }\r\n-  });\r\n-\r\n-  socket.on(\"leave-room\", (roomId) => {\r\n-    const room = rooms[roomId];\r\n-    if (room) {\r\n-      socket.leave(roomId);\r\n-      room.users = room.users.filter((u) => u.id !== socket.id);\r\n-      io.to(roomId).emit(\"room-update\", room);\r\n-    }\r\n-  });\r\n-\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n \r\n-    // Remove from rooms\r\n-    Object.values(rooms).forEach((room) => {\r\n-      room.users = room.users.filter((u) => u.id !== socket.id);\r\n-      io.to(room.id).emit(\"room-update\", room);\r\n-    });\r\n-\r\n-    // Notify 1-1 partners\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n"
                },
                {
                    "date": 1758903627479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,152 +7,157 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://connectify-hub.vercel.app/\",\r\n-    methods: [\"GET\", \"POST\"]\r\n+    origin: \"https://connectify-hub.vercel.app\",\r\n+    methods: [\"GET\", \"POST\"],\r\n   },\r\n });\r\n \r\n app.get(\"/\", (req, res) => {\r\n-  res.send(\"🚀 Signaling server is running!\");\r\n+  res.send(\"🚀 Signaling server running!\");\r\n });\r\n \r\n+// ===== 1-1 Anonymous Chat =====\r\n let waitingUsers = [];\r\n+function matchUsers(socket) {\r\n+  const index = waitingUsers.findIndex((other) => {\r\n+    if (!other.connected || !other.userData) return false;\r\n+    const my = socket.userData;\r\n+    const their = other.userData;\r\n \r\n-io.on(\"connection\", (socket) => {\r\n-  console.log(\"✅ User connected:\", socket.id);\r\n+    return (\r\n+      (!their.filterGender || their.filterGender === my.gender) &&\r\n+      (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n+      (!my.filterGender || my.filterGender === their.gender) &&\r\n+      (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase())\r\n+    );\r\n+  });\r\n \r\n-  socket.on(\"start-looking\", (userInfo) => {\r\n-    const {\r\n-      gender,\r\n-      country,\r\n-      age,\r\n-      name,\r\n-      filterGender = \"\",\r\n-      filterCountry = \"\"\r\n-    } = userInfo || {};\r\n+  if (index !== -1) {\r\n+    const partner = waitingUsers.splice(index, 1)[0];\r\n+    const roomId = uuidv4();\r\n+    socket.join(roomId);\r\n+    partner.join(roomId);\r\n \r\n-    socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n+    // Emit to both\r\n+    partner.emit(\"matched\", {\r\n+      roomId,\r\n+      partnerId: socket.id,\r\n+      isOfferer: true,\r\n+      partnerName: socket.userData?.name || \"Stranger\",\r\n+      partnerAge: socket.userData?.age || \"Unknown\",\r\n+      partnerCountry: socket.userData?.country || \"Unknown\",\r\n+    });\r\n \r\n-    const index = waitingUsers.findIndex((other) => {\r\n-      if (!other.connected || !other.userData) return false;\r\n-\r\n-      const my = socket.userData;\r\n-      const their = other.userData;\r\n-\r\n-      const mutualFilterMatch =\r\n-        (!their.filterGender || their.filterGender === my.gender) &&\r\n-        (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n-        (!my.filterGender || my.filterGender === their.gender) &&\r\n-        (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n-\r\n-      return mutualFilterMatch;\r\n+    socket.emit(\"matched\", {\r\n+      roomId,\r\n+      partnerId: partner.id,\r\n+      isOfferer: false,\r\n+      partnerName: partner.userData?.name || \"Stranger\",\r\n+      partnerAge: partner.userData?.age || \"Unknown\",\r\n+      partnerCountry: partner.userData?.country || \"Unknown\",\r\n     });\r\n+  } else {\r\n+    waitingUsers.push(socket);\r\n+  }\r\n+}\r\n \r\n-    if (index !== -1) {\r\n-      const partner = waitingUsers.splice(index, 1)[0];\r\n-      const roomId = uuidv4();\r\n+// ===== Room System =====\r\n+let rooms = {}; // { roomId: { id, name, topic, users: [] } }\r\n \r\n-      socket.join(roomId);\r\n-      partner.join(roomId);\r\n+io.on(\"connection\", (socket) => {\r\n+  console.log(\"✅ User connected:\", socket.id);\r\n \r\n-      // Emit match to partner\r\n-      partner.emit(\"matched\", {\r\n-        roomId,\r\n-        partnerId: socket.id,\r\n-        isOfferer: true,\r\n-        partnerName: socket.userData?.name || \"Stranger\",\r\n-        partnerAge: socket.userData?.age || \"Unknown\",\r\n-        partnerCountry: socket.userData?.country || \"Unknown\"\r\n-      });\r\n-\r\n-      // Emit match to socket\r\n-      socket.emit(\"matched\", {\r\n-        roomId,\r\n-        partnerId: partner.id,\r\n-        isOfferer: false,\r\n-        partnerName: partner.userData?.name || \"Stranger\",\r\n-        partnerAge: partner.userData?.age || \"Unknown\",\r\n-        partnerCountry: partner.userData?.country || \"Unknown\"\r\n-      });\r\n-    } else {\r\n-      waitingUsers.push(socket);\r\n-    }\r\n+  // 1-1 Anonymous Chat\r\n+  socket.on(\"start-looking\", (userInfo) => {\r\n+    socket.userData = userInfo;\r\n+    matchUsers(socket);\r\n   });\r\n \r\n-  socket.on(\"join-room\", (roomId) => {\r\n-    socket.join(roomId);\r\n-    socket.emit(\"joined-room\", roomId);\r\n-  });\r\n-\r\n-  socket.on(\"leave-room\", (roomId) => {\r\n-    socket.leave(roomId);\r\n-    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-  });\r\n-\r\n   socket.on(\"skip\", () => {\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.leave(roomId);\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n     });\r\n-\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n     socket.emit(\"start-looking\", socket.userData);\r\n   });\r\n \r\n-  // WebRTC signaling\r\n+  // WebRTC signaling for 1-1 and rooms\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n     socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n-\r\n   socket.on(\"answer\", ({ answer, roomId }) => {\r\n     socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n   });\r\n-\r\n   socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n     socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n-  // Chat features\r\n-  socket.on(\"send-message\", (msg) => {\r\n-    const { roomId } = msg;\r\n-    console.log(`💬 New message in ${roomId}:`, msg);\r\n-    socket.to(roomId).emit(\"receive-message\", msg);\r\n+  // Chat\r\n+  socket.on(\"send-message\", ({ roomId, message }) => {\r\n+    socket.to(roomId).emit(\"receive-message\", message);\r\n   });\r\n-\r\n   socket.on(\"typing\", ({ roomId, sender }) => {\r\n     socket.to(roomId).emit(\"typing\", { sender });\r\n   });\r\n-\r\n-  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n-    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n-  });\r\n-\r\n   socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n-    socket.to(roomId).emit(\"receive-message\", {\r\n-      id: messageId,\r\n-      content,\r\n-      type: \"text\",\r\n-      edited: true\r\n-    });\r\n+    socket.to(roomId).emit(\"receive-message\", { id: messageId, content, edited: true });\r\n   });\r\n-\r\n   socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n     socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n   });\r\n-\r\n   socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n     socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n   });\r\n \r\n+  // Rooms\r\n+  socket.on(\"create-room\", (roomData) => {\r\n+    const roomId = roomData.id || uuidv4();\r\n+    rooms[roomId] = { ...roomData, id: roomId, users: [] };\r\n+    socket.join(roomId); // ✅ Important\r\n+    io.emit(\"rooms\", Object.values(rooms));\r\n+    socket.emit(\"room-created\", rooms[roomId]);\r\n+  });\r\n+\r\n+  socket.on(\"list-rooms\", () => {\r\n+    socket.emit(\"rooms\", Object.values(rooms));\r\n+  });\r\n+\r\n+  socket.on(\"join-room-dynamic\", ({ roomId, userInfo }) => {\r\n+    const room = rooms[roomId];\r\n+    if (room) {\r\n+      socket.join(roomId);\r\n+      if (!room.users.find((u) => u.id === socket.id)) {\r\n+        room.users.push({ id: socket.id, userInfo });\r\n+      }\r\n+      io.to(roomId).emit(\"room-update\", room);\r\n+    }\r\n+  });\r\n+\r\n+  socket.on(\"leave-room\", (roomId) => {\r\n+    const room = rooms[roomId];\r\n+    if (room) {\r\n+      socket.leave(roomId);\r\n+      room.users = room.users.filter((u) => u.id !== socket.id);\r\n+      io.to(roomId).emit(\"room-update\", room);\r\n+    }\r\n+  });\r\n+\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n \r\n+    // Remove from rooms\r\n+    Object.values(rooms).forEach((room) => {\r\n+      room.users = room.users.filter((u) => u.id !== socket.id);\r\n+      io.to(room.id).emit(\"room-update\", room);\r\n+    });\r\n+\r\n+    // Notify 1-1 partners\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n"
                },
                {
                    "date": 1758903923397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,157 +7,152 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://connectify-hub.vercel.app\",\r\n-    methods: [\"GET\", \"POST\"],\r\n+    origin: \"https://connectify-hub.vercel.app/\",\r\n+    methods: [\"GET\", \"POST\"]\r\n   },\r\n });\r\n \r\n app.get(\"/\", (req, res) => {\r\n-  res.send(\"🚀 Signaling server running!\");\r\n+  res.send(\"🚀 Signaling server is running!\");\r\n });\r\n \r\n-// ===== 1-1 Anonymous Chat =====\r\n let waitingUsers = [];\r\n-function matchUsers(socket) {\r\n-  const index = waitingUsers.findIndex((other) => {\r\n-    if (!other.connected || !other.userData) return false;\r\n-    const my = socket.userData;\r\n-    const their = other.userData;\r\n \r\n-    return (\r\n-      (!their.filterGender || their.filterGender === my.gender) &&\r\n-      (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n-      (!my.filterGender || my.filterGender === their.gender) &&\r\n-      (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase())\r\n-    );\r\n-  });\r\n+io.on(\"connection\", (socket) => {\r\n+  console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  if (index !== -1) {\r\n-    const partner = waitingUsers.splice(index, 1)[0];\r\n-    const roomId = uuidv4();\r\n-    socket.join(roomId);\r\n-    partner.join(roomId);\r\n+  socket.on(\"start-looking\", (userInfo) => {\r\n+    const {\r\n+      gender,\r\n+      country,\r\n+      age,\r\n+      name,\r\n+      filterGender = \"\",\r\n+      filterCountry = \"\"\r\n+    } = userInfo || {};\r\n \r\n-    // Emit to both\r\n-    partner.emit(\"matched\", {\r\n-      roomId,\r\n-      partnerId: socket.id,\r\n-      isOfferer: true,\r\n-      partnerName: socket.userData?.name || \"Stranger\",\r\n-      partnerAge: socket.userData?.age || \"Unknown\",\r\n-      partnerCountry: socket.userData?.country || \"Unknown\",\r\n-    });\r\n+    socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n \r\n-    socket.emit(\"matched\", {\r\n-      roomId,\r\n-      partnerId: partner.id,\r\n-      isOfferer: false,\r\n-      partnerName: partner.userData?.name || \"Stranger\",\r\n-      partnerAge: partner.userData?.age || \"Unknown\",\r\n-      partnerCountry: partner.userData?.country || \"Unknown\",\r\n+    const index = waitingUsers.findIndex((other) => {\r\n+      if (!other.connected || !other.userData) return false;\r\n+\r\n+      const my = socket.userData;\r\n+      const their = other.userData;\r\n+\r\n+      const mutualFilterMatch =\r\n+        (!their.filterGender || their.filterGender === my.gender) &&\r\n+        (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n+        (!my.filterGender || my.filterGender === their.gender) &&\r\n+        (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n+\r\n+      return mutualFilterMatch;\r\n     });\r\n-  } else {\r\n-    waitingUsers.push(socket);\r\n-  }\r\n-}\r\n \r\n-// ===== Room System =====\r\n-let rooms = {}; // { roomId: { id, name, topic, users: [] } }\r\n+    if (index !== -1) {\r\n+      const partner = waitingUsers.splice(index, 1)[0];\r\n+      const roomId = uuidv4();\r\n \r\n-io.on(\"connection\", (socket) => {\r\n-  console.log(\"✅ User connected:\", socket.id);\r\n+      socket.join(roomId);\r\n+      partner.join(roomId);\r\n \r\n-  // 1-1 Anonymous Chat\r\n-  socket.on(\"start-looking\", (userInfo) => {\r\n-    socket.userData = userInfo;\r\n-    matchUsers(socket);\r\n+      // Emit match to partner\r\n+      partner.emit(\"matched\", {\r\n+        roomId,\r\n+        partnerId: socket.id,\r\n+        isOfferer: true,\r\n+        partnerName: socket.userData?.name || \"Stranger\",\r\n+        partnerAge: socket.userData?.age || \"Unknown\",\r\n+        partnerCountry: socket.userData?.country || \"Unknown\"\r\n+      });\r\n+\r\n+      // Emit match to socket\r\n+      socket.emit(\"matched\", {\r\n+        roomId,\r\n+        partnerId: partner.id,\r\n+        isOfferer: false,\r\n+        partnerName: partner.userData?.name || \"Stranger\",\r\n+        partnerAge: partner.userData?.age || \"Unknown\",\r\n+        partnerCountry: partner.userData?.country || \"Unknown\"\r\n+      });\r\n+    } else {\r\n+      waitingUsers.push(socket);\r\n+    }\r\n   });\r\n \r\n+  socket.on(\"join-room\", (roomId) => {\r\n+    socket.join(roomId);\r\n+    socket.emit(\"joined-room\", roomId);\r\n+  });\r\n+\r\n+  socket.on(\"leave-room\", (roomId) => {\r\n+    socket.leave(roomId);\r\n+    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+  });\r\n+\r\n   socket.on(\"skip\", () => {\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.leave(roomId);\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n     });\r\n+\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n     socket.emit(\"start-looking\", socket.userData);\r\n   });\r\n \r\n-  // WebRTC signaling for 1-1 and rooms\r\n+  // WebRTC signaling\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n     socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n+\r\n   socket.on(\"answer\", ({ answer, roomId }) => {\r\n     socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n   });\r\n+\r\n   socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n     socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n-  // Chat\r\n-  socket.on(\"send-message\", ({ roomId, message }) => {\r\n-    socket.to(roomId).emit(\"receive-message\", message);\r\n+  // Chat features\r\n+  socket.on(\"send-message\", (msg) => {\r\n+    const { roomId } = msg;\r\n+    console.log(`💬 New message in ${roomId}:`, msg);\r\n+    socket.to(roomId).emit(\"receive-message\", msg);\r\n   });\r\n+\r\n   socket.on(\"typing\", ({ roomId, sender }) => {\r\n     socket.to(roomId).emit(\"typing\", { sender });\r\n   });\r\n+\r\n+  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n+    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n+  });\r\n+\r\n   socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n-    socket.to(roomId).emit(\"receive-message\", { id: messageId, content, edited: true });\r\n+    socket.to(roomId).emit(\"receive-message\", {\r\n+      id: messageId,\r\n+      content,\r\n+      type: \"text\",\r\n+      edited: true\r\n+    });\r\n   });\r\n+\r\n   socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n     socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n   });\r\n+\r\n   socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n     socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n   });\r\n \r\n-  // Rooms\r\n-  socket.on(\"create-room\", (roomData) => {\r\n-    const roomId = roomData.id || uuidv4();\r\n-    rooms[roomId] = { ...roomData, id: roomId, users: [] };\r\n-    socket.join(roomId); // ✅ Important\r\n-    io.emit(\"rooms\", Object.values(rooms));\r\n-    socket.emit(\"room-created\", rooms[roomId]);\r\n-  });\r\n-\r\n-  socket.on(\"list-rooms\", () => {\r\n-    socket.emit(\"rooms\", Object.values(rooms));\r\n-  });\r\n-\r\n-  socket.on(\"join-room-dynamic\", ({ roomId, userInfo }) => {\r\n-    const room = rooms[roomId];\r\n-    if (room) {\r\n-      socket.join(roomId);\r\n-      if (!room.users.find((u) => u.id === socket.id)) {\r\n-        room.users.push({ id: socket.id, userInfo });\r\n-      }\r\n-      io.to(roomId).emit(\"room-update\", room);\r\n-    }\r\n-  });\r\n-\r\n-  socket.on(\"leave-room\", (roomId) => {\r\n-    const room = rooms[roomId];\r\n-    if (room) {\r\n-      socket.leave(roomId);\r\n-      room.users = room.users.filter((u) => u.id !== socket.id);\r\n-      io.to(roomId).emit(\"room-update\", room);\r\n-    }\r\n-  });\r\n-\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n \r\n-    // Remove from rooms\r\n-    Object.values(rooms).forEach((room) => {\r\n-      room.users = room.users.filter((u) => u.id !== socket.id);\r\n-      io.to(room.id).emit(\"room-update\", room);\r\n-    });\r\n-\r\n-    // Notify 1-1 partners\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n"
                },
                {
                    "date": 1758905092189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,160 +7,120 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://connectify-hub.vercel.app/\",\r\n+    origin: \"*\", // Update with your frontend URL\r\n     methods: [\"GET\", \"POST\"]\r\n   },\r\n });\r\n \r\n app.get(\"/\", (req, res) => {\r\n-  res.send(\"🚀 Signaling server is running!\");\r\n+  res.send(\"🚀 Multi-user signaling server running!\");\r\n });\r\n \r\n-let waitingUsers = [];\r\n+// Store rooms and users\r\n+const rooms = {}; // { roomId: { id, name, topic, description, password, users: [socketId] } }\r\n \r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  socket.on(\"start-looking\", (userInfo) => {\r\n-    const {\r\n-      gender,\r\n-      country,\r\n-      age,\r\n-      name,\r\n-      filterGender = \"\",\r\n-      filterCountry = \"\"\r\n-    } = userInfo || {};\r\n+  /** CREATE ROOM */\r\n+  socket.on(\"create-room\", (roomData) => {\r\n+    const roomId = uuidv4();\r\n+    rooms[roomId] = {\r\n+      id: roomId,\r\n+      name: roomData.name,\r\n+      topic: roomData.topic,\r\n+      description: roomData.description || \"\",\r\n+      password: roomData.password || null,\r\n+      users: [],\r\n+    };\r\n+    socket.emit(\"room-created\", rooms[roomId]);\r\n+    io.emit(\"rooms\", Object.values(rooms)); // update all clients\r\n+    console.log(`🟢 Room created: ${roomData.name} (${roomId})`);\r\n+  });\r\n \r\n-    socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n+  /** LIST ROOMS */\r\n+  socket.on(\"list-rooms\", () => {\r\n+    socket.emit(\"rooms\", Object.values(rooms));\r\n+  });\r\n \r\n-    const index = waitingUsers.findIndex((other) => {\r\n-      if (!other.connected || !other.userData) return false;\r\n+  /** JOIN ROOM */\r\n+  socket.on(\"join-room\", ({ roomId, userInfo }) => {\r\n+    const room = rooms[roomId];\r\n+    if (!room) {\r\n+      socket.emit(\"error\", \"Room does not exist\");\r\n+      return;\r\n+    }\r\n+    if (room.password && room.password !== userInfo.password) {\r\n+      socket.emit(\"error\", \"Incorrect password\");\r\n+      return;\r\n+    }\r\n \r\n-      const my = socket.userData;\r\n-      const their = other.userData;\r\n+    socket.join(roomId);\r\n+    socket.userData = { ...userInfo, socketId: socket.id };\r\n+    room.users.push(socket.id);\r\n \r\n-      const mutualFilterMatch =\r\n-        (!their.filterGender || their.filterGender === my.gender) &&\r\n-        (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n-        (!my.filterGender || my.filterGender === their.gender) &&\r\n-        (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n-\r\n-      return mutualFilterMatch;\r\n+    io.to(roomId).emit(\"room-update\", {\r\n+      ...room,\r\n+      users: room.users.map((id) => io.sockets.sockets.get(id)?.userData || id),\r\n     });\r\n \r\n-    if (index !== -1) {\r\n-      const partner = waitingUsers.splice(index, 1)[0];\r\n-      const roomId = uuidv4();\r\n-\r\n-      socket.join(roomId);\r\n-      partner.join(roomId);\r\n-\r\n-      // Emit match to partner\r\n-      partner.emit(\"matched\", {\r\n-        roomId,\r\n-        partnerId: socket.id,\r\n-        isOfferer: true,\r\n-        partnerName: socket.userData?.name || \"Stranger\",\r\n-        partnerAge: socket.userData?.age || \"Unknown\",\r\n-        partnerCountry: socket.userData?.country || \"Unknown\"\r\n-      });\r\n-\r\n-      // Emit match to socket\r\n-      socket.emit(\"matched\", {\r\n-        roomId,\r\n-        partnerId: partner.id,\r\n-        isOfferer: false,\r\n-        partnerName: partner.userData?.name || \"Stranger\",\r\n-        partnerAge: partner.userData?.age || \"Unknown\",\r\n-        partnerCountry: partner.userData?.country || \"Unknown\"\r\n-      });\r\n-    } else {\r\n-      waitingUsers.push(socket);\r\n-    }\r\n+    console.log(`🟡 User ${userInfo.name} joined room ${room.name}`);\r\n   });\r\n \r\n-  socket.on(\"join-room\", (roomId) => {\r\n-    socket.join(roomId);\r\n-    socket.emit(\"joined-room\", roomId);\r\n-  });\r\n+  /** LEAVE ROOM */\r\n+  socket.on(\"leave-room\", ({ roomId }) => {\r\n+    const room = rooms[roomId];\r\n+    if (!room) return;\r\n \r\n-  socket.on(\"leave-room\", (roomId) => {\r\n     socket.leave(roomId);\r\n-    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-  });\r\n+    room.users = room.users.filter((id) => id !== socket.id);\r\n \r\n-  socket.on(\"skip\", () => {\r\n-    socket.rooms.forEach((roomId) => {\r\n-      if (roomId !== socket.id) {\r\n-        socket.leave(roomId);\r\n-        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-      }\r\n+    io.to(roomId).emit(\"room-update\", {\r\n+      ...room,\r\n+      users: room.users.map((id) => io.sockets.sockets.get(id)?.userData || id),\r\n     });\r\n-\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-    socket.emit(\"start-looking\", socket.userData);\r\n+    console.log(`🔴 User ${socket.id} left room ${roomId}`);\r\n   });\r\n \r\n-  // WebRTC signaling\r\n-  socket.on(\"offer\", ({ offer, roomId }) => {\r\n-    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n+  /** WebRTC Signaling */\r\n+  socket.on(\"room-offer\", ({ offer, to, roomId }) => {\r\n+    io.to(to).emit(\"room-offer\", { from: socket.id, offer, name: socket.userData?.name, roomId });\r\n   });\r\n \r\n-  socket.on(\"answer\", ({ answer, roomId }) => {\r\n-    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n+  socket.on(\"room-answer\", ({ answer, to }) => {\r\n+    io.to(to).emit(\"room-answer\", { from: socket.id, answer });\r\n   });\r\n \r\n-  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n-    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n+  socket.on(\"room-ice\", ({ candidate, to }) => {\r\n+    io.to(to).emit(\"room-ice\", { from: socket.id, candidate });\r\n   });\r\n \r\n-  // Chat features\r\n-  socket.on(\"send-message\", (msg) => {\r\n-    const { roomId } = msg;\r\n-    console.log(`💬 New message in ${roomId}:`, msg);\r\n-    socket.to(roomId).emit(\"receive-message\", msg);\r\n+  /** Chat features inside room */\r\n+  socket.on(\"send-message\", ({ roomId, message }) => {\r\n+    socket.to(roomId).emit(\"receive-message\", message);\r\n   });\r\n \r\n   socket.on(\"typing\", ({ roomId, sender }) => {\r\n     socket.to(roomId).emit(\"typing\", { sender });\r\n   });\r\n \r\n-  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n-    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n-  });\r\n-\r\n-  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n-    socket.to(roomId).emit(\"receive-message\", {\r\n-      id: messageId,\r\n-      content,\r\n-      type: \"text\",\r\n-      edited: true\r\n-    });\r\n-  });\r\n-\r\n-  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n-    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n-  });\r\n-\r\n-  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n-    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n-  });\r\n-\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-\r\n-    socket.rooms.forEach((roomId) => {\r\n-      if (roomId !== socket.id) {\r\n-        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+    // Remove from all rooms\r\n+    Object.values(rooms).forEach((room) => {\r\n+      if (room.users.includes(socket.id)) {\r\n+        room.users = room.users.filter((id) => id !== socket.id);\r\n+        io.to(room.id).emit(\"room-update\", {\r\n+          ...room,\r\n+          users: room.users.map((id) => io.sockets.sockets.get(id)?.userData || id),\r\n+        });\r\n       }\r\n     });\r\n   });\r\n });\r\n \r\n const PORT = process.env.PORT || 3001;\r\n server.listen(PORT, () => {\r\n-  console.log(`🚀 Signaling server running on port ${PORT}`);\r\n+  console.log(`🚀 Server running on port ${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1758905205384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,120 +7,160 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"*\", // Update with your frontend URL\r\n+    origin: \"https://connectify-hub.vercel.app/\",\r\n     methods: [\"GET\", \"POST\"]\r\n   },\r\n });\r\n \r\n app.get(\"/\", (req, res) => {\r\n-  res.send(\"🚀 Multi-user signaling server running!\");\r\n+  res.send(\"🚀 Signaling server is running!\");\r\n });\r\n \r\n-// Store rooms and users\r\n-const rooms = {}; // { roomId: { id, name, topic, description, password, users: [socketId] } }\r\n+let waitingUsers = [];\r\n \r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  /** CREATE ROOM */\r\n-  socket.on(\"create-room\", (roomData) => {\r\n-    const roomId = uuidv4();\r\n-    rooms[roomId] = {\r\n-      id: roomId,\r\n-      name: roomData.name,\r\n-      topic: roomData.topic,\r\n-      description: roomData.description || \"\",\r\n-      password: roomData.password || null,\r\n-      users: [],\r\n-    };\r\n-    socket.emit(\"room-created\", rooms[roomId]);\r\n-    io.emit(\"rooms\", Object.values(rooms)); // update all clients\r\n-    console.log(`🟢 Room created: ${roomData.name} (${roomId})`);\r\n-  });\r\n+  socket.on(\"start-looking\", (userInfo) => {\r\n+    const {\r\n+      gender,\r\n+      country,\r\n+      age,\r\n+      name,\r\n+      filterGender = \"\",\r\n+      filterCountry = \"\"\r\n+    } = userInfo || {};\r\n \r\n-  /** LIST ROOMS */\r\n-  socket.on(\"list-rooms\", () => {\r\n-    socket.emit(\"rooms\", Object.values(rooms));\r\n-  });\r\n+    socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n \r\n-  /** JOIN ROOM */\r\n-  socket.on(\"join-room\", ({ roomId, userInfo }) => {\r\n-    const room = rooms[roomId];\r\n-    if (!room) {\r\n-      socket.emit(\"error\", \"Room does not exist\");\r\n-      return;\r\n-    }\r\n-    if (room.password && room.password !== userInfo.password) {\r\n-      socket.emit(\"error\", \"Incorrect password\");\r\n-      return;\r\n-    }\r\n+    const index = waitingUsers.findIndex((other) => {\r\n+      if (!other.connected || !other.userData) return false;\r\n \r\n-    socket.join(roomId);\r\n-    socket.userData = { ...userInfo, socketId: socket.id };\r\n-    room.users.push(socket.id);\r\n+      const my = socket.userData;\r\n+      const their = other.userData;\r\n \r\n-    io.to(roomId).emit(\"room-update\", {\r\n-      ...room,\r\n-      users: room.users.map((id) => io.sockets.sockets.get(id)?.userData || id),\r\n+      const mutualFilterMatch =\r\n+        (!their.filterGender || their.filterGender === my.gender) &&\r\n+        (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n+        (!my.filterGender || my.filterGender === their.gender) &&\r\n+        (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n+\r\n+      return mutualFilterMatch;\r\n     });\r\n \r\n-    console.log(`🟡 User ${userInfo.name} joined room ${room.name}`);\r\n+    if (index !== -1) {\r\n+      const partner = waitingUsers.splice(index, 1)[0];\r\n+      const roomId = uuidv4();\r\n+\r\n+      socket.join(roomId);\r\n+      partner.join(roomId);\r\n+\r\n+      // Emit match to partner\r\n+      partner.emit(\"matched\", {\r\n+        roomId,\r\n+        partnerId: socket.id,\r\n+        isOfferer: true,\r\n+        partnerName: socket.userData?.name || \"Stranger\",\r\n+        partnerAge: socket.userData?.age || \"Unknown\",\r\n+        partnerCountry: socket.userData?.country || \"Unknown\"\r\n+      });\r\n+\r\n+      // Emit match to socket\r\n+      socket.emit(\"matched\", {\r\n+        roomId,\r\n+        partnerId: partner.id,\r\n+        isOfferer: false,\r\n+        partnerName: partner.userData?.name || \"Stranger\",\r\n+        partnerAge: partner.userData?.age || \"Unknown\",\r\n+        partnerCountry: partner.userData?.country || \"Unknown\"\r\n+      });\r\n+    } else {\r\n+      waitingUsers.push(socket);\r\n+    }\r\n   });\r\n \r\n-  /** LEAVE ROOM */\r\n-  socket.on(\"leave-room\", ({ roomId }) => {\r\n-    const room = rooms[roomId];\r\n-    if (!room) return;\r\n+  socket.on(\"join-room\", (roomId) => {\r\n+    socket.join(roomId);\r\n+    socket.emit(\"joined-room\", roomId);\r\n+  });\r\n \r\n+  socket.on(\"leave-room\", (roomId) => {\r\n     socket.leave(roomId);\r\n-    room.users = room.users.filter((id) => id !== socket.id);\r\n+    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+  });\r\n \r\n-    io.to(roomId).emit(\"room-update\", {\r\n-      ...room,\r\n-      users: room.users.map((id) => io.sockets.sockets.get(id)?.userData || id),\r\n+  socket.on(\"skip\", () => {\r\n+    socket.rooms.forEach((roomId) => {\r\n+      if (roomId !== socket.id) {\r\n+        socket.leave(roomId);\r\n+        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+      }\r\n     });\r\n-    console.log(`🔴 User ${socket.id} left room ${roomId}`);\r\n+\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+    socket.emit(\"start-looking\", socket.userData);\r\n   });\r\n \r\n-  /** WebRTC Signaling */\r\n-  socket.on(\"room-offer\", ({ offer, to, roomId }) => {\r\n-    io.to(to).emit(\"room-offer\", { from: socket.id, offer, name: socket.userData?.name, roomId });\r\n+  // WebRTC signaling\r\n+  socket.on(\"offer\", ({ offer, roomId }) => {\r\n+    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n \r\n-  socket.on(\"room-answer\", ({ answer, to }) => {\r\n-    io.to(to).emit(\"room-answer\", { from: socket.id, answer });\r\n+  socket.on(\"answer\", ({ answer, roomId }) => {\r\n+    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n   });\r\n \r\n-  socket.on(\"room-ice\", ({ candidate, to }) => {\r\n-    io.to(to).emit(\"room-ice\", { from: socket.id, candidate });\r\n+  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n+    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n-  /** Chat features inside room */\r\n-  socket.on(\"send-message\", ({ roomId, message }) => {\r\n-    socket.to(roomId).emit(\"receive-message\", message);\r\n+  // Chat features\r\n+  socket.on(\"send-message\", (msg) => {\r\n+    const { roomId } = msg;\r\n+    console.log(`💬 New message in ${roomId}:`, msg);\r\n+    socket.to(roomId).emit(\"receive-message\", msg);\r\n   });\r\n \r\n   socket.on(\"typing\", ({ roomId, sender }) => {\r\n     socket.to(roomId).emit(\"typing\", { sender });\r\n   });\r\n \r\n+  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n+    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n+  });\r\n+\r\n+  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n+    socket.to(roomId).emit(\"receive-message\", {\r\n+      id: messageId,\r\n+      content,\r\n+      type: \"text\",\r\n+      edited: true\r\n+    });\r\n+  });\r\n+\r\n+  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n+    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n+  });\r\n+\r\n+  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n+    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n+  });\r\n+\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n-    // Remove from all rooms\r\n-    Object.values(rooms).forEach((room) => {\r\n-      if (room.users.includes(socket.id)) {\r\n-        room.users = room.users.filter((id) => id !== socket.id);\r\n-        io.to(room.id).emit(\"room-update\", {\r\n-          ...room,\r\n-          users: room.users.map((id) => io.sockets.sockets.get(id)?.userData || id),\r\n-        });\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+\r\n+    socket.rooms.forEach((roomId) => {\r\n+      if (roomId !== socket.id) {\r\n+        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n     });\r\n   });\r\n });\r\n \r\n const PORT = process.env.PORT || 3001;\r\n server.listen(PORT, () => {\r\n-  console.log(`🚀 Server running on port ${PORT}`);\r\n+  console.log(`🚀 Signaling server running on port ${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1758905282148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,32 +7,29 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://connectify-hub.vercel.app/\",\r\n+    origin: \"https://connectify-hub.vercel.app/\", // Your frontend URL\r\n     methods: [\"GET\", \"POST\"]\r\n   },\r\n });\r\n \r\n app.get(\"/\", (req, res) => {\r\n-  res.send(\"🚀 Signaling server is running!\");\r\n+  res.send(\"🚀 Signaling server running!\");\r\n });\r\n \r\n+/** ----- 1-1 Anonymous Chat ----- */\r\n let waitingUsers = [];\r\n \r\n+/** ----- Rooms ----- */\r\n+const rooms = {}; // { roomId: { id, name, topic, description, users: [socketId] } }\r\n+\r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n+  /** ----------------- 1-1 Anonymous Chat ----------------- */\r\n   socket.on(\"start-looking\", (userInfo) => {\r\n-    const {\r\n-      gender,\r\n-      country,\r\n-      age,\r\n-      name,\r\n-      filterGender = \"\",\r\n-      filterCountry = \"\"\r\n-    } = userInfo || {};\r\n-\r\n+    const { gender, country, age, name, filterGender = \"\", filterCountry = \"\" } = userInfo || {};\r\n     socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n \r\n     const index = waitingUsers.findIndex((other) => {\r\n       if (!other.connected || !other.userData) return false;\r\n@@ -55,9 +52,8 @@\n \r\n       socket.join(roomId);\r\n       partner.join(roomId);\r\n \r\n-      // Emit match to partner\r\n       partner.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: socket.id,\r\n         isOfferer: true,\r\n@@ -65,9 +61,8 @@\n         partnerAge: socket.userData?.age || \"Unknown\",\r\n         partnerCountry: socket.userData?.country || \"Unknown\"\r\n       });\r\n \r\n-      // Emit match to socket\r\n       socket.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: partner.id,\r\n         isOfferer: false,\r\n@@ -79,79 +74,96 @@\n       waitingUsers.push(socket);\r\n     }\r\n   });\r\n \r\n-  socket.on(\"join-room\", (roomId) => {\r\n-    socket.join(roomId);\r\n-    socket.emit(\"joined-room\", roomId);\r\n-  });\r\n-\r\n-  socket.on(\"leave-room\", (roomId) => {\r\n-    socket.leave(roomId);\r\n-    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-  });\r\n-\r\n   socket.on(\"skip\", () => {\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.leave(roomId);\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n     });\r\n-\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n     socket.emit(\"start-looking\", socket.userData);\r\n   });\r\n \r\n-  // WebRTC signaling\r\n-  socket.on(\"offer\", ({ offer, roomId }) => {\r\n-    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n+  /** ----------------- Room System ----------------- */\r\n+  socket.on(\"create-room\", (roomData) => {\r\n+    const roomId = uuidv4();\r\n+    rooms[roomId] = {\r\n+      id: roomId,\r\n+      name: roomData.name,\r\n+      topic: roomData.topic,\r\n+      description: roomData.description || \"\",\r\n+      password: roomData.password || null,\r\n+      users: [],\r\n+    };\r\n+    socket.emit(\"room-created\", rooms[roomId]);\r\n+    io.emit(\"rooms\", Object.values(rooms));\r\n+    console.log(`🟢 Room created: ${roomData.name} (${roomId})`);\r\n   });\r\n \r\n-  socket.on(\"answer\", ({ answer, roomId }) => {\r\n-    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n+  socket.on(\"list-rooms\", () => {\r\n+    socket.emit(\"rooms\", Object.values(rooms));\r\n   });\r\n \r\n-  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n-    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n-  });\r\n+  socket.on(\"join-room\", ({ roomId, userInfo }) => {\r\n+    const room = rooms[roomId];\r\n+    if (!room) {\r\n+      socket.emit(\"error\", \"Room does not exist\");\r\n+      return;\r\n+    }\r\n+    if (room.password && room.password !== userInfo.password) {\r\n+      socket.emit(\"error\", \"Incorrect password\");\r\n+      return;\r\n+    }\r\n+    socket.join(roomId);\r\n+    socket.userData = { ...userInfo, socketId: socket.id };\r\n+    room.users.push(socket.id);\r\n \r\n-  // Chat features\r\n-  socket.on(\"send-message\", (msg) => {\r\n-    const { roomId } = msg;\r\n-    console.log(`💬 New message in ${roomId}:`, msg);\r\n-    socket.to(roomId).emit(\"receive-message\", msg);\r\n-  });\r\n+    io.to(roomId).emit(\"room-update\", {\r\n+      ...room,\r\n+      users: room.users.map((id) => io.sockets.sockets.get(id)?.userData || id),\r\n+    });\r\n \r\n-  socket.on(\"typing\", ({ roomId, sender }) => {\r\n-    socket.to(roomId).emit(\"typing\", { sender });\r\n+    console.log(`🟡 User ${userInfo.name} joined room ${room.name}`);\r\n   });\r\n \r\n-  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n-    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n+  socket.on(\"leave-room\", ({ roomId }) => {\r\n+    const room = rooms[roomId];\r\n+    if (room) {\r\n+      socket.leave(roomId);\r\n+      room.users = room.users.filter((id) => id !== socket.id);\r\n+      io.to(roomId).emit(\"room-update\", {\r\n+        ...room,\r\n+        users: room.users.map((id) => io.sockets.sockets.get(id)?.userData || id),\r\n+      });\r\n+    }\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n   });\r\n \r\n-  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n-    socket.to(roomId).emit(\"receive-message\", {\r\n-      id: messageId,\r\n-      content,\r\n-      type: \"text\",\r\n-      edited: true\r\n-    });\r\n-  });\r\n+  /** ----------------- WebRTC Signaling (works for both systems) ----------------- */\r\n+  socket.on(\"offer\", ({ offer, roomId }) => socket.to(roomId).emit(\"offer\", { offer, sender: socket.id }));\r\n+  socket.on(\"answer\", ({ answer, roomId }) => socket.to(roomId).emit(\"answer\", { answer, sender: socket.id }));\r\n+  socket.on(\"ice-candidate\", ({ candidate, roomId }) => socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id }));\r\n \r\n-  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n-    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n-  });\r\n+  /** ----------------- Chat ----------------- */\r\n+  socket.on(\"send-message\", ({ roomId, message }) => socket.to(roomId).emit(\"receive-message\", message));\r\n+  socket.on(\"typing\", ({ roomId, sender }) => socket.to(roomId).emit(\"typing\", { sender }));\r\n \r\n-  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n-    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n-  });\r\n-\r\n+  /** ----------------- Disconnect ----------------- */\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+    Object.values(rooms).forEach((room) => {\r\n+      if (room.users.includes(socket.id)) {\r\n+        room.users = room.users.filter((id) => id !== socket.id);\r\n+        io.to(room.id).emit(\"room-update\", {\r\n+          ...room,\r\n+          users: room.users.map((id) => io.sockets.sockets.get(id)?.userData || id),\r\n+        });\r\n+      }\r\n+    });\r\n \r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n"
                },
                {
                    "date": 1758906670153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,29 +7,32 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://connectify-hub.vercel.app/\", // Your frontend URL\r\n+    origin: \"https://connectify-hub.vercel.app/\",\r\n     methods: [\"GET\", \"POST\"]\r\n   },\r\n });\r\n \r\n app.get(\"/\", (req, res) => {\r\n-  res.send(\"🚀 Signaling server running!\");\r\n+  res.send(\"🚀 Signaling server is running!\");\r\n });\r\n \r\n-/** ----- 1-1 Anonymous Chat ----- */\r\n let waitingUsers = [];\r\n \r\n-/** ----- Rooms ----- */\r\n-const rooms = {}; // { roomId: { id, name, topic, description, users: [socketId] } }\r\n-\r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  /** ----------------- 1-1 Anonymous Chat ----------------- */\r\n   socket.on(\"start-looking\", (userInfo) => {\r\n-    const { gender, country, age, name, filterGender = \"\", filterCountry = \"\" } = userInfo || {};\r\n+    const {\r\n+      gender,\r\n+      country,\r\n+      age,\r\n+      name,\r\n+      filterGender = \"\",\r\n+      filterCountry = \"\"\r\n+    } = userInfo || {};\r\n+\r\n     socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n \r\n     const index = waitingUsers.findIndex((other) => {\r\n       if (!other.connected || !other.userData) return false;\r\n@@ -52,8 +55,9 @@\n \r\n       socket.join(roomId);\r\n       partner.join(roomId);\r\n \r\n+      // Emit match to partner\r\n       partner.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: socket.id,\r\n         isOfferer: true,\r\n@@ -61,8 +65,9 @@\n         partnerAge: socket.userData?.age || \"Unknown\",\r\n         partnerCountry: socket.userData?.country || \"Unknown\"\r\n       });\r\n \r\n+      // Emit match to socket\r\n       socket.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: partner.id,\r\n         isOfferer: false,\r\n@@ -74,96 +79,79 @@\n       waitingUsers.push(socket);\r\n     }\r\n   });\r\n \r\n+  socket.on(\"join-room\", (roomId) => {\r\n+    socket.join(roomId);\r\n+    socket.emit(\"joined-room\", roomId);\r\n+  });\r\n+\r\n+  socket.on(\"leave-room\", (roomId) => {\r\n+    socket.leave(roomId);\r\n+    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+  });\r\n+\r\n   socket.on(\"skip\", () => {\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.leave(roomId);\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n     });\r\n+\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n     socket.emit(\"start-looking\", socket.userData);\r\n   });\r\n \r\n-  /** ----------------- Room System ----------------- */\r\n-  socket.on(\"create-room\", (roomData) => {\r\n-    const roomId = uuidv4();\r\n-    rooms[roomId] = {\r\n-      id: roomId,\r\n-      name: roomData.name,\r\n-      topic: roomData.topic,\r\n-      description: roomData.description || \"\",\r\n-      password: roomData.password || null,\r\n-      users: [],\r\n-    };\r\n-    socket.emit(\"room-created\", rooms[roomId]);\r\n-    io.emit(\"rooms\", Object.values(rooms));\r\n-    console.log(`🟢 Room created: ${roomData.name} (${roomId})`);\r\n+  // WebRTC signaling\r\n+  socket.on(\"offer\", ({ offer, roomId }) => {\r\n+    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n \r\n-  socket.on(\"list-rooms\", () => {\r\n-    socket.emit(\"rooms\", Object.values(rooms));\r\n+  socket.on(\"answer\", ({ answer, roomId }) => {\r\n+    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n   });\r\n \r\n-  socket.on(\"join-room\", ({ roomId, userInfo }) => {\r\n-    const room = rooms[roomId];\r\n-    if (!room) {\r\n-      socket.emit(\"error\", \"Room does not exist\");\r\n-      return;\r\n-    }\r\n-    if (room.password && room.password !== userInfo.password) {\r\n-      socket.emit(\"error\", \"Incorrect password\");\r\n-      return;\r\n-    }\r\n-    socket.join(roomId);\r\n-    socket.userData = { ...userInfo, socketId: socket.id };\r\n-    room.users.push(socket.id);\r\n+  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n+    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n+  });\r\n \r\n-    io.to(roomId).emit(\"room-update\", {\r\n-      ...room,\r\n-      users: room.users.map((id) => io.sockets.sockets.get(id)?.userData || id),\r\n-    });\r\n+  // Chat features\r\n+  socket.on(\"send-message\", (msg) => {\r\n+    const { roomId } = msg;\r\n+    console.log(`💬 New message in ${roomId}:`, msg);\r\n+    socket.to(roomId).emit(\"receive-message\", msg);\r\n+  });\r\n \r\n-    console.log(`🟡 User ${userInfo.name} joined room ${room.name}`);\r\n+  socket.on(\"typing\", ({ roomId, sender }) => {\r\n+    socket.to(roomId).emit(\"typing\", { sender });\r\n   });\r\n \r\n-  socket.on(\"leave-room\", ({ roomId }) => {\r\n-    const room = rooms[roomId];\r\n-    if (room) {\r\n-      socket.leave(roomId);\r\n-      room.users = room.users.filter((id) => id !== socket.id);\r\n-      io.to(roomId).emit(\"room-update\", {\r\n-        ...room,\r\n-        users: room.users.map((id) => io.sockets.sockets.get(id)?.userData || id),\r\n-      });\r\n-    }\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n+    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n   });\r\n \r\n-  /** ----------------- WebRTC Signaling (works for both systems) ----------------- */\r\n-  socket.on(\"offer\", ({ offer, roomId }) => socket.to(roomId).emit(\"offer\", { offer, sender: socket.id }));\r\n-  socket.on(\"answer\", ({ answer, roomId }) => socket.to(roomId).emit(\"answer\", { answer, sender: socket.id }));\r\n-  socket.on(\"ice-candidate\", ({ candidate, roomId }) => socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id }));\r\n+  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n+    socket.to(roomId).emit(\"receive-message\", {\r\n+      id: messageId,\r\n+      content,\r\n+      type: \"text\",\r\n+      edited: true\r\n+    });\r\n+  });\r\n \r\n-  /** ----------------- Chat ----------------- */\r\n-  socket.on(\"send-message\", ({ roomId, message }) => socket.to(roomId).emit(\"receive-message\", message));\r\n-  socket.on(\"typing\", ({ roomId, sender }) => socket.to(roomId).emit(\"typing\", { sender }));\r\n+  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n+    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n+  });\r\n \r\n-  /** ----------------- Disconnect ----------------- */\r\n+  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n+    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n+  });\r\n+\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-    Object.values(rooms).forEach((room) => {\r\n-      if (room.users.includes(socket.id)) {\r\n-        room.users = room.users.filter((id) => id !== socket.id);\r\n-        io.to(room.id).emit(\"room-update\", {\r\n-          ...room,\r\n-          users: room.users.map((id) => io.sockets.sockets.get(id)?.userData || id),\r\n-        });\r\n-      }\r\n-    });\r\n \r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n"
                },
                {
                    "date": 1758906767155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,47 +7,52 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://connectify-hub.vercel.app/\",\r\n-    methods: [\"GET\", \"POST\"]\r\n+    origin: [\r\n+      \"https://connectify-hub.vercel.app\", // production frontend\r\n+      \"http://localhost:3000\"              // local dev\r\n+    ],\r\n+    methods: [\"GET\", \"POST\"],\r\n   },\r\n });\r\n \r\n-app.get(\"/\", (req, res) => {\r\n-  res.send(\"🚀 Signaling server is running!\");\r\n+app.get(\"/\", (_, res) => {\r\n+  res.send(\"🚀 Combined signaling server is running!\");\r\n });\r\n \r\n+// ==========================\r\n+// 1-to-1 Anonymous Chat\r\n+// ==========================\r\n let waitingUsers = [];\r\n \r\n-io.on(\"connection\", (socket) => {\r\n-  console.log(\"✅ User connected:\", socket.id);\r\n-\r\n+function handleOneToOne(socket) {\r\n   socket.on(\"start-looking\", (userInfo) => {\r\n     const {\r\n       gender,\r\n       country,\r\n       age,\r\n       name,\r\n       filterGender = \"\",\r\n-      filterCountry = \"\"\r\n+      filterCountry = \"\",\r\n     } = userInfo || {};\r\n \r\n     socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n \r\n+    // Try to find a partner\r\n     const index = waitingUsers.findIndex((other) => {\r\n       if (!other.connected || !other.userData) return false;\r\n \r\n-      const my = socket.userData;\r\n-      const their = other.userData;\r\n+      const me = socket.userData;\r\n+      const them = other.userData;\r\n \r\n-      const mutualFilterMatch =\r\n-        (!their.filterGender || their.filterGender === my.gender) &&\r\n-        (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n-        (!my.filterGender || my.filterGender === their.gender) &&\r\n-        (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n+      const mutual =\r\n+        (!them.filterGender || them.filterGender === me.gender) &&\r\n+        (!them.filterCountry || them.filterCountry.toLowerCase() === me.country?.toLowerCase()) &&\r\n+        (!me.filterGender || me.filterGender === them.gender) &&\r\n+        (!me.filterCountry || me.filterCountry.toLowerCase() === them.country?.toLowerCase());\r\n \r\n-      return mutualFilterMatch;\r\n+      return mutual;\r\n     });\r\n \r\n     if (index !== -1) {\r\n       const partner = waitingUsers.splice(index, 1)[0];\r\n@@ -55,56 +60,100 @@\n \r\n       socket.join(roomId);\r\n       partner.join(roomId);\r\n \r\n-      // Emit match to partner\r\n       partner.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: socket.id,\r\n         isOfferer: true,\r\n         partnerName: socket.userData?.name || \"Stranger\",\r\n         partnerAge: socket.userData?.age || \"Unknown\",\r\n-        partnerCountry: socket.userData?.country || \"Unknown\"\r\n+        partnerCountry: socket.userData?.country || \"Unknown\",\r\n       });\r\n \r\n-      // Emit match to socket\r\n       socket.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: partner.id,\r\n         isOfferer: false,\r\n         partnerName: partner.userData?.name || \"Stranger\",\r\n         partnerAge: partner.userData?.age || \"Unknown\",\r\n-        partnerCountry: partner.userData?.country || \"Unknown\"\r\n+        partnerCountry: partner.userData?.country || \"Unknown\",\r\n       });\r\n     } else {\r\n       waitingUsers.push(socket);\r\n     }\r\n   });\r\n \r\n-  socket.on(\"join-room\", (roomId) => {\r\n-    socket.join(roomId);\r\n-    socket.emit(\"joined-room\", roomId);\r\n-  });\r\n-\r\n-  socket.on(\"leave-room\", (roomId) => {\r\n-    socket.leave(roomId);\r\n-    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-  });\r\n-\r\n   socket.on(\"skip\", () => {\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.leave(roomId);\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n     });\r\n-\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n     socket.emit(\"start-looking\", socket.userData);\r\n   });\r\n+}\r\n \r\n-  // WebRTC signaling\r\n+// ==========================\r\n+// Multi-user Rooms\r\n+// ==========================\r\n+function handleRoomChat(socket) {\r\n+  // Join a named room (e.g., \"public-room-1\")\r\n+  socket.on(\"room-join\", ({ roomId, user }) => {\r\n+    socket.join(roomId);\r\n+    socket.roomId = roomId;\r\n+    socket.userName = user?.name || \"Guest\";\r\n+    socket.emit(\"room-joined\", { roomId });\r\n+    socket.to(roomId).emit(\"room-user-joined\", { id: socket.id, name: socket.userName });\r\n+    console.log(`👥 ${socket.userName} joined room ${roomId}`);\r\n+  });\r\n+\r\n+  // Leave a room\r\n+  socket.on(\"room-leave\", () => {\r\n+    const roomId = socket.roomId;\r\n+    if (roomId) {\r\n+      socket.leave(roomId);\r\n+      socket.to(roomId).emit(\"room-user-left\", { id: socket.id });\r\n+      console.log(`👋 ${socket.userName} left room ${roomId}`);\r\n+      socket.roomId = null;\r\n+    }\r\n+  });\r\n+\r\n+  // Broadcast a chat message to everyone in the room\r\n+  socket.on(\"room-message\", ({ roomId, content, type = \"text\" }) => {\r\n+    const msg = {\r\n+      id: uuidv4(),\r\n+      senderId: socket.id,\r\n+      senderName: socket.userName || \"Guest\",\r\n+      content,\r\n+      type,\r\n+      createdAt: Date.now(),\r\n+    };\r\n+    socket.to(roomId).emit(\"room-message\", msg);\r\n+  });\r\n+\r\n+  // WebRTC signaling inside rooms (multi-peer)\r\n+  socket.on(\"room-offer\", ({ offer, targetId }) => {\r\n+    io.to(targetId).emit(\"room-offer\", { offer, sender: socket.id });\r\n+  });\r\n+\r\n+  socket.on(\"room-answer\", ({ answer, targetId }) => {\r\n+    io.to(targetId).emit(\"room-answer\", { answer, sender: socket.id });\r\n+  });\r\n+\r\n+  socket.on(\"room-ice\", ({ candidate, targetId }) => {\r\n+    io.to(targetId).emit(\"room-ice\", { candidate, sender: socket.id });\r\n+  });\r\n+}\r\n+\r\n+// ==========================\r\n+// Common Features\r\n+// (Used by both 1-1 & Room)\r\n+// ==========================\r\n+function handleCommon(socket) {\r\n+  // Generic WebRTC for 1-1\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n     socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n \r\n@@ -115,12 +164,11 @@\n   socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n     socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n-  // Chat features\r\n+  // Chat (1-1)\r\n   socket.on(\"send-message\", (msg) => {\r\n     const { roomId } = msg;\r\n-    console.log(`💬 New message in ${roomId}:`, msg);\r\n     socket.to(roomId).emit(\"receive-message\", msg);\r\n   });\r\n \r\n   socket.on(\"typing\", ({ roomId, sender }) => {\r\n@@ -135,9 +183,9 @@\n     socket.to(roomId).emit(\"receive-message\", {\r\n       id: messageId,\r\n       content,\r\n       type: \"text\",\r\n-      edited: true\r\n+      edited: true,\r\n     });\r\n   });\r\n \r\n   socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n@@ -147,20 +195,38 @@\n   socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n     socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n   });\r\n \r\n+  // Disconnect cleanup\r\n   socket.on(\"disconnect\", () => {\r\n-    console.log(\"❌ User disconnected:\", socket.id);\r\n+    console.log(\"❌ Disconnected:\", socket.id);\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n \r\n+    // Notify 1-1 partner\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n     });\r\n+\r\n+    // Notify room members\r\n+    if (socket.roomId) {\r\n+      socket.to(socket.roomId).emit(\"room-user-left\", { id: socket.id });\r\n+    }\r\n   });\r\n+}\r\n+\r\n+// ==========================\r\n+// Connection Entry Point\r\n+// ==========================\r\n+io.on(\"connection\", (socket) => {\r\n+  console.log(\"✅ User connected:\", socket.id);\r\n+  handleOneToOne(socket);\r\n+  handleRoomChat(socket);\r\n+  handleCommon(socket);\r\n });\r\n \r\n+// Start server\r\n const PORT = process.env.PORT || 3001;\r\n server.listen(PORT, () => {\r\n-  console.log(`🚀 Signaling server running on port ${PORT}`);\r\n+  console.log(`🚀 Combined server running on port ${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1758907476942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,166 @@\n+const express = require(\"express\");\r\n+const http = require(\"http\");\r\n+const { Server } = require(\"socket.io\");\r\n+const { v4: uuidv4 } = require(\"uuid\");\r\n+\r\n+const app = express();\r\n+const server = http.createServer(app);\r\n+\r\n+const io = new Server(server, {\r\n+  cors: {\r\n+    origin: \"https://connectify-hub.vercel.app/\",\r\n+    methods: [\"GET\", \"POST\"]\r\n+  },\r\n+});\r\n+\r\n+app.get(\"/\", (req, res) => {\r\n+  res.send(\"🚀 Signaling server is running!\");\r\n+});\r\n+\r\n+let waitingUsers = [];\r\n+\r\n+io.on(\"connection\", (socket) => {\r\n+  console.log(\"✅ User connected:\", socket.id);\r\n+\r\n+  socket.on(\"start-looking\", (userInfo) => {\r\n+    const {\r\n+      gender,\r\n+      country,\r\n+      age,\r\n+      name,\r\n+      filterGender = \"\",\r\n+      filterCountry = \"\"\r\n+    } = userInfo || {};\r\n+\r\n+    socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n+\r\n+    const index = waitingUsers.findIndex((other) => {\r\n+      if (!other.connected || !other.userData) return false;\r\n+\r\n+      const my = socket.userData;\r\n+      const their = other.userData;\r\n+\r\n+      const mutualFilterMatch =\r\n+        (!their.filterGender || their.filterGender === my.gender) &&\r\n+        (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n+        (!my.filterGender || my.filterGender === their.gender) &&\r\n+        (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n+\r\n+      return mutualFilterMatch;\r\n+    });\r\n+\r\n+    if (index !== -1) {\r\n+      const partner = waitingUsers.splice(index, 1)[0];\r\n+      const roomId = uuidv4();\r\n+\r\n+      socket.join(roomId);\r\n+      partner.join(roomId);\r\n+\r\n+      // Emit match to partner\r\n+      partner.emit(\"matched\", {\r\n+        roomId,\r\n+        partnerId: socket.id,\r\n+        isOfferer: true,\r\n+        partnerName: socket.userData?.name || \"Stranger\",\r\n+        partnerAge: socket.userData?.age || \"Unknown\",\r\n+        partnerCountry: socket.userData?.country || \"Unknown\"\r\n+      });\r\n+\r\n+      // Emit match to socket\r\n+      socket.emit(\"matched\", {\r\n+        roomId,\r\n+        partnerId: partner.id,\r\n+        isOfferer: false,\r\n+        partnerName: partner.userData?.name || \"Stranger\",\r\n+        partnerAge: partner.userData?.age || \"Unknown\",\r\n+        partnerCountry: partner.userData?.country || \"Unknown\"\r\n+      });\r\n+    } else {\r\n+      waitingUsers.push(socket);\r\n+    }\r\n+  });\r\n+\r\n+  socket.on(\"join-room\", (roomId) => {\r\n+    socket.join(roomId);\r\n+    socket.emit(\"joined-room\", roomId);\r\n+  });\r\n+\r\n+  socket.on(\"leave-room\", (roomId) => {\r\n+    socket.leave(roomId);\r\n+    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+  });\r\n+\r\n+  socket.on(\"skip\", () => {\r\n+    socket.rooms.forEach((roomId) => {\r\n+      if (roomId !== socket.id) {\r\n+        socket.leave(roomId);\r\n+        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+      }\r\n+    });\r\n+\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+    socket.emit(\"start-looking\", socket.userData);\r\n+  });\r\n+\r\n+  // WebRTC signaling\r\n+  socket.on(\"offer\", ({ offer, roomId }) => {\r\n+    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n+  });\r\n+\r\n+  socket.on(\"answer\", ({ answer, roomId }) => {\r\n+    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n+  });\r\n+\r\n+  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n+    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n+  });\r\n+\r\n+  // Chat features\r\n+  socket.on(\"send-message\", (msg) => {\r\n+    const { roomId } = msg;\r\n+    console.log(`💬 New message in ${roomId}:`, msg);\r\n+    socket.to(roomId).emit(\"receive-message\", msg);\r\n+  });\r\n+\r\n+  socket.on(\"typing\", ({ roomId, sender }) => {\r\n+    socket.to(roomId).emit(\"typing\", { sender });\r\n+  });\r\n+\r\n+  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n+    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n+  });\r\n+\r\n+  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n+    socket.to(roomId).emit(\"receive-message\", {\r\n+      id: messageId,\r\n+      content,\r\n+      type: \"text\",\r\n+      edited: true\r\n+    });\r\n+  });\r\n+\r\n+  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n+    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n+  });\r\n+\r\n+  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n+    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n+  });\r\n+\r\n+  socket.on(\"disconnect\", () => {\r\n+    console.log(\"❌ User disconnected:\", socket.id);\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+\r\n+    socket.rooms.forEach((roomId) => {\r\n+      if (roomId !== socket.id) {\r\n+        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+      }\r\n+    });\r\n+  });\r\n+});\r\n+\r\n+const PORT = process.env.PORT || 3001;\r\n+server.listen(PORT, () => {\r\n+  console.log(`🚀 Signaling server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1758963200368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,170 @@\n+const express = require(\"express\");\r\n+const http = require(\"http\");\r\n+const { Server } = require(\"socket.io\");\r\n+const { v4: uuidv4 } = require(\"uuid\");\r\n+\r\n+const app = express();\r\n+const server = http.createServer(app);\r\n+\r\n+const io = new Server(server, {\r\n+  cors: {\r\n+    origin: \"https://connectify-hub.vercel.app\", // ✅ Your frontend URL\r\n+    methods: [\"GET\", \"POST\"]\r\n+  },\r\n+});\r\n+\r\n+app.get(\"/\", (_, res) => res.send(\"🚀 Combined signaling server is running!\"));\r\n+\r\n+/* ---------- STATE ---------- */\r\n+let waitingUsers = []; // for 1-1 matchmaking\r\n+const groupRooms = {}; // { roomId: Set(socketId) }\r\n+\r\n+/* ---------- SOCKET LOGIC ---------- */\r\n+io.on(\"connection\", (socket) => {\r\n+  console.log(\"✅ User connected:\", socket.id);\r\n+\r\n+  /* ===== 1️⃣  Anonymous 1-on-1 Matching ===== */\r\n+  socket.on(\"start-looking\", (userInfo) => {\r\n+    const {\r\n+      gender,\r\n+      country,\r\n+      age,\r\n+      name,\r\n+      filterGender = \"\",\r\n+      filterCountry = \"\"\r\n+    } = userInfo || {};\r\n+\r\n+    socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n+\r\n+    const index = waitingUsers.findIndex((other) => {\r\n+      if (!other.connected || !other.userData) return false;\r\n+      const my = socket.userData;\r\n+      const their = other.userData;\r\n+\r\n+      const mutual =\r\n+        (!their.filterGender || their.filterGender === my.gender) &&\r\n+        (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n+        (!my.filterGender || my.filterGender === their.gender) &&\r\n+        (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n+      return mutual;\r\n+    });\r\n+\r\n+    if (index !== -1) {\r\n+      const partner = waitingUsers.splice(index, 1)[0];\r\n+      const roomId = uuidv4();\r\n+\r\n+      socket.join(roomId);\r\n+      partner.join(roomId);\r\n+\r\n+      const emitMatch = (s, p, offerer) => s.emit(\"matched\", {\r\n+        roomId,\r\n+        partnerId: p.id,\r\n+        isOfferer: offerer,\r\n+        partnerName: p.userData?.name || \"Stranger\",\r\n+        partnerAge: p.userData?.age || \"Unknown\",\r\n+        partnerCountry: p.userData?.country || \"Unknown\"\r\n+      });\r\n+\r\n+      emitMatch(socket, partner, true);\r\n+      emitMatch(partner, socket, false);\r\n+    } else {\r\n+      waitingUsers.push(socket);\r\n+    }\r\n+  });\r\n+\r\n+  socket.on(\"skip\", () => {\r\n+    leaveAllRooms(socket, true);\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+    socket.emit(\"start-looking\", socket.userData);\r\n+  });\r\n+\r\n+  /* ===== 2️⃣  Group Rooms ===== */\r\n+  socket.on(\"create-room\", () => {\r\n+    const roomId = uuidv4();\r\n+    joinGroupRoom(socket, roomId);\r\n+    socket.emit(\"room-created\", { roomId });\r\n+  });\r\n+\r\n+  socket.on(\"join-room\", (roomId) => joinGroupRoom(socket, roomId));\r\n+  socket.on(\"leave-room\", (roomId) => leaveGroupRoom(socket, roomId));\r\n+\r\n+  /* ===== 3️⃣  WebRTC Signaling ===== */\r\n+  socket.on(\"offer\", ({ offer, roomId }) =>\r\n+    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id })\r\n+  );\r\n+  socket.on(\"answer\", ({ answer, roomId }) =>\r\n+    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id })\r\n+  );\r\n+  socket.on(\"ice-candidate\", ({ candidate, roomId }) =>\r\n+    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id })\r\n+  );\r\n+\r\n+  /* ===== 4️⃣  Chat Features ===== */\r\n+  socket.on(\"send-message\", (msg) => {\r\n+    console.log(`💬 Message in ${msg.roomId}:`, msg);\r\n+    socket.to(msg.roomId).emit(\"receive-message\", msg);\r\n+  });\r\n+\r\n+  socket.on(\"typing\", ({ roomId, sender }) =>\r\n+    socket.to(roomId).emit(\"typing\", { sender })\r\n+  );\r\n+\r\n+  socket.on(\"message-status\", ({ roomId, messageId, status }) =>\r\n+    socket.to(roomId).emit(\"message-status-update\", { messageId, status })\r\n+  );\r\n+\r\n+  socket.on(\"edit-message\", ({ roomId, messageId, content }) =>\r\n+    socket.to(roomId).emit(\"receive-message\", {\r\n+      id: messageId,\r\n+      content,\r\n+      type: \"text\",\r\n+      edited: true\r\n+    })\r\n+  );\r\n+\r\n+  socket.on(\"delete-message\", ({ roomId, messageId }) =>\r\n+    socket.to(roomId).emit(\"message-deleted\", { messageId })\r\n+  );\r\n+\r\n+  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) =>\r\n+    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user })\r\n+  );\r\n+\r\n+  /* ===== Disconnect ===== */\r\n+  socket.on(\"disconnect\", () => {\r\n+    console.log(\"❌ Disconnected:\", socket.id);\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+    leaveAllRooms(socket, false);\r\n+  });\r\n+});\r\n+\r\n+/* ---------- Helpers ---------- */\r\n+function joinGroupRoom(socket, roomId) {\r\n+  if (!groupRooms[roomId]) groupRooms[roomId] = new Set();\r\n+  groupRooms[roomId].add(socket.id);\r\n+  socket.join(roomId);\r\n+  socket.emit(\"joined-room\", { roomId, members: [...groupRooms[roomId]] });\r\n+  socket.to(roomId).emit(\"user-joined\", { userId: socket.id });\r\n+}\r\n+\r\n+function leaveGroupRoom(socket, roomId) {\r\n+  if (groupRooms[roomId]) {\r\n+    groupRooms[roomId].delete(socket.id);\r\n+    if (groupRooms[roomId].size === 0) delete groupRooms[roomId];\r\n+  }\r\n+  socket.leave(roomId);\r\n+  socket.to(roomId).emit(\"user-left\", { userId: socket.id });\r\n+}\r\n+\r\n+function leaveAllRooms(socket, notify1v1) {\r\n+  socket.rooms.forEach((roomId) => {\r\n+    if (roomId !== socket.id) {\r\n+      if (notify1v1) socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+      leaveGroupRoom(socket, roomId);\r\n+    }\r\n+  });\r\n+}\r\n+\r\n+/* ---------- START ---------- */\r\n+const PORT = process.env.PORT || 3001;\r\n+server.listen(PORT, () => console.log(`🚀 Combined server running on ${PORT}`));\r\n"
                },
                {
                    "date": 1758963218278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,402 +167,5 @@\n \r\n /* ---------- START ---------- */\r\n const PORT = process.env.PORT || 3001;\r\n server.listen(PORT, () => console.log(`🚀 Combined server running on ${PORT}`));\r\n-const express = require(\"express\");\r\n-const http = require(\"http\");\r\n-const { Server } = require(\"socket.io\");\r\n-const { v4: uuidv4 } = require(\"uuid\");\r\n-\r\n-const app = express();\r\n-const server = http.createServer(app);\r\n-\r\n-const io = new Server(server, {\r\n-  cors: {\r\n-    origin: \"https://connectify-hub.vercel.app/\",\r\n-    methods: [\"GET\", \"POST\"]\r\n-  },\r\n-});\r\n-\r\n-app.get(\"/\", (req, res) => {\r\n-  res.send(\"🚀 Signaling server is running!\");\r\n-});\r\n-\r\n-let waitingUsers = [];\r\n-\r\n-io.on(\"connection\", (socket) => {\r\n-  console.log(\"✅ User connected:\", socket.id);\r\n-\r\n-  socket.on(\"start-looking\", (userInfo) => {\r\n-    const {\r\n-      gender,\r\n-      country,\r\n-      age,\r\n-      name,\r\n-      filterGender = \"\",\r\n-      filterCountry = \"\"\r\n-    } = userInfo || {};\r\n-\r\n-    socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n-\r\n-    const index = waitingUsers.findIndex((other) => {\r\n-      if (!other.connected || !other.userData) return false;\r\n-\r\n-      const my = socket.userData;\r\n-      const their = other.userData;\r\n-\r\n-      const mutualFilterMatch =\r\n-        (!their.filterGender || their.filterGender === my.gender) &&\r\n-        (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n-        (!my.filterGender || my.filterGender === their.gender) &&\r\n-        (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n-\r\n-      return mutualFilterMatch;\r\n-    });\r\n-\r\n-    if (index !== -1) {\r\n-      const partner = waitingUsers.splice(index, 1)[0];\r\n-      const roomId = uuidv4();\r\n-\r\n-      socket.join(roomId);\r\n-      partner.join(roomId);\r\n-\r\n-      // Emit match to partner\r\n-      partner.emit(\"matched\", {\r\n-        roomId,\r\n-        partnerId: socket.id,\r\n-        isOfferer: true,\r\n-        partnerName: socket.userData?.name || \"Stranger\",\r\n-        partnerAge: socket.userData?.age || \"Unknown\",\r\n-        partnerCountry: socket.userData?.country || \"Unknown\"\r\n-      });\r\n-\r\n-      // Emit match to socket\r\n-      socket.emit(\"matched\", {\r\n-        roomId,\r\n-        partnerId: partner.id,\r\n-        isOfferer: false,\r\n-        partnerName: partner.userData?.name || \"Stranger\",\r\n-        partnerAge: partner.userData?.age || \"Unknown\",\r\n-        partnerCountry: partner.userData?.country || \"Unknown\"\r\n-      });\r\n-    } else {\r\n-      waitingUsers.push(socket);\r\n-    }\r\n-  });\r\n-\r\n-  socket.on(\"join-room\", (roomId) => {\r\n-    socket.join(roomId);\r\n-    socket.emit(\"joined-room\", roomId);\r\n-  });\r\n-\r\n-  socket.on(\"leave-room\", (roomId) => {\r\n-    socket.leave(roomId);\r\n-    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-  });\r\n-\r\n-  socket.on(\"skip\", () => {\r\n-    socket.rooms.forEach((roomId) => {\r\n-      if (roomId !== socket.id) {\r\n-        socket.leave(roomId);\r\n-        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-      }\r\n-    });\r\n-\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-    socket.emit(\"start-looking\", socket.userData);\r\n-  });\r\n-\r\n-  // WebRTC signaling\r\n-  socket.on(\"offer\", ({ offer, roomId }) => {\r\n-    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n-  });\r\n-\r\n-  socket.on(\"answer\", ({ answer, roomId }) => {\r\n-    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n-  });\r\n-\r\n-  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n-    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n-  });\r\n-\r\n-  // Chat features\r\n-  socket.on(\"send-message\", (msg) => {\r\n-    const { roomId } = msg;\r\n-    console.log(`💬 New message in ${roomId}:`, msg);\r\n-    socket.to(roomId).emit(\"receive-message\", msg);\r\n-  });\r\n-\r\n-  socket.on(\"typing\", ({ roomId, sender }) => {\r\n-    socket.to(roomId).emit(\"typing\", { sender });\r\n-  });\r\n-\r\n-  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n-    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n-  });\r\n-\r\n-  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n-    socket.to(roomId).emit(\"receive-message\", {\r\n-      id: messageId,\r\n-      content,\r\n-      type: \"text\",\r\n-      edited: true\r\n-    });\r\n-  });\r\n-\r\n-  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n-    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n-  });\r\n-\r\n-  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n-    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n-  });\r\n-\r\n-  socket.on(\"disconnect\", () => {\r\n-    console.log(\"❌ User disconnected:\", socket.id);\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-\r\n-    socket.rooms.forEach((roomId) => {\r\n-      if (roomId !== socket.id) {\r\n-        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-      }\r\n-    });\r\n-  });\r\n-});\r\n-\r\n-const PORT = process.env.PORT || 3001;\r\n-server.listen(PORT, () => {\r\n-  console.log(`🚀 Signaling server running on port ${PORT}`);\r\n-});\r\n-const express = require(\"express\");\r\n-const http = require(\"http\");\r\n-const { Server } = require(\"socket.io\");\r\n-const { v4: uuidv4 } = require(\"uuid\");\r\n-\r\n-const app = express();\r\n-const server = http.createServer(app);\r\n-\r\n-const io = new Server(server, {\r\n-  cors: {\r\n-    origin: [\r\n-      \"https://connectify-hub.vercel.app\", // production frontend\r\n-      \"http://localhost:3000\"              // local dev\r\n-    ],\r\n-    methods: [\"GET\", \"POST\"],\r\n-  },\r\n-});\r\n-\r\n-app.get(\"/\", (_, res) => {\r\n-  res.send(\"🚀 Combined signaling server is running!\");\r\n-});\r\n-\r\n-// ==========================\r\n-// 1-to-1 Anonymous Chat\r\n-// ==========================\r\n-let waitingUsers = [];\r\n-\r\n-function handleOneToOne(socket) {\r\n-  socket.on(\"start-looking\", (userInfo) => {\r\n-    const {\r\n-      gender,\r\n-      country,\r\n-      age,\r\n-      name,\r\n-      filterGender = \"\",\r\n-      filterCountry = \"\",\r\n-    } = userInfo || {};\r\n-\r\n-    socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n-\r\n-    // Try to find a partner\r\n-    const index = waitingUsers.findIndex((other) => {\r\n-      if (!other.connected || !other.userData) return false;\r\n-\r\n-      const me = socket.userData;\r\n-      const them = other.userData;\r\n-\r\n-      const mutual =\r\n-        (!them.filterGender || them.filterGender === me.gender) &&\r\n-        (!them.filterCountry || them.filterCountry.toLowerCase() === me.country?.toLowerCase()) &&\r\n-        (!me.filterGender || me.filterGender === them.gender) &&\r\n-        (!me.filterCountry || me.filterCountry.toLowerCase() === them.country?.toLowerCase());\r\n-\r\n-      return mutual;\r\n-    });\r\n-\r\n-    if (index !== -1) {\r\n-      const partner = waitingUsers.splice(index, 1)[0];\r\n-      const roomId = uuidv4();\r\n-\r\n-      socket.join(roomId);\r\n-      partner.join(roomId);\r\n-\r\n-      partner.emit(\"matched\", {\r\n-        roomId,\r\n-        partnerId: socket.id,\r\n-        isOfferer: true,\r\n-        partnerName: socket.userData?.name || \"Stranger\",\r\n-        partnerAge: socket.userData?.age || \"Unknown\",\r\n-        partnerCountry: socket.userData?.country || \"Unknown\",\r\n-      });\r\n-\r\n-      socket.emit(\"matched\", {\r\n-        roomId,\r\n-        partnerId: partner.id,\r\n-        isOfferer: false,\r\n-        partnerName: partner.userData?.name || \"Stranger\",\r\n-        partnerAge: partner.userData?.age || \"Unknown\",\r\n-        partnerCountry: partner.userData?.country || \"Unknown\",\r\n-      });\r\n-    } else {\r\n-      waitingUsers.push(socket);\r\n-    }\r\n-  });\r\n-\r\n-  socket.on(\"skip\", () => {\r\n-    socket.rooms.forEach((roomId) => {\r\n-      if (roomId !== socket.id) {\r\n-        socket.leave(roomId);\r\n-        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-      }\r\n-    });\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-    socket.emit(\"start-looking\", socket.userData);\r\n-  });\r\n-}\r\n-\r\n-// ==========================\r\n-// Multi-user Rooms\r\n-// ==========================\r\n-function handleRoomChat(socket) {\r\n-  // Join a named room (e.g., \"public-room-1\")\r\n-  socket.on(\"room-join\", ({ roomId, user }) => {\r\n-    socket.join(roomId);\r\n-    socket.roomId = roomId;\r\n-    socket.userName = user?.name || \"Guest\";\r\n-    socket.emit(\"room-joined\", { roomId });\r\n-    socket.to(roomId).emit(\"room-user-joined\", { id: socket.id, name: socket.userName });\r\n-    console.log(`👥 ${socket.userName} joined room ${roomId}`);\r\n-  });\r\n-\r\n-  // Leave a room\r\n-  socket.on(\"room-leave\", () => {\r\n-    const roomId = socket.roomId;\r\n-    if (roomId) {\r\n-      socket.leave(roomId);\r\n-      socket.to(roomId).emit(\"room-user-left\", { id: socket.id });\r\n-      console.log(`👋 ${socket.userName} left room ${roomId}`);\r\n-      socket.roomId = null;\r\n-    }\r\n-  });\r\n-\r\n-  // Broadcast a chat message to everyone in the room\r\n-  socket.on(\"room-message\", ({ roomId, content, type = \"text\" }) => {\r\n-    const msg = {\r\n-      id: uuidv4(),\r\n-      senderId: socket.id,\r\n-      senderName: socket.userName || \"Guest\",\r\n-      content,\r\n-      type,\r\n-      createdAt: Date.now(),\r\n-    };\r\n-    socket.to(roomId).emit(\"room-message\", msg);\r\n-  });\r\n-\r\n-  // WebRTC signaling inside rooms (multi-peer)\r\n-  socket.on(\"room-offer\", ({ offer, targetId }) => {\r\n-    io.to(targetId).emit(\"room-offer\", { offer, sender: socket.id });\r\n-  });\r\n-\r\n-  socket.on(\"room-answer\", ({ answer, targetId }) => {\r\n-    io.to(targetId).emit(\"room-answer\", { answer, sender: socket.id });\r\n-  });\r\n-\r\n-  socket.on(\"room-ice\", ({ candidate, targetId }) => {\r\n-    io.to(targetId).emit(\"room-ice\", { candidate, sender: socket.id });\r\n-  });\r\n-}\r\n-\r\n-// ==========================\r\n-// Common Features\r\n-// (Used by both 1-1 & Room)\r\n-// ==========================\r\n-function handleCommon(socket) {\r\n-  // Generic WebRTC for 1-1\r\n-  socket.on(\"offer\", ({ offer, roomId }) => {\r\n-    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n-  });\r\n-\r\n-  socket.on(\"answer\", ({ answer, roomId }) => {\r\n-    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n-  });\r\n-\r\n-  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n-    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n-  });\r\n-\r\n-  // Chat (1-1)\r\n-  socket.on(\"send-message\", (msg) => {\r\n-    const { roomId } = msg;\r\n-    socket.to(roomId).emit(\"receive-message\", msg);\r\n-  });\r\n-\r\n-  socket.on(\"typing\", ({ roomId, sender }) => {\r\n-    socket.to(roomId).emit(\"typing\", { sender });\r\n-  });\r\n-\r\n-  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n-    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n-  });\r\n-\r\n-  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n-    socket.to(roomId).emit(\"receive-message\", {\r\n-      id: messageId,\r\n-      content,\r\n-      type: \"text\",\r\n-      edited: true,\r\n-    });\r\n-  });\r\n-\r\n-  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n-    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n-  });\r\n-\r\n-  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n-    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n-  });\r\n-\r\n-  // Disconnect cleanup\r\n-  socket.on(\"disconnect\", () => {\r\n-    console.log(\"❌ Disconnected:\", socket.id);\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-\r\n-    // Notify 1-1 partner\r\n-    socket.rooms.forEach((roomId) => {\r\n-      if (roomId !== socket.id) {\r\n-        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-      }\r\n-    });\r\n-\r\n-    // Notify room members\r\n-    if (socket.roomId) {\r\n-      socket.to(socket.roomId).emit(\"room-user-left\", { id: socket.id });\r\n-    }\r\n-  });\r\n-}\r\n-\r\n-// ==========================\r\n-// Connection Entry Point\r\n-// ==========================\r\n-io.on(\"connection\", (socket) => {\r\n-  console.log(\"✅ User connected:\", socket.id);\r\n-  handleOneToOne(socket);\r\n-  handleRoomChat(socket);\r\n-  handleCommon(socket);\r\n-});\r\n-\r\n-// Start server\r\n-const PORT = process.env.PORT || 3001;\r\n-server.listen(PORT, () => {\r\n-  console.log(`🚀 Combined server running on port ${PORT}`);\r\n-});\r\n+git push origin main --force\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758972771501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,24 +7,22 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://connectify-hub.vercel.app\", // ✅ Your frontend URL\r\n+    origin: \"https://connectify-hub.vercel.app/\",\r\n     methods: [\"GET\", \"POST\"]\r\n   },\r\n });\r\n \r\n-app.get(\"/\", (_, res) => res.send(\"🚀 Combined signaling server is running!\"));\r\n+app.get(\"/\", (req, res) => {\r\n+  res.send(\"🚀 Signaling server is running!\");\r\n+});\r\n \r\n-/* ---------- STATE ---------- */\r\n-let waitingUsers = []; // for 1-1 matchmaking\r\n-const groupRooms = {}; // { roomId: Set(socketId) }\r\n+let waitingUsers = [];\r\n \r\n-/* ---------- SOCKET LOGIC ---------- */\r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  /* ===== 1️⃣  Anonymous 1-on-1 Matching ===== */\r\n   socket.on(\"start-looking\", (userInfo) => {\r\n     const {\r\n       gender,\r\n       country,\r\n@@ -37,17 +35,19 @@\n     socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n \r\n     const index = waitingUsers.findIndex((other) => {\r\n       if (!other.connected || !other.userData) return false;\r\n+\r\n       const my = socket.userData;\r\n       const their = other.userData;\r\n \r\n-      const mutual =\r\n+      const mutualFilterMatch =\r\n         (!their.filterGender || their.filterGender === my.gender) &&\r\n         (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n         (!my.filterGender || my.filterGender === their.gender) &&\r\n         (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n-      return mutual;\r\n+\r\n+      return mutualFilterMatch;\r\n     });\r\n \r\n     if (index !== -1) {\r\n       const partner = waitingUsers.splice(index, 1)[0];\r\n@@ -55,117 +55,112 @@\n \r\n       socket.join(roomId);\r\n       partner.join(roomId);\r\n \r\n-      const emitMatch = (s, p, offerer) => s.emit(\"matched\", {\r\n+      // Emit match to partner\r\n+      partner.emit(\"matched\", {\r\n         roomId,\r\n-        partnerId: p.id,\r\n-        isOfferer: offerer,\r\n-        partnerName: p.userData?.name || \"Stranger\",\r\n-        partnerAge: p.userData?.age || \"Unknown\",\r\n-        partnerCountry: p.userData?.country || \"Unknown\"\r\n+        partnerId: socket.id,\r\n+        isOfferer: true,\r\n+        partnerName: socket.userData?.name || \"Stranger\",\r\n+        partnerAge: socket.userData?.age || \"Unknown\",\r\n+        partnerCountry: socket.userData?.country || \"Unknown\"\r\n       });\r\n \r\n-      emitMatch(socket, partner, true);\r\n-      emitMatch(partner, socket, false);\r\n+      // Emit match to socket\r\n+      socket.emit(\"matched\", {\r\n+        roomId,\r\n+        partnerId: partner.id,\r\n+        isOfferer: false,\r\n+        partnerName: partner.userData?.name || \"Stranger\",\r\n+        partnerAge: partner.userData?.age || \"Unknown\",\r\n+        partnerCountry: partner.userData?.country || \"Unknown\"\r\n+      });\r\n     } else {\r\n       waitingUsers.push(socket);\r\n     }\r\n   });\r\n \r\n+  socket.on(\"join-room\", (roomId) => {\r\n+    socket.join(roomId);\r\n+    socket.emit(\"joined-room\", roomId);\r\n+  });\r\n+\r\n+  socket.on(\"leave-room\", (roomId) => {\r\n+    socket.leave(roomId);\r\n+    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+  });\r\n+\r\n   socket.on(\"skip\", () => {\r\n-    leaveAllRooms(socket, true);\r\n+    socket.rooms.forEach((roomId) => {\r\n+      if (roomId !== socket.id) {\r\n+        socket.leave(roomId);\r\n+        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+      }\r\n+    });\r\n+\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n     socket.emit(\"start-looking\", socket.userData);\r\n   });\r\n \r\n-  /* ===== 2️⃣  Group Rooms ===== */\r\n-  socket.on(\"create-room\", () => {\r\n-    const roomId = uuidv4();\r\n-    joinGroupRoom(socket, roomId);\r\n-    socket.emit(\"room-created\", { roomId });\r\n+  // WebRTC signaling\r\n+  socket.on(\"offer\", ({ offer, roomId }) => {\r\n+    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n \r\n-  socket.on(\"join-room\", (roomId) => joinGroupRoom(socket, roomId));\r\n-  socket.on(\"leave-room\", (roomId) => leaveGroupRoom(socket, roomId));\r\n+  socket.on(\"answer\", ({ answer, roomId }) => {\r\n+    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n+  });\r\n \r\n-  /* ===== 3️⃣  WebRTC Signaling ===== */\r\n-  socket.on(\"offer\", ({ offer, roomId }) =>\r\n-    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id })\r\n-  );\r\n-  socket.on(\"answer\", ({ answer, roomId }) =>\r\n-    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id })\r\n-  );\r\n-  socket.on(\"ice-candidate\", ({ candidate, roomId }) =>\r\n-    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id })\r\n-  );\r\n+  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n+    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n+  });\r\n \r\n-  /* ===== 4️⃣  Chat Features ===== */\r\n+  // Chat features\r\n   socket.on(\"send-message\", (msg) => {\r\n-    console.log(`💬 Message in ${msg.roomId}:`, msg);\r\n-    socket.to(msg.roomId).emit(\"receive-message\", msg);\r\n+    const { roomId } = msg;\r\n+    console.log(`💬 New message in ${roomId}:`, msg);\r\n+    socket.to(roomId).emit(\"receive-message\", msg);\r\n   });\r\n \r\n-  socket.on(\"typing\", ({ roomId, sender }) =>\r\n-    socket.to(roomId).emit(\"typing\", { sender })\r\n-  );\r\n+  socket.on(\"typing\", ({ roomId, sender }) => {\r\n+    socket.to(roomId).emit(\"typing\", { sender });\r\n+  });\r\n \r\n-  socket.on(\"message-status\", ({ roomId, messageId, status }) =>\r\n-    socket.to(roomId).emit(\"message-status-update\", { messageId, status })\r\n-  );\r\n+  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n+    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n+  });\r\n \r\n-  socket.on(\"edit-message\", ({ roomId, messageId, content }) =>\r\n+  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n     socket.to(roomId).emit(\"receive-message\", {\r\n\\ No newline at end of file\n       id: messageId,\r\n       content,\r\n       type: \"text\",\r\n       edited: true\r\n-    })\r\n-  );\r\n+    });\r\n+  });\r\n \r\n-  socket.on(\"delete-message\", ({ roomId, messageId }) =>\r\n-    socket.to(roomId).emit(\"message-deleted\", { messageId })\r\n-  );\r\n+  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n+    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n+  });\r\n \r\n-  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) =>\r\n-    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user })\r\n-  );\r\n+  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n+    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n+  });\r\n \r\n-  /* ===== Disconnect ===== */\r\n   socket.on(\"disconnect\", () => {\r\n-    console.log(\"❌ Disconnected:\", socket.id);\r\n+    console.log(\"❌ User disconnected:\", socket.id);\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-    leaveAllRooms(socket, false);\r\n+\r\n+    socket.rooms.forEach((roomId) => {\r\n+      if (roomId !== socket.id) {\r\n+        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+      }\r\n+    });\r\n   });\r\n });\r\n \r\n-/* ---------- Helpers ---------- */\r\n-function joinGroupRoom(socket, roomId) {\r\n-  if (!groupRooms[roomId]) groupRooms[roomId] = new Set();\r\n-  groupRooms[roomId].add(socket.id);\r\n-  socket.join(roomId);\r\n-  socket.emit(\"joined-room\", { roomId, members: [...groupRooms[roomId]] });\r\n-  socket.to(roomId).emit(\"user-joined\", { userId: socket.id });\r\n-}\r\n-\r\n-function leaveGroupRoom(socket, roomId) {\r\n-  if (groupRooms[roomId]) {\r\n-    groupRooms[roomId].delete(socket.id);\r\n-    if (groupRooms[roomId].size === 0) delete groupRooms[roomId];\r\n-  }\r\n-  socket.leave(roomId);\r\n-  socket.to(roomId).emit(\"user-left\", { userId: socket.id });\r\n-}\r\n-\r\n-function leaveAllRooms(socket, notify1v1) {\r\n-  socket.rooms.forEach((roomId) => {\r\n-    if (roomId !== socket.id) {\r\n-      if (notify1v1) socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-      leaveGroupRoom(socket, roomId);\r\n-    }\r\n-  });\r\n-}\r\n-\r\n-/* ---------- START ---------- */\r\n const PORT = process.env.PORT || 3001;\r\n-server.listen(PORT, () => console.log(`🚀 Combined server running on ${PORT}`));\r\n-git push origin main --force\n+server.listen(PORT, () => {\r\n+  console.log(`🚀 Signaling server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1758973439842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,160 +7,51 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://connectify-hub.vercel.app/\",\r\n-    methods: [\"GET\", \"POST\"]\r\n+    origin: \"*\",        // <-- allow your frontend domain\r\n+    methods: [\"GET\",\"POST\"],\r\n   },\r\n });\r\n \r\n-app.get(\"/\", (req, res) => {\r\n-  res.send(\"🚀 Signaling server is running!\");\r\n-});\r\n+app.get(\"/\", (_, res) => res.send(\"🚀 Group Room Signaling is running!\"));\r\n \r\n-let waitingUsers = [];\r\n-\r\n io.on(\"connection\", (socket) => {\r\n-  console.log(\"✅ User connected:\", socket.id);\r\n+  console.log(\"✅ user connected:\", socket.id);\r\n \r\n-  socket.on(\"start-looking\", (userInfo) => {\r\n-    const {\r\n-      gender,\r\n-      country,\r\n-      age,\r\n-      name,\r\n-      filterGender = \"\",\r\n-      filterCountry = \"\"\r\n-    } = userInfo || {};\r\n+  // create a new room\r\n+  socket.on(\"create-room\", () => {\r\n+    const roomId = uuidv4();\r\n+    socket.join(roomId);\r\n+    socket.emit(\"room-created\", { roomId });\r\n+    console.log(`📦 room created ${roomId} by ${socket.id}`);\r\n+  });\r\n \r\n-    socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n-\r\n-    const index = waitingUsers.findIndex((other) => {\r\n-      if (!other.connected || !other.userData) return false;\r\n-\r\n-      const my = socket.userData;\r\n-      const their = other.userData;\r\n-\r\n-      const mutualFilterMatch =\r\n-        (!their.filterGender || their.filterGender === my.gender) &&\r\n-        (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n-        (!my.filterGender || my.filterGender === their.gender) &&\r\n-        (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n-\r\n-      return mutualFilterMatch;\r\n-    });\r\n-\r\n-    if (index !== -1) {\r\n-      const partner = waitingUsers.splice(index, 1)[0];\r\n-      const roomId = uuidv4();\r\n-\r\n-      socket.join(roomId);\r\n-      partner.join(roomId);\r\n-\r\n-      // Emit match to partner\r\n-      partner.emit(\"matched\", {\r\n-        roomId,\r\n-        partnerId: socket.id,\r\n-        isOfferer: true,\r\n-        partnerName: socket.userData?.name || \"Stranger\",\r\n-        partnerAge: socket.userData?.age || \"Unknown\",\r\n-        partnerCountry: socket.userData?.country || \"Unknown\"\r\n-      });\r\n-\r\n-      // Emit match to socket\r\n-      socket.emit(\"matched\", {\r\n-        roomId,\r\n-        partnerId: partner.id,\r\n-        isOfferer: false,\r\n-        partnerName: partner.userData?.name || \"Stranger\",\r\n-        partnerAge: partner.userData?.age || \"Unknown\",\r\n-        partnerCountry: partner.userData?.country || \"Unknown\"\r\n-      });\r\n-    } else {\r\n-      waitingUsers.push(socket);\r\n+  // join an existing room\r\n+  socket.on(\"join-room\", ({ roomId }) => {\r\n+    const room = io.sockets.adapter.rooms.get(roomId);\r\n+    if (!room) {\r\n+      socket.emit(\"error\", { message: \"Room does not exist\" });\r\n+      return;\r\n     }\r\n-  });\r\n-\r\n-  socket.on(\"join-room\", (roomId) => {\r\n     socket.join(roomId);\r\n-    socket.emit(\"joined-room\", roomId);\r\n+    socket.to(roomId).emit(\"user-joined\", { userId: socket.id });\r\n+    socket.emit(\"room-joined\", { roomId });\r\n+    console.log(`${socket.id} joined ${roomId}`);\r\n   });\r\n \r\n-  socket.on(\"leave-room\", (roomId) => {\r\n+  // leave\r\n+  socket.on(\"leave-room\", ({ roomId }) => {\r\n     socket.leave(roomId);\r\n-    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+    socket.to(roomId).emit(\"user-left\", { userId: socket.id });\r\n+    console.log(`${socket.id} left ${roomId}`);\r\n   });\r\n \r\n-  socket.on(\"skip\", () => {\r\n-    socket.rooms.forEach((roomId) => {\r\n-      if (roomId !== socket.id) {\r\n-        socket.leave(roomId);\r\n-        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-      }\r\n-    });\r\n-\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-    socket.emit(\"start-looking\", socket.userData);\r\n-  });\r\n-\r\n-  // WebRTC signaling\r\n-  socket.on(\"offer\", ({ offer, roomId }) => {\r\n-    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n-  });\r\n-\r\n-  socket.on(\"answer\", ({ answer, roomId }) => {\r\n-    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n-  });\r\n-\r\n-  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n-    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n-  });\r\n-\r\n-  // Chat features\r\n-  socket.on(\"send-message\", (msg) => {\r\n-    const { roomId } = msg;\r\n-    console.log(`💬 New message in ${roomId}:`, msg);\r\n-    socket.to(roomId).emit(\"receive-message\", msg);\r\n-  });\r\n-\r\n-  socket.on(\"typing\", ({ roomId, sender }) => {\r\n-    socket.to(roomId).emit(\"typing\", { sender });\r\n-  });\r\n-\r\n-  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n-    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n-  });\r\n-\r\n-  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n-    socket.to(roomId).emit(\"receive-message\", {\r\n-      id: messageId,\r\n-      content,\r\n-      type: \"text\",\r\n-      edited: true\r\n-    });\r\n-  });\r\n-\r\n\\ No newline at end of file\n-  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n-    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n-  });\r\n-\r\n-  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n-    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n-  });\r\n-\r\n   socket.on(\"disconnect\", () => {\r\n-    console.log(\"❌ User disconnected:\", socket.id);\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-\r\n-    socket.rooms.forEach((roomId) => {\r\n-      if (roomId !== socket.id) {\r\n-        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-      }\r\n-    });\r\n+    console.log(\"❌ user disconnected:\", socket.id);\r\n   });\r\n });\r\n \r\n const PORT = process.env.PORT || 3001;\r\n-server.listen(PORT, () => {\r\n-  console.log(`🚀 Signaling server running on port ${PORT}`);\r\n-});\n+server.listen(PORT, () =>\r\n+  console.log(`🚀 Signaling server running on http://localhost:${PORT}`)\r\n+);\r\n"
                },
                {
                    "date": 1758973652315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,51 +7,160 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"*\",        // <-- allow your frontend domain\r\n-    methods: [\"GET\",\"POST\"],\r\n+    origin: \"https://connectify-hub.vercel.app/\",\r\n+    methods: [\"GET\", \"POST\"]\r\n   },\r\n });\r\n \r\n-app.get(\"/\", (_, res) => res.send(\"🚀 Group Room Signaling is running!\"));\r\n+app.get(\"/\", (req, res) => {\r\n+  res.send(\"🚀 Signaling server is running!\");\r\n+});\r\n \r\n+let waitingUsers = [];\r\n+\r\n io.on(\"connection\", (socket) => {\r\n-  console.log(\"✅ user connected:\", socket.id);\r\n+  console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  // create a new room\r\n-  socket.on(\"create-room\", () => {\r\n-    const roomId = uuidv4();\r\n-    socket.join(roomId);\r\n-    socket.emit(\"room-created\", { roomId });\r\n-    console.log(`📦 room created ${roomId} by ${socket.id}`);\r\n+  socket.on(\"start-looking\", (userInfo) => {\r\n+    const {\r\n+      gender,\r\n+      country,\r\n+      age,\r\n+      name,\r\n+      filterGender = \"\",\r\n+      filterCountry = \"\"\r\n+    } = userInfo || {};\r\n+\r\n+    socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n+\r\n+    const index = waitingUsers.findIndex((other) => {\r\n+      if (!other.connected || !other.userData) return false;\r\n+\r\n+      const my = socket.userData;\r\n+      const their = other.userData;\r\n+\r\n+      const mutualFilterMatch =\r\n+        (!their.filterGender || their.filterGender === my.gender) &&\r\n+        (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n+        (!my.filterGender || my.filterGender === their.gender) &&\r\n+        (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n+\r\n+      return mutualFilterMatch;\r\n+    });\r\n+\r\n+    if (index !== -1) {\r\n+      const partner = waitingUsers.splice(index, 1)[0];\r\n+      const roomId = uuidv4();\r\n+\r\n+      socket.join(roomId);\r\n+      partner.join(roomId);\r\n+\r\n+      // Emit match to partner\r\n+      partner.emit(\"matched\", {\r\n+        roomId,\r\n+        partnerId: socket.id,\r\n+        isOfferer: true,\r\n+        partnerName: socket.userData?.name || \"Stranger\",\r\n+        partnerAge: socket.userData?.age || \"Unknown\",\r\n+        partnerCountry: socket.userData?.country || \"Unknown\"\r\n+      });\r\n+\r\n+      // Emit match to socket\r\n+      socket.emit(\"matched\", {\r\n+        roomId,\r\n+        partnerId: partner.id,\r\n+        isOfferer: false,\r\n+        partnerName: partner.userData?.name || \"Stranger\",\r\n+        partnerAge: partner.userData?.age || \"Unknown\",\r\n+        partnerCountry: partner.userData?.country || \"Unknown\"\r\n+      });\r\n+    } else {\r\n+      waitingUsers.push(socket);\r\n+    }\r\n   });\r\n \r\n-  // join an existing room\r\n-  socket.on(\"join-room\", ({ roomId }) => {\r\n-    const room = io.sockets.adapter.rooms.get(roomId);\r\n-    if (!room) {\r\n-      socket.emit(\"error\", { message: \"Room does not exist\" });\r\n-      return;\r\n-    }\r\n+  socket.on(\"join-room\", (roomId) => {\r\n     socket.join(roomId);\r\n-    socket.to(roomId).emit(\"user-joined\", { userId: socket.id });\r\n-    socket.emit(\"room-joined\", { roomId });\r\n-    console.log(`${socket.id} joined ${roomId}`);\r\n+    socket.emit(\"joined-room\", roomId);\r\n   });\r\n \r\n-  // leave\r\n-  socket.on(\"leave-room\", ({ roomId }) => {\r\n+  socket.on(\"leave-room\", (roomId) => {\r\n     socket.leave(roomId);\r\n-    socket.to(roomId).emit(\"user-left\", { userId: socket.id });\r\n-    console.log(`${socket.id} left ${roomId}`);\r\n+    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n   });\r\n \r\n+  socket.on(\"skip\", () => {\r\n+    socket.rooms.forEach((roomId) => {\r\n+      if (roomId !== socket.id) {\r\n+        socket.leave(roomId);\r\n+        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+      }\r\n+    });\r\n+\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+    socket.emit(\"start-looking\", socket.userData);\r\n+  });\r\n+\r\n+  // WebRTC signaling\r\n+  socket.on(\"offer\", ({ offer, roomId }) => {\r\n+    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n+  });\r\n+\r\n+  socket.on(\"answer\", ({ answer, roomId }) => {\r\n+    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n+  });\r\n+\r\n+  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n+    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n+  });\r\n+\r\n+  // Chat features\r\n+  socket.on(\"send-message\", (msg) => {\r\n+    const { roomId } = msg;\r\n+    console.log(`💬 New message in ${roomId}:`, msg);\r\n+    socket.to(roomId).emit(\"receive-message\", msg);\r\n+  });\r\n+\r\n+  socket.on(\"typing\", ({ roomId, sender }) => {\r\n+    socket.to(roomId).emit(\"typing\", { sender });\r\n+  });\r\n+\r\n+  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n+    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n+  });\r\n+\r\n+  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n+    socket.to(roomId).emit(\"receive-message\", {\r\n+      id: messageId,\r\n+      content,\r\n+      type: \"text\",\r\n+      edited: true\r\n+    });\r\n+  });\r\n+\r\n+  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n+    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n+  });\r\n+\r\n+  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n+    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n+  });\r\n+\r\n   socket.on(\"disconnect\", () => {\r\n-    console.log(\"❌ user disconnected:\", socket.id);\r\n+    console.log(\"❌ User disconnected:\", socket.id);\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+\r\n+    socket.rooms.forEach((roomId) => {\r\n+      if (roomId !== socket.id) {\r\n+        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+      }\r\n+    });\r\n   });\r\n });\r\n \r\n const PORT = process.env.PORT || 3001;\r\n-server.listen(PORT, () =>\r\n-  console.log(`🚀 Signaling server running on http://localhost:${PORT}`)\r\n-);\r\n+server.listen(PORT, () => {\r\n+  console.log(`🚀 Signaling server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1758973812233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,22 +7,27 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://connectify-hub.vercel.app/\",\r\n+    origin: \"https://connectify-hub.vercel.app/\", // your frontend domain\r\n     methods: [\"GET\", \"POST\"]\r\n-  },\r\n+  }\r\n });\r\n \r\n-app.get(\"/\", (req, res) => {\r\n-  res.send(\"🚀 Signaling server is running!\");\r\n-});\r\n+app.get(\"/\", (_, res) => res.send(\"🚀 Combined signaling server is running!\"));\r\n \r\n+/* ------------------- 1-1 Anonymous Matching ------------------- */\r\n let waitingUsers = [];\r\n \r\n+/* ------------------- Group Room Helpers ------------------- */\r\n+// Optional: you can track active rooms if you need extra metadata\r\n+const groupRooms = new Map();\r\n+\r\n+/* ------------------- Socket.io ------------------- */\r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n+  /* ---------- 1-1 Anonymous Match ---------- */\r\n   socket.on(\"start-looking\", (userInfo) => {\r\n     const {\r\n       gender,\r\n       country,\r\n@@ -33,21 +38,21 @@\n     } = userInfo || {};\r\n \r\n     socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n \r\n+    // Try to find a partner\r\n     const index = waitingUsers.findIndex((other) => {\r\n       if (!other.connected || !other.userData) return false;\r\n-\r\n       const my = socket.userData;\r\n       const their = other.userData;\r\n \r\n-      const mutualFilterMatch =\r\n+      const mutualMatch =\r\n         (!their.filterGender || their.filterGender === my.gender) &&\r\n         (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n         (!my.filterGender || my.filterGender === their.gender) &&\r\n         (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n \r\n-      return mutualFilterMatch;\r\n+      return mutualMatch;\r\n     });\r\n \r\n     if (index !== -1) {\r\n       const partner = waitingUsers.splice(index, 1)[0];\r\n@@ -55,9 +60,9 @@\n \r\n       socket.join(roomId);\r\n       partner.join(roomId);\r\n \r\n-      // Emit match to partner\r\n+      // Notify both users\r\n       partner.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: socket.id,\r\n         isOfferer: true,\r\n@@ -65,9 +70,8 @@\n         partnerAge: socket.userData?.age || \"Unknown\",\r\n         partnerCountry: socket.userData?.country || \"Unknown\"\r\n       });\r\n \r\n-      // Emit match to socket\r\n       socket.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: partner.id,\r\n         isOfferer: false,\r\n@@ -79,88 +83,98 @@\n       waitingUsers.push(socket);\r\n     }\r\n   });\r\n \r\n-  socket.on(\"join-room\", (roomId) => {\r\n-    socket.join(roomId);\r\n-    socket.emit(\"joined-room\", roomId);\r\n-  });\r\n-\r\n-  socket.on(\"leave-room\", (roomId) => {\r\n-    socket.leave(roomId);\r\n-    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-  });\r\n-\r\n   socket.on(\"skip\", () => {\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.leave(roomId);\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n     });\r\n-\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n     socket.emit(\"start-looking\", socket.userData);\r\n   });\r\n \r\n-  // WebRTC signaling\r\n-  socket.on(\"offer\", ({ offer, roomId }) => {\r\n-    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n-  });\r\n+  /* ---------- 1-1 Chat / WebRTC ---------- */\r\n+  socket.on(\"offer\", ({ offer, roomId }) =>\r\n+    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id })\r\n+  );\r\n+  socket.on(\"answer\", ({ answer, roomId }) =>\r\n+    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id })\r\n+  );\r\n+  socket.on(\"ice-candidate\", ({ candidate, roomId }) =>\r\n+    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id })\r\n+  );\r\n \r\n-  socket.on(\"answer\", ({ answer, roomId }) => {\r\n-    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n-  });\r\n-\r\n-  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n-    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n-  });\r\n-\r\n-  // Chat features\r\n   socket.on(\"send-message\", (msg) => {\r\n-    const { roomId } = msg;\r\n-    console.log(`💬 New message in ${roomId}:`, msg);\r\n-    socket.to(roomId).emit(\"receive-message\", msg);\r\n+    socket.to(msg.roomId).emit(\"receive-message\", msg);\r\n   });\r\n-\r\n-  socket.on(\"typing\", ({ roomId, sender }) => {\r\n-    socket.to(roomId).emit(\"typing\", { sender });\r\n-  });\r\n-\r\n-  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n-    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n-  });\r\n-\r\n-  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n+  socket.on(\"typing\", ({ roomId, sender }) =>\r\n+    socket.to(roomId).emit(\"typing\", { sender })\r\n+  );\r\n+  socket.on(\"message-status\", (data) =>\r\n+    socket.to(data.roomId).emit(\"message-status-update\", data)\r\n+  );\r\n+  socket.on(\"edit-message\", ({ roomId, messageId, content }) =>\r\n     socket.to(roomId).emit(\"receive-message\", {\r\n       id: messageId,\r\n       content,\r\n       type: \"text\",\r\n       edited: true\r\n-    });\r\n+    })\r\n+  );\r\n+  socket.on(\"delete-message\", ({ roomId, messageId }) =>\r\n+    socket.to(roomId).emit(\"message-deleted\", { messageId })\r\n+  );\r\n+  socket.on(\"react-message\", (data) =>\r\n+    socket.to(data.roomId).emit(\"message-react\", data)\r\n+  );\r\n+\r\n+  /* ---------- Group Room System ---------- */\r\n+  // Create a room\r\n+  socket.on(\"create-room\", () => {\r\n+    const roomId = uuidv4();\r\n+    socket.join(roomId);\r\n+    groupRooms.set(roomId, true);\r\n+    socket.emit(\"room-created\", { roomId });\r\n+    console.log(`📦 Room created ${roomId} by ${socket.id}`);\r\n   });\r\n \r\n-  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n-    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n+  // Join a room\r\n+  socket.on(\"join-room\", ({ roomId }) => {\r\n+    const room = io.sockets.adapter.rooms.get(roomId);\r\n+    if (!room) {\r\n+      socket.emit(\"error\", { message: \"Room does not exist\" });\r\n+      return;\r\n+    }\r\n+    socket.join(roomId);\r\n+    socket.to(roomId).emit(\"user-joined\", { userId: socket.id });\r\n+    socket.emit(\"room-joined\", { roomId });\r\n+    console.log(`${socket.id} joined room ${roomId}`);\r\n   });\r\n \r\n-  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n-    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n+  // Leave a room\r\n+  socket.on(\"leave-room\", ({ roomId }) => {\r\n+    socket.leave(roomId);\r\n+    socket.to(roomId).emit(\"user-left\", { userId: socket.id });\r\n+    console.log(`${socket.id} left room ${roomId}`);\r\n   });\r\n \r\n+  /* ---------- Cleanup ---------- */\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n \r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+        socket.to(roomId).emit(\"user-left\", { userId: socket.id });\r\n       }\r\n     });\r\n   });\r\n });\r\n \r\n const PORT = process.env.PORT || 3001;\r\n server.listen(PORT, () => {\r\n-  console.log(`🚀 Signaling server running on port ${PORT}`);\r\n+  console.log(`🚀 Combined signaling server running on port ${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1758977803427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,27 +7,22 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://connectify-hub.vercel.app/\", // your frontend domain\r\n+    origin: \"https://connectify-hub.vercel.app/\",\r\n     methods: [\"GET\", \"POST\"]\r\n-  }\r\n+  },\r\n });\r\n \r\n-app.get(\"/\", (_, res) => res.send(\"🚀 Combined signaling server is running!\"));\r\n+app.get(\"/\", (req, res) => {\r\n+  res.send(\"🚀 Signaling server is running!\");\r\n+});\r\n \r\n-/* ------------------- 1-1 Anonymous Matching ------------------- */\r\n let waitingUsers = [];\r\n \r\n-/* ------------------- Group Room Helpers ------------------- */\r\n-// Optional: you can track active rooms if you need extra metadata\r\n-const groupRooms = new Map();\r\n-\r\n-/* ------------------- Socket.io ------------------- */\r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  /* ---------- 1-1 Anonymous Match ---------- */\r\n   socket.on(\"start-looking\", (userInfo) => {\r\n     const {\r\n       gender,\r\n       country,\r\n@@ -38,21 +33,21 @@\n     } = userInfo || {};\r\n \r\n     socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n \r\n-    // Try to find a partner\r\n     const index = waitingUsers.findIndex((other) => {\r\n       if (!other.connected || !other.userData) return false;\r\n+\r\n       const my = socket.userData;\r\n       const their = other.userData;\r\n \r\n-      const mutualMatch =\r\n+      const mutualFilterMatch =\r\n         (!their.filterGender || their.filterGender === my.gender) &&\r\n         (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n         (!my.filterGender || my.filterGender === their.gender) &&\r\n         (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n \r\n-      return mutualMatch;\r\n+      return mutualFilterMatch;\r\n     });\r\n \r\n     if (index !== -1) {\r\n       const partner = waitingUsers.splice(index, 1)[0];\r\n@@ -60,9 +55,9 @@\n \r\n       socket.join(roomId);\r\n       partner.join(roomId);\r\n \r\n-      // Notify both users\r\n+      // Emit match to partner\r\n       partner.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: socket.id,\r\n         isOfferer: true,\r\n@@ -70,8 +65,9 @@\n         partnerAge: socket.userData?.age || \"Unknown\",\r\n         partnerCountry: socket.userData?.country || \"Unknown\"\r\n       });\r\n \r\n+      // Emit match to socket\r\n       socket.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: partner.id,\r\n         isOfferer: false,\r\n@@ -83,98 +79,88 @@\n       waitingUsers.push(socket);\r\n     }\r\n   });\r\n \r\n+  socket.on(\"join-room\", (roomId) => {\r\n+    socket.join(roomId);\r\n+    socket.emit(\"joined-room\", roomId);\r\n+  });\r\n+\r\n+  socket.on(\"leave-room\", (roomId) => {\r\n+    socket.leave(roomId);\r\n+    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+  });\r\n+\r\n   socket.on(\"skip\", () => {\r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.leave(roomId);\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n     });\r\n+\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n     socket.emit(\"start-looking\", socket.userData);\r\n   });\r\n \r\n-  /* ---------- 1-1 Chat / WebRTC ---------- */\r\n-  socket.on(\"offer\", ({ offer, roomId }) =>\r\n-    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id })\r\n-  );\r\n-  socket.on(\"answer\", ({ answer, roomId }) =>\r\n-    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id })\r\n-  );\r\n-  socket.on(\"ice-candidate\", ({ candidate, roomId }) =>\r\n-    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id })\r\n-  );\r\n+  // WebRTC signaling\r\n+  socket.on(\"offer\", ({ offer, roomId }) => {\r\n+    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n+  });\r\n \r\n+  socket.on(\"answer\", ({ answer, roomId }) => {\r\n+    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n+  });\r\n+\r\n+  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n+    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n+  });\r\n+\r\n+  // Chat features\r\n   socket.on(\"send-message\", (msg) => {\r\n-    socket.to(msg.roomId).emit(\"receive-message\", msg);\r\n+    const { roomId } = msg;\r\n+    console.log(`💬 New message in ${roomId}:`, msg);\r\n+    socket.to(roomId).emit(\"receive-message\", msg);\r\n   });\r\n-  socket.on(\"typing\", ({ roomId, sender }) =>\r\n-    socket.to(roomId).emit(\"typing\", { sender })\r\n-  );\r\n-  socket.on(\"message-status\", (data) =>\r\n-    socket.to(data.roomId).emit(\"message-status-update\", data)\r\n-  );\r\n-  socket.on(\"edit-message\", ({ roomId, messageId, content }) =>\r\n+\r\n+  socket.on(\"typing\", ({ roomId, sender }) => {\r\n+    socket.to(roomId).emit(\"typing\", { sender });\r\n+  });\r\n+\r\n+  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n+    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n+  });\r\n+\r\n+  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n     socket.to(roomId).emit(\"receive-message\", {\r\n       id: messageId,\r\n       content,\r\n       type: \"text\",\r\n       edited: true\r\n-    })\r\n-  );\r\n-  socket.on(\"delete-message\", ({ roomId, messageId }) =>\r\n-    socket.to(roomId).emit(\"message-deleted\", { messageId })\r\n-  );\r\n-  socket.on(\"react-message\", (data) =>\r\n-    socket.to(data.roomId).emit(\"message-react\", data)\r\n-  );\r\n-\r\n-  /* ---------- Group Room System ---------- */\r\n-  // Create a room\r\n-  socket.on(\"create-room\", () => {\r\n-    const roomId = uuidv4();\r\n-    socket.join(roomId);\r\n-    groupRooms.set(roomId, true);\r\n-    socket.emit(\"room-created\", { roomId });\r\n-    console.log(`📦 Room created ${roomId} by ${socket.id}`);\r\n+    });\r\n   });\r\n \r\n-  // Join a room\r\n-  socket.on(\"join-room\", ({ roomId }) => {\r\n-    const room = io.sockets.adapter.rooms.get(roomId);\r\n-    if (!room) {\r\n-      socket.emit(\"error\", { message: \"Room does not exist\" });\r\n-      return;\r\n-    }\r\n-    socket.join(roomId);\r\n-    socket.to(roomId).emit(\"user-joined\", { userId: socket.id });\r\n-    socket.emit(\"room-joined\", { roomId });\r\n-    console.log(`${socket.id} joined room ${roomId}`);\r\n+  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n+    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n   });\r\n \r\n-  // Leave a room\r\n-  socket.on(\"leave-room\", ({ roomId }) => {\r\n-    socket.leave(roomId);\r\n-    socket.to(roomId).emit(\"user-left\", { userId: socket.id });\r\n-    console.log(`${socket.id} left room ${roomId}`);\r\n+  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n+    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n   });\r\n \r\n-  /* ---------- Cleanup ---------- */\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n \r\n     socket.rooms.forEach((roomId) => {\r\n       if (roomId !== socket.id) {\r\n         socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-        socket.to(roomId).emit(\"user-left\", { userId: socket.id });\r\n       }\r\n     });\r\n   });\r\n });\r\n \r\n const PORT = process.env.PORT || 3001;\r\n server.listen(PORT, () => {\r\n-  console.log(`🚀 Combined signaling server running on port ${PORT}`);\r\n+  console.log(`🚀 Signaling server running on port ${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1758977875681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,47 +7,45 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://connectify-hub.vercel.app/\",\r\n+    origin: \"https://connectify-hub.vercel.app/\", // ✅ your frontend\r\n     methods: [\"GET\", \"POST\"]\r\n   },\r\n });\r\n \r\n-app.get(\"/\", (req, res) => {\r\n-  res.send(\"🚀 Signaling server is running!\");\r\n-});\r\n+app.get(\"/\", (_, res) => res.send(\"🚀 1-1 + Room Signaling is running!\"));\r\n \r\n-let waitingUsers = [];\r\n+// ------------------ DATA STORES ------------------\r\n+let waitingUsers = [];           // for 1-1 anonymous matching\r\n+let publicRooms  = {};           // { roomId: {name, members:[]} }\r\n \r\n+// --------------------------------------------------\r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n+  // ======== 1-1 ANONYMOUS MATCHING =========\r\n   socket.on(\"start-looking\", (userInfo) => {\r\n     const {\r\n-      gender,\r\n-      country,\r\n-      age,\r\n-      name,\r\n-      filterGender = \"\",\r\n-      filterCountry = \"\"\r\n+      gender, country, age, name,\r\n+      filterGender = \"\", filterCountry = \"\"\r\n     } = userInfo || {};\r\n \r\n     socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n \r\n-    const index = waitingUsers.findIndex((other) => {\r\n+    const index = waitingUsers.findIndex(other => {\r\n       if (!other.connected || !other.userData) return false;\r\n \r\n       const my = socket.userData;\r\n       const their = other.userData;\r\n \r\n-      const mutualFilterMatch =\r\n+      const match =\r\n         (!their.filterGender || their.filterGender === my.gender) &&\r\n         (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n-        (!my.filterGender || my.filterGender === their.gender) &&\r\n-        (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n+        (!my.filterGender   || my.filterGender === their.gender) &&\r\n+        (!my.filterCountry  || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n \r\n-      return mutualFilterMatch;\r\n+      return match;\r\n     });\r\n \r\n     if (index !== -1) {\r\n       const partner = waitingUsers.splice(index, 1)[0];\r\n@@ -55,56 +53,69 @@\n \r\n       socket.join(roomId);\r\n       partner.join(roomId);\r\n \r\n-      // Emit match to partner\r\n       partner.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: socket.id,\r\n         isOfferer: true,\r\n         partnerName: socket.userData?.name || \"Stranger\",\r\n-        partnerAge: socket.userData?.age || \"Unknown\",\r\n+        partnerAge:  socket.userData?.age  || \"Unknown\",\r\n         partnerCountry: socket.userData?.country || \"Unknown\"\r\n       });\r\n \r\n-      // Emit match to socket\r\n       socket.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: partner.id,\r\n         isOfferer: false,\r\n         partnerName: partner.userData?.name || \"Stranger\",\r\n-        partnerAge: partner.userData?.age || \"Unknown\",\r\n+        partnerAge:  partner.userData?.age  || \"Unknown\",\r\n         partnerCountry: partner.userData?.country || \"Unknown\"\r\n       });\r\n     } else {\r\n       waitingUsers.push(socket);\r\n     }\r\n   });\r\n \r\n-  socket.on(\"join-room\", (roomId) => {\r\n+  socket.on(\"skip\", () => {\r\n+    leaveAllRoomsExceptSelf(socket);\r\n+    waitingUsers = waitingUsers.filter(s => s.id !== socket.id);\r\n+    socket.emit(\"start-looking\", socket.userData);\r\n+  });\r\n+\r\n+  // ======== PUBLIC ROOM SYSTEM =========\r\n+  socket.on(\"create-room\", ({ name }) => {\r\n+    const roomId = uuidv4();\r\n+    publicRooms[roomId] = { name: name || \"Untitled Room\", members: [] };\r\n     socket.join(roomId);\r\n-    socket.emit(\"joined-room\", roomId);\r\n+    publicRooms[roomId].members.push(socket.id);\r\n+    socket.emit(\"room-created\", { roomId, name: publicRooms[roomId].name });\r\n+    io.emit(\"rooms-updated\", publicRooms);\r\n+    console.log(`📦 Room created ${roomId}`);\r\n   });\r\n \r\n-  socket.on(\"leave-room\", (roomId) => {\r\n+  socket.on(\"join-room\", ({ roomId }) => {\r\n+    const room = publicRooms[roomId];\r\n+    if (!room) return socket.emit(\"error\", { message: \"Room does not exist\" });\r\n+\r\n+    socket.join(roomId);\r\n+    room.members.push(socket.id);\r\n+    socket.emit(\"room-joined\", { roomId, name: room.name });\r\n+    socket.to(roomId).emit(\"user-joined\", { userId: socket.id });\r\n+    io.emit(\"rooms-updated\", publicRooms);\r\n+    console.log(`${socket.id} joined ${roomId}`);\r\n+  });\r\n+\r\n+  socket.on(\"leave-room\", ({ roomId }) => {\r\n     socket.leave(roomId);\r\n-    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+    removeMemberFromRoom(roomId, socket.id);\r\n   });\r\n \r\n-  socket.on(\"skip\", () => {\r\n-    socket.rooms.forEach((roomId) => {\r\n-      if (roomId !== socket.id) {\r\n-        socket.leave(roomId);\r\n-        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-      }\r\n-    });\r\n-\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-    socket.emit(\"start-looking\", socket.userData);\r\n+  socket.on(\"list-rooms\", () => {\r\n+    socket.emit(\"rooms-updated\", publicRooms);\r\n   });\r\n \r\n-  // WebRTC signaling\r\n+  // ======== COMMON WEBRTC / CHAT =========\r\n   socket.on(\"offer\", ({ offer, roomId }) => {\r\n     socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n   });\r\n \r\n@@ -115,23 +126,16 @@\n   socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n     socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n   });\r\n \r\n-  // Chat features\r\n   socket.on(\"send-message\", (msg) => {\r\n-    const { roomId } = msg;\r\n-    console.log(`💬 New message in ${roomId}:`, msg);\r\n-    socket.to(roomId).emit(\"receive-message\", msg);\r\n+    socket.to(msg.roomId).emit(\"receive-message\", msg);\r\n   });\r\n \r\n   socket.on(\"typing\", ({ roomId, sender }) => {\r\n     socket.to(roomId).emit(\"typing\", { sender });\r\n   });\r\n \r\n-  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n-    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n-  });\r\n-\r\n   socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n     socket.to(roomId).emit(\"receive-message\", {\r\n       id: messageId,\r\n       content,\r\n@@ -147,20 +151,35 @@\n   socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n     socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n   });\r\n \r\n+  // ======== CLEAN UP =========\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ User disconnected:\", socket.id);\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+    waitingUsers = waitingUsers.filter(s => s.id !== socket.id);\r\n+    leaveAllRoomsExceptSelf(socket);\r\n+  });\r\n \r\n-    socket.rooms.forEach((roomId) => {\r\n-      if (roomId !== socket.id) {\r\n-        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+  function leaveAllRoomsExceptSelf(s) {\r\n+    s.rooms.forEach(r => {\r\n+      if (r !== s.id) {\r\n+        s.to(r).emit(\"partner-left\", { partnerId: s.id });\r\n+        s.leave(r);\r\n+        removeMemberFromRoom(r, s.id);\r\n       }\r\n     });\r\n-  });\r\n+  }\r\n+\r\n+  function removeMemberFromRoom(roomId, userId) {\r\n+    if (!publicRooms[roomId]) return;\r\n+    publicRooms[roomId].members = publicRooms[roomId].members.filter(id => id !== userId);\r\n+    if (publicRooms[roomId].members.length === 0) {\r\n+      delete publicRooms[roomId];   // delete empty room\r\n+    }\r\n+    io.emit(\"rooms-updated\", publicRooms);\r\n+  }\r\n });\r\n \r\n const PORT = process.env.PORT || 3001;\r\n-server.listen(PORT, () => {\r\n-  console.log(`🚀 Signaling server running on port ${PORT}`);\r\n-});\r\n+server.listen(PORT, () =>\r\n+  console.log(`🚀 Signaling server running on port ${PORT}`)\r\n+);\r\n"
                },
                {
                    "date": 1758978456720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,179 +7,165 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://connectify-hub.vercel.app/\", // ✅ your frontend\r\n-    methods: [\"GET\", \"POST\"]\r\n+    origin: \"https://connectify-hub.vercel.app/\",\r\n+    methods: [\"GET\", \"POST\"],\r\n   },\r\n });\r\n \r\n-app.get(\"/\", (_, res) => res.send(\"🚀 1-1 + Room Signaling is running!\"));\r\n+app.get(\"/\", (_, res) => res.send(\"🚀 Signaling server running!\"));\r\n \r\n-// ------------------ DATA STORES ------------------\r\n-let waitingUsers = [];           // for 1-1 anonymous matching\r\n-let publicRooms  = {};           // { roomId: {name, members:[]} }\r\n+let waitingUsers = [];\r\n+let rooms = {}; // { roomId: { name, users: [socketId, ...], createdAt: timestamp } }\r\n \r\n-// --------------------------------------------------\r\n-io.on(\"connection\", (socket) => {\r\n-  console.log(\"✅ User connected:\", socket.id);\r\n-\r\n-  // ======== 1-1 ANONYMOUS MATCHING =========\r\n+// ----------------------------\r\n+// 1-1 Anonymous Chat\r\n+// ----------------------------\r\n+function handleOneToOne(socket) {\r\n   socket.on(\"start-looking\", (userInfo) => {\r\n-    const {\r\n-      gender, country, age, name,\r\n-      filterGender = \"\", filterCountry = \"\"\r\n-    } = userInfo || {};\r\n-\r\n+    const { gender, country, age, name, filterGender = \"\", filterCountry = \"\" } = userInfo || {};\r\n     socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n \r\n-    const index = waitingUsers.findIndex(other => {\r\n-      if (!other.connected || !other.userData) return false;\r\n-\r\n-      const my = socket.userData;\r\n-      const their = other.userData;\r\n-\r\n-      const match =\r\n-        (!their.filterGender || their.filterGender === my.gender) &&\r\n-        (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n-        (!my.filterGender   || my.filterGender === their.gender) &&\r\n-        (!my.filterCountry  || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n-\r\n-      return match;\r\n+    const index = waitingUsers.findIndex((u) => {\r\n+      if (!u.connected || !u.userData) return false;\r\n+      const me = socket.userData;\r\n+      const them = u.userData;\r\n+      return (!them.filterGender || them.filterGender === me.gender) &&\r\n+        (!them.filterCountry || them.filterCountry.toLowerCase() === me.country?.toLowerCase()) &&\r\n+        (!me.filterGender || me.filterGender === them.gender) &&\r\n+        (!me.filterCountry || me.filterCountry.toLowerCase() === them.country?.toLowerCase());\r\n     });\r\n \r\n     if (index !== -1) {\r\n       const partner = waitingUsers.splice(index, 1)[0];\r\n       const roomId = uuidv4();\r\n \r\n+      // join both users to temporary room immediately\r\n       socket.join(roomId);\r\n       partner.join(roomId);\r\n \r\n-      partner.emit(\"matched\", {\r\n-        roomId,\r\n-        partnerId: socket.id,\r\n-        isOfferer: true,\r\n-        partnerName: socket.userData?.name || \"Stranger\",\r\n-        partnerAge:  socket.userData?.age  || \"Unknown\",\r\n-        partnerCountry: socket.userData?.country || \"Unknown\"\r\n-      });\r\n-\r\n-      socket.emit(\"matched\", {\r\n-        roomId,\r\n-        partnerId: partner.id,\r\n-        isOfferer: false,\r\n-        partnerName: partner.userData?.name || \"Stranger\",\r\n-        partnerAge:  partner.userData?.age  || \"Unknown\",\r\n-        partnerCountry: partner.userData?.country || \"Unknown\"\r\n-      });\r\n+      // notify both\r\n+      partner.emit(\"matched\", { roomId, partnerId: socket.id, isOfferer: true, partnerName: socket.userData?.name || \"Stranger\", partnerAge: socket.userData?.age || \"Unknown\", partnerCountry: socket.userData?.country || \"Unknown\" });\r\n+      socket.emit(\"matched\", { roomId, partnerId: partner.id, isOfferer: false, partnerName: partner.userData?.name || \"Stranger\", partnerAge: partner.userData?.age || \"Unknown\", partnerCountry: partner.userData?.country || \"Unknown\" });\r\n     } else {\r\n       waitingUsers.push(socket);\r\n     }\r\n   });\r\n \r\n   socket.on(\"skip\", () => {\r\n-    leaveAllRoomsExceptSelf(socket);\r\n-    waitingUsers = waitingUsers.filter(s => s.id !== socket.id);\r\n+    socket.rooms.forEach((roomId) => {\r\n+      if (roomId !== socket.id) {\r\n+        socket.leave(roomId);\r\n+        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+      }\r\n+    });\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n     socket.emit(\"start-looking\", socket.userData);\r\n   });\r\n+}\r\n \r\n-  // ======== PUBLIC ROOM SYSTEM =========\r\n+// ----------------------------\r\n+// Dynamic Room Chat System\r\n+// ----------------------------\r\n+function handleRoomChat(socket) {\r\n+  // create room\r\n   socket.on(\"create-room\", ({ name }) => {\r\n     const roomId = uuidv4();\r\n-    publicRooms[roomId] = { name: name || \"Untitled Room\", members: [] };\r\n+    rooms[roomId] = { name: name || \"Untitled Room\", users: [socket.id], createdAt: Date.now() };\r\n     socket.join(roomId);\r\n-    publicRooms[roomId].members.push(socket.id);\r\n-    socket.emit(\"room-created\", { roomId, name: publicRooms[roomId].name });\r\n-    io.emit(\"rooms-updated\", publicRooms);\r\n-    console.log(`📦 Room created ${roomId}`);\r\n+    socket.emit(\"room-created\", { roomId, name: rooms[roomId].name });\r\n+    io.emit(\"rooms-update\", rooms);\r\n+    console.log(`📦 Room created: ${roomId} by ${socket.id}`);\r\n   });\r\n \r\n+  // join room\r\n   socket.on(\"join-room\", ({ roomId }) => {\r\n-    const room = publicRooms[roomId];\r\n+    const room = rooms[roomId];\r\n     if (!room) return socket.emit(\"error\", { message: \"Room does not exist\" });\r\n-\r\n+    if (!room.users.includes(socket.id)) room.users.push(socket.id);\r\n     socket.join(roomId);\r\n-    room.members.push(socket.id);\r\n     socket.emit(\"room-joined\", { roomId, name: room.name });\r\n-    socket.to(roomId).emit(\"user-joined\", { userId: socket.id });\r\n-    io.emit(\"rooms-updated\", publicRooms);\r\n-    console.log(`${socket.id} joined ${roomId}`);\r\n+    io.to(roomId).emit(\"user-joined\", { userId: socket.id });\r\n+    io.emit(\"rooms-update\", rooms);\r\n+    console.log(`${socket.id} joined room ${roomId}`);\r\n   });\r\n \r\n+  // leave room\r\n   socket.on(\"leave-room\", ({ roomId }) => {\r\n+    const room = rooms[roomId];\r\n+    if (!room) return;\r\n+    room.users = room.users.filter(id => id !== socket.id);\r\n     socket.leave(roomId);\r\n-    removeMemberFromRoom(roomId, socket.id);\r\n-  });\r\n+    socket.to(roomId).emit(\"user-left\", { userId: socket.id });\r\n \r\n-  socket.on(\"list-rooms\", () => {\r\n-    socket.emit(\"rooms-updated\", publicRooms);\r\n+    // do not delete immediately, keep for Render free server idle time\r\n+    // you can optionally delete after X minutes if you want auto cleanup\r\n+    io.emit(\"rooms-update\", rooms);\r\n+    console.log(`${socket.id} left room ${roomId}`);\r\n   });\r\n \r\n-  // ======== COMMON WEBRTC / CHAT =========\r\n-  socket.on(\"offer\", ({ offer, roomId }) => {\r\n-    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n+  // room chat messages\r\n+  socket.on(\"room-message\", ({ roomId, content, type = \"text\" }) => {\r\n+    socket.to(roomId).emit(\"room-message\", { id: uuidv4(), senderId: socket.id, content, type, createdAt: Date.now() });\r\n   });\r\n \r\n-  socket.on(\"answer\", ({ answer, roomId }) => {\r\n-    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n-  });\r\n+  // room WebRTC signaling\r\n+  socket.on(\"room-offer\", ({ offer, targetId }) => io.to(targetId).emit(\"room-offer\", { offer, sender: socket.id }));\r\n+  socket.on(\"room-answer\", ({ answer, targetId }) => io.to(targetId).emit(\"room-answer\", { answer, sender: socket.id }));\r\n+  socket.on(\"room-ice\", ({ candidate, targetId }) => io.to(targetId).emit(\"room-ice\", { candidate, sender: socket.id }));\r\n+}\r\n \r\n-  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n-    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n-  });\r\n+// ----------------------------\r\n+// Common Features\r\n+// ----------------------------\r\n+function handleCommon(socket) {\r\n+  // 1-1 signaling\r\n+  socket.on(\"offer\", ({ offer, roomId }) => socket.to(roomId).emit(\"offer\", { offer, sender: socket.id }));\r\n+  socket.on(\"answer\", ({ answer, roomId }) => socket.to(roomId).emit(\"answer\", { answer, sender: socket.id }));\r\n+  socket.on(\"ice-candidate\", ({ candidate, roomId }) => socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id }));\r\n \r\n-  socket.on(\"send-message\", (msg) => {\r\n-    socket.to(msg.roomId).emit(\"receive-message\", msg);\r\n-  });\r\n+  // 1-1 chat\r\n+  socket.on(\"send-message\", (msg) => socket.to(msg.roomId).emit(\"receive-message\", msg));\r\n+  socket.on(\"typing\", ({ roomId, sender }) => socket.to(roomId).emit(\"typing\", { sender }));\r\n+  socket.on(\"message-status\", ({ roomId, messageId, status }) => socket.to(roomId).emit(\"message-status-update\", { messageId, status }));\r\n+  socket.on(\"edit-message\", ({ roomId, messageId, content }) => socket.to(roomId).emit(\"receive-message\", { id: messageId, content, type: \"text\", edited: true }));\r\n+  socket.on(\"delete-message\", ({ roomId, messageId }) => socket.to(roomId).emit(\"message-deleted\", { messageId }));\r\n+  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => socket.to(roomId).emit(\"message-react\", { messageId, reaction, user }));\r\n \r\n-  socket.on(\"typing\", ({ roomId, sender }) => {\r\n-    socket.to(roomId).emit(\"typing\", { sender });\r\n-  });\r\n+  // disconnect cleanup\r\n+  socket.on(\"disconnect\", () => {\r\n+    console.log(\"❌ Disconnected:\", socket.id);\r\n+    waitingUsers = waitingUsers.filter(s => s.id !== socket.id);\r\n \r\n-  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n-    socket.to(roomId).emit(\"receive-message\", {\r\n-      id: messageId,\r\n-      content,\r\n-      type: \"text\",\r\n-      edited: true\r\n+    // leave rooms\r\n+    for (const roomId in rooms) {\r\n+      const room = rooms[roomId];\r\n+      room.users = room.users.filter(id => id !== socket.id);\r\n+      socket.to(roomId).emit(\"user-left\", { userId: socket.id });\r\n+    }\r\n+\r\n+    // 1-1 partner notifications\r\n+    socket.rooms.forEach(roomId => {\r\n+      if (roomId !== socket.id) socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n     });\r\n-  });\r\n \r\n-  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n-    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n+    io.emit(\"rooms-update\", rooms);\r\n   });\r\n+}\r\n \r\n-  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n-    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n-  });\r\n+// ----------------------------\r\n+// Connection Entry\r\n+// ----------------------------\r\n+io.on(\"connection\", (socket) => {\r\n+  console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  // ======== CLEAN UP =========\r\n-  socket.on(\"disconnect\", () => {\r\n-    console.log(\"❌ User disconnected:\", socket.id);\r\n-    waitingUsers = waitingUsers.filter(s => s.id !== socket.id);\r\n-    leaveAllRoomsExceptSelf(socket);\r\n-  });\r\n+  handleOneToOne(socket);\r\n+  handleRoomChat(socket);\r\n+  handleCommon(socket);\r\n \r\n-  function leaveAllRoomsExceptSelf(s) {\r\n-    s.rooms.forEach(r => {\r\n-      if (r !== s.id) {\r\n-        s.to(r).emit(\"partner-left\", { partnerId: s.id });\r\n-        s.leave(r);\r\n-        removeMemberFromRoom(r, s.id);\r\n-      }\r\n-    });\r\n-  }\r\n-\r\n-  function removeMemberFromRoom(roomId, userId) {\r\n-    if (!publicRooms[roomId]) return;\r\n-    publicRooms[roomId].members = publicRooms[roomId].members.filter(id => id !== userId);\r\n-    if (publicRooms[roomId].members.length === 0) {\r\n-      delete publicRooms[roomId];   // delete empty room\r\n-    }\r\n-    io.emit(\"rooms-updated\", publicRooms);\r\n-  }\r\n+  // send current rooms to new user\r\n+  socket.emit(\"rooms-update\", rooms);\r\n });\r\n \r\n const PORT = process.env.PORT || 3001;\r\n-server.listen(PORT, () =>\r\n-  console.log(`🚀 Signaling server running on port ${PORT}`)\r\n-);\r\n+server.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));\r\n"
                },
                {
                    "date": 1758978904777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,79 +7,51 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://connectify-hub.vercel.app/\",\r\n+    origin: \"https://connectify-hub.vercel.app/\", // Replace with your frontend URL\r\n     methods: [\"GET\", \"POST\"],\r\n   },\r\n });\r\n \r\n-app.get(\"/\", (_, res) => res.send(\"🚀 Signaling server running!\"));\r\n+app.use(express.json());\r\n \r\n-let waitingUsers = [];\r\n-let rooms = {}; // { roomId: { name, users: [socketId, ...], createdAt: timestamp } }\r\n+// ----------------------------\r\n+// Rooms storage\r\n+// ----------------------------\r\n+let rooms = {}; \r\n+// rooms structure: { roomId: { name: string, users: [socketId, ...], createdAt: timestamp } }\r\n \r\n // ----------------------------\r\n-// 1-1 Anonymous Chat\r\n+// API to list rooms\r\n // ----------------------------\r\n-function handleOneToOne(socket) {\r\n-  socket.on(\"start-looking\", (userInfo) => {\r\n-    const { gender, country, age, name, filterGender = \"\", filterCountry = \"\" } = userInfo || {};\r\n-    socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n+app.get(\"/rooms\", (_, res) => {\r\n+  const roomList = Object.entries(rooms).map(([roomId, room]) => ({\r\n+    roomId,\r\n+    name: room.name,\r\n+    usersCount: room.users.length,\r\n+    createdAt: room.createdAt,\r\n+  }));\r\n+  res.json(roomList);\r\n+});\r\n \r\n-    const index = waitingUsers.findIndex((u) => {\r\n-      if (!u.connected || !u.userData) return false;\r\n-      const me = socket.userData;\r\n-      const them = u.userData;\r\n-      return (!them.filterGender || them.filterGender === me.gender) &&\r\n-        (!them.filterCountry || them.filterCountry.toLowerCase() === me.country?.toLowerCase()) &&\r\n-        (!me.filterGender || me.filterGender === them.gender) &&\r\n-        (!me.filterCountry || me.filterCountry.toLowerCase() === them.country?.toLowerCase());\r\n-    });\r\n-\r\n-    if (index !== -1) {\r\n-      const partner = waitingUsers.splice(index, 1)[0];\r\n-      const roomId = uuidv4();\r\n-\r\n-      // join both users to temporary room immediately\r\n-      socket.join(roomId);\r\n-      partner.join(roomId);\r\n-\r\n-      // notify both\r\n-      partner.emit(\"matched\", { roomId, partnerId: socket.id, isOfferer: true, partnerName: socket.userData?.name || \"Stranger\", partnerAge: socket.userData?.age || \"Unknown\", partnerCountry: socket.userData?.country || \"Unknown\" });\r\n-      socket.emit(\"matched\", { roomId, partnerId: partner.id, isOfferer: false, partnerName: partner.userData?.name || \"Stranger\", partnerAge: partner.userData?.age || \"Unknown\", partnerCountry: partner.userData?.country || \"Unknown\" });\r\n-    } else {\r\n-      waitingUsers.push(socket);\r\n-    }\r\n-  });\r\n-\r\n-  socket.on(\"skip\", () => {\r\n-    socket.rooms.forEach((roomId) => {\r\n-      if (roomId !== socket.id) {\r\n-        socket.leave(roomId);\r\n-        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-      }\r\n-    });\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-    socket.emit(\"start-looking\", socket.userData);\r\n-  });\r\n-}\r\n-\r\n // ----------------------------\r\n-// Dynamic Room Chat System\r\n+// Socket.IO\r\n // ----------------------------\r\n-function handleRoomChat(socket) {\r\n-  // create room\r\n+io.on(\"connection\", (socket) => {\r\n+  console.log(\"✅ User connected:\", socket.id);\r\n+\r\n+  // Create room\r\n   socket.on(\"create-room\", ({ name }) => {\r\n     const roomId = uuidv4();\r\n     rooms[roomId] = { name: name || \"Untitled Room\", users: [socket.id], createdAt: Date.now() };\r\n     socket.join(roomId);\r\n     socket.emit(\"room-created\", { roomId, name: rooms[roomId].name });\r\n-    io.emit(\"rooms-update\", rooms);\r\n+    io.emit(\"rooms-update\", rooms); // broadcast updated room list\r\n     console.log(`📦 Room created: ${roomId} by ${socket.id}`);\r\n   });\r\n \r\n-  // join room\r\n+  // Join room\r\n   socket.on(\"join-room\", ({ roomId }) => {\r\n     const room = rooms[roomId];\r\n     if (!room) return socket.emit(\"error\", { message: \"Room does not exist\" });\r\n     if (!room.users.includes(socket.id)) room.users.push(socket.id);\r\n@@ -89,83 +61,69 @@\n     io.emit(\"rooms-update\", rooms);\r\n     console.log(`${socket.id} joined room ${roomId}`);\r\n   });\r\n \r\n-  // leave room\r\n+  // Leave room\r\n   socket.on(\"leave-room\", ({ roomId }) => {\r\n     const room = rooms[roomId];\r\n     if (!room) return;\r\n     room.users = room.users.filter(id => id !== socket.id);\r\n     socket.leave(roomId);\r\n     socket.to(roomId).emit(\"user-left\", { userId: socket.id });\r\n \r\n-    // do not delete immediately, keep for Render free server idle time\r\n-    // you can optionally delete after X minutes if you want auto cleanup\r\n+    if (room.users.length === 0) {\r\n+      setTimeout(() => {\r\n+        if (rooms[roomId]?.users.length === 0) {\r\n+          delete rooms[roomId];\r\n+          io.emit(\"rooms-update\", rooms);\r\n+          console.log(`🗑️ Room deleted due to inactivity: ${roomId}`);\r\n+        }\r\n+      }, 10 * 60 * 1000);\r\n+    }\r\n+\r\n     io.emit(\"rooms-update\", rooms);\r\n     console.log(`${socket.id} left room ${roomId}`);\r\n   });\r\n \r\n-  // room chat messages\r\n+  // Chat in room\r\n   socket.on(\"room-message\", ({ roomId, content, type = \"text\" }) => {\r\n-    socket.to(roomId).emit(\"room-message\", { id: uuidv4(), senderId: socket.id, content, type, createdAt: Date.now() });\r\n+    socket.to(roomId).emit(\"room-message\", {\r\n+      id: uuidv4(),\r\n+      senderId: socket.id,\r\n+      content,\r\n+      type,\r\n+      createdAt: Date.now(),\r\n+    });\r\n   });\r\n \r\n-  // room WebRTC signaling\r\n+  // WebRTC signaling\r\n   socket.on(\"room-offer\", ({ offer, targetId }) => io.to(targetId).emit(\"room-offer\", { offer, sender: socket.id }));\r\n   socket.on(\"room-answer\", ({ answer, targetId }) => io.to(targetId).emit(\"room-answer\", { answer, sender: socket.id }));\r\n   socket.on(\"room-ice\", ({ candidate, targetId }) => io.to(targetId).emit(\"room-ice\", { candidate, sender: socket.id }));\r\n-}\r\n \r\n-// ----------------------------\r\n-// Common Features\r\n-// ----------------------------\r\n-function handleCommon(socket) {\r\n-  // 1-1 signaling\r\n-  socket.on(\"offer\", ({ offer, roomId }) => socket.to(roomId).emit(\"offer\", { offer, sender: socket.id }));\r\n-  socket.on(\"answer\", ({ answer, roomId }) => socket.to(roomId).emit(\"answer\", { answer, sender: socket.id }));\r\n-  socket.on(\"ice-candidate\", ({ candidate, roomId }) => socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id }));\r\n-\r\n-  // 1-1 chat\r\n-  socket.on(\"send-message\", (msg) => socket.to(msg.roomId).emit(\"receive-message\", msg));\r\n-  socket.on(\"typing\", ({ roomId, sender }) => socket.to(roomId).emit(\"typing\", { sender }));\r\n-  socket.on(\"message-status\", ({ roomId, messageId, status }) => socket.to(roomId).emit(\"message-status-update\", { messageId, status }));\r\n-  socket.on(\"edit-message\", ({ roomId, messageId, content }) => socket.to(roomId).emit(\"receive-message\", { id: messageId, content, type: \"text\", edited: true }));\r\n-  socket.on(\"delete-message\", ({ roomId, messageId }) => socket.to(roomId).emit(\"message-deleted\", { messageId }));\r\n-  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => socket.to(roomId).emit(\"message-react\", { messageId, reaction, user }));\r\n-\r\n-  // disconnect cleanup\r\n+  // Disconnect cleanup\r\n   socket.on(\"disconnect\", () => {\r\n     console.log(\"❌ Disconnected:\", socket.id);\r\n-    waitingUsers = waitingUsers.filter(s => s.id !== socket.id);\r\n-\r\n-    // leave rooms\r\n     for (const roomId in rooms) {\r\n       const room = rooms[roomId];\r\n       room.users = room.users.filter(id => id !== socket.id);\r\n       socket.to(roomId).emit(\"user-left\", { userId: socket.id });\r\n+\r\n+      if (room.users.length === 0) {\r\n+        setTimeout(() => {\r\n+          if (rooms[roomId]?.users.length === 0) {\r\n+            delete rooms[roomId];\r\n+            io.emit(\"rooms-update\", rooms);\r\n+            console.log(`🗑️ Room deleted due to inactivity: ${roomId}`);\r\n+          }\r\n+        }, 10 * 60 * 1000);\r\n+      }\r\n     }\r\n-\r\n-    // 1-1 partner notifications\r\n-    socket.rooms.forEach(roomId => {\r\n-      if (roomId !== socket.id) socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-    });\r\n-\r\n     io.emit(\"rooms-update\", rooms);\r\n   });\r\n-}\r\n \r\n-// ----------------------------\r\n-// Connection Entry\r\n-// ----------------------------\r\n-io.on(\"connection\", (socket) => {\r\n-  console.log(\"✅ User connected:\", socket.id);\r\n-\r\n-  handleOneToOne(socket);\r\n-  handleRoomChat(socket);\r\n-  handleCommon(socket);\r\n-\r\n-  // send current rooms to new user\r\n+  // Send current rooms to new user\r\n   socket.emit(\"rooms-update\", rooms);\r\n });\r\n \r\n const PORT = process.env.PORT || 3001;\r\n-server.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));\r\n+server.listen(PORT, () => console.log(`🚀 Room server running on port ${PORT}`));\r\n"
                },
                {
                    "date": 1758984744848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,123 +7,160 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://connectify-hub.vercel.app/\", // Replace with your frontend URL\r\n-    methods: [\"GET\", \"POST\"],\r\n+    origin: \"https://connectify-hub.vercel.app/\",\r\n+    methods: [\"GET\", \"POST\"]\r\n   },\r\n });\r\n \r\n-app.use(express.json());\r\n+app.get(\"/\", (req, res) => {\r\n+  res.send(\"🚀 Signaling server is running!\");\r\n+});\r\n \r\n-// ----------------------------\r\n-// Rooms storage\r\n-// ----------------------------\r\n-let rooms = {}; \r\n-// rooms structure: { roomId: { name: string, users: [socketId, ...], createdAt: timestamp } }\r\n+let waitingUsers = [];\r\n \r\n-// ----------------------------\r\n-// API to list rooms\r\n-// ----------------------------\r\n-app.get(\"/rooms\", (_, res) => {\r\n-  const roomList = Object.entries(rooms).map(([roomId, room]) => ({\r\n-    roomId,\r\n-    name: room.name,\r\n-    usersCount: room.users.length,\r\n-    createdAt: room.createdAt,\r\n-  }));\r\n-  res.json(roomList);\r\n-});\r\n-\r\n-// ----------------------------\r\n-// Socket.IO\r\n-// ----------------------------\r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  // Create room\r\n-  socket.on(\"create-room\", ({ name }) => {\r\n-    const roomId = uuidv4();\r\n-    rooms[roomId] = { name: name || \"Untitled Room\", users: [socket.id], createdAt: Date.now() };\r\n-    socket.join(roomId);\r\n-    socket.emit(\"room-created\", { roomId, name: rooms[roomId].name });\r\n-    io.emit(\"rooms-update\", rooms); // broadcast updated room list\r\n-    console.log(`📦 Room created: ${roomId} by ${socket.id}`);\r\n+  socket.on(\"start-looking\", (userInfo) => {\r\n+    const {\r\n+      gender,\r\n+      country,\r\n+      age,\r\n+      name,\r\n+      filterGender = \"\",\r\n+      filterCountry = \"\"\r\n+    } = userInfo || {};\r\n+\r\n+    socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n+\r\n+    const index = waitingUsers.findIndex((other) => {\r\n+      if (!other.connected || !other.userData) return false;\r\n+\r\n+      const my = socket.userData;\r\n+      const their = other.userData;\r\n+\r\n+      const mutualFilterMatch =\r\n+        (!their.filterGender || their.filterGender === my.gender) &&\r\n+        (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n+        (!my.filterGender || my.filterGender === their.gender) &&\r\n+        (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n+\r\n+      return mutualFilterMatch;\r\n+    });\r\n+\r\n+    if (index !== -1) {\r\n+      const partner = waitingUsers.splice(index, 1)[0];\r\n+      const roomId = uuidv4();\r\n+\r\n+      socket.join(roomId);\r\n+      partner.join(roomId);\r\n+\r\n+      // Emit match to partner\r\n+      partner.emit(\"matched\", {\r\n+        roomId,\r\n+        partnerId: socket.id,\r\n+        isOfferer: true,\r\n+        partnerName: socket.userData?.name || \"Stranger\",\r\n+        partnerAge: socket.userData?.age || \"Unknown\",\r\n+        partnerCountry: socket.userData?.country || \"Unknown\"\r\n+      });\r\n+\r\n+      // Emit match to socket\r\n+      socket.emit(\"matched\", {\r\n+        roomId,\r\n+        partnerId: partner.id,\r\n+        isOfferer: false,\r\n+        partnerName: partner.userData?.name || \"Stranger\",\r\n+        partnerAge: partner.userData?.age || \"Unknown\",\r\n+        partnerCountry: partner.userData?.country || \"Unknown\"\r\n+      });\r\n+    } else {\r\n+      waitingUsers.push(socket);\r\n+    }\r\n   });\r\n \r\n-  // Join room\r\n-  socket.on(\"join-room\", ({ roomId }) => {\r\n-    const room = rooms[roomId];\r\n-    if (!room) return socket.emit(\"error\", { message: \"Room does not exist\" });\r\n-    if (!room.users.includes(socket.id)) room.users.push(socket.id);\r\n+  socket.on(\"join-room\", (roomId) => {\r\n     socket.join(roomId);\r\n-    socket.emit(\"room-joined\", { roomId, name: room.name });\r\n-    io.to(roomId).emit(\"user-joined\", { userId: socket.id });\r\n-    io.emit(\"rooms-update\", rooms);\r\n-    console.log(`${socket.id} joined room ${roomId}`);\r\n+    socket.emit(\"joined-room\", roomId);\r\n   });\r\n \r\n-  // Leave room\r\n-  socket.on(\"leave-room\", ({ roomId }) => {\r\n-    const room = rooms[roomId];\r\n-    if (!room) return;\r\n-    room.users = room.users.filter(id => id !== socket.id);\r\n+  socket.on(\"leave-room\", (roomId) => {\r\n     socket.leave(roomId);\r\n-    socket.to(roomId).emit(\"user-left\", { userId: socket.id });\r\n+    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+  });\r\n \r\n-    if (room.users.length === 0) {\r\n-      setTimeout(() => {\r\n-        if (rooms[roomId]?.users.length === 0) {\r\n-          delete rooms[roomId];\r\n-          io.emit(\"rooms-update\", rooms);\r\n-          console.log(`🗑️ Room deleted due to inactivity: ${roomId}`);\r\n-        }\r\n-      }, 10 * 60 * 1000);\r\n-    }\r\n+  socket.on(\"skip\", () => {\r\n+    socket.rooms.forEach((roomId) => {\r\n+      if (roomId !== socket.id) {\r\n+        socket.leave(roomId);\r\n+        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+      }\r\n+    });\r\n \r\n-    io.emit(\"rooms-update\", rooms);\r\n-    console.log(`${socket.id} left room ${roomId}`);\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+    socket.emit(\"start-looking\", socket.userData);\r\n   });\r\n \r\n-  // Chat in room\r\n-  socket.on(\"room-message\", ({ roomId, content, type = \"text\" }) => {\r\n-    socket.to(roomId).emit(\"room-message\", {\r\n-      id: uuidv4(),\r\n-      senderId: socket.id,\r\n+  // WebRTC signaling\r\n+  socket.on(\"offer\", ({ offer, roomId }) => {\r\n+    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n+  });\r\n+\r\n+  socket.on(\"answer\", ({ answer, roomId }) => {\r\n+    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n+  });\r\n+\r\n+  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n+    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n+  });\r\n+\r\n+  // Chat features\r\n+  socket.on(\"send-message\", (msg) => {\r\n+    const { roomId } = msg;\r\n+    console.log(`💬 New message in ${roomId}:`, msg);\r\n+    socket.to(roomId).emit(\"receive-message\", msg);\r\n+  });\r\n+\r\n+  socket.on(\"typing\", ({ roomId, sender }) => {\r\n+    socket.to(roomId).emit(\"typing\", { sender });\r\n+  });\r\n+\r\n+  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n+    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n+  });\r\n+\r\n+  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n+    socket.to(roomId).emit(\"receive-message\", {\r\n+      id: messageId,\r\n       content,\r\n-      type,\r\n-      createdAt: Date.now(),\r\n+      type: \"text\",\r\n+      edited: true\r\n     });\r\n   });\r\n \r\n-  // WebRTC signaling\r\n-  socket.on(\"room-offer\", ({ offer, targetId }) => io.to(targetId).emit(\"room-offer\", { offer, sender: socket.id }));\r\n-  socket.on(\"room-answer\", ({ answer, targetId }) => io.to(targetId).emit(\"room-answer\", { answer, sender: socket.id }));\r\n-  socket.on(\"room-ice\", ({ candidate, targetId }) => io.to(targetId).emit(\"room-ice\", { candidate, sender: socket.id }));\r\n+  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n+    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n+  });\r\n \r\n-  // Disconnect cleanup\r\n+  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n+    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n+  });\r\n+\r\n   socket.on(\"disconnect\", () => {\r\n-    console.log(\"❌ Disconnected:\", socket.id);\r\n-    for (const roomId in rooms) {\r\n-      const room = rooms[roomId];\r\n-      room.users = room.users.filter(id => id !== socket.id);\r\n-      socket.to(roomId).emit(\"user-left\", { userId: socket.id });\r\n+    console.log(\"❌ User disconnected:\", socket.id);\r\n+    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n \r\n-      if (room.users.length === 0) {\r\n-        setTimeout(() => {\r\n-          if (rooms[roomId]?.users.length === 0) {\r\n-            delete rooms[roomId];\r\n-            io.emit(\"rooms-update\", rooms);\r\n-            console.log(`🗑️ Room deleted due to inactivity: ${roomId}`);\r\n-          }\r\n-        }, 10 * 60 * 1000);\r\n+    socket.rooms.forEach((roomId) => {\r\n+      if (roomId !== socket.id) {\r\n+        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n-    }\r\n-    io.emit(\"rooms-update\", rooms);\r\n+    });\r\n   });\r\n-\r\n-  // Send current rooms to new user\r\n-  socket.emit(\"rooms-update\", rooms);\r\n });\r\n \r\n const PORT = process.env.PORT || 3001;\r\n-server.listen(PORT, () => console.log(`🚀 Room server running on port ${PORT}`));\r\n+server.listen(PORT, () => {\r\n+  console.log(`🚀 Signaling server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1758984994807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,47 +7,61 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://connectify-hub.vercel.app/\",\r\n-    methods: [\"GET\", \"POST\"]\r\n+    origin: \"https://connectify-hub.vercel.app\", // your frontend\r\n+    methods: [\"GET\", \"POST\"],\r\n   },\r\n });\r\n \r\n-app.get(\"/\", (req, res) => {\r\n-  res.send(\"🚀 Signaling server is running!\");\r\n+app.use(express.json());\r\n+\r\n+// ----------------------\r\n+// Data stores\r\n+// ----------------------\r\n+let waitingUsers = []; // for 1-1\r\n+let rooms = {};        // { roomId: { name, users:[socketId], createdAt } }\r\n+\r\n+// ----------------------\r\n+// REST APIs\r\n+// ----------------------\r\n+\r\n+// root\r\n+app.get(\"/\", (_, res) => {\r\n+  res.send(\"🚀 Signaling + Room server is running!\");\r\n });\r\n \r\n-let waitingUsers = [];\r\n+// list all public rooms\r\n+app.get(\"/rooms\", (_, res) => {\r\n+  const list = Object.entries(rooms).map(([roomId, r]) => ({\r\n+    roomId,\r\n+    name: r.name,\r\n+    usersCount: r.users.length,\r\n+    createdAt: r.createdAt,\r\n+  }));\r\n+  res.json(list);\r\n+});\r\n \r\n+// ----------------------\r\n+// Socket.IO\r\n+// ----------------------\r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n+  // ---------- 1-1 RANDOM CHAT ----------\r\n   socket.on(\"start-looking\", (userInfo) => {\r\n-    const {\r\n-      gender,\r\n-      country,\r\n-      age,\r\n-      name,\r\n-      filterGender = \"\",\r\n-      filterCountry = \"\"\r\n-    } = userInfo || {};\r\n-\r\n+    const { gender, country, age, name,\r\n+            filterGender = \"\", filterCountry = \"\" } = userInfo || {};\r\n     socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n \r\n     const index = waitingUsers.findIndex((other) => {\r\n       if (!other.connected || !other.userData) return false;\r\n-\r\n       const my = socket.userData;\r\n       const their = other.userData;\r\n-\r\n-      const mutualFilterMatch =\r\n-        (!their.filterGender || their.filterGender === my.gender) &&\r\n-        (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n-        (!my.filterGender || my.filterGender === their.gender) &&\r\n-        (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n-\r\n-      return mutualFilterMatch;\r\n+      return (!their.filterGender || their.filterGender === my.gender) &&\r\n+             (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n+             (!my.filterGender || my.filterGender === their.gender) &&\r\n+             (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n     });\r\n \r\n     if (index !== -1) {\r\n       const partner = waitingUsers.splice(index, 1)[0];\r\n@@ -55,9 +69,8 @@\n \r\n       socket.join(roomId);\r\n       partner.join(roomId);\r\n \r\n-      // Emit match to partner\r\n       partner.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: socket.id,\r\n         isOfferer: true,\r\n@@ -65,9 +78,8 @@\n         partnerAge: socket.userData?.age || \"Unknown\",\r\n         partnerCountry: socket.userData?.country || \"Unknown\"\r\n       });\r\n \r\n-      // Emit match to socket\r\n       socket.emit(\"matched\", {\r\n         roomId,\r\n         partnerId: partner.id,\r\n         isOfferer: false,\r\n@@ -79,88 +91,138 @@\n       waitingUsers.push(socket);\r\n     }\r\n   });\r\n \r\n-  socket.on(\"join-room\", (roomId) => {\r\n-    socket.join(roomId);\r\n-    socket.emit(\"joined-room\", roomId);\r\n-  });\r\n-\r\n-  socket.on(\"leave-room\", (roomId) => {\r\n-    socket.leave(roomId);\r\n-    socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-  });\r\n-\r\n   socket.on(\"skip\", () => {\r\n-    socket.rooms.forEach((roomId) => {\r\n-      if (roomId !== socket.id) {\r\n-        socket.leave(roomId);\r\n-        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n+    socket.rooms.forEach((r) => {\r\n+      if (r !== socket.id) {\r\n+        socket.leave(r);\r\n+        socket.to(r).emit(\"partner-left\", { partnerId: socket.id });\r\n       }\r\n     });\r\n-\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n     socket.emit(\"start-looking\", socket.userData);\r\n   });\r\n \r\n-  // WebRTC signaling\r\n-  socket.on(\"offer\", ({ offer, roomId }) => {\r\n-    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n+  // ---------- PUBLIC ROOMS ----------\r\n+  // create a room\r\n+  socket.on(\"create-room\", ({ name }) => {\r\n+    const roomId = uuidv4();\r\n+    rooms[roomId] = {\r\n+      name: name || \"Untitled Room\",\r\n+      users: [socket.id],\r\n+      createdAt: Date.now()\r\n+    };\r\n+    socket.join(roomId);\r\n+    socket.emit(\"room-created\", { roomId, name: rooms[roomId].name });\r\n+    io.emit(\"rooms-update\", rooms);\r\n+    console.log(`📦 Room created: ${roomId}`);\r\n   });\r\n \r\n-  socket.on(\"answer\", ({ answer, roomId }) => {\r\n-    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n+  // join a room\r\n+  socket.on(\"join-room\", ({ roomId }) => {\r\n+    const room = rooms[roomId];\r\n+    if (!room) return socket.emit(\"error\", { message: \"Room does not exist\" });\r\n+    if (!room.users.includes(socket.id)) room.users.push(socket.id);\r\n+    socket.join(roomId);\r\n+    socket.emit(\"room-joined\", { roomId, name: room.name });\r\n+    socket.to(roomId).emit(\"user-joined\", { userId: socket.id });\r\n+    io.emit(\"rooms-update\", rooms);\r\n+    console.log(`${socket.id} joined room ${roomId}`);\r\n   });\r\n \r\n-  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n-    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n+  // leave a room\r\n+  socket.on(\"leave-room\", ({ roomId }) => {\r\n+    const room = rooms[roomId];\r\n+    if (!room) return;\r\n+    room.users = room.users.filter((id) => id !== socket.id);\r\n+    socket.leave(roomId);\r\n+    socket.to(roomId).emit(\"user-left\", { userId: socket.id });\r\n+    checkRoomEmpty(roomId);\r\n   });\r\n \r\n-  // Chat features\r\n-  socket.on(\"send-message\", (msg) => {\r\n-    const { roomId } = msg;\r\n-    console.log(`💬 New message in ${roomId}:`, msg);\r\n-    socket.to(roomId).emit(\"receive-message\", msg);\r\n-  });\r\n-\r\n-  socket.on(\"typing\", ({ roomId, sender }) => {\r\n-    socket.to(roomId).emit(\"typing\", { sender });\r\n-  });\r\n-\r\n-  socket.on(\"message-status\", ({ roomId, messageId, status }) => {\r\n-    socket.to(roomId).emit(\"message-status-update\", { messageId, status });\r\n-  });\r\n-\r\n-  socket.on(\"edit-message\", ({ roomId, messageId, content }) => {\r\n-    socket.to(roomId).emit(\"receive-message\", {\r\n-      id: messageId,\r\n+  // room chat + WebRTC signals\r\n+  socket.on(\"room-message\", ({ roomId, content, type = \"text\" }) => {\r\n+    socket.to(roomId).emit(\"room-message\", {\r\n+      id: uuidv4(),\r\n+      senderId: socket.id,\r\n       content,\r\n-      type: \"text\",\r\n-      edited: true\r\n+      type,\r\n+      createdAt: Date.now()\r\n     });\r\n   });\r\n+  socket.on(\"room-offer\", ({ offer, targetId }) =>\r\n+    io.to(targetId).emit(\"room-offer\", { offer, sender: socket.id })\r\n+  );\r\n+  socket.on(\"room-answer\", ({ answer, targetId }) =>\r\n+    io.to(targetId).emit(\"room-answer\", { answer, sender: socket.id })\r\n+  );\r\n+  socket.on(\"room-ice\", ({ candidate, targetId }) =>\r\n+    io.to(targetId).emit(\"room-ice\", { candidate, sender: socket.id })\r\n+  );\r\n \r\n-  socket.on(\"delete-message\", ({ roomId, messageId }) => {\r\n-    socket.to(roomId).emit(\"message-deleted\", { messageId });\r\n-  });\r\n+  // ---------- COMMON SIGNALING ----------\r\n+  socket.on(\"offer\", ({ offer, roomId }) =>\r\n+    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id })\r\n+  );\r\n+  socket.on(\"answer\", ({ answer, roomId }) =>\r\n+    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id })\r\n+  );\r\n+  socket.on(\"ice-candidate\", ({ candidate, roomId }) =>\r\n+    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id })\r\n+  );\r\n \r\n-  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) => {\r\n-    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user });\r\n-  });\r\n+  // 1-1 / group chat helpers\r\n+  socket.on(\"send-message\", (msg) =>\r\n+    socket.to(msg.roomId).emit(\"receive-message\", msg)\r\n+  );\r\n+  socket.on(\"typing\", ({ roomId, sender }) =>\r\n+    socket.to(roomId).emit(\"typing\", { sender })\r\n+  );\r\n+  socket.on(\"message-status\", ({ roomId, messageId, status }) =>\r\n+    socket.to(roomId).emit(\"message-status-update\", { messageId, status })\r\n+  );\r\n+  socket.on(\"edit-message\", ({ roomId, messageId, content }) =>\r\n+    socket.to(roomId).emit(\"receive-message\", { id: messageId, content, type: \"text\", edited: true })\r\n+  );\r\n+  socket.on(\"delete-message\", ({ roomId, messageId }) =>\r\n+    socket.to(roomId).emit(\"message-deleted\", { messageId })\r\n+  );\r\n+  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) =>\r\n+    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user })\r\n+  );\r\n \r\n+  // ---------- Disconnect cleanup ----------\r\n   socket.on(\"disconnect\", () => {\r\n-    console.log(\"❌ User disconnected:\", socket.id);\r\n+    console.log(\"❌ Disconnected:\", socket.id);\r\n     waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+    for (const roomId in rooms) {\r\n+      const r = rooms[roomId];\r\n+      r.users = r.users.filter((id) => id !== socket.id);\r\n+      socket.to(roomId).emit(\"user-left\", { userId: socket.id });\r\n+      checkRoomEmpty(roomId);\r\n+    }\r\n+  });\r\n \r\n-    socket.rooms.forEach((roomId) => {\r\n-      if (roomId !== socket.id) {\r\n-        socket.to(roomId).emit(\"partner-left\", { partnerId: socket.id });\r\n-      }\r\n-    });\r\n-  });\r\n+  // send current public rooms on connect\r\n+  socket.emit(\"rooms-update\", rooms);\r\n });\r\n \r\n+// helper to delete empty room after 10 min\r\n+function checkRoomEmpty(roomId) {\r\n+  const r = rooms[roomId];\r\n+  if (r && r.users.length === 0) {\r\n+    setTimeout(() => {\r\n+      if (rooms[roomId] && rooms[roomId].users.length === 0) {\r\n+        delete rooms[roomId];\r\n+        io.emit(\"rooms-update\", rooms);\r\n+        console.log(`🗑️ Room deleted: ${roomId}`);\r\n+      }\r\n+    }, 10 * 60 * 1000);\r\n+    io.emit(\"rooms-update\", rooms);\r\n+  }\r\n+}\r\n+\r\n const PORT = process.env.PORT || 3001;\r\n-server.listen(PORT, () => {\r\n-  console.log(`🚀 Signaling server running on port ${PORT}`);\r\n-});\r\n+server.listen(PORT, () =>\r\n+  console.log(`🚀 Combined server running on port ${PORT}`)\r\n+);\r\n"
                },
                {
                    "date": 1758985540544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,222 +7,129 @@\n const server = http.createServer(app);\r\n \r\n const io = new Server(server, {\r\n   cors: {\r\n-    origin: \"https://connectify-hub.vercel.app\", // your frontend\r\n+    origin: \"*\", // Allow all or replace with your frontend URL\r\n     methods: [\"GET\", \"POST\"],\r\n   },\r\n });\r\n \r\n app.use(express.json());\r\n \r\n-// ----------------------\r\n-// Data stores\r\n-// ----------------------\r\n-let waitingUsers = []; // for 1-1\r\n-let rooms = {};        // { roomId: { name, users:[socketId], createdAt } }\r\n+// ----------------------------\r\n+// Rooms storage\r\n+// ----------------------------\r\n+let rooms = {}; \r\n+// rooms: { roomId: { name, users: [{ id, userInfo }], createdAt } }\r\n \r\n-// ----------------------\r\n-// REST APIs\r\n-// ----------------------\r\n-\r\n-// root\r\n-app.get(\"/\", (_, res) => {\r\n-  res.send(\"🚀 Signaling + Room server is running!\");\r\n-});\r\n-\r\n-// list all public rooms\r\n+// List rooms API\r\n app.get(\"/rooms\", (_, res) => {\r\n-  const list = Object.entries(rooms).map(([roomId, r]) => ({\r\n-    roomId,\r\n-    name: r.name,\r\n-    usersCount: r.users.length,\r\n-    createdAt: r.createdAt,\r\n+  const roomList = Object.entries(rooms).map(([id, room]) => ({\r\n+    id,\r\n+    name: room.name,\r\n+    usersCount: room.users.length,\r\n+    createdAt: room.createdAt,\r\n   }));\r\n-  res.json(list);\r\n+  res.json(roomList);\r\n });\r\n \r\n-// ----------------------\r\n+// ----------------------------\r\n // Socket.IO\r\n-// ----------------------\r\n+// ----------------------------\r\n io.on(\"connection\", (socket) => {\r\n   console.log(\"✅ User connected:\", socket.id);\r\n \r\n-  // ---------- 1-1 RANDOM CHAT ----------\r\n-  socket.on(\"start-looking\", (userInfo) => {\r\n-    const { gender, country, age, name,\r\n-            filterGender = \"\", filterCountry = \"\" } = userInfo || {};\r\n-    socket.userData = { gender, country, age, name, filterGender, filterCountry };\r\n-\r\n-    const index = waitingUsers.findIndex((other) => {\r\n-      if (!other.connected || !other.userData) return false;\r\n-      const my = socket.userData;\r\n-      const their = other.userData;\r\n-      return (!their.filterGender || their.filterGender === my.gender) &&\r\n-             (!their.filterCountry || their.filterCountry.toLowerCase() === my.country?.toLowerCase()) &&\r\n-             (!my.filterGender || my.filterGender === their.gender) &&\r\n-             (!my.filterCountry || my.filterCountry.toLowerCase() === their.country?.toLowerCase());\r\n-    });\r\n-\r\n-    if (index !== -1) {\r\n-      const partner = waitingUsers.splice(index, 1)[0];\r\n-      const roomId = uuidv4();\r\n-\r\n-      socket.join(roomId);\r\n-      partner.join(roomId);\r\n-\r\n-      partner.emit(\"matched\", {\r\n-        roomId,\r\n-        partnerId: socket.id,\r\n-        isOfferer: true,\r\n-        partnerName: socket.userData?.name || \"Stranger\",\r\n-        partnerAge: socket.userData?.age || \"Unknown\",\r\n-        partnerCountry: socket.userData?.country || \"Unknown\"\r\n-      });\r\n-\r\n-      socket.emit(\"matched\", {\r\n-        roomId,\r\n-        partnerId: partner.id,\r\n-        isOfferer: false,\r\n-        partnerName: partner.userData?.name || \"Stranger\",\r\n-        partnerAge: partner.userData?.age || \"Unknown\",\r\n-        partnerCountry: partner.userData?.country || \"Unknown\"\r\n-      });\r\n-    } else {\r\n-      waitingUsers.push(socket);\r\n-    }\r\n-  });\r\n-\r\n-  socket.on(\"skip\", () => {\r\n-    socket.rooms.forEach((r) => {\r\n-      if (r !== socket.id) {\r\n-        socket.leave(r);\r\n-        socket.to(r).emit(\"partner-left\", { partnerId: socket.id });\r\n-      }\r\n-    });\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n-    socket.emit(\"start-looking\", socket.userData);\r\n-  });\r\n-\r\n-  // ---------- PUBLIC ROOMS ----------\r\n-  // create a room\r\n-  socket.on(\"create-room\", ({ name }) => {\r\n+  // Create room\r\n+  socket.on(\"create-room\", ({ name, topic, password, userInfo }) => {\r\n     const roomId = uuidv4();\r\n     rooms[roomId] = {\r\n       name: name || \"Untitled Room\",\r\n-      users: [socket.id],\r\n-      createdAt: Date.now()\r\n+      topic: topic || \"\",\r\n+      password: password || null,\r\n+      users: [{ id: socket.id, userInfo }],\r\n+      createdAt: Date.now(),\r\n     };\r\n     socket.join(roomId);\r\n-    socket.emit(\"room-created\", { roomId, name: rooms[roomId].name });\r\n+    socket.emit(\"room-created\", { roomId, ...rooms[roomId] });\r\n     io.emit(\"rooms-update\", rooms);\r\n-    console.log(`📦 Room created: ${roomId}`);\r\n+    console.log(`📦 Room created: ${roomId} by ${socket.id}`);\r\n   });\r\n \r\n-  // join a room\r\n-  socket.on(\"join-room\", ({ roomId }) => {\r\n+  // Join a room\r\n+  socket.on(\"join-room-dynamic\", ({ roomId, userInfo }) => {\r\n     const room = rooms[roomId];\r\n     if (!room) return socket.emit(\"error\", { message: \"Room does not exist\" });\r\n-    if (!room.users.includes(socket.id)) room.users.push(socket.id);\r\n+\r\n+    // Add user if not already present\r\n+    if (!room.users.find((u) => u.id === socket.id)) {\r\n+      room.users.push({ id: socket.id, userInfo });\r\n+    }\r\n+\r\n     socket.join(roomId);\r\n-    socket.emit(\"room-joined\", { roomId, name: room.name });\r\n-    socket.to(roomId).emit(\"user-joined\", { userId: socket.id });\r\n+    socket.emit(\"room-joined\", { roomId, ...room });\r\n+    socket.to(roomId).emit(\"user-joined\", { id: socket.id, userInfo });\r\n     io.emit(\"rooms-update\", rooms);\r\n     console.log(`${socket.id} joined room ${roomId}`);\r\n   });\r\n \r\n-  // leave a room\r\n+  // Leave a room\r\n   socket.on(\"leave-room\", ({ roomId }) => {\r\n     const room = rooms[roomId];\r\n     if (!room) return;\r\n-    room.users = room.users.filter((id) => id !== socket.id);\r\n+\r\n+    room.users = room.users.filter((u) => u.id !== socket.id);\r\n     socket.leave(roomId);\r\n-    socket.to(roomId).emit(\"user-left\", { userId: socket.id });\r\n-    checkRoomEmpty(roomId);\r\n+    socket.to(roomId).emit(\"user-left\", { id: socket.id });\r\n+\r\n+    // Delete room if empty after 10 min inactivity\r\n+    if (room.users.length === 0) {\r\n+      setTimeout(() => {\r\n+        if (rooms[roomId]?.users.length === 0) {\r\n+          delete rooms[roomId];\r\n+          io.emit(\"rooms-update\", rooms);\r\n+          console.log(`🗑️ Room deleted due to inactivity: ${roomId}`);\r\n+        }\r\n+      }, 10 * 60 * 1000); // 10 min\r\n+    }\r\n+\r\n+    io.emit(\"rooms-update\", rooms);\r\n+    console.log(`${socket.id} left room ${roomId}`);\r\n   });\r\n \r\n-  // room chat + WebRTC signals\r\n-  socket.on(\"room-message\", ({ roomId, content, type = \"text\" }) => {\r\n-    socket.to(roomId).emit(\"room-message\", {\r\n-      id: uuidv4(),\r\n-      senderId: socket.id,\r\n-      content,\r\n-      type,\r\n-      createdAt: Date.now()\r\n-    });\r\n+  // Chat in room\r\n+  socket.on(\"room-message\", ({ roomId, id, user, text, timestamp }) => {\r\n+    socket.to(roomId).emit(\"room-message\", { roomId, id, user, text, timestamp });\r\n   });\r\n-  socket.on(\"room-offer\", ({ offer, targetId }) =>\r\n-    io.to(targetId).emit(\"room-offer\", { offer, sender: socket.id })\r\n-  );\r\n-  socket.on(\"room-answer\", ({ answer, targetId }) =>\r\n-    io.to(targetId).emit(\"room-answer\", { answer, sender: socket.id })\r\n-  );\r\n-  socket.on(\"room-ice\", ({ candidate, targetId }) =>\r\n-    io.to(targetId).emit(\"room-ice\", { candidate, sender: socket.id })\r\n-  );\r\n \r\n-  // ---------- COMMON SIGNALING ----------\r\n-  socket.on(\"offer\", ({ offer, roomId }) =>\r\n-    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id })\r\n-  );\r\n-  socket.on(\"answer\", ({ answer, roomId }) =>\r\n-    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id })\r\n-  );\r\n-  socket.on(\"ice-candidate\", ({ candidate, roomId }) =>\r\n-    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id })\r\n-  );\r\n+  // WebRTC signaling\r\n+  socket.on(\"room-offer\", ({ to, offer }) => io.to(to).emit(\"room-offer\", { offer, sender: socket.id }));\r\n+  socket.on(\"room-answer\", ({ to, answer }) => io.to(to).emit(\"room-answer\", { answer, sender: socket.id }));\r\n+  socket.on(\"room-ice\", ({ to, candidate }) => io.to(to).emit(\"room-ice\", { candidate, sender: socket.id }));\r\n \r\n-  // 1-1 / group chat helpers\r\n-  socket.on(\"send-message\", (msg) =>\r\n-    socket.to(msg.roomId).emit(\"receive-message\", msg)\r\n-  );\r\n-  socket.on(\"typing\", ({ roomId, sender }) =>\r\n-    socket.to(roomId).emit(\"typing\", { sender })\r\n-  );\r\n-  socket.on(\"message-status\", ({ roomId, messageId, status }) =>\r\n-    socket.to(roomId).emit(\"message-status-update\", { messageId, status })\r\n-  );\r\n-  socket.on(\"edit-message\", ({ roomId, messageId, content }) =>\r\n-    socket.to(roomId).emit(\"receive-message\", { id: messageId, content, type: \"text\", edited: true })\r\n-  );\r\n-  socket.on(\"delete-message\", ({ roomId, messageId }) =>\r\n-    socket.to(roomId).emit(\"message-deleted\", { messageId })\r\n-  );\r\n-  socket.on(\"react-message\", ({ roomId, messageId, reaction, user }) =>\r\n-    socket.to(roomId).emit(\"message-react\", { messageId, reaction, user })\r\n-  );\r\n-\r\n-  // ---------- Disconnect cleanup ----------\r\n+  // Disconnect handling\r\n   socket.on(\"disconnect\", () => {\r\n-    console.log(\"❌ Disconnected:\", socket.id);\r\n-    waitingUsers = waitingUsers.filter((s) => s.id !== socket.id);\r\n+    console.log(\"❌ User disconnected:\", socket.id);\r\n     for (const roomId in rooms) {\r\n-      const r = rooms[roomId];\r\n-      r.users = r.users.filter((id) => id !== socket.id);\r\n-      socket.to(roomId).emit(\"user-left\", { userId: socket.id });\r\n-      checkRoomEmpty(roomId);\r\n+      const room = rooms[roomId];\r\n+      room.users = room.users.filter((u) => u.id !== socket.id);\r\n+      socket.to(roomId).emit(\"user-left\", { id: socket.id });\r\n+\r\n+      // Delete room if empty after 10 min inactivity\r\n+      if (room.users.length === 0) {\r\n+        setTimeout(() => {\r\n+          if (rooms[roomId]?.users.length === 0) {\r\n+            delete rooms[roomId];\r\n+            io.emit(\"rooms-update\", rooms);\r\n+            console.log(`🗑️ Room deleted due to inactivity: ${roomId}`);\r\n+          }\r\n+        }, 10 * 60 * 1000);\r\n+      }\r\n     }\r\n+    io.emit(\"rooms-update\", rooms);\r\n   });\r\n \r\n-  // send current public rooms on connect\r\n+  // Send current rooms to new user\r\n   socket.emit(\"rooms-update\", rooms);\r\n });\r\n \r\n-// helper to delete empty room after 10 min\r\n-function checkRoomEmpty(roomId) {\r\n-  const r = rooms[roomId];\r\n-  if (r && r.users.length === 0) {\r\n-    setTimeout(() => {\r\n-      if (rooms[roomId] && rooms[roomId].users.length === 0) {\r\n-        delete rooms[roomId];\r\n-        io.emit(\"rooms-update\", rooms);\r\n-        console.log(`🗑️ Room deleted: ${roomId}`);\r\n-      }\r\n-    }, 10 * 60 * 1000);\r\n-    io.emit(\"rooms-update\", rooms);\r\n-  }\r\n-}\r\n-\r\n const PORT = process.env.PORT || 3001;\r\n-server.listen(PORT, () =>\r\n-  console.log(`🚀 Combined server running on port ${PORT}`)\r\n-);\r\n+server.listen(PORT, () => console.log(`🚀 Room server running on port ${PORT}`));\r\n"
                }
            ],
            "date": 1752233201298,
            "name": "Commit-0",
            "content": "// server/signaling.js\r\n\r\nconst { Server } = require(\"socket.io\");\r\n\r\nconst PORT = process.env.PORT || 3001;\r\n\r\nconst io = new Server(PORT, {\r\n  cors: {\r\n    origin: \"*\", // ⚠️ Replace with your frontend URL in production for security\r\n    methods: [\"GET\", \"POST\"],\r\n  },\r\n});\r\n\r\nio.on(\"connection\", (socket) => {\r\n  console.log(\"✅ User connected:\", socket.id);\r\n\r\n  /**\r\n   * User joins a room\r\n   */\r\n  socket.on(\"join-room\", (roomId) => {\r\n    socket.join(roomId);\r\n    console.log(`📥 User ${socket.id} joined room ${roomId}`);\r\n    socket.to(roomId).emit(\"user-joined\", socket.id);\r\n  });\r\n\r\n  /**\r\n   * Handle offer\r\n   */\r\n  socket.on(\"offer\", ({ offer, roomId }) => {\r\n    socket.to(roomId).emit(\"offer\", { offer, sender: socket.id });\r\n  });\r\n\r\n  /**\r\n   * Handle answer\r\n   */\r\n  socket.on(\"answer\", ({ answer, roomId }) => {\r\n    socket.to(roomId).emit(\"answer\", { answer, sender: socket.id });\r\n  });\r\n\r\n  /**\r\n   * Handle ICE candidates\r\n   */\r\n  socket.on(\"ice-candidate\", ({ candidate, roomId }) => {\r\n    socket.to(roomId).emit(\"ice-candidate\", { candidate, sender: socket.id });\r\n  });\r\n\r\n  /**\r\n   * Handle disconnect\r\n   */\r\n  socket.on(\"disconnect\", () => {\r\n    console.log(\"❌ User disconnected:\", socket.id);\r\n  });\r\n});\r\n\r\nconsole.log(`🚀 Signaling server is running on port ${PORT}`);\r\n"
        }
    ]
}