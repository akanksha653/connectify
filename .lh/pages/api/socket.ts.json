{
    "sourceFile": "pages/api/socket.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1752229843884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752231392955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,15 @@\n // pages/api/socket.ts\r\n import { Server } from \"socket.io\";\r\n import { NextApiRequest } from \"next\";\r\n-import { NextApiResponseServerIO } from \"../../types/next\";\r\n+import type { NextApiResponseServerIO } from \"@/types/next\";\r\n \r\n export default function handler(req: NextApiRequest, res: NextApiResponseServerIO) {\r\n-  if (!res.socket.server.io) {\r\n+  const socketServer = (res.socket as { server: any }).server;\r\n+  if (!socketServer.io) {\r\n     console.log(\"🔌 Initializing Socket.io...\");\r\n \r\n-    const io = new Server(res.socket.server, {\r\n+    const io = new Server(socketServer, {\r\n       path: \"/api/socket\",\r\n       addTrailingSlash: false,\r\n     });\r\n \r\n"
                },
                {
                    "date": 1752231424817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,56 @@\n // pages/api/socket.ts\r\n-import { Server } from \"socket.io\";\r\n+\r\n+import { Server as IOServer } from \"socket.io\";\r\n import { NextApiRequest } from \"next\";\r\n import type { NextApiResponseServerIO } from \"@/types/next\";\r\n \r\n export default function handler(req: NextApiRequest, res: NextApiResponseServerIO) {\r\n-  const socketServer = (res.socket as { server: any }).server;\r\n-  if (!socketServer.io) {\r\n-    console.log(\"🔌 Initializing Socket.io...\");\r\n+  // Ensure Socket.io is attached only once\r\n+  if (!res.socket.server.io) {\r\n+    console.log(\"🔌 Initializing Socket.io server...\");\r\n \r\n-    const io = new Server(socketServer, {\r\n+    const io = new IOServer(res.socket.server, {\r\n       path: \"/api/socket\",\r\n       addTrailingSlash: false,\r\n+      cors: {\r\n+        origin: \"*\", // ⚠️ Replace * with your frontend URL in production for security\r\n+        methods: [\"GET\", \"POST\"],\r\n+      },\r\n     });\r\n \r\n     io.on(\"connection\", (socket) => {\r\n       console.log(\"✅ User connected:\", socket.id);\r\n \r\n+      /**\r\n+       * Handle joining rooms\r\n+       */\r\n       socket.on(\"join-room\", (roomId) => {\r\n         socket.join(roomId);\r\n+        console.log(`📥 User ${socket.id} joined room ${roomId}`);\r\n         socket.to(roomId).emit(\"user-joined\", socket.id);\r\n       });\r\n \r\n+      /**\r\n+       * Handle sending messages\r\n+       */\r\n       socket.on(\"send-message\", ({ roomId, message }) => {\r\n+        console.log(`💬 Message from ${socket.id} to room ${roomId}:`, message);\r\n         socket.to(roomId).emit(\"receive-message\", { message, sender: socket.id });\r\n       });\r\n \r\n+      /**\r\n+       * Handle disconnection\r\n+       */\r\n       socket.on(\"disconnect\", () => {\r\n         console.log(\"❌ User disconnected:\", socket.id);\r\n       });\r\n     });\r\n \r\n+    // Attach to res.socket.server for re-use\r\n     res.socket.server.io = io;\r\n+  } else {\r\n+    console.log(\"⚡ Socket.io server already running.\");\r\n   }\r\n+\r\n   res.end();\r\n }\r\n"
                },
                {
                    "date": 1752231620002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,56 +1,47 @@\n-// pages/api/socket.ts\r\n-\r\n import { Server as IOServer } from \"socket.io\";\r\n import { NextApiRequest } from \"next\";\r\n import type { NextApiResponseServerIO } from \"@/types/next\";\r\n \r\n+export const config = {\r\n+  api: {\r\n+    bodyParser: false,\r\n+  },\r\n+};\r\n+\r\n export default function handler(req: NextApiRequest, res: NextApiResponseServerIO) {\r\n-  // Ensure Socket.io is attached only once\r\n   if (!res.socket.server.io) {\r\n     console.log(\"🔌 Initializing Socket.io server...\");\r\n \r\n-    const io = new IOServer(res.socket.server, {\r\n+    const io = new IOServer(res.socket.server as any, {\r\n       path: \"/api/socket\",\r\n       addTrailingSlash: false,\r\n       cors: {\r\n-        origin: \"*\", // ⚠️ Replace * with your frontend URL in production for security\r\n+        origin: \"*\", // Replace with your frontend URL in production\r\n         methods: [\"GET\", \"POST\"],\r\n       },\r\n     });\r\n \r\n     io.on(\"connection\", (socket) => {\r\n       console.log(\"✅ User connected:\", socket.id);\r\n \r\n-      /**\r\n-       * Handle joining rooms\r\n-       */\r\n       socket.on(\"join-room\", (roomId) => {\r\n         socket.join(roomId);\r\n-        console.log(`📥 User ${socket.id} joined room ${roomId}`);\r\n         socket.to(roomId).emit(\"user-joined\", socket.id);\r\n       });\r\n \r\n-      /**\r\n-       * Handle sending messages\r\n-       */\r\n       socket.on(\"send-message\", ({ roomId, message }) => {\r\n-        console.log(`💬 Message from ${socket.id} to room ${roomId}:`, message);\r\n         socket.to(roomId).emit(\"receive-message\", { message, sender: socket.id });\r\n       });\r\n \r\n-      /**\r\n-       * Handle disconnection\r\n-       */\r\n       socket.on(\"disconnect\", () => {\r\n         console.log(\"❌ User disconnected:\", socket.id);\r\n       });\r\n     });\r\n \r\n-    // Attach to res.socket.server for re-use\r\n     res.socket.server.io = io;\r\n   } else {\r\n     console.log(\"⚡ Socket.io server already running.\");\r\n   }\r\n \r\n-  res.end();\r\n+  return res.status(200).json({ message: \"Socket.io server ready\" });\r\n }\r\n"
                },
                {
                    "date": 1752234993467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     const io = new IOServer(res.socket.server as any, {\r\n       path: \"/api/socket\",\r\n       addTrailingSlash: false,\r\n       cors: {\r\n-        origin: \"*\", // Replace with your frontend URL in production\r\n+        origin: \"https://akku-production.up.railway.app\", // Replace with your frontend URL in production\r\n         methods: [\"GET\", \"POST\"],\r\n       },\r\n     });\r\n \r\n"
                },
                {
                    "date": 1752239945786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     const io = new IOServer(res.socket.server as any, {\r\n       path: \"/api/socket\",\r\n       addTrailingSlash: false,\r\n       cors: {\r\n-        origin: \"https://akku-production.up.railway.app\", // Replace with your frontend URL in production\r\n+        origin: \"https://my-omegle-clone.vercel.app\", // ✅ set to your frontend URL\r\n         methods: [\"GET\", \"POST\"],\r\n       },\r\n     });\r\n \r\n"
                }
            ],
            "date": 1752229843884,
            "name": "Commit-0",
            "content": "// pages/api/socket.ts\r\nimport { Server } from \"socket.io\";\r\nimport { NextApiRequest } from \"next\";\r\nimport { NextApiResponseServerIO } from \"../../types/next\";\r\n\r\nexport default function handler(req: NextApiRequest, res: NextApiResponseServerIO) {\r\n  if (!res.socket.server.io) {\r\n    console.log(\"🔌 Initializing Socket.io...\");\r\n\r\n    const io = new Server(res.socket.server, {\r\n      path: \"/api/socket\",\r\n      addTrailingSlash: false,\r\n    });\r\n\r\n    io.on(\"connection\", (socket) => {\r\n      console.log(\"✅ User connected:\", socket.id);\r\n\r\n      socket.on(\"join-room\", (roomId) => {\r\n        socket.join(roomId);\r\n        socket.to(roomId).emit(\"user-joined\", socket.id);\r\n      });\r\n\r\n      socket.on(\"send-message\", ({ roomId, message }) => {\r\n        socket.to(roomId).emit(\"receive-message\", { message, sender: socket.id });\r\n      });\r\n\r\n      socket.on(\"disconnect\", () => {\r\n        console.log(\"❌ User disconnected:\", socket.id);\r\n      });\r\n    });\r\n\r\n    res.socket.server.io = io;\r\n  }\r\n  res.end();\r\n}\r\n"
        }
    ]
}