{
    "sourceFile": "components/chat/ChatBox.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 24,
            "patches": [
                {
                    "date": 1752230234858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752252229058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,24 +4,38 @@\n import Message from \"./Message\";\r\n \r\n interface ChatBoxProps {\r\n   socket: any;\r\n+  roomId: string;\r\n }\r\n \r\n-export default function ChatBox({ socket }: ChatBoxProps) {\r\n+export default function ChatBox({ socket, roomId }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<{ content: string; sender: string }[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const messagesEndRef = useRef<HTMLDivElement>(null);\r\n \r\n   useEffect(() => {\r\n-    socket?.on(\"message\", (message: string) => {\r\n-      setMessages((prev) => [...prev, { content: message, sender: \"partner\" }]);\r\n-    });\r\n+    if (!socket) return;\r\n+\r\n+    // Listen for incoming messages\r\n+    const handleReceiveMessage = ({ message, sender }: { message: string; sender: string }) => {\r\n+      setMessages((prev) => [...prev, { content: message, sender }]);\r\n+    };\r\n+\r\n+    socket.on(\"receive-message\", handleReceiveMessage);\r\n+\r\n+    return () => {\r\n+      socket.off(\"receive-message\", handleReceiveMessage);\r\n+    };\r\n   }, [socket]);\r\n \r\n   const sendMessage = () => {\r\n     if (!input.trim()) return;\r\n-    socket.emit(\"message\", input);\r\n+\r\n+    // Emit using correct event name\r\n+    socket.emit(\"send-message\", { roomId, message: input });\r\n+\r\n+    // Add to local state immediately\r\n     setMessages((prev) => [...prev, { content: input, sender: \"me\" }]);\r\n     setInput(\"\");\r\n   };\r\n \r\n"
                },
                {
                    "date": 1752252694254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,5 +67,5 @@\n         </button>\r\n       </div>\r\n     </div>\r\n   );\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752253447557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,35 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n+import { v4 as uuidv4 } from \"uuid\";\r\n import Message from \"./Message\";\r\n \r\n interface ChatBoxProps {\r\n   socket: any;\r\n   roomId: string;\r\n }\r\n \r\n+interface ChatMessage {\r\n+  id: string;\r\n+  content: string;\r\n+  sender: \"me\" | \"partner\";\r\n+}\r\n+\r\n export default function ChatBox({ socket, roomId }: ChatBoxProps) {\r\n-  const [messages, setMessages] = useState<{ content: string; sender: string }[]>([]);\r\n+  const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const messagesEndRef = useRef<HTMLDivElement>(null);\r\n \r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n     // Listen for incoming messages\r\n     const handleReceiveMessage = ({ message, sender }: { message: string; sender: string }) => {\r\n-      setMessages((prev) => [...prev, { content: message, sender }]);\r\n+      setMessages((prev) => [\r\n+        ...prev,\r\n+        { id: uuidv4(), content: message, sender: sender === socket.id ? \"me\" : \"partner\" },\r\n+      ]);\r\n     };\r\n \r\n     socket.on(\"receive-message\", handleReceiveMessage);\r\n \r\n@@ -30,13 +40,16 @@\n \r\n   const sendMessage = () => {\r\n     if (!input.trim()) return;\r\n \r\n-    // Emit using correct event name\r\n+    // Emit using correct event name with UUID for reference\r\n     socket.emit(\"send-message\", { roomId, message: input });\r\n \r\n     // Add to local state immediately\r\n-    setMessages((prev) => [...prev, { content: input, sender: \"me\" }]);\r\n+    setMessages((prev) => [\r\n+      ...prev,\r\n+      { id: uuidv4(), content: input, sender: \"me\" },\r\n+    ]);\r\n     setInput(\"\");\r\n   };\r\n \r\n   useEffect(() => {\r\n@@ -45,20 +58,24 @@\n \r\n   return (\r\n     <div className=\"flex flex-col h-full\">\r\n       <div className=\"flex-1 overflow-y-auto p-4 space-y-2\">\r\n-        {messages.map((msg, i) => (\r\n-          <Message key={i} content={msg.content} sender={msg.sender as \"me\" | \"partner\"} />\r\n+        {messages.map((msg) => (\r\n+          <Message key={msg.id} content={msg.content} sender={msg.sender} />\r\n         ))}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n+\r\n       <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 flex\">\r\n         <input\r\n           type=\"text\"\r\n           className=\"flex-1 rounded-l-md px-3 py-2 text-sm focus:outline-none border border-neutral-300 dark:border-neutral-700 dark:bg-neutral-800\"\r\n           value={input}\r\n           onChange={(e) => setInput(e.target.value)}\r\n           placeholder=\"Type a message...\"\r\n+          onKeyDown={(e) => {\r\n+            if (e.key === \"Enter\") sendMessage();\r\n+          }}\r\n         />\r\n         <button\r\n           onClick={sendMessage}\r\n           className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-r-md text-sm transition\"\r\n@@ -67,5 +84,5 @@\n         </button>\r\n       </div>\r\n     </div>\r\n   );\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1752258332388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,13 +22,17 @@\n \r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n-    // Listen for incoming messages\r\n+    // ✅ Listen for incoming messages\r\n     const handleReceiveMessage = ({ message, sender }: { message: string; sender: string }) => {\r\n       setMessages((prev) => [\r\n         ...prev,\r\n-        { id: uuidv4(), content: message, sender: sender === socket.id ? \"me\" : \"partner\" },\r\n+        {\r\n+          id: uuidv4(),\r\n+          content: message,\r\n+          sender: sender === socket.id ? \"me\" : \"partner\",\r\n+        },\r\n       ]);\r\n     };\r\n \r\n     socket.on(\"receive-message\", handleReceiveMessage);\r\n@@ -38,18 +42,20 @@\n     };\r\n   }, [socket]);\r\n \r\n   const sendMessage = () => {\r\n-    if (!input.trim()) return;\r\n+    const trimmed = input.trim();\r\n+    if (!trimmed) return;\r\n \r\n-    // Emit using correct event name with UUID for reference\r\n-    socket.emit(\"send-message\", { roomId, message: input });\r\n+    // ✅ Emit message to server\r\n+    socket.emit(\"send-message\", { roomId, message: trimmed });\r\n \r\n-    // Add to local state immediately\r\n+    // ✅ Add to local state immediately\r\n     setMessages((prev) => [\r\n       ...prev,\r\n-      { id: uuidv4(), content: input, sender: \"me\" },\r\n+      { id: uuidv4(), content: trimmed, sender: \"me\" },\r\n     ]);\r\n+\r\n     setInput(\"\");\r\n   };\r\n \r\n   useEffect(() => {\r\n@@ -57,15 +63,17 @@\n   }, [messages]);\r\n \r\n   return (\r\n     <div className=\"flex flex-col h-full\">\r\n+      {/* Messages */}\r\n       <div className=\"flex-1 overflow-y-auto p-4 space-y-2\">\r\n         {messages.map((msg) => (\r\n           <Message key={msg.id} content={msg.content} sender={msg.sender} />\r\n         ))}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n+      {/* Input */}\r\n       <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 flex\">\r\n         <input\r\n           type=\"text\"\r\n           className=\"flex-1 rounded-l-md px-3 py-2 text-sm focus:outline-none border border-neutral-300 dark:border-neutral-700 dark:bg-neutral-800\"\r\n@@ -77,9 +85,10 @@\n           }}\r\n         />\r\n         <button\r\n           onClick={sendMessage}\r\n-          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-r-md text-sm transition\"\r\n+          disabled={!input.trim()}\r\n+          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-r-md text-sm transition disabled:opacity-50 disabled:cursor-not-allowed\"\r\n         >\r\n           Send\r\n         </button>\r\n       </div>\r\n"
                },
                {
                    "date": 1752315301729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,8 @@\n \r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n-    // ✅ Listen for incoming messages\r\n     const handleReceiveMessage = ({ message, sender }: { message: string; sender: string }) => {\r\n       setMessages((prev) => [\r\n         ...prev,\r\n         {\r\n@@ -45,12 +44,10 @@\n   const sendMessage = () => {\r\n     const trimmed = input.trim();\r\n     if (!trimmed) return;\r\n \r\n-    // ✅ Emit message to server\r\n     socket.emit(\"send-message\", { roomId, message: trimmed });\r\n \r\n-    // ✅ Add to local state immediately\r\n     setMessages((prev) => [\r\n       ...prev,\r\n       { id: uuidv4(), content: trimmed, sender: \"me\" },\r\n     ]);\r\n@@ -62,22 +59,33 @@\n     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n   }, [messages]);\r\n \r\n   return (\r\n-    <div className=\"flex flex-col h-full\">\r\n+    <div className=\"flex flex-col h-full bg-neutral-50 dark:bg-neutral-800\">\r\n       {/* Messages */}\r\n-      <div className=\"flex-1 overflow-y-auto p-4 space-y-2\">\r\n-        {messages.map((msg) => (\r\n-          <Message key={msg.id} content={msg.content} sender={msg.sender} />\r\n-        ))}\r\n+      <div className=\"flex-1 overflow-y-auto p-4 space-y-2 custom-scrollbar\">\r\n+        <div className=\"space-y-3\">\r\n+          {messages.map((msg) => (\r\n+            <div\r\n+              key={msg.id}\r\n+              className={`max-w-xs md:max-w-sm break-words px-4 py-2 rounded-lg ${\r\n+                msg.sender === \"me\"\r\n+                  ? \"bg-blue-600 text-white self-end ml-auto\"\r\n+                  : \"bg-neutral-200 dark:bg-neutral-700 text-neutral-800 dark:text-neutral-200 self-start mr-auto\"\r\n+              }`}\r\n+            >\r\n+              {msg.content}\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n       {/* Input */}\r\n       <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 flex\">\r\n         <input\r\n           type=\"text\"\r\n-          className=\"flex-1 rounded-l-md px-3 py-2 text-sm focus:outline-none border border-neutral-300 dark:border-neutral-700 dark:bg-neutral-800\"\r\n+          className=\"flex-1 rounded-l-md px-3 py-2 text-sm focus:outline-none border border-neutral-300 dark:border-neutral-700 dark:bg-neutral-700 text-neutral-900 dark:text-white\"\r\n           value={input}\r\n           onChange={(e) => setInput(e.target.value)}\r\n           placeholder=\"Type a message...\"\r\n           onKeyDown={(e) => {\r\n"
                },
                {
                    "date": 1752319591864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n-import Message from \"./Message\";\r\n \r\n interface ChatBoxProps {\r\n   socket: any;\r\n   roomId: string;\r\n@@ -59,29 +58,27 @@\n     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n   }, [messages]);\r\n \r\n   return (\r\n-    <div className=\"flex flex-col h-full bg-neutral-50 dark:bg-neutral-800\">\r\n-      {/* Messages */}\r\n-      <div className=\"flex-1 overflow-y-auto p-4 space-y-2 custom-scrollbar\">\r\n-        <div className=\"space-y-3\">\r\n-          {messages.map((msg) => (\r\n-            <div\r\n-              key={msg.id}\r\n-              className={`max-w-xs md:max-w-sm break-words px-4 py-2 rounded-lg ${\r\n-                msg.sender === \"me\"\r\n-                  ? \"bg-blue-600 text-white self-end ml-auto\"\r\n-                  : \"bg-neutral-200 dark:bg-neutral-700 text-neutral-800 dark:text-neutral-200 self-start mr-auto\"\r\n-              }`}\r\n-            >\r\n-              {msg.content}\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n+    <div className=\"flex flex-col h-full max-h-full bg-neutral-50 dark:bg-neutral-800\">\r\n+      {/* Chat Message List with Scroll */}\r\n+      <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-2 custom-scrollbar\">\r\n+        {messages.map((msg) => (\r\n+          <div\r\n+            key={msg.id}\r\n+            className={`max-w-xs md:max-w-sm break-words px-4 py-2 rounded-lg ${\r\n+              msg.sender === \"me\"\r\n+                ? \"bg-blue-600 text-white self-end ml-auto\"\r\n+                : \"bg-neutral-200 dark:bg-neutral-700 text-neutral-800 dark:text-neutral-200 self-start mr-auto\"\r\n+            }`}\r\n+          >\r\n+            {msg.content}\r\n+          </div>\r\n+        ))}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n-      {/* Input */}\r\n+      {/* Input Field */}\r\n       <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 flex\">\r\n         <input\r\n           type=\"text\"\r\n           className=\"flex-1 rounded-l-md px-3 py-2 text-sm focus:outline-none border border-neutral-300 dark:border-neutral-700 dark:bg-neutral-700 text-neutral-900 dark:text-white\"\r\n"
                },
                {
                    "date": 1752319997164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n+import Message from \"./Message\"; // <-- Import message component\r\n \r\n interface ChatBoxProps {\r\n   socket: any;\r\n   roomId: string;\r\n@@ -11,8 +12,9 @@\n interface ChatMessage {\r\n   id: string;\r\n   content: string;\r\n   sender: \"me\" | \"partner\";\r\n+  timestamp: string;\r\n }\r\n \r\n export default function ChatBox({ socket, roomId }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n@@ -28,8 +30,9 @@\n         {\r\n           id: uuidv4(),\r\n           content: message,\r\n           sender: sender === socket.id ? \"me\" : \"partner\",\r\n+          timestamp: new Date().toISOString(),\r\n         },\r\n       ]);\r\n     };\r\n \r\n@@ -47,9 +50,14 @@\n     socket.emit(\"send-message\", { roomId, message: trimmed });\r\n \r\n     setMessages((prev) => [\r\n       ...prev,\r\n-      { id: uuidv4(), content: trimmed, sender: \"me\" },\r\n+      {\r\n+        id: uuidv4(),\r\n+        content: trimmed,\r\n+        sender: \"me\",\r\n+        timestamp: new Date().toISOString(),\r\n+      },\r\n     ]);\r\n \r\n     setInput(\"\");\r\n   };\r\n@@ -60,20 +68,16 @@\n \r\n   return (\r\n     <div className=\"flex flex-col h-full max-h-full bg-neutral-50 dark:bg-neutral-800\">\r\n       {/* Chat Message List with Scroll */}\r\n-      <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-2 custom-scrollbar\">\r\n+      <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-3 custom-scrollbar\">\r\n         {messages.map((msg) => (\r\n-          <div\r\n+          <Message\r\n             key={msg.id}\r\n-            className={`max-w-xs md:max-w-sm break-words px-4 py-2 rounded-lg ${\r\n-              msg.sender === \"me\"\r\n-                ? \"bg-blue-600 text-white self-end ml-auto\"\r\n-                : \"bg-neutral-200 dark:bg-neutral-700 text-neutral-800 dark:text-neutral-200 self-start mr-auto\"\r\n-            }`}\r\n-          >\r\n-            {msg.content}\r\n-          </div>\r\n+            content={msg.content}\r\n+            sender={msg.sender}\r\n+            timestamp={msg.timestamp}\r\n+          />\r\n         ))}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n"
                },
                {
                    "date": 1752320034442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n-import Message from \"./Message\"; // <-- Import message component\r\n+import Message from \"./Message\";\r\n+import TypingIndicator from \"./TypingIndicator\"; // new component\r\n \r\n interface ChatBoxProps {\r\n   socket: any;\r\n   roomId: string;\r\n@@ -18,8 +19,9 @@\n \r\n export default function ChatBox({ socket, roomId }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n+  const [partnerTyping, setPartnerTyping] = useState(false);\r\n   const messagesEndRef = useRef<HTMLDivElement>(null);\r\n \r\n   useEffect(() => {\r\n     if (!socket) return;\r\n@@ -33,14 +35,25 @@\n           sender: sender === socket.id ? \"me\" : \"partner\",\r\n           timestamp: new Date().toISOString(),\r\n         },\r\n       ]);\r\n+      setPartnerTyping(false); // stop typing when message received\r\n     };\r\n \r\n+    const handleTyping = ({ sender }: { sender: string }) => {\r\n+      if (sender !== socket.id) {\r\n+        setPartnerTyping(true);\r\n+        // auto-stop typing after 3 seconds if no further event\r\n+        setTimeout(() => setPartnerTyping(false), 3000);\r\n+      }\r\n+    };\r\n+\r\n     socket.on(\"receive-message\", handleReceiveMessage);\r\n+    socket.on(\"typing\", handleTyping);\r\n \r\n     return () => {\r\n       socket.off(\"receive-message\", handleReceiveMessage);\r\n+      socket.off(\"typing\", handleTyping);\r\n     };\r\n   }, [socket]);\r\n \r\n   const sendMessage = () => {\r\n@@ -61,15 +74,19 @@\n \r\n     setInput(\"\");\r\n   };\r\n \r\n+  const handleTyping = () => {\r\n+    socket?.emit(\"typing\", { roomId, sender: socket.id });\r\n+  };\r\n+\r\n   useEffect(() => {\r\n     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n-  }, [messages]);\r\n+  }, [messages, partnerTyping]);\r\n \r\n   return (\r\n     <div className=\"flex flex-col h-full max-h-full bg-neutral-50 dark:bg-neutral-800\">\r\n-      {/* Chat Message List with Scroll */}\r\n+      {/* Chat Message List */}\r\n       <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-3 custom-scrollbar\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n@@ -77,8 +94,11 @@\n             sender={msg.sender}\r\n             timestamp={msg.timestamp}\r\n           />\r\n         ))}\r\n+\r\n+        {/* Typing indicator */}\r\n+        {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n       {/* Input Field */}\r\n@@ -86,9 +106,12 @@\n         <input\r\n           type=\"text\"\r\n           className=\"flex-1 rounded-l-md px-3 py-2 text-sm focus:outline-none border border-neutral-300 dark:border-neutral-700 dark:bg-neutral-700 text-neutral-900 dark:text-white\"\r\n           value={input}\r\n-          onChange={(e) => setInput(e.target.value)}\r\n+          onChange={(e) => {\r\n+            setInput(e.target.value);\r\n+            handleTyping();\r\n+          }}\r\n           placeholder=\"Type a message...\"\r\n           onKeyDown={(e) => {\r\n             if (e.key === \"Enter\") sendMessage();\r\n           }}\r\n"
                },
                {
                    "date": 1752320219726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,12 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n+import Picker from \"@emoji-mart/react\";\r\n+import data from \"@emoji-mart/data\";\r\n import Message from \"./Message\";\r\n-import TypingIndicator from \"./TypingIndicator\"; // new component\r\n+import TypingIndicator from \"./TypingIndicator\";\r\n \r\n interface ChatBoxProps {\r\n   socket: any;\r\n   roomId: string;\r\n@@ -14,96 +16,136 @@\n   id: string;\r\n   content: string;\r\n   sender: \"me\" | \"partner\";\r\n   timestamp: string;\r\n+  status?: \"sent\" | \"delivered\" | \"seen\";\r\n }\r\n \r\n export default function ChatBox({ socket, roomId }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [partnerTyping, setPartnerTyping] = useState(false);\r\n+  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n   const messagesEndRef = useRef<HTMLDivElement>(null);\r\n \r\n+  // Scroll to bottom on new messages\r\n   useEffect(() => {\r\n+    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n+  }, [messages, partnerTyping]);\r\n+\r\n+  useEffect(() => {\r\n     if (!socket) return;\r\n \r\n     const handleReceiveMessage = ({ message, sender }: { message: string; sender: string }) => {\r\n-      setMessages((prev) => [\r\n-        ...prev,\r\n-        {\r\n-          id: uuidv4(),\r\n-          content: message,\r\n-          sender: sender === socket.id ? \"me\" : \"partner\",\r\n-          timestamp: new Date().toISOString(),\r\n-        },\r\n-      ]);\r\n-      setPartnerTyping(false); // stop typing when message received\r\n+      const newMsg: ChatMessage = {\r\n+        id: uuidv4(),\r\n+        content: message,\r\n+        sender: sender === socket.id ? \"me\" : \"partner\",\r\n+        timestamp: new Date().toISOString(),\r\n+        status: \"seen\",\r\n+      };\r\n+      setMessages((prev) => [...prev, newMsg]);\r\n+\r\n+      // Notify sender that the message was seen\r\n+      socket.emit(\"message-status\", {\r\n+        roomId,\r\n+        messageId: newMsg.id,\r\n+        status: \"seen\",\r\n+      });\r\n+\r\n+      setPartnerTyping(false);\r\n     };\r\n \r\n     const handleTyping = ({ sender }: { sender: string }) => {\r\n       if (sender !== socket.id) {\r\n         setPartnerTyping(true);\r\n-        // auto-stop typing after 3 seconds if no further event\r\n         setTimeout(() => setPartnerTyping(false), 3000);\r\n       }\r\n     };\r\n \r\n+    const handleStatusUpdate = ({ messageId, status }: { messageId: string; status: ChatMessage[\"status\"] }) => {\r\n+      setMessages((prev) =>\r\n+        prev.map((msg) => (msg.id === messageId ? { ...msg, status } : msg))\r\n+      );\r\n+    };\r\n+\r\n     socket.on(\"receive-message\", handleReceiveMessage);\r\n     socket.on(\"typing\", handleTyping);\r\n+    socket.on(\"message-status-update\", handleStatusUpdate);\r\n \r\n     return () => {\r\n       socket.off(\"receive-message\", handleReceiveMessage);\r\n       socket.off(\"typing\", handleTyping);\r\n+      socket.off(\"message-status-update\", handleStatusUpdate);\r\n     };\r\n-  }, [socket]);\r\n+  }, [socket, roomId]);\r\n \r\n   const sendMessage = () => {\r\n     const trimmed = input.trim();\r\n     if (!trimmed) return;\r\n \r\n-    socket.emit(\"send-message\", { roomId, message: trimmed });\r\n+    const messageId = uuidv4();\r\n+    socket.emit(\"send-message\", { roomId, message: trimmed, messageId });\r\n \r\n     setMessages((prev) => [\r\n       ...prev,\r\n       {\r\n-        id: uuidv4(),\r\n+        id: messageId,\r\n         content: trimmed,\r\n         sender: \"me\",\r\n         timestamp: new Date().toISOString(),\r\n+        status: \"sent\",\r\n       },\r\n     ]);\r\n \r\n     setInput(\"\");\r\n+    setShowEmojiPicker(false);\r\n   };\r\n \r\n   const handleTyping = () => {\r\n-    socket?.emit(\"typing\", { roomId, sender: socket.id });\r\n+    socket.emit(\"typing\", { roomId, sender: socket.id });\r\n   };\r\n \r\n-  useEffect(() => {\r\n-    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n-  }, [messages, partnerTyping]);\r\n-\r\n   return (\r\n     <div className=\"flex flex-col h-full max-h-full bg-neutral-50 dark:bg-neutral-800\">\r\n-      {/* Chat Message List */}\r\n+      {/* Message List */}\r\n       <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-3 custom-scrollbar\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             content={msg.content}\r\n             sender={msg.sender}\r\n             timestamp={msg.timestamp}\r\n+            status={msg.status}\r\n           />\r\n         ))}\r\n \r\n-        {/* Typing indicator */}\r\n         {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n-      {/* Input Field */}\r\n-      <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 flex\">\r\n+      {/* Input Area */}\r\n+      <div className=\"relative p-4 border-t border-neutral-300 dark:border-neutral-700 flex items-center\">\r\n+        <button\r\n+          onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n+          className=\"text-xl px-2\"\r\n+          type=\"button\"\r\n+        >\r\n+          😊\r\n+        </button>\r\n+\r\n+        {showEmojiPicker && (\r\n+          <div className=\"absolute bottom-14 left-0 z-50\">\r\n+            <Picker\r\n+              data={data}\r\n+              onEmojiSelect={(emoji: any) =>\r\n+                setInput((prev) => prev + emoji.native)\r\n+              }\r\n+              theme=\"auto\"\r\n+            />\r\n+          </div>\r\n+        )}\r\n+\r\n         <input\r\n           type=\"text\"\r\n           className=\"flex-1 rounded-l-md px-3 py-2 text-sm focus:outline-none border border-neutral-300 dark:border-neutral-700 dark:bg-neutral-700 text-neutral-900 dark:text-white\"\r\n           value={input}\r\n"
                },
                {
                    "date": 1752320342240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,36 +17,38 @@\n   content: string;\r\n   sender: \"me\" | \"partner\";\r\n   timestamp: string;\r\n   status?: \"sent\" | \"delivered\" | \"seen\";\r\n+  type?: \"text\" | \"audio\" | \"video\";\r\n }\r\n \r\n export default function ChatBox({ socket, roomId }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [partnerTyping, setPartnerTyping] = useState(false);\r\n   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n+  const [mediaURL, setMediaURL] = useState<string | null>(null);\r\n   const messagesEndRef = useRef<HTMLDivElement>(null);\r\n \r\n-  // Scroll to bottom on new messages\r\n   useEffect(() => {\r\n     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n   }, [messages, partnerTyping]);\r\n \r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n-    const handleReceiveMessage = ({ message, sender }: { message: string; sender: string }) => {\r\n+    const handleReceiveMessage = ({ message, sender, type = \"text\" }: any) => {\r\n       const newMsg: ChatMessage = {\r\n         id: uuidv4(),\r\n         content: message,\r\n         sender: sender === socket.id ? \"me\" : \"partner\",\r\n         timestamp: new Date().toISOString(),\r\n         status: \"seen\",\r\n+        type,\r\n       };\r\n+\r\n       setMessages((prev) => [...prev, newMsg]);\r\n \r\n-      // Notify sender that the message was seen\r\n       socket.emit(\"message-status\", {\r\n         roomId,\r\n         messageId: newMsg.id,\r\n         status: \"seen\",\r\n@@ -54,18 +56,20 @@\n \r\n       setPartnerTyping(false);\r\n     };\r\n \r\n-    const handleTyping = ({ sender }: { sender: string }) => {\r\n+    const handleTyping = ({ sender }: any) => {\r\n       if (sender !== socket.id) {\r\n         setPartnerTyping(true);\r\n         setTimeout(() => setPartnerTyping(false), 3000);\r\n       }\r\n     };\r\n \r\n-    const handleStatusUpdate = ({ messageId, status }: { messageId: string; status: ChatMessage[\"status\"] }) => {\r\n+    const handleStatusUpdate = ({ messageId, status }: any) => {\r\n       setMessages((prev) =>\r\n-        prev.map((msg) => (msg.id === messageId ? { ...msg, status } : msg))\r\n+        prev.map((msg) =>\r\n+          msg.id === messageId ? { ...msg, status } : msg\r\n+        )\r\n       );\r\n     };\r\n \r\n     socket.on(\"receive-message\", handleReceiveMessage);\r\n@@ -78,91 +82,104 @@\n       socket.off(\"message-status-update\", handleStatusUpdate);\r\n     };\r\n   }, [socket, roomId]);\r\n \r\n-  const sendMessage = () => {\r\n-    const trimmed = input.trim();\r\n-    if (!trimmed) return;\r\n+  const sendMessage = (type: \"text\" | \"audio\" | \"video\" = \"text\") => {\r\n+    if (!input.trim() && type === \"text\") return;\r\n \r\n     const messageId = uuidv4();\r\n-    socket.emit(\"send-message\", { roomId, message: trimmed, messageId });\r\n+    const payload = {\r\n+      roomId,\r\n+      message: type === \"text\" ? input.trim() : mediaURL,\r\n+      messageId,\r\n+      type,\r\n+    };\r\n \r\n+    socket.emit(\"send-message\", payload);\r\n+\r\n     setMessages((prev) => [\r\n       ...prev,\r\n       {\r\n         id: messageId,\r\n-        content: trimmed,\r\n+        content: payload.message,\r\n         sender: \"me\",\r\n         timestamp: new Date().toISOString(),\r\n         status: \"sent\",\r\n+        type,\r\n       },\r\n     ]);\r\n \r\n-    setInput(\"\");\r\n+    if (type === \"text\") setInput(\"\");\r\n+    if (type !== \"text\") setMediaURL(null);\r\n+    setPartnerTyping(false);\r\n     setShowEmojiPicker(false);\r\n   };\r\n \r\n   const handleTyping = () => {\r\n     socket.emit(\"typing\", { roomId, sender: socket.id });\r\n   };\r\n \r\n+  const handleMediaUpload = (e: React.ChangeEvent<HTMLInputElement>, type: \"audio\" | \"video\") => {\r\n+    const file = e.target.files?.[0];\r\n+    if (!file) return;\r\n+\r\n+    const url = URL.createObjectURL(file);\r\n+    setMediaURL(url);\r\n+    sendMessage(type);\r\n+  };\r\n+\r\n   return (\r\n     <div className=\"flex flex-col h-full max-h-full bg-neutral-50 dark:bg-neutral-800\">\r\n-      {/* Message List */}\r\n       <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-3 custom-scrollbar\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             content={msg.content}\r\n             sender={msg.sender}\r\n             timestamp={msg.timestamp}\r\n             status={msg.status}\r\n+            type={msg.type}\r\n           />\r\n         ))}\r\n-\r\n         {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n-      {/* Input Area */}\r\n-      <div className=\"relative p-4 border-t border-neutral-300 dark:border-neutral-700 flex items-center\">\r\n-        <button\r\n-          onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n-          className=\"text-xl px-2\"\r\n-          type=\"button\"\r\n-        >\r\n-          😊\r\n-        </button>\r\n+      {/* Input */}\r\n+      <div className=\"relative p-4 border-t border-neutral-300 dark:border-neutral-700 flex items-center gap-2\">\r\n+        <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-xl\">😊</button>\r\n \r\n         {showEmojiPicker && (\r\n           <div className=\"absolute bottom-14 left-0 z-50\">\r\n-            <Picker\r\n-              data={data}\r\n-              onEmojiSelect={(emoji: any) =>\r\n-                setInput((prev) => prev + emoji.native)\r\n-              }\r\n-              theme=\"auto\"\r\n-            />\r\n+            <Picker data={data} onEmojiSelect={(e: any) => setInput((p) => p + e.native)} theme=\"auto\" />\r\n           </div>\r\n         )}\r\n \r\n         <input\r\n           type=\"text\"\r\n-          className=\"flex-1 rounded-l-md px-3 py-2 text-sm focus:outline-none border border-neutral-300 dark:border-neutral-700 dark:bg-neutral-700 text-neutral-900 dark:text-white\"\r\n+          className=\"flex-1 rounded-md px-3 py-2 text-sm border border-neutral-300 dark:border-neutral-700 dark:bg-neutral-700 text-neutral-900 dark:text-white\"\r\n+          placeholder=\"Type a message...\"\r\n           value={input}\r\n           onChange={(e) => {\r\n             setInput(e.target.value);\r\n             handleTyping();\r\n           }}\r\n-          placeholder=\"Type a message...\"\r\n-          onKeyDown={(e) => {\r\n-            if (e.key === \"Enter\") sendMessage();\r\n-          }}\r\n+          onKeyDown={(e) => e.key === \"Enter\" && sendMessage(\"text\")}\r\n         />\r\n+\r\n+        <label className=\"cursor-pointer text-xs text-blue-600 hover:underline\">\r\n+          🎤\r\n+          <input type=\"file\" accept=\"audio/*\" hidden onChange={(e) => handleMediaUpload(e, \"audio\")} />\r\n+        </label>\r\n+        <label className=\"cursor-pointer text-xs text-blue-600 hover:underline\">\r\n+          📹\r\n+          <input type=\"file\" accept=\"video/*\" hidden onChange={(e) => handleMediaUpload(e, \"video\")} />\r\n+        </label>\r\n+\r\n         <button\r\n-          onClick={sendMessage}\r\n+          onClick={() => sendMessage(\"text\")}\r\n           disabled={!input.trim()}\r\n-          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-r-md text-sm transition disabled:opacity-50 disabled:cursor-not-allowed\"\r\n+          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm disabled:opacity-50\"\r\n         >\r\n           Send\r\n         </button>\r\n       </div>\r\n"
                },
                {
                    "date": 1752320499605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n+import debounce from \"lodash.debounce\";\r\n import Picker from \"@emoji-mart/react\";\r\n import data from \"@emoji-mart/data\";\r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n@@ -11,23 +12,13 @@\n   socket: any;\r\n   roomId: string;\r\n }\r\n \r\n-interface ChatMessage {\r\n-  id: string;\r\n-  content: string;\r\n-  sender: \"me\" | \"partner\";\r\n-  timestamp: string;\r\n-  status?: \"sent\" | \"delivered\" | \"seen\";\r\n-  type?: \"text\" | \"audio\" | \"video\";\r\n-}\r\n-\r\n export default function ChatBox({ socket, roomId }: ChatBoxProps) {\r\n-  const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n+  const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n+  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n   const [partnerTyping, setPartnerTyping] = useState(false);\r\n-  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n-  const [mediaURL, setMediaURL] = useState<string | null>(null);\r\n   const messagesEndRef = useRef<HTMLDivElement>(null);\r\n \r\n   useEffect(() => {\r\n     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n@@ -35,151 +26,131 @@\n \r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n-    const handleReceiveMessage = ({ message, sender, type = \"text\" }: any) => {\r\n-      const newMsg: ChatMessage = {\r\n-        id: uuidv4(),\r\n-        content: message,\r\n-        sender: sender === socket.id ? \"me\" : \"partner\",\r\n-        timestamp: new Date().toISOString(),\r\n-        status: \"seen\",\r\n-        type,\r\n-      };\r\n-\r\n-      setMessages((prev) => [...prev, newMsg]);\r\n-\r\n-      socket.emit(\"message-status\", {\r\n-        roomId,\r\n-        messageId: newMsg.id,\r\n-        status: \"seen\",\r\n-      });\r\n-\r\n+    const onMessage = (msg: any) => {\r\n+      setMessages(prev => [...prev, msg]);\r\n+      socket.emit(\"message-status\", { roomId, messageId: msg.id, status: \"seen\" });\r\n       setPartnerTyping(false);\r\n     };\r\n \r\n-    const handleTyping = ({ sender }: any) => {\r\n+    const onTyping = ({ sender }: any) => {\r\n       if (sender !== socket.id) {\r\n         setPartnerTyping(true);\r\n         setTimeout(() => setPartnerTyping(false), 3000);\r\n       }\r\n     };\r\n \r\n-    const handleStatusUpdate = ({ messageId, status }: any) => {\r\n-      setMessages((prev) =>\r\n-        prev.map((msg) =>\r\n-          msg.id === messageId ? { ...msg, status } : msg\r\n-        )\r\n-      );\r\n+    const onStatus = ({ messageId, status }: any) => {\r\n+      setMessages(prev => prev.map(m => m.id === messageId ? { ...m, status } : m));\r\n     };\r\n \r\n-    socket.on(\"receive-message\", handleReceiveMessage);\r\n-    socket.on(\"typing\", handleTyping);\r\n-    socket.on(\"message-status-update\", handleStatusUpdate);\r\n+    const onDelete = ({ messageId }: any) => {\r\n+      setMessages(prev => prev.filter(m => m.id !== messageId));\r\n+    };\r\n \r\n+    const onReact = ({ messageId, reaction, user }: any) => {\r\n+      setMessages(prev => prev.map(m =>\r\n+        m.id === messageId\r\n+          ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n+          : m\r\n+      ));\r\n+    };\r\n+\r\n+    socket.on(\"receive-message\", onMessage);\r\n+    socket.on(\"typing\", onTyping);\r\n+    socket.on(\"message-status-update\", onStatus);\r\n+    socket.on(\"message-deleted\", onDelete);\r\n+    socket.on(\"message-react\", onReact);\r\n+\r\n     return () => {\r\n-      socket.off(\"receive-message\", handleReceiveMessage);\r\n-      socket.off(\"typing\", handleTyping);\r\n-      socket.off(\"message-status-update\", handleStatusUpdate);\r\n+      socket.off(\"receive-message\", onMessage);\r\n+      socket.off(\"typing\", onTyping);\r\n+      socket.off(\"message-status-update\", onStatus);\r\n+      socket.off(\"message-deleted\", onDelete);\r\n+      socket.off(\"message-react\", onReact);\r\n     };\r\n   }, [socket, roomId]);\r\n \r\n-  const sendMessage = (type: \"text\" | \"audio\" | \"video\" = \"text\") => {\r\n-    if (!input.trim() && type === \"text\") return;\r\n+  const debouncedTyping = useRef(debounce(() => {\r\n+    socket.emit(\"typing\", { roomId, sender: socket.id });\r\n+  }, 300)).current;\r\n \r\n-    const messageId = uuidv4();\r\n-    const payload = {\r\n-      roomId,\r\n-      message: type === \"text\" ? input.trim() : mediaURL,\r\n-      messageId,\r\n-      type,\r\n+  const sendMessage = (payload: any) => {\r\n+    const msg = {\r\n+      ...payload,\r\n+      id: uuidv4(),\r\n+      sender: \"me\",\r\n+      timestamp: new Date().toISOString(),\r\n+      status: \"sent\",\r\n+      reactions: {}\r\n     };\r\n-\r\n-    socket.emit(\"send-message\", payload);\r\n-\r\n-    setMessages((prev) => [\r\n-      ...prev,\r\n-      {\r\n-        id: messageId,\r\n-        content: payload.message,\r\n-        sender: \"me\",\r\n-        timestamp: new Date().toISOString(),\r\n-        status: \"sent\",\r\n-        type,\r\n-      },\r\n-    ]);\r\n-\r\n-    if (type === \"text\") setInput(\"\");\r\n-    if (type !== \"text\") setMediaURL(null);\r\n+    socket.emit(\"send-message\", msg);\r\n+    setMessages(prev => [...prev, msg]);\r\n+    setInput(\"\");\r\n+    setShowEmojiPicker(false);\r\n     setPartnerTyping(false);\r\n-    setShowEmojiPicker(false);\r\n   };\r\n \r\n-  const handleTyping = () => {\r\n-    socket.emit(\"typing\", { roomId, sender: socket.id });\r\n+  const sendText = () => {\r\n+    if (!input.trim()) return;\r\n+    sendMessage({ content: input.trim(), type: \"text\", roomId });\r\n   };\r\n \r\n-  const handleMediaUpload = (e: React.ChangeEvent<HTMLInputElement>, type: \"audio\" | \"video\") => {\r\n-    const file = e.target.files?.[0];\r\n-    if (!file) return;\r\n-\r\n-    const url = URL.createObjectURL(file);\r\n-    setMediaURL(url);\r\n-    sendMessage(type);\r\n+  const handleFile = (e: any, type: string) => {\r\n+    const f = e.target.files?.[0];\r\n+    if (!f) return;\r\n+    const url = URL.createObjectURL(f);\r\n+    sendMessage({ content: url, roomId, type });\r\n   };\r\n \r\n   return (\r\n-    <div className=\"flex flex-col h-full max-h-full bg-neutral-50 dark:bg-neutral-800\">\r\n-      <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-3 custom-scrollbar\">\r\n-        {messages.map((msg) => (\r\n+    <div className=\"flex flex-col h-full bg-neutral-50 dark:bg-neutral-800\">\r\n+      <div className=\"flex-1 overflow-y-auto p-4 space-y-4 custom-scrollbar\">\r\n+        {messages.map(msg => (\r\n           <Message\r\n             key={msg.id}\r\n-            content={msg.content}\r\n-            sender={msg.sender}\r\n-            timestamp={msg.timestamp}\r\n-            status={msg.status}\r\n-            type={msg.type}\r\n+            {...msg}\r\n+            onDelete={() => socket.emit(\"delete-message\", { roomId, messageId: msg.id })}\r\n+            onEdit={(newContent: string) => socket.emit(\"edit-message\", { roomId, messageId: msg.id, content: newContent })}\r\n+            onReact={(reaction: string) => socket.emit(\"react-message\", { roomId, messageId: msg.id, reaction, user: socket.id })}\r\n           />\r\n         ))}\r\n         {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n-      {/* Input */}\r\n       <div className=\"relative p-4 border-t border-neutral-300 dark:border-neutral-700 flex items-center gap-2\">\r\n-        <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-xl\">😊</button>\r\n-\r\n+        <button onClick={() => setShowEmojiPicker(prev => !prev)} className=\"text-xl\">😊</button>\r\n         {showEmojiPicker && (\r\n           <div className=\"absolute bottom-14 left-0 z-50\">\r\n-            <Picker data={data} onEmojiSelect={(e: any) => setInput((p) => p + e.native)} theme=\"auto\" />\r\n+            <Picker data={data} onEmojiSelect={(e: any) => setInput(prev => prev + e.native)} />\r\n           </div>\r\n         )}\r\n \r\n         <input\r\n           type=\"text\"\r\n-          className=\"flex-1 rounded-md px-3 py-2 text-sm border border-neutral-300 dark:border-neutral-700 dark:bg-neutral-700 text-neutral-900 dark:text-white\"\r\n+          className=\"flex-1 rounded-md px-3 py-2 border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-700\"\r\n           placeholder=\"Type a message...\"\r\n           value={input}\r\n-          onChange={(e) => {\r\n-            setInput(e.target.value);\r\n-            handleTyping();\r\n-          }}\r\n-          onKeyDown={(e) => e.key === \"Enter\" && sendMessage(\"text\")}\r\n+          onChange={e => { setInput(e.target.value); debouncedTyping(); }}\r\n+          onKeyDown={e => e.key === \"Enter\" && sendText()}\r\n         />\r\n \r\n-        <label className=\"cursor-pointer text-xs text-blue-600 hover:underline\">\r\n-          🎤\r\n-          <input type=\"file\" accept=\"audio/*\" hidden onChange={(e) => handleMediaUpload(e, \"audio\")} />\r\n+        <label className=\"cursor-pointer\">📎\r\n+          <input type=\"file\" accept=\"image/*\" hidden onChange={e => handleFile(e, \"image\")} />\r\n         </label>\r\n-        <label className=\"cursor-pointer text-xs text-blue-600 hover:underline\">\r\n-          📹\r\n-          <input type=\"file\" accept=\"video/*\" hidden onChange={(e) => handleMediaUpload(e, \"video\")} />\r\n+        <label className=\"cursor-pointer\">🎤\r\n+          <input type=\"file\" accept=\"audio/*\" hidden onChange={e => handleFile(e, \"audio\")} />\r\n         </label>\r\n+        <label className=\"cursor-pointer\">📹\r\n+          <input type=\"file\" accept=\"video/*\" hidden onChange={e => handleFile(e, \"video\")} />\r\n+        </label>\r\n \r\n         <button\r\n-          onClick={() => sendMessage(\"text\")}\r\n+          onClick={sendText}\r\n           disabled={!input.trim()}\r\n-          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm disabled:opacity-50\"\r\n+          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md disabled:opacity-50\"\r\n         >\r\n           Send\r\n         </button>\r\n       </div>\r\n"
                },
                {
                    "date": 1752320804724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n-import debounce from \"lodash.debounce\";\r\n+import debounce from \"lodash/debounce\";\r\n import Picker from \"@emoji-mart/react\";\r\n import data from \"@emoji-mart/data\";\r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n"
                },
                {
                    "date": 1752320988053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n-import debounce from \"lodash/debounce\";\r\n+const debounce = require('lodash/debounce');\r\n import Picker from \"@emoji-mart/react\";\r\n import data from \"@emoji-mart/data\";\r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n"
                },
                {
                    "date": 1752324068295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n const debounce = require('lodash/debounce');\r\n-import Picker from \"@emoji-mart/react\";\r\n+import Picker from \"emoji-mart\";\r\n import data from \"@emoji-mart/data\";\r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n \r\n"
                },
                {
                    "date": 1752324162532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n const debounce = require('lodash/debounce');\r\n-import Picker from \"emoji-mart\";\r\n+import { Picker } from \"emoji-mart\";\r\n import data from \"@emoji-mart/data\";\r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n \r\n"
                },
                {
                    "date": 1752324324743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n const debounce = require('lodash/debounce');\r\n-import { Picker } from \"emoji-mart\";\r\n+import { Picker } from \"emoji-mart\"; // ✅ CORRECT\r\n import data from \"@emoji-mart/data\";\r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n \r\n"
                },
                {
                    "date": 1752325055314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,11 @@\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n const debounce = require('lodash/debounce');\r\n-import { Picker } from \"emoji-mart\"; // ✅ CORRECT\r\n+import * as EmojiMart from \"emoji-mart\";\r\n import data from \"@emoji-mart/data\";\r\n+\r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n \r\n interface ChatBoxProps {\r\n"
                },
                {
                    "date": 1752325453448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n const debounce = require('lodash/debounce');\r\n-import * as EmojiMart from \"emoji-mart\";\r\n+import dynamic from \"next/dynamic\";\r\n import data from \"@emoji-mart/data\";\r\n \r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n"
                },
                {
                    "date": 1752325591600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,9 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n-const debounce = require('lodash/debounce');\r\n-import dynamic from \"next/dynamic\";\r\n-import data from \"@emoji-mart/data\";\r\n+const debounce = require(\"lodash/debounce\");\r\n \r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n \r\n@@ -13,8 +11,10 @@\n   socket: any;\r\n   roomId: string;\r\n }\r\n \r\n+const topEmojis = [\"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\", \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"];\r\n+\r\n export default function ChatBox({ socket, roomId }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n@@ -28,9 +28,9 @@\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n     const onMessage = (msg: any) => {\r\n-      setMessages(prev => [...prev, msg]);\r\n+      setMessages((prev) => [...prev, msg]);\r\n       socket.emit(\"message-status\", { roomId, messageId: msg.id, status: \"seen\" });\r\n       setPartnerTyping(false);\r\n     };\r\n \r\n@@ -41,21 +41,19 @@\n       }\r\n     };\r\n \r\n     const onStatus = ({ messageId, status }: any) => {\r\n-      setMessages(prev => prev.map(m => m.id === messageId ? { ...m, status } : m));\r\n+      setMessages((prev) => prev.map((m) => (m.id === messageId ? { ...m, status } : m)));\r\n     };\r\n \r\n     const onDelete = ({ messageId }: any) => {\r\n-      setMessages(prev => prev.filter(m => m.id !== messageId));\r\n+      setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n     };\r\n \r\n     const onReact = ({ messageId, reaction, user }: any) => {\r\n-      setMessages(prev => prev.map(m =>\r\n-        m.id === messageId\r\n-          ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n-          : m\r\n-      ));\r\n+      setMessages((prev) =>\r\n+        prev.map((m) => (m.id === messageId ? { ...m, reactions: { ...m.reactions, [user]: reaction } } : m))\r\n+      );\r\n     };\r\n \r\n     socket.on(\"receive-message\", onMessage);\r\n     socket.on(\"typing\", onTyping);\r\n@@ -71,23 +69,25 @@\n       socket.off(\"message-react\", onReact);\r\n     };\r\n   }, [socket, roomId]);\r\n \r\n-  const debouncedTyping = useRef(debounce(() => {\r\n-    socket.emit(\"typing\", { roomId, sender: socket.id });\r\n-  }, 300)).current;\r\n+  const debouncedTyping = useRef(\r\n+    debounce(() => {\r\n+      socket.emit(\"typing\", { roomId, sender: socket.id });\r\n+    }, 300)\r\n+  ).current;\r\n \r\n   const sendMessage = (payload: any) => {\r\n     const msg = {\r\n       ...payload,\r\n       id: uuidv4(),\r\n       sender: \"me\",\r\n       timestamp: new Date().toISOString(),\r\n       status: \"sent\",\r\n-      reactions: {}\r\n+      reactions: {},\r\n     };\r\n     socket.emit(\"send-message\", msg);\r\n-    setMessages(prev => [...prev, msg]);\r\n+    setMessages((prev) => [...prev, msg]);\r\n     setInput(\"\");\r\n     setShowEmojiPicker(false);\r\n     setPartnerTyping(false);\r\n   };\r\n@@ -106,46 +106,63 @@\n \r\n   return (\r\n     <div className=\"flex flex-col h-full bg-neutral-50 dark:bg-neutral-800\">\r\n       <div className=\"flex-1 overflow-y-auto p-4 space-y-4 custom-scrollbar\">\r\n-        {messages.map(msg => (\r\n+        {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n             onDelete={() => socket.emit(\"delete-message\", { roomId, messageId: msg.id })}\r\n-            onEdit={(newContent: string) => socket.emit(\"edit-message\", { roomId, messageId: msg.id, content: newContent })}\r\n-            onReact={(reaction: string) => socket.emit(\"react-message\", { roomId, messageId: msg.id, reaction, user: socket.id })}\r\n+            onEdit={(newContent: string) =>\r\n+              socket.emit(\"edit-message\", { roomId, messageId: msg.id, content: newContent })\r\n+            }\r\n+            onReact={(reaction: string) =>\r\n+              socket.emit(\"react-message\", { roomId, messageId: msg.id, reaction, user: socket.id })\r\n+            }\r\n           />\r\n         ))}\r\n         {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n       <div className=\"relative p-4 border-t border-neutral-300 dark:border-neutral-700 flex items-center gap-2\">\r\n-        <button onClick={() => setShowEmojiPicker(prev => !prev)} className=\"text-xl\">😊</button>\r\n+        <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-xl\">\r\n+          😊\r\n+        </button>\r\n         {showEmojiPicker && (\r\n-          <div className=\"absolute bottom-14 left-0 z-50\">\r\n-            <Picker data={data} onEmojiSelect={(e: any) => setInput(prev => prev + e.native)} />\r\n+          <div className=\"absolute bottom-14 left-0 z-50 bg-white dark:bg-neutral-800 p-2 rounded shadow-md grid grid-cols-5 gap-2\">\r\n+            {topEmojis.map((emoji) => (\r\n+              <button\r\n+                key={emoji}\r\n+                onClick={() => setInput((prev) => prev + emoji)}\r\n+                className=\"text-2xl hover:scale-110 transition-transform\"\r\n+              >\r\n+                {emoji}\r\n+              </button>\r\n+            ))}\r\n           </div>\r\n         )}\r\n \r\n         <input\r\n           type=\"text\"\r\n           className=\"flex-1 rounded-md px-3 py-2 border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-700\"\r\n           placeholder=\"Type a message...\"\r\n           value={input}\r\n-          onChange={e => { setInput(e.target.value); debouncedTyping(); }}\r\n-          onKeyDown={e => e.key === \"Enter\" && sendText()}\r\n+          onChange={(e) => {\r\n+            setInput(e.target.value);\r\n+            debouncedTyping();\r\n+          }}\r\n+          onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n         />\r\n \r\n         <label className=\"cursor-pointer\">📎\r\n-          <input type=\"file\" accept=\"image/*\" hidden onChange={e => handleFile(e, \"image\")} />\r\n+          <input type=\"file\" accept=\"image/*\" hidden onChange={(e) => handleFile(e, \"image\")} />\r\n         </label>\r\n         <label className=\"cursor-pointer\">🎤\r\n-          <input type=\"file\" accept=\"audio/*\" hidden onChange={e => handleFile(e, \"audio\")} />\r\n+          <input type=\"file\" accept=\"audio/*\" hidden onChange={(e) => handleFile(e, \"audio\")} />\r\n         </label>\r\n         <label className=\"cursor-pointer\">📹\r\n-          <input type=\"file\" accept=\"video/*\" hidden onChange={e => handleFile(e, \"video\")} />\r\n+          <input type=\"file\" accept=\"video/*\" hidden onChange={(e) => handleFile(e, \"video\")} />\r\n         </label>\r\n \r\n         <button\r\n           onClick={sendText}\r\n"
                },
                {
                    "date": 1752334580072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,35 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n+import { Users, CircleStop, RefreshCcw } from \"lucide-react\";\r\n const debounce = require(\"lodash/debounce\");\r\n \r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n \r\n interface ChatBoxProps {\r\n   socket: any;\r\n   roomId: string;\r\n+  onStart: () => void;\r\n+  onStop: () => void;\r\n+  onSkip: () => void;\r\n+  sessionStarted: boolean;\r\n+  loading: boolean;\r\n }\r\n \r\n const topEmojis = [\"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\", \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"];\r\n \r\n-export default function ChatBox({ socket, roomId }: ChatBoxProps) {\r\n+export default function ChatBox({\r\n+  socket,\r\n+  roomId,\r\n+  onStart,\r\n+  onStop,\r\n+  onSkip,\r\n+  sessionStarted,\r\n+  loading,\r\n+}: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n   const [partnerTyping, setPartnerTyping] = useState(false);\r\n@@ -123,12 +137,12 @@\n         {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n-      <div className=\"relative p-4 border-t border-neutral-300 dark:border-neutral-700 flex items-center gap-2\">\r\n-        <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-xl\">\r\n-          😊\r\n-        </button>\r\n+      {/* Input + Buttons */}\r\n+      <div className=\"relative p-4 border-t border-neutral-300 dark:border-neutral-700 flex flex-wrap gap-2 items-center\">\r\n+        <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-xl\">😊</button>\r\n+\r\n         {showEmojiPicker && (\r\n           <div className=\"absolute bottom-14 left-0 z-50 bg-white dark:bg-neutral-800 p-2 rounded shadow-md grid grid-cols-5 gap-2\">\r\n             {topEmojis.map((emoji) => (\r\n               <button\r\n@@ -170,8 +184,35 @@\n           className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md disabled:opacity-50\"\r\n         >\r\n           Send\r\n         </button>\r\n+\r\n+        {/* Dynamic Controls */}\r\n+        {!sessionStarted ? (\r\n+          <button\r\n+            onClick={onStart}\r\n+            className=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n+          >\r\n+            <Users className=\"w-4 h-4\" />\r\n+            Start\r\n+          </button>\r\n+        ) : loading ? (\r\n+          <button\r\n+            onClick={onStop}\r\n+            className=\"bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n+          >\r\n+            <CircleStop className=\"w-4 h-4\" />\r\n+            Stop\r\n+          </button>\r\n+        ) : (\r\n+          <button\r\n+            onClick={onSkip}\r\n+            className=\"bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n+          >\r\n+            <RefreshCcw className=\"w-4 h-4\" />\r\n+            Skip\r\n+          </button>\r\n+        )}\r\n       </div>\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1752335195112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,82 +137,87 @@\n         {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n-      {/* Input + Buttons */}\r\n-      <div className=\"relative p-4 border-t border-neutral-300 dark:border-neutral-700 flex flex-wrap gap-2 items-center\">\r\n-        <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-xl\">😊</button>\r\n+      {/* Input + Buttons Section */}\r\n+      <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 space-y-2\">\r\n+        {/* Row 1: Send + Controls */}\r\n+        <div className=\"flex gap-2 flex-wrap\">\r\n+          <button\r\n+            onClick={sendText}\r\n+            disabled={!input.trim()}\r\n+            className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md disabled:opacity-50\"\r\n+          >\r\n+            Send\r\n+          </button>\r\n \r\n-        {showEmojiPicker && (\r\n-          <div className=\"absolute bottom-14 left-0 z-50 bg-white dark:bg-neutral-800 p-2 rounded shadow-md grid grid-cols-5 gap-2\">\r\n-            {topEmojis.map((emoji) => (\r\n-              <button\r\n-                key={emoji}\r\n-                onClick={() => setInput((prev) => prev + emoji)}\r\n-                className=\"text-2xl hover:scale-110 transition-transform\"\r\n-              >\r\n-                {emoji}\r\n-              </button>\r\n-            ))}\r\n-          </div>\r\n-        )}\r\n+          {!sessionStarted ? (\r\n+            <button\r\n+              onClick={onStart}\r\n+              className=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n+            >\r\n+              <Users className=\"w-4 h-4\" />\r\n+              Start\r\n+            </button>\r\n+          ) : loading ? (\r\n+            <button\r\n+              onClick={onStop}\r\n+              className=\"bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n+            >\r\n+              <CircleStop className=\"w-4 h-4\" />\r\n+              Stop\r\n+            </button>\r\n+          ) : (\r\n+            <button\r\n+              onClick={onSkip}\r\n+              className=\"bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n+            >\r\n+              <RefreshCcw className=\"w-4 h-4\" />\r\n+              Skip\r\n+            </button>\r\n+          )}\r\n+        </div>\r\n \r\n-        <input\r\n-          type=\"text\"\r\n-          className=\"flex-1 rounded-md px-3 py-2 border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-700\"\r\n-          placeholder=\"Type a message...\"\r\n-          value={input}\r\n-          onChange={(e) => {\r\n-            setInput(e.target.value);\r\n-            debouncedTyping();\r\n-          }}\r\n-          onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n-        />\r\n+        {/* Row 2: Input + Emoji + File Controls */}\r\n+        <div className=\"relative flex flex-wrap gap-2 items-center\">\r\n+          <input\r\n+            type=\"text\"\r\n+            className=\"flex-1 rounded-md px-3 py-2 border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-700\"\r\n+            placeholder=\"Type a message...\"\r\n+            value={input}\r\n+            onChange={(e) => {\r\n+              setInput(e.target.value);\r\n+              debouncedTyping();\r\n+            }}\r\n+            onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n+          />\r\n \r\n-        <label className=\"cursor-pointer\">📎\r\n-          <input type=\"file\" accept=\"image/*\" hidden onChange={(e) => handleFile(e, \"image\")} />\r\n-        </label>\r\n-        <label className=\"cursor-pointer\">🎤\r\n-          <input type=\"file\" accept=\"audio/*\" hidden onChange={(e) => handleFile(e, \"audio\")} />\r\n-        </label>\r\n-        <label className=\"cursor-pointer\">📹\r\n-          <input type=\"file\" accept=\"video/*\" hidden onChange={(e) => handleFile(e, \"video\")} />\r\n-        </label>\r\n+          <label className=\"cursor-pointer\">📎\r\n+            <input type=\"file\" accept=\"image/*\" hidden onChange={(e) => handleFile(e, \"image\")} />\r\n+          </label>\r\n+          <label className=\"cursor-pointer\">🎤\r\n+            <input type=\"file\" accept=\"audio/*\" hidden onChange={(e) => handleFile(e, \"audio\")} />\r\n+          </label>\r\n+          <label className=\"cursor-pointer\">📹\r\n+            <input type=\"file\" accept=\"video/*\" hidden onChange={(e) => handleFile(e, \"video\")} />\r\n+          </label>\r\n \r\n-        <button\r\n-          onClick={sendText}\r\n-          disabled={!input.trim()}\r\n-          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md disabled:opacity-50\"\r\n-        >\r\n-          Send\r\n-        </button>\r\n+          <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-xl\">😊</button>\r\n \r\n-        {/* Dynamic Controls */}\r\n-        {!sessionStarted ? (\r\n-          <button\r\n-            onClick={onStart}\r\n-            className=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n-          >\r\n-            <Users className=\"w-4 h-4\" />\r\n-            Start\r\n-          </button>\r\n-        ) : loading ? (\r\n-          <button\r\n-            onClick={onStop}\r\n-            className=\"bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n-          >\r\n-            <CircleStop className=\"w-4 h-4\" />\r\n-            Stop\r\n-          </button>\r\n-        ) : (\r\n-          <button\r\n-            onClick={onSkip}\r\n-            className=\"bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n-          >\r\n-            <RefreshCcw className=\"w-4 h-4\" />\r\n-            Skip\r\n-          </button>\r\n-        )}\r\n+          {showEmojiPicker && (\r\n+            <div className=\"absolute bottom-14 right-0 z-50 bg-white dark:bg-neutral-800 p-2 rounded shadow-md grid grid-cols-5 gap-2\">\r\n+              {topEmojis.map((emoji) => (\r\n+                <button\r\n+                  key={emoji}\r\n+                  onClick={() => setInput((prev) => prev + emoji)}\r\n+                  className=\"text-2xl hover:scale-110 transition-transform\"\r\n+                >\r\n+                  {emoji}\r\n+                </button>\r\n+              ))}\r\n+            </div>\r\n+          )}\r\n+        </div>\r\n       </div>\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1752335439547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,8 +119,9 @@\n   };\r\n \r\n   return (\r\n     <div className=\"flex flex-col h-full bg-neutral-50 dark:bg-neutral-800\">\r\n+      {/* Messages */}\r\n       <div className=\"flex-1 overflow-y-auto p-4 space-y-4 custom-scrollbar\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n@@ -137,12 +138,12 @@\n         {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n-      {/* Input + Buttons Section */}\r\n-      <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 space-y-2\">\r\n-        {/* Row 1: Send + Controls */}\r\n-        <div className=\"flex gap-2 flex-wrap\">\r\n+      {/* Input Area */}\r\n+      <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 bg-white dark:bg-neutral-800\">\r\n+        {/* Row 1: Buttons */}\r\n+        <div className=\"flex flex-wrap gap-2 mb-2\">\r\n           <button\r\n             onClick={sendText}\r\n             disabled={!input.trim()}\r\n             className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md disabled:opacity-50\"\r\n@@ -176,9 +177,9 @@\n             </button>\r\n           )}\r\n         </div>\r\n \r\n-        {/* Row 2: Input + Emoji + File Controls */}\r\n+        {/* Row 2: Text input + Attachments */}\r\n         <div className=\"relative flex flex-wrap gap-2 items-center\">\r\n           <input\r\n             type=\"text\"\r\n             className=\"flex-1 rounded-md px-3 py-2 border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-700\"\r\n@@ -203,9 +204,9 @@\n \r\n           <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-xl\">😊</button>\r\n \r\n           {showEmojiPicker && (\r\n-            <div className=\"absolute bottom-14 right-0 z-50 bg-white dark:bg-neutral-800 p-2 rounded shadow-md grid grid-cols-5 gap-2\">\r\n+            <div className=\"absolute bottom-full right-0 mb-2 z-50 bg-white dark:bg-neutral-800 p-2 rounded shadow-md grid grid-cols-5 gap-2\">\r\n               {topEmojis.map((emoji) => (\r\n                 <button\r\n                   key={emoji}\r\n                   onClick={() => setInput((prev) => prev + emoji)}\r\n"
                },
                {
                    "date": 1752335630000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,21 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n-import { Users, CircleStop, RefreshCcw } from \"lucide-react\";\r\n const debounce = require(\"lodash/debounce\");\r\n \r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n \r\n interface ChatBoxProps {\r\n   socket: any;\r\n   roomId: string;\r\n-  onStart: () => void;\r\n-  onStop: () => void;\r\n-  onSkip: () => void;\r\n-  sessionStarted: boolean;\r\n-  loading: boolean;\r\n }\r\n \r\n const topEmojis = [\"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\", \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"];\r\n \r\n-export default function ChatBox({\r\n-  socket,\r\n-  roomId,\r\n-  onStart,\r\n-  onStop,\r\n-  onSkip,\r\n-  sessionStarted,\r\n-  loading,\r\n-}: ChatBoxProps) {\r\n+export default function ChatBox({ socket, roomId }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n   const [partnerTyping, setPartnerTyping] = useState(false);\r\n@@ -119,9 +105,8 @@\n   };\r\n \r\n   return (\r\n     <div className=\"flex flex-col h-full bg-neutral-50 dark:bg-neutral-800\">\r\n-      {/* Messages */}\r\n       <div className=\"flex-1 overflow-y-auto p-4 space-y-4 custom-scrollbar\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n@@ -138,87 +123,55 @@\n         {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n-      {/* Input Area */}\r\n-      <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 bg-white dark:bg-neutral-800\">\r\n-        {/* Row 1: Buttons */}\r\n-        <div className=\"flex flex-wrap gap-2 mb-2\">\r\n-          <button\r\n-            onClick={sendText}\r\n-            disabled={!input.trim()}\r\n-            className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md disabled:opacity-50\"\r\n-          >\r\n-            Send\r\n-          </button>\r\n+      <div className=\"relative p-4 border-t border-neutral-300 dark:border-neutral-700 flex items-center gap-2\">\r\n+        <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-xl\">\r\n+          😊\r\n+        </button>\r\n+        {showEmojiPicker && (\r\n+          <div className=\"absolute bottom-14 left-0 z-50 bg-white dark:bg-neutral-800 p-2 rounded shadow-md grid grid-cols-5 gap-2\">\r\n+            {topEmojis.map((emoji) => (\r\n+              <button\r\n+                key={emoji}\r\n+                onClick={() => setInput((prev) => prev + emoji)}\r\n+                className=\"text-2xl hover:scale-110 transition-transform\"\r\n+              >\r\n+                {emoji}\r\n+              </button>\r\n+            ))}\r\n+          </div>\r\n+        )}\r\n \r\n-          {!sessionStarted ? (\r\n-            <button\r\n-              onClick={onStart}\r\n-              className=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n-            >\r\n-              <Users className=\"w-4 h-4\" />\r\n-              Start\r\n-            </button>\r\n-          ) : loading ? (\r\n-            <button\r\n-              onClick={onStop}\r\n-              className=\"bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n-            >\r\n-              <CircleStop className=\"w-4 h-4\" />\r\n-              Stop\r\n-            </button>\r\n-          ) : (\r\n-            <button\r\n-              onClick={onSkip}\r\n-              className=\"bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n-            >\r\n-              <RefreshCcw className=\"w-4 h-4\" />\r\n-              Skip\r\n-            </button>\r\n-          )}\r\n-        </div>\r\n+        <input\r\n+          type=\"text\"\r\n+          className=\"flex-1 rounded-md px-3 py-2 border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-700\"\r\n+          placeholder=\"Type a message...\"\r\n+          value={input}\r\n+          onChange={(e) => {\r\n+            setInput(e.target.value);\r\n+            debouncedTyping();\r\n+          }}\r\n+          onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n+        />\r\n \r\n-        {/* Row 2: Text input + Attachments */}\r\n-        <div className=\"relative flex flex-wrap gap-2 items-center\">\r\n-          <input\r\n-            type=\"text\"\r\n-            className=\"flex-1 rounded-md px-3 py-2 border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-700\"\r\n-            placeholder=\"Type a message...\"\r\n-            value={input}\r\n-            onChange={(e) => {\r\n-              setInput(e.target.value);\r\n-              debouncedTyping();\r\n-            }}\r\n-            onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n-          />\r\n+        <label className=\"cursor-pointer\">📎\r\n+          <input type=\"file\" accept=\"image/*\" hidden onChange={(e) => handleFile(e, \"image\")} />\r\n+        </label>\r\n+        <label className=\"cursor-pointer\">🎤\r\n+          <input type=\"file\" accept=\"audio/*\" hidden onChange={(e) => handleFile(e, \"audio\")} />\r\n+        </label>\r\n+        <label className=\"cursor-pointer\">📹\r\n+          <input type=\"file\" accept=\"video/*\" hidden onChange={(e) => handleFile(e, \"video\")} />\r\n+        </label>\r\n \r\n-          <label className=\"cursor-pointer\">📎\r\n-            <input type=\"file\" accept=\"image/*\" hidden onChange={(e) => handleFile(e, \"image\")} />\r\n-          </label>\r\n-          <label className=\"cursor-pointer\">🎤\r\n-            <input type=\"file\" accept=\"audio/*\" hidden onChange={(e) => handleFile(e, \"audio\")} />\r\n-          </label>\r\n-          <label className=\"cursor-pointer\">📹\r\n-            <input type=\"file\" accept=\"video/*\" hidden onChange={(e) => handleFile(e, \"video\")} />\r\n-          </label>\r\n-\r\n-          <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-xl\">😊</button>\r\n-\r\n-          {showEmojiPicker && (\r\n-            <div className=\"absolute bottom-full right-0 mb-2 z-50 bg-white dark:bg-neutral-800 p-2 rounded shadow-md grid grid-cols-5 gap-2\">\r\n-              {topEmojis.map((emoji) => (\r\n-                <button\r\n-                  key={emoji}\r\n-                  onClick={() => setInput((prev) => prev + emoji)}\r\n-                  className=\"text-2xl hover:scale-110 transition-transform\"\r\n-                >\r\n-                  {emoji}\r\n-                </button>\r\n-              ))}\r\n-            </div>\r\n-          )}\r\n-        </div>\r\n+        <button\r\n+          onClick={sendText}\r\n+          disabled={!input.trim()}\r\n+          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md disabled:opacity-50\"\r\n+        >\r\n+          Send\r\n+        </button>\r\n       </div>\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1752337921924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,11 @@\n     };\r\n \r\n     const onReact = ({ messageId, reaction, user }: any) => {\r\n       setMessages((prev) =>\r\n-        prev.map((m) => (m.id === messageId ? { ...m, reactions: { ...m.reactions, [user]: reaction } } : m))\r\n+        prev.map((m) =>\r\n+          m.id === messageId ? { ...m, reactions: { ...m.reactions, [user]: reaction } } : m\r\n+        )\r\n       );\r\n     };\r\n \r\n     socket.on(\"receive-message\", onMessage);\r\n@@ -79,9 +81,9 @@\n   const sendMessage = (payload: any) => {\r\n     const msg = {\r\n       ...payload,\r\n       id: uuidv4(),\r\n-      sender: \"me\",\r\n+      sender: socket.id,\r\n       timestamp: new Date().toISOString(),\r\n       status: \"sent\",\r\n       reactions: {},\r\n     };\r\n@@ -96,22 +98,24 @@\n     if (!input.trim()) return;\r\n     sendMessage({ content: input.trim(), type: \"text\", roomId });\r\n   };\r\n \r\n-  const handleFile = (e: any, type: string) => {\r\n+  const handleFile = (e: React.ChangeEvent<HTMLInputElement>, type: string) => {\r\n     const f = e.target.files?.[0];\r\n     if (!f) return;\r\n     const url = URL.createObjectURL(f);\r\n     sendMessage({ content: url, roomId, type });\r\n   };\r\n \r\n   return (\r\n     <div className=\"flex flex-col h-full bg-neutral-50 dark:bg-neutral-800\">\r\n+      {/* Chat Messages */}\r\n       <div className=\"flex-1 overflow-y-auto p-4 space-y-4 custom-scrollbar\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n+            sender={msg.sender === socket.id ? \"me\" : \"partner\"}\r\n             onDelete={() => socket.emit(\"delete-message\", { roomId, messageId: msg.id })}\r\n             onEdit={(newContent: string) =>\r\n               socket.emit(\"edit-message\", { roomId, messageId: msg.id, content: newContent })\r\n             }\r\n@@ -123,48 +127,64 @@\n         {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n+      {/* Input Controls */}\r\n       <div className=\"relative p-4 border-t border-neutral-300 dark:border-neutral-700 flex items-center gap-2\">\r\n-        <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-xl\">\r\n+        {/* Emoji Toggle */}\r\n+        <button\r\n+          onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n+          className=\"text-xl\"\r\n+          aria-label=\"Toggle emoji picker\"\r\n+        >\r\n           😊\r\n         </button>\r\n+\r\n+        {/* Emoji Picker */}\r\n         {showEmojiPicker && (\r\n-          <div className=\"absolute bottom-14 left-0 z-50 bg-white dark:bg-neutral-800 p-2 rounded shadow-md grid grid-cols-5 gap-2\">\r\n+          <div className=\"absolute bottom-14 left-0 z-50 bg-white dark:bg-neutral-800 p-2 rounded shadow-md grid grid-cols-5 gap-2 max-h-60 overflow-y-auto\">\r\n             {topEmojis.map((emoji) => (\r\n               <button\r\n                 key={emoji}\r\n                 onClick={() => setInput((prev) => prev + emoji)}\r\n                 className=\"text-2xl hover:scale-110 transition-transform\"\r\n+                aria-label={`Insert emoji ${emoji}`}\r\n               >\r\n                 {emoji}\r\n               </button>\r\n             ))}\r\n           </div>\r\n         )}\r\n \r\n+        {/* Text Input */}\r\n         <input\r\n           type=\"text\"\r\n           className=\"flex-1 rounded-md px-3 py-2 border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-700\"\r\n           placeholder=\"Type a message...\"\r\n           value={input}\r\n+          aria-label=\"Message input\"\r\n           onChange={(e) => {\r\n             setInput(e.target.value);\r\n             debouncedTyping();\r\n           }}\r\n           onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n         />\r\n \r\n-        <label className=\"cursor-pointer\">📎\r\n+        {/* Attachments */}\r\n+        <label className=\"cursor-pointer\" title=\"Send Image\">\r\n+          📎\r\n           <input type=\"file\" accept=\"image/*\" hidden onChange={(e) => handleFile(e, \"image\")} />\r\n         </label>\r\n-        <label className=\"cursor-pointer\">🎤\r\n+        <label className=\"cursor-pointer\" title=\"Send Audio\">\r\n+          🎤\r\n           <input type=\"file\" accept=\"audio/*\" hidden onChange={(e) => handleFile(e, \"audio\")} />\r\n         </label>\r\n-        <label className=\"cursor-pointer\">📹\r\n+        <label className=\"cursor-pointer\" title=\"Send Video\">\r\n+          📹\r\n           <input type=\"file\" accept=\"video/*\" hidden onChange={(e) => handleFile(e, \"video\")} />\r\n         </label>\r\n \r\n+        {/* Send Button */}\r\n         <button\r\n           onClick={sendText}\r\n           disabled={!input.trim()}\r\n           className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md disabled:opacity-50\"\r\n"
                }
            ],
            "date": 1752230234858,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport Message from \"./Message\";\r\n\r\ninterface ChatBoxProps {\r\n  socket: any;\r\n}\r\n\r\nexport default function ChatBox({ socket }: ChatBoxProps) {\r\n  const [messages, setMessages] = useState<{ content: string; sender: string }[]>([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    socket?.on(\"message\", (message: string) => {\r\n      setMessages((prev) => [...prev, { content: message, sender: \"partner\" }]);\r\n    });\r\n  }, [socket]);\r\n\r\n  const sendMessage = () => {\r\n    if (!input.trim()) return;\r\n    socket.emit(\"message\", input);\r\n    setMessages((prev) => [...prev, { content: input, sender: \"me\" }]);\r\n    setInput(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-full\">\r\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-2\">\r\n        {messages.map((msg, i) => (\r\n          <Message key={i} content={msg.content} sender={msg.sender as \"me\" | \"partner\"} />\r\n        ))}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 flex\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"flex-1 rounded-l-md px-3 py-2 text-sm focus:outline-none border border-neutral-300 dark:border-neutral-700 dark:bg-neutral-800\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type a message...\"\r\n        />\r\n        <button\r\n          onClick={sendMessage}\r\n          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-r-md text-sm transition\"\r\n        >\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}