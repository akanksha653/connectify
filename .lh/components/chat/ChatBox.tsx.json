{
    "sourceFile": "components/chat/ChatBox.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 75,
            "patches": [
                {
                    "date": 1752230234858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752252229058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,24 +4,38 @@\n import Message from \"./Message\";\r\n \r\n interface ChatBoxProps {\r\n   socket: any;\r\n+  roomId: string;\r\n }\r\n \r\n-export default function ChatBox({ socket }: ChatBoxProps) {\r\n+export default function ChatBox({ socket, roomId }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<{ content: string; sender: string }[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const messagesEndRef = useRef<HTMLDivElement>(null);\r\n \r\n   useEffect(() => {\r\n-    socket?.on(\"message\", (message: string) => {\r\n-      setMessages((prev) => [...prev, { content: message, sender: \"partner\" }]);\r\n-    });\r\n+    if (!socket) return;\r\n+\r\n+    // Listen for incoming messages\r\n+    const handleReceiveMessage = ({ message, sender }: { message: string; sender: string }) => {\r\n+      setMessages((prev) => [...prev, { content: message, sender }]);\r\n+    };\r\n+\r\n+    socket.on(\"receive-message\", handleReceiveMessage);\r\n+\r\n+    return () => {\r\n+      socket.off(\"receive-message\", handleReceiveMessage);\r\n+    };\r\n   }, [socket]);\r\n \r\n   const sendMessage = () => {\r\n     if (!input.trim()) return;\r\n-    socket.emit(\"message\", input);\r\n+\r\n+    // Emit using correct event name\r\n+    socket.emit(\"send-message\", { roomId, message: input });\r\n+\r\n+    // Add to local state immediately\r\n     setMessages((prev) => [...prev, { content: input, sender: \"me\" }]);\r\n     setInput(\"\");\r\n   };\r\n \r\n"
                },
                {
                    "date": 1752252694254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,5 +67,5 @@\n         </button>\r\n       </div>\r\n     </div>\r\n   );\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752253447557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,35 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n+import { v4 as uuidv4 } from \"uuid\";\r\n import Message from \"./Message\";\r\n \r\n interface ChatBoxProps {\r\n   socket: any;\r\n   roomId: string;\r\n }\r\n \r\n+interface ChatMessage {\r\n+  id: string;\r\n+  content: string;\r\n+  sender: \"me\" | \"partner\";\r\n+}\r\n+\r\n export default function ChatBox({ socket, roomId }: ChatBoxProps) {\r\n-  const [messages, setMessages] = useState<{ content: string; sender: string }[]>([]);\r\n+  const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const messagesEndRef = useRef<HTMLDivElement>(null);\r\n \r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n     // Listen for incoming messages\r\n     const handleReceiveMessage = ({ message, sender }: { message: string; sender: string }) => {\r\n-      setMessages((prev) => [...prev, { content: message, sender }]);\r\n+      setMessages((prev) => [\r\n+        ...prev,\r\n+        { id: uuidv4(), content: message, sender: sender === socket.id ? \"me\" : \"partner\" },\r\n+      ]);\r\n     };\r\n \r\n     socket.on(\"receive-message\", handleReceiveMessage);\r\n \r\n@@ -30,13 +40,16 @@\n \r\n   const sendMessage = () => {\r\n     if (!input.trim()) return;\r\n \r\n-    // Emit using correct event name\r\n+    // Emit using correct event name with UUID for reference\r\n     socket.emit(\"send-message\", { roomId, message: input });\r\n \r\n     // Add to local state immediately\r\n-    setMessages((prev) => [...prev, { content: input, sender: \"me\" }]);\r\n+    setMessages((prev) => [\r\n+      ...prev,\r\n+      { id: uuidv4(), content: input, sender: \"me\" },\r\n+    ]);\r\n     setInput(\"\");\r\n   };\r\n \r\n   useEffect(() => {\r\n@@ -45,20 +58,24 @@\n \r\n   return (\r\n     <div className=\"flex flex-col h-full\">\r\n       <div className=\"flex-1 overflow-y-auto p-4 space-y-2\">\r\n-        {messages.map((msg, i) => (\r\n-          <Message key={i} content={msg.content} sender={msg.sender as \"me\" | \"partner\"} />\r\n+        {messages.map((msg) => (\r\n+          <Message key={msg.id} content={msg.content} sender={msg.sender} />\r\n         ))}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n+\r\n       <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 flex\">\r\n         <input\r\n           type=\"text\"\r\n           className=\"flex-1 rounded-l-md px-3 py-2 text-sm focus:outline-none border border-neutral-300 dark:border-neutral-700 dark:bg-neutral-800\"\r\n           value={input}\r\n           onChange={(e) => setInput(e.target.value)}\r\n           placeholder=\"Type a message...\"\r\n+          onKeyDown={(e) => {\r\n+            if (e.key === \"Enter\") sendMessage();\r\n+          }}\r\n         />\r\n         <button\r\n           onClick={sendMessage}\r\n           className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-r-md text-sm transition\"\r\n@@ -67,5 +84,5 @@\n         </button>\r\n       </div>\r\n     </div>\r\n   );\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1752258332388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,13 +22,17 @@\n \r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n-    // Listen for incoming messages\r\n+    // ✅ Listen for incoming messages\r\n     const handleReceiveMessage = ({ message, sender }: { message: string; sender: string }) => {\r\n       setMessages((prev) => [\r\n         ...prev,\r\n-        { id: uuidv4(), content: message, sender: sender === socket.id ? \"me\" : \"partner\" },\r\n+        {\r\n+          id: uuidv4(),\r\n+          content: message,\r\n+          sender: sender === socket.id ? \"me\" : \"partner\",\r\n+        },\r\n       ]);\r\n     };\r\n \r\n     socket.on(\"receive-message\", handleReceiveMessage);\r\n@@ -38,18 +42,20 @@\n     };\r\n   }, [socket]);\r\n \r\n   const sendMessage = () => {\r\n-    if (!input.trim()) return;\r\n+    const trimmed = input.trim();\r\n+    if (!trimmed) return;\r\n \r\n-    // Emit using correct event name with UUID for reference\r\n-    socket.emit(\"send-message\", { roomId, message: input });\r\n+    // ✅ Emit message to server\r\n+    socket.emit(\"send-message\", { roomId, message: trimmed });\r\n \r\n-    // Add to local state immediately\r\n+    // ✅ Add to local state immediately\r\n     setMessages((prev) => [\r\n       ...prev,\r\n-      { id: uuidv4(), content: input, sender: \"me\" },\r\n+      { id: uuidv4(), content: trimmed, sender: \"me\" },\r\n     ]);\r\n+\r\n     setInput(\"\");\r\n   };\r\n \r\n   useEffect(() => {\r\n@@ -57,15 +63,17 @@\n   }, [messages]);\r\n \r\n   return (\r\n     <div className=\"flex flex-col h-full\">\r\n+      {/* Messages */}\r\n       <div className=\"flex-1 overflow-y-auto p-4 space-y-2\">\r\n         {messages.map((msg) => (\r\n           <Message key={msg.id} content={msg.content} sender={msg.sender} />\r\n         ))}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n+      {/* Input */}\r\n       <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 flex\">\r\n         <input\r\n           type=\"text\"\r\n           className=\"flex-1 rounded-l-md px-3 py-2 text-sm focus:outline-none border border-neutral-300 dark:border-neutral-700 dark:bg-neutral-800\"\r\n@@ -77,9 +85,10 @@\n           }}\r\n         />\r\n         <button\r\n           onClick={sendMessage}\r\n-          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-r-md text-sm transition\"\r\n+          disabled={!input.trim()}\r\n+          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-r-md text-sm transition disabled:opacity-50 disabled:cursor-not-allowed\"\r\n         >\r\n           Send\r\n         </button>\r\n       </div>\r\n"
                },
                {
                    "date": 1752315301729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,8 @@\n \r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n-    // ✅ Listen for incoming messages\r\n     const handleReceiveMessage = ({ message, sender }: { message: string; sender: string }) => {\r\n       setMessages((prev) => [\r\n         ...prev,\r\n         {\r\n@@ -45,12 +44,10 @@\n   const sendMessage = () => {\r\n     const trimmed = input.trim();\r\n     if (!trimmed) return;\r\n \r\n-    // ✅ Emit message to server\r\n     socket.emit(\"send-message\", { roomId, message: trimmed });\r\n \r\n-    // ✅ Add to local state immediately\r\n     setMessages((prev) => [\r\n       ...prev,\r\n       { id: uuidv4(), content: trimmed, sender: \"me\" },\r\n     ]);\r\n@@ -62,22 +59,33 @@\n     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n   }, [messages]);\r\n \r\n   return (\r\n-    <div className=\"flex flex-col h-full\">\r\n+    <div className=\"flex flex-col h-full bg-neutral-50 dark:bg-neutral-800\">\r\n       {/* Messages */}\r\n-      <div className=\"flex-1 overflow-y-auto p-4 space-y-2\">\r\n-        {messages.map((msg) => (\r\n-          <Message key={msg.id} content={msg.content} sender={msg.sender} />\r\n-        ))}\r\n+      <div className=\"flex-1 overflow-y-auto p-4 space-y-2 custom-scrollbar\">\r\n+        <div className=\"space-y-3\">\r\n+          {messages.map((msg) => (\r\n+            <div\r\n+              key={msg.id}\r\n+              className={`max-w-xs md:max-w-sm break-words px-4 py-2 rounded-lg ${\r\n+                msg.sender === \"me\"\r\n+                  ? \"bg-blue-600 text-white self-end ml-auto\"\r\n+                  : \"bg-neutral-200 dark:bg-neutral-700 text-neutral-800 dark:text-neutral-200 self-start mr-auto\"\r\n+              }`}\r\n+            >\r\n+              {msg.content}\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n       {/* Input */}\r\n       <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 flex\">\r\n         <input\r\n           type=\"text\"\r\n-          className=\"flex-1 rounded-l-md px-3 py-2 text-sm focus:outline-none border border-neutral-300 dark:border-neutral-700 dark:bg-neutral-800\"\r\n+          className=\"flex-1 rounded-l-md px-3 py-2 text-sm focus:outline-none border border-neutral-300 dark:border-neutral-700 dark:bg-neutral-700 text-neutral-900 dark:text-white\"\r\n           value={input}\r\n           onChange={(e) => setInput(e.target.value)}\r\n           placeholder=\"Type a message...\"\r\n           onKeyDown={(e) => {\r\n"
                },
                {
                    "date": 1752319591864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n-import Message from \"./Message\";\r\n \r\n interface ChatBoxProps {\r\n   socket: any;\r\n   roomId: string;\r\n@@ -59,29 +58,27 @@\n     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n   }, [messages]);\r\n \r\n   return (\r\n-    <div className=\"flex flex-col h-full bg-neutral-50 dark:bg-neutral-800\">\r\n-      {/* Messages */}\r\n-      <div className=\"flex-1 overflow-y-auto p-4 space-y-2 custom-scrollbar\">\r\n-        <div className=\"space-y-3\">\r\n-          {messages.map((msg) => (\r\n-            <div\r\n-              key={msg.id}\r\n-              className={`max-w-xs md:max-w-sm break-words px-4 py-2 rounded-lg ${\r\n-                msg.sender === \"me\"\r\n-                  ? \"bg-blue-600 text-white self-end ml-auto\"\r\n-                  : \"bg-neutral-200 dark:bg-neutral-700 text-neutral-800 dark:text-neutral-200 self-start mr-auto\"\r\n-              }`}\r\n-            >\r\n-              {msg.content}\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n+    <div className=\"flex flex-col h-full max-h-full bg-neutral-50 dark:bg-neutral-800\">\r\n+      {/* Chat Message List with Scroll */}\r\n+      <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-2 custom-scrollbar\">\r\n+        {messages.map((msg) => (\r\n+          <div\r\n+            key={msg.id}\r\n+            className={`max-w-xs md:max-w-sm break-words px-4 py-2 rounded-lg ${\r\n+              msg.sender === \"me\"\r\n+                ? \"bg-blue-600 text-white self-end ml-auto\"\r\n+                : \"bg-neutral-200 dark:bg-neutral-700 text-neutral-800 dark:text-neutral-200 self-start mr-auto\"\r\n+            }`}\r\n+          >\r\n+            {msg.content}\r\n+          </div>\r\n+        ))}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n-      {/* Input */}\r\n+      {/* Input Field */}\r\n       <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 flex\">\r\n         <input\r\n           type=\"text\"\r\n           className=\"flex-1 rounded-l-md px-3 py-2 text-sm focus:outline-none border border-neutral-300 dark:border-neutral-700 dark:bg-neutral-700 text-neutral-900 dark:text-white\"\r\n"
                },
                {
                    "date": 1752319997164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n+import Message from \"./Message\"; // <-- Import message component\r\n \r\n interface ChatBoxProps {\r\n   socket: any;\r\n   roomId: string;\r\n@@ -11,8 +12,9 @@\n interface ChatMessage {\r\n   id: string;\r\n   content: string;\r\n   sender: \"me\" | \"partner\";\r\n+  timestamp: string;\r\n }\r\n \r\n export default function ChatBox({ socket, roomId }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n@@ -28,8 +30,9 @@\n         {\r\n           id: uuidv4(),\r\n           content: message,\r\n           sender: sender === socket.id ? \"me\" : \"partner\",\r\n+          timestamp: new Date().toISOString(),\r\n         },\r\n       ]);\r\n     };\r\n \r\n@@ -47,9 +50,14 @@\n     socket.emit(\"send-message\", { roomId, message: trimmed });\r\n \r\n     setMessages((prev) => [\r\n       ...prev,\r\n-      { id: uuidv4(), content: trimmed, sender: \"me\" },\r\n+      {\r\n+        id: uuidv4(),\r\n+        content: trimmed,\r\n+        sender: \"me\",\r\n+        timestamp: new Date().toISOString(),\r\n+      },\r\n     ]);\r\n \r\n     setInput(\"\");\r\n   };\r\n@@ -60,20 +68,16 @@\n \r\n   return (\r\n     <div className=\"flex flex-col h-full max-h-full bg-neutral-50 dark:bg-neutral-800\">\r\n       {/* Chat Message List with Scroll */}\r\n-      <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-2 custom-scrollbar\">\r\n+      <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-3 custom-scrollbar\">\r\n         {messages.map((msg) => (\r\n-          <div\r\n+          <Message\r\n             key={msg.id}\r\n-            className={`max-w-xs md:max-w-sm break-words px-4 py-2 rounded-lg ${\r\n-              msg.sender === \"me\"\r\n-                ? \"bg-blue-600 text-white self-end ml-auto\"\r\n-                : \"bg-neutral-200 dark:bg-neutral-700 text-neutral-800 dark:text-neutral-200 self-start mr-auto\"\r\n-            }`}\r\n-          >\r\n-            {msg.content}\r\n-          </div>\r\n+            content={msg.content}\r\n+            sender={msg.sender}\r\n+            timestamp={msg.timestamp}\r\n+          />\r\n         ))}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n"
                },
                {
                    "date": 1752320034442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n-import Message from \"./Message\"; // <-- Import message component\r\n+import Message from \"./Message\";\r\n+import TypingIndicator from \"./TypingIndicator\"; // new component\r\n \r\n interface ChatBoxProps {\r\n   socket: any;\r\n   roomId: string;\r\n@@ -18,8 +19,9 @@\n \r\n export default function ChatBox({ socket, roomId }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n+  const [partnerTyping, setPartnerTyping] = useState(false);\r\n   const messagesEndRef = useRef<HTMLDivElement>(null);\r\n \r\n   useEffect(() => {\r\n     if (!socket) return;\r\n@@ -33,14 +35,25 @@\n           sender: sender === socket.id ? \"me\" : \"partner\",\r\n           timestamp: new Date().toISOString(),\r\n         },\r\n       ]);\r\n+      setPartnerTyping(false); // stop typing when message received\r\n     };\r\n \r\n+    const handleTyping = ({ sender }: { sender: string }) => {\r\n+      if (sender !== socket.id) {\r\n+        setPartnerTyping(true);\r\n+        // auto-stop typing after 3 seconds if no further event\r\n+        setTimeout(() => setPartnerTyping(false), 3000);\r\n+      }\r\n+    };\r\n+\r\n     socket.on(\"receive-message\", handleReceiveMessage);\r\n+    socket.on(\"typing\", handleTyping);\r\n \r\n     return () => {\r\n       socket.off(\"receive-message\", handleReceiveMessage);\r\n+      socket.off(\"typing\", handleTyping);\r\n     };\r\n   }, [socket]);\r\n \r\n   const sendMessage = () => {\r\n@@ -61,15 +74,19 @@\n \r\n     setInput(\"\");\r\n   };\r\n \r\n+  const handleTyping = () => {\r\n+    socket?.emit(\"typing\", { roomId, sender: socket.id });\r\n+  };\r\n+\r\n   useEffect(() => {\r\n     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n-  }, [messages]);\r\n+  }, [messages, partnerTyping]);\r\n \r\n   return (\r\n     <div className=\"flex flex-col h-full max-h-full bg-neutral-50 dark:bg-neutral-800\">\r\n-      {/* Chat Message List with Scroll */}\r\n+      {/* Chat Message List */}\r\n       <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-3 custom-scrollbar\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n@@ -77,8 +94,11 @@\n             sender={msg.sender}\r\n             timestamp={msg.timestamp}\r\n           />\r\n         ))}\r\n+\r\n+        {/* Typing indicator */}\r\n+        {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n       {/* Input Field */}\r\n@@ -86,9 +106,12 @@\n         <input\r\n           type=\"text\"\r\n           className=\"flex-1 rounded-l-md px-3 py-2 text-sm focus:outline-none border border-neutral-300 dark:border-neutral-700 dark:bg-neutral-700 text-neutral-900 dark:text-white\"\r\n           value={input}\r\n-          onChange={(e) => setInput(e.target.value)}\r\n+          onChange={(e) => {\r\n+            setInput(e.target.value);\r\n+            handleTyping();\r\n+          }}\r\n           placeholder=\"Type a message...\"\r\n           onKeyDown={(e) => {\r\n             if (e.key === \"Enter\") sendMessage();\r\n           }}\r\n"
                },
                {
                    "date": 1752320219726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,12 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n+import Picker from \"@emoji-mart/react\";\r\n+import data from \"@emoji-mart/data\";\r\n import Message from \"./Message\";\r\n-import TypingIndicator from \"./TypingIndicator\"; // new component\r\n+import TypingIndicator from \"./TypingIndicator\";\r\n \r\n interface ChatBoxProps {\r\n   socket: any;\r\n   roomId: string;\r\n@@ -14,96 +16,136 @@\n   id: string;\r\n   content: string;\r\n   sender: \"me\" | \"partner\";\r\n   timestamp: string;\r\n+  status?: \"sent\" | \"delivered\" | \"seen\";\r\n }\r\n \r\n export default function ChatBox({ socket, roomId }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [partnerTyping, setPartnerTyping] = useState(false);\r\n+  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n   const messagesEndRef = useRef<HTMLDivElement>(null);\r\n \r\n+  // Scroll to bottom on new messages\r\n   useEffect(() => {\r\n+    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n+  }, [messages, partnerTyping]);\r\n+\r\n+  useEffect(() => {\r\n     if (!socket) return;\r\n \r\n     const handleReceiveMessage = ({ message, sender }: { message: string; sender: string }) => {\r\n-      setMessages((prev) => [\r\n-        ...prev,\r\n-        {\r\n-          id: uuidv4(),\r\n-          content: message,\r\n-          sender: sender === socket.id ? \"me\" : \"partner\",\r\n-          timestamp: new Date().toISOString(),\r\n-        },\r\n-      ]);\r\n-      setPartnerTyping(false); // stop typing when message received\r\n+      const newMsg: ChatMessage = {\r\n+        id: uuidv4(),\r\n+        content: message,\r\n+        sender: sender === socket.id ? \"me\" : \"partner\",\r\n+        timestamp: new Date().toISOString(),\r\n+        status: \"seen\",\r\n+      };\r\n+      setMessages((prev) => [...prev, newMsg]);\r\n+\r\n+      // Notify sender that the message was seen\r\n+      socket.emit(\"message-status\", {\r\n+        roomId,\r\n+        messageId: newMsg.id,\r\n+        status: \"seen\",\r\n+      });\r\n+\r\n+      setPartnerTyping(false);\r\n     };\r\n \r\n     const handleTyping = ({ sender }: { sender: string }) => {\r\n       if (sender !== socket.id) {\r\n         setPartnerTyping(true);\r\n-        // auto-stop typing after 3 seconds if no further event\r\n         setTimeout(() => setPartnerTyping(false), 3000);\r\n       }\r\n     };\r\n \r\n+    const handleStatusUpdate = ({ messageId, status }: { messageId: string; status: ChatMessage[\"status\"] }) => {\r\n+      setMessages((prev) =>\r\n+        prev.map((msg) => (msg.id === messageId ? { ...msg, status } : msg))\r\n+      );\r\n+    };\r\n+\r\n     socket.on(\"receive-message\", handleReceiveMessage);\r\n     socket.on(\"typing\", handleTyping);\r\n+    socket.on(\"message-status-update\", handleStatusUpdate);\r\n \r\n     return () => {\r\n       socket.off(\"receive-message\", handleReceiveMessage);\r\n       socket.off(\"typing\", handleTyping);\r\n+      socket.off(\"message-status-update\", handleStatusUpdate);\r\n     };\r\n-  }, [socket]);\r\n+  }, [socket, roomId]);\r\n \r\n   const sendMessage = () => {\r\n     const trimmed = input.trim();\r\n     if (!trimmed) return;\r\n \r\n-    socket.emit(\"send-message\", { roomId, message: trimmed });\r\n+    const messageId = uuidv4();\r\n+    socket.emit(\"send-message\", { roomId, message: trimmed, messageId });\r\n \r\n     setMessages((prev) => [\r\n       ...prev,\r\n       {\r\n-        id: uuidv4(),\r\n+        id: messageId,\r\n         content: trimmed,\r\n         sender: \"me\",\r\n         timestamp: new Date().toISOString(),\r\n+        status: \"sent\",\r\n       },\r\n     ]);\r\n \r\n     setInput(\"\");\r\n+    setShowEmojiPicker(false);\r\n   };\r\n \r\n   const handleTyping = () => {\r\n-    socket?.emit(\"typing\", { roomId, sender: socket.id });\r\n+    socket.emit(\"typing\", { roomId, sender: socket.id });\r\n   };\r\n \r\n-  useEffect(() => {\r\n-    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n-  }, [messages, partnerTyping]);\r\n-\r\n   return (\r\n     <div className=\"flex flex-col h-full max-h-full bg-neutral-50 dark:bg-neutral-800\">\r\n-      {/* Chat Message List */}\r\n+      {/* Message List */}\r\n       <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-3 custom-scrollbar\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             content={msg.content}\r\n             sender={msg.sender}\r\n             timestamp={msg.timestamp}\r\n+            status={msg.status}\r\n           />\r\n         ))}\r\n \r\n-        {/* Typing indicator */}\r\n         {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n-      {/* Input Field */}\r\n-      <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 flex\">\r\n+      {/* Input Area */}\r\n+      <div className=\"relative p-4 border-t border-neutral-300 dark:border-neutral-700 flex items-center\">\r\n+        <button\r\n+          onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n+          className=\"text-xl px-2\"\r\n+          type=\"button\"\r\n+        >\r\n+          😊\r\n+        </button>\r\n+\r\n+        {showEmojiPicker && (\r\n+          <div className=\"absolute bottom-14 left-0 z-50\">\r\n+            <Picker\r\n+              data={data}\r\n+              onEmojiSelect={(emoji: any) =>\r\n+                setInput((prev) => prev + emoji.native)\r\n+              }\r\n+              theme=\"auto\"\r\n+            />\r\n+          </div>\r\n+        )}\r\n+\r\n         <input\r\n           type=\"text\"\r\n           className=\"flex-1 rounded-l-md px-3 py-2 text-sm focus:outline-none border border-neutral-300 dark:border-neutral-700 dark:bg-neutral-700 text-neutral-900 dark:text-white\"\r\n           value={input}\r\n"
                },
                {
                    "date": 1752320342240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,36 +17,38 @@\n   content: string;\r\n   sender: \"me\" | \"partner\";\r\n   timestamp: string;\r\n   status?: \"sent\" | \"delivered\" | \"seen\";\r\n+  type?: \"text\" | \"audio\" | \"video\";\r\n }\r\n \r\n export default function ChatBox({ socket, roomId }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [partnerTyping, setPartnerTyping] = useState(false);\r\n   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n+  const [mediaURL, setMediaURL] = useState<string | null>(null);\r\n   const messagesEndRef = useRef<HTMLDivElement>(null);\r\n \r\n-  // Scroll to bottom on new messages\r\n   useEffect(() => {\r\n     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n   }, [messages, partnerTyping]);\r\n \r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n-    const handleReceiveMessage = ({ message, sender }: { message: string; sender: string }) => {\r\n+    const handleReceiveMessage = ({ message, sender, type = \"text\" }: any) => {\r\n       const newMsg: ChatMessage = {\r\n         id: uuidv4(),\r\n         content: message,\r\n         sender: sender === socket.id ? \"me\" : \"partner\",\r\n         timestamp: new Date().toISOString(),\r\n         status: \"seen\",\r\n+        type,\r\n       };\r\n+\r\n       setMessages((prev) => [...prev, newMsg]);\r\n \r\n-      // Notify sender that the message was seen\r\n       socket.emit(\"message-status\", {\r\n         roomId,\r\n         messageId: newMsg.id,\r\n         status: \"seen\",\r\n@@ -54,18 +56,20 @@\n \r\n       setPartnerTyping(false);\r\n     };\r\n \r\n-    const handleTyping = ({ sender }: { sender: string }) => {\r\n+    const handleTyping = ({ sender }: any) => {\r\n       if (sender !== socket.id) {\r\n         setPartnerTyping(true);\r\n         setTimeout(() => setPartnerTyping(false), 3000);\r\n       }\r\n     };\r\n \r\n-    const handleStatusUpdate = ({ messageId, status }: { messageId: string; status: ChatMessage[\"status\"] }) => {\r\n+    const handleStatusUpdate = ({ messageId, status }: any) => {\r\n       setMessages((prev) =>\r\n-        prev.map((msg) => (msg.id === messageId ? { ...msg, status } : msg))\r\n+        prev.map((msg) =>\r\n+          msg.id === messageId ? { ...msg, status } : msg\r\n+        )\r\n       );\r\n     };\r\n \r\n     socket.on(\"receive-message\", handleReceiveMessage);\r\n@@ -78,91 +82,104 @@\n       socket.off(\"message-status-update\", handleStatusUpdate);\r\n     };\r\n   }, [socket, roomId]);\r\n \r\n-  const sendMessage = () => {\r\n-    const trimmed = input.trim();\r\n-    if (!trimmed) return;\r\n+  const sendMessage = (type: \"text\" | \"audio\" | \"video\" = \"text\") => {\r\n+    if (!input.trim() && type === \"text\") return;\r\n \r\n     const messageId = uuidv4();\r\n-    socket.emit(\"send-message\", { roomId, message: trimmed, messageId });\r\n+    const payload = {\r\n+      roomId,\r\n+      message: type === \"text\" ? input.trim() : mediaURL,\r\n+      messageId,\r\n+      type,\r\n+    };\r\n \r\n+    socket.emit(\"send-message\", payload);\r\n+\r\n     setMessages((prev) => [\r\n       ...prev,\r\n       {\r\n         id: messageId,\r\n-        content: trimmed,\r\n+        content: payload.message,\r\n         sender: \"me\",\r\n         timestamp: new Date().toISOString(),\r\n         status: \"sent\",\r\n+        type,\r\n       },\r\n     ]);\r\n \r\n-    setInput(\"\");\r\n+    if (type === \"text\") setInput(\"\");\r\n+    if (type !== \"text\") setMediaURL(null);\r\n+    setPartnerTyping(false);\r\n     setShowEmojiPicker(false);\r\n   };\r\n \r\n   const handleTyping = () => {\r\n     socket.emit(\"typing\", { roomId, sender: socket.id });\r\n   };\r\n \r\n+  const handleMediaUpload = (e: React.ChangeEvent<HTMLInputElement>, type: \"audio\" | \"video\") => {\r\n+    const file = e.target.files?.[0];\r\n+    if (!file) return;\r\n+\r\n+    const url = URL.createObjectURL(file);\r\n+    setMediaURL(url);\r\n+    sendMessage(type);\r\n+  };\r\n+\r\n   return (\r\n     <div className=\"flex flex-col h-full max-h-full bg-neutral-50 dark:bg-neutral-800\">\r\n-      {/* Message List */}\r\n       <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-3 custom-scrollbar\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             content={msg.content}\r\n             sender={msg.sender}\r\n             timestamp={msg.timestamp}\r\n             status={msg.status}\r\n+            type={msg.type}\r\n           />\r\n         ))}\r\n-\r\n         {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n-      {/* Input Area */}\r\n-      <div className=\"relative p-4 border-t border-neutral-300 dark:border-neutral-700 flex items-center\">\r\n-        <button\r\n-          onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n-          className=\"text-xl px-2\"\r\n-          type=\"button\"\r\n-        >\r\n-          😊\r\n-        </button>\r\n+      {/* Input */}\r\n+      <div className=\"relative p-4 border-t border-neutral-300 dark:border-neutral-700 flex items-center gap-2\">\r\n+        <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-xl\">😊</button>\r\n \r\n         {showEmojiPicker && (\r\n           <div className=\"absolute bottom-14 left-0 z-50\">\r\n-            <Picker\r\n-              data={data}\r\n-              onEmojiSelect={(emoji: any) =>\r\n-                setInput((prev) => prev + emoji.native)\r\n-              }\r\n-              theme=\"auto\"\r\n-            />\r\n+            <Picker data={data} onEmojiSelect={(e: any) => setInput((p) => p + e.native)} theme=\"auto\" />\r\n           </div>\r\n         )}\r\n \r\n         <input\r\n           type=\"text\"\r\n-          className=\"flex-1 rounded-l-md px-3 py-2 text-sm focus:outline-none border border-neutral-300 dark:border-neutral-700 dark:bg-neutral-700 text-neutral-900 dark:text-white\"\r\n+          className=\"flex-1 rounded-md px-3 py-2 text-sm border border-neutral-300 dark:border-neutral-700 dark:bg-neutral-700 text-neutral-900 dark:text-white\"\r\n+          placeholder=\"Type a message...\"\r\n           value={input}\r\n           onChange={(e) => {\r\n             setInput(e.target.value);\r\n             handleTyping();\r\n           }}\r\n-          placeholder=\"Type a message...\"\r\n-          onKeyDown={(e) => {\r\n-            if (e.key === \"Enter\") sendMessage();\r\n-          }}\r\n+          onKeyDown={(e) => e.key === \"Enter\" && sendMessage(\"text\")}\r\n         />\r\n+\r\n+        <label className=\"cursor-pointer text-xs text-blue-600 hover:underline\">\r\n+          🎤\r\n+          <input type=\"file\" accept=\"audio/*\" hidden onChange={(e) => handleMediaUpload(e, \"audio\")} />\r\n+        </label>\r\n+        <label className=\"cursor-pointer text-xs text-blue-600 hover:underline\">\r\n+          📹\r\n+          <input type=\"file\" accept=\"video/*\" hidden onChange={(e) => handleMediaUpload(e, \"video\")} />\r\n+        </label>\r\n+\r\n         <button\r\n-          onClick={sendMessage}\r\n+          onClick={() => sendMessage(\"text\")}\r\n           disabled={!input.trim()}\r\n-          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-r-md text-sm transition disabled:opacity-50 disabled:cursor-not-allowed\"\r\n+          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm disabled:opacity-50\"\r\n         >\r\n           Send\r\n         </button>\r\n       </div>\r\n"
                },
                {
                    "date": 1752320499605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n+import debounce from \"lodash.debounce\";\r\n import Picker from \"@emoji-mart/react\";\r\n import data from \"@emoji-mart/data\";\r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n@@ -11,23 +12,13 @@\n   socket: any;\r\n   roomId: string;\r\n }\r\n \r\n-interface ChatMessage {\r\n-  id: string;\r\n-  content: string;\r\n-  sender: \"me\" | \"partner\";\r\n-  timestamp: string;\r\n-  status?: \"sent\" | \"delivered\" | \"seen\";\r\n-  type?: \"text\" | \"audio\" | \"video\";\r\n-}\r\n-\r\n export default function ChatBox({ socket, roomId }: ChatBoxProps) {\r\n-  const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n+  const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n+  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n   const [partnerTyping, setPartnerTyping] = useState(false);\r\n-  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n-  const [mediaURL, setMediaURL] = useState<string | null>(null);\r\n   const messagesEndRef = useRef<HTMLDivElement>(null);\r\n \r\n   useEffect(() => {\r\n     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n@@ -35,151 +26,131 @@\n \r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n-    const handleReceiveMessage = ({ message, sender, type = \"text\" }: any) => {\r\n-      const newMsg: ChatMessage = {\r\n-        id: uuidv4(),\r\n-        content: message,\r\n-        sender: sender === socket.id ? \"me\" : \"partner\",\r\n-        timestamp: new Date().toISOString(),\r\n-        status: \"seen\",\r\n-        type,\r\n-      };\r\n-\r\n-      setMessages((prev) => [...prev, newMsg]);\r\n-\r\n-      socket.emit(\"message-status\", {\r\n-        roomId,\r\n-        messageId: newMsg.id,\r\n-        status: \"seen\",\r\n-      });\r\n-\r\n+    const onMessage = (msg: any) => {\r\n+      setMessages(prev => [...prev, msg]);\r\n+      socket.emit(\"message-status\", { roomId, messageId: msg.id, status: \"seen\" });\r\n       setPartnerTyping(false);\r\n     };\r\n \r\n-    const handleTyping = ({ sender }: any) => {\r\n+    const onTyping = ({ sender }: any) => {\r\n       if (sender !== socket.id) {\r\n         setPartnerTyping(true);\r\n         setTimeout(() => setPartnerTyping(false), 3000);\r\n       }\r\n     };\r\n \r\n-    const handleStatusUpdate = ({ messageId, status }: any) => {\r\n-      setMessages((prev) =>\r\n-        prev.map((msg) =>\r\n-          msg.id === messageId ? { ...msg, status } : msg\r\n-        )\r\n-      );\r\n+    const onStatus = ({ messageId, status }: any) => {\r\n+      setMessages(prev => prev.map(m => m.id === messageId ? { ...m, status } : m));\r\n     };\r\n \r\n-    socket.on(\"receive-message\", handleReceiveMessage);\r\n-    socket.on(\"typing\", handleTyping);\r\n-    socket.on(\"message-status-update\", handleStatusUpdate);\r\n+    const onDelete = ({ messageId }: any) => {\r\n+      setMessages(prev => prev.filter(m => m.id !== messageId));\r\n+    };\r\n \r\n+    const onReact = ({ messageId, reaction, user }: any) => {\r\n+      setMessages(prev => prev.map(m =>\r\n+        m.id === messageId\r\n+          ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n+          : m\r\n+      ));\r\n+    };\r\n+\r\n+    socket.on(\"receive-message\", onMessage);\r\n+    socket.on(\"typing\", onTyping);\r\n+    socket.on(\"message-status-update\", onStatus);\r\n+    socket.on(\"message-deleted\", onDelete);\r\n+    socket.on(\"message-react\", onReact);\r\n+\r\n     return () => {\r\n-      socket.off(\"receive-message\", handleReceiveMessage);\r\n-      socket.off(\"typing\", handleTyping);\r\n-      socket.off(\"message-status-update\", handleStatusUpdate);\r\n+      socket.off(\"receive-message\", onMessage);\r\n+      socket.off(\"typing\", onTyping);\r\n+      socket.off(\"message-status-update\", onStatus);\r\n+      socket.off(\"message-deleted\", onDelete);\r\n+      socket.off(\"message-react\", onReact);\r\n     };\r\n   }, [socket, roomId]);\r\n \r\n-  const sendMessage = (type: \"text\" | \"audio\" | \"video\" = \"text\") => {\r\n-    if (!input.trim() && type === \"text\") return;\r\n+  const debouncedTyping = useRef(debounce(() => {\r\n+    socket.emit(\"typing\", { roomId, sender: socket.id });\r\n+  }, 300)).current;\r\n \r\n-    const messageId = uuidv4();\r\n-    const payload = {\r\n-      roomId,\r\n-      message: type === \"text\" ? input.trim() : mediaURL,\r\n-      messageId,\r\n-      type,\r\n+  const sendMessage = (payload: any) => {\r\n+    const msg = {\r\n+      ...payload,\r\n+      id: uuidv4(),\r\n+      sender: \"me\",\r\n+      timestamp: new Date().toISOString(),\r\n+      status: \"sent\",\r\n+      reactions: {}\r\n     };\r\n-\r\n-    socket.emit(\"send-message\", payload);\r\n-\r\n-    setMessages((prev) => [\r\n-      ...prev,\r\n-      {\r\n-        id: messageId,\r\n-        content: payload.message,\r\n-        sender: \"me\",\r\n-        timestamp: new Date().toISOString(),\r\n-        status: \"sent\",\r\n-        type,\r\n-      },\r\n-    ]);\r\n-\r\n-    if (type === \"text\") setInput(\"\");\r\n-    if (type !== \"text\") setMediaURL(null);\r\n+    socket.emit(\"send-message\", msg);\r\n+    setMessages(prev => [...prev, msg]);\r\n+    setInput(\"\");\r\n+    setShowEmojiPicker(false);\r\n     setPartnerTyping(false);\r\n-    setShowEmojiPicker(false);\r\n   };\r\n \r\n-  const handleTyping = () => {\r\n-    socket.emit(\"typing\", { roomId, sender: socket.id });\r\n+  const sendText = () => {\r\n+    if (!input.trim()) return;\r\n+    sendMessage({ content: input.trim(), type: \"text\", roomId });\r\n   };\r\n \r\n-  const handleMediaUpload = (e: React.ChangeEvent<HTMLInputElement>, type: \"audio\" | \"video\") => {\r\n-    const file = e.target.files?.[0];\r\n-    if (!file) return;\r\n-\r\n-    const url = URL.createObjectURL(file);\r\n-    setMediaURL(url);\r\n-    sendMessage(type);\r\n+  const handleFile = (e: any, type: string) => {\r\n+    const f = e.target.files?.[0];\r\n+    if (!f) return;\r\n+    const url = URL.createObjectURL(f);\r\n+    sendMessage({ content: url, roomId, type });\r\n   };\r\n \r\n   return (\r\n-    <div className=\"flex flex-col h-full max-h-full bg-neutral-50 dark:bg-neutral-800\">\r\n-      <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-3 custom-scrollbar\">\r\n-        {messages.map((msg) => (\r\n+    <div className=\"flex flex-col h-full bg-neutral-50 dark:bg-neutral-800\">\r\n+      <div className=\"flex-1 overflow-y-auto p-4 space-y-4 custom-scrollbar\">\r\n+        {messages.map(msg => (\r\n           <Message\r\n             key={msg.id}\r\n-            content={msg.content}\r\n-            sender={msg.sender}\r\n-            timestamp={msg.timestamp}\r\n-            status={msg.status}\r\n-            type={msg.type}\r\n+            {...msg}\r\n+            onDelete={() => socket.emit(\"delete-message\", { roomId, messageId: msg.id })}\r\n+            onEdit={(newContent: string) => socket.emit(\"edit-message\", { roomId, messageId: msg.id, content: newContent })}\r\n+            onReact={(reaction: string) => socket.emit(\"react-message\", { roomId, messageId: msg.id, reaction, user: socket.id })}\r\n           />\r\n         ))}\r\n         {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n-      {/* Input */}\r\n       <div className=\"relative p-4 border-t border-neutral-300 dark:border-neutral-700 flex items-center gap-2\">\r\n-        <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-xl\">😊</button>\r\n-\r\n+        <button onClick={() => setShowEmojiPicker(prev => !prev)} className=\"text-xl\">😊</button>\r\n         {showEmojiPicker && (\r\n           <div className=\"absolute bottom-14 left-0 z-50\">\r\n-            <Picker data={data} onEmojiSelect={(e: any) => setInput((p) => p + e.native)} theme=\"auto\" />\r\n+            <Picker data={data} onEmojiSelect={(e: any) => setInput(prev => prev + e.native)} />\r\n           </div>\r\n         )}\r\n \r\n         <input\r\n           type=\"text\"\r\n-          className=\"flex-1 rounded-md px-3 py-2 text-sm border border-neutral-300 dark:border-neutral-700 dark:bg-neutral-700 text-neutral-900 dark:text-white\"\r\n+          className=\"flex-1 rounded-md px-3 py-2 border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-700\"\r\n           placeholder=\"Type a message...\"\r\n           value={input}\r\n-          onChange={(e) => {\r\n-            setInput(e.target.value);\r\n-            handleTyping();\r\n-          }}\r\n-          onKeyDown={(e) => e.key === \"Enter\" && sendMessage(\"text\")}\r\n+          onChange={e => { setInput(e.target.value); debouncedTyping(); }}\r\n+          onKeyDown={e => e.key === \"Enter\" && sendText()}\r\n         />\r\n \r\n-        <label className=\"cursor-pointer text-xs text-blue-600 hover:underline\">\r\n-          🎤\r\n-          <input type=\"file\" accept=\"audio/*\" hidden onChange={(e) => handleMediaUpload(e, \"audio\")} />\r\n+        <label className=\"cursor-pointer\">📎\r\n+          <input type=\"file\" accept=\"image/*\" hidden onChange={e => handleFile(e, \"image\")} />\r\n         </label>\r\n-        <label className=\"cursor-pointer text-xs text-blue-600 hover:underline\">\r\n-          📹\r\n-          <input type=\"file\" accept=\"video/*\" hidden onChange={(e) => handleMediaUpload(e, \"video\")} />\r\n+        <label className=\"cursor-pointer\">🎤\r\n+          <input type=\"file\" accept=\"audio/*\" hidden onChange={e => handleFile(e, \"audio\")} />\r\n         </label>\r\n+        <label className=\"cursor-pointer\">📹\r\n+          <input type=\"file\" accept=\"video/*\" hidden onChange={e => handleFile(e, \"video\")} />\r\n+        </label>\r\n \r\n         <button\r\n-          onClick={() => sendMessage(\"text\")}\r\n+          onClick={sendText}\r\n           disabled={!input.trim()}\r\n-          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm disabled:opacity-50\"\r\n+          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md disabled:opacity-50\"\r\n         >\r\n           Send\r\n         </button>\r\n       </div>\r\n"
                },
                {
                    "date": 1752320804724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n-import debounce from \"lodash.debounce\";\r\n+import debounce from \"lodash/debounce\";\r\n import Picker from \"@emoji-mart/react\";\r\n import data from \"@emoji-mart/data\";\r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n"
                },
                {
                    "date": 1752320988053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n-import debounce from \"lodash/debounce\";\r\n+const debounce = require('lodash/debounce');\r\n import Picker from \"@emoji-mart/react\";\r\n import data from \"@emoji-mart/data\";\r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n"
                },
                {
                    "date": 1752324068295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n const debounce = require('lodash/debounce');\r\n-import Picker from \"@emoji-mart/react\";\r\n+import Picker from \"emoji-mart\";\r\n import data from \"@emoji-mart/data\";\r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n \r\n"
                },
                {
                    "date": 1752324162532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n const debounce = require('lodash/debounce');\r\n-import Picker from \"emoji-mart\";\r\n+import { Picker } from \"emoji-mart\";\r\n import data from \"@emoji-mart/data\";\r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n \r\n"
                },
                {
                    "date": 1752324324743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n const debounce = require('lodash/debounce');\r\n-import { Picker } from \"emoji-mart\";\r\n+import { Picker } from \"emoji-mart\"; // ✅ CORRECT\r\n import data from \"@emoji-mart/data\";\r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n \r\n"
                },
                {
                    "date": 1752325055314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,11 @@\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n const debounce = require('lodash/debounce');\r\n-import { Picker } from \"emoji-mart\"; // ✅ CORRECT\r\n+import * as EmojiMart from \"emoji-mart\";\r\n import data from \"@emoji-mart/data\";\r\n+\r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n \r\n interface ChatBoxProps {\r\n"
                },
                {
                    "date": 1752325453448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n const debounce = require('lodash/debounce');\r\n-import * as EmojiMart from \"emoji-mart\";\r\n+import dynamic from \"next/dynamic\";\r\n import data from \"@emoji-mart/data\";\r\n \r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n"
                },
                {
                    "date": 1752325591600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,9 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n-const debounce = require('lodash/debounce');\r\n-import dynamic from \"next/dynamic\";\r\n-import data from \"@emoji-mart/data\";\r\n+const debounce = require(\"lodash/debounce\");\r\n \r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n \r\n@@ -13,8 +11,10 @@\n   socket: any;\r\n   roomId: string;\r\n }\r\n \r\n+const topEmojis = [\"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\", \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"];\r\n+\r\n export default function ChatBox({ socket, roomId }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n@@ -28,9 +28,9 @@\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n     const onMessage = (msg: any) => {\r\n-      setMessages(prev => [...prev, msg]);\r\n+      setMessages((prev) => [...prev, msg]);\r\n       socket.emit(\"message-status\", { roomId, messageId: msg.id, status: \"seen\" });\r\n       setPartnerTyping(false);\r\n     };\r\n \r\n@@ -41,21 +41,19 @@\n       }\r\n     };\r\n \r\n     const onStatus = ({ messageId, status }: any) => {\r\n-      setMessages(prev => prev.map(m => m.id === messageId ? { ...m, status } : m));\r\n+      setMessages((prev) => prev.map((m) => (m.id === messageId ? { ...m, status } : m)));\r\n     };\r\n \r\n     const onDelete = ({ messageId }: any) => {\r\n-      setMessages(prev => prev.filter(m => m.id !== messageId));\r\n+      setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n     };\r\n \r\n     const onReact = ({ messageId, reaction, user }: any) => {\r\n-      setMessages(prev => prev.map(m =>\r\n-        m.id === messageId\r\n-          ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n-          : m\r\n-      ));\r\n+      setMessages((prev) =>\r\n+        prev.map((m) => (m.id === messageId ? { ...m, reactions: { ...m.reactions, [user]: reaction } } : m))\r\n+      );\r\n     };\r\n \r\n     socket.on(\"receive-message\", onMessage);\r\n     socket.on(\"typing\", onTyping);\r\n@@ -71,23 +69,25 @@\n       socket.off(\"message-react\", onReact);\r\n     };\r\n   }, [socket, roomId]);\r\n \r\n-  const debouncedTyping = useRef(debounce(() => {\r\n-    socket.emit(\"typing\", { roomId, sender: socket.id });\r\n-  }, 300)).current;\r\n+  const debouncedTyping = useRef(\r\n+    debounce(() => {\r\n+      socket.emit(\"typing\", { roomId, sender: socket.id });\r\n+    }, 300)\r\n+  ).current;\r\n \r\n   const sendMessage = (payload: any) => {\r\n     const msg = {\r\n       ...payload,\r\n       id: uuidv4(),\r\n       sender: \"me\",\r\n       timestamp: new Date().toISOString(),\r\n       status: \"sent\",\r\n-      reactions: {}\r\n+      reactions: {},\r\n     };\r\n     socket.emit(\"send-message\", msg);\r\n-    setMessages(prev => [...prev, msg]);\r\n+    setMessages((prev) => [...prev, msg]);\r\n     setInput(\"\");\r\n     setShowEmojiPicker(false);\r\n     setPartnerTyping(false);\r\n   };\r\n@@ -106,46 +106,63 @@\n \r\n   return (\r\n     <div className=\"flex flex-col h-full bg-neutral-50 dark:bg-neutral-800\">\r\n       <div className=\"flex-1 overflow-y-auto p-4 space-y-4 custom-scrollbar\">\r\n-        {messages.map(msg => (\r\n+        {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n             onDelete={() => socket.emit(\"delete-message\", { roomId, messageId: msg.id })}\r\n-            onEdit={(newContent: string) => socket.emit(\"edit-message\", { roomId, messageId: msg.id, content: newContent })}\r\n-            onReact={(reaction: string) => socket.emit(\"react-message\", { roomId, messageId: msg.id, reaction, user: socket.id })}\r\n+            onEdit={(newContent: string) =>\r\n+              socket.emit(\"edit-message\", { roomId, messageId: msg.id, content: newContent })\r\n+            }\r\n+            onReact={(reaction: string) =>\r\n+              socket.emit(\"react-message\", { roomId, messageId: msg.id, reaction, user: socket.id })\r\n+            }\r\n           />\r\n         ))}\r\n         {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n       <div className=\"relative p-4 border-t border-neutral-300 dark:border-neutral-700 flex items-center gap-2\">\r\n-        <button onClick={() => setShowEmojiPicker(prev => !prev)} className=\"text-xl\">😊</button>\r\n+        <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-xl\">\r\n+          😊\r\n+        </button>\r\n         {showEmojiPicker && (\r\n-          <div className=\"absolute bottom-14 left-0 z-50\">\r\n-            <Picker data={data} onEmojiSelect={(e: any) => setInput(prev => prev + e.native)} />\r\n+          <div className=\"absolute bottom-14 left-0 z-50 bg-white dark:bg-neutral-800 p-2 rounded shadow-md grid grid-cols-5 gap-2\">\r\n+            {topEmojis.map((emoji) => (\r\n+              <button\r\n+                key={emoji}\r\n+                onClick={() => setInput((prev) => prev + emoji)}\r\n+                className=\"text-2xl hover:scale-110 transition-transform\"\r\n+              >\r\n+                {emoji}\r\n+              </button>\r\n+            ))}\r\n           </div>\r\n         )}\r\n \r\n         <input\r\n           type=\"text\"\r\n           className=\"flex-1 rounded-md px-3 py-2 border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-700\"\r\n           placeholder=\"Type a message...\"\r\n           value={input}\r\n-          onChange={e => { setInput(e.target.value); debouncedTyping(); }}\r\n-          onKeyDown={e => e.key === \"Enter\" && sendText()}\r\n+          onChange={(e) => {\r\n+            setInput(e.target.value);\r\n+            debouncedTyping();\r\n+          }}\r\n+          onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n         />\r\n \r\n         <label className=\"cursor-pointer\">📎\r\n-          <input type=\"file\" accept=\"image/*\" hidden onChange={e => handleFile(e, \"image\")} />\r\n+          <input type=\"file\" accept=\"image/*\" hidden onChange={(e) => handleFile(e, \"image\")} />\r\n         </label>\r\n         <label className=\"cursor-pointer\">🎤\r\n-          <input type=\"file\" accept=\"audio/*\" hidden onChange={e => handleFile(e, \"audio\")} />\r\n+          <input type=\"file\" accept=\"audio/*\" hidden onChange={(e) => handleFile(e, \"audio\")} />\r\n         </label>\r\n         <label className=\"cursor-pointer\">📹\r\n-          <input type=\"file\" accept=\"video/*\" hidden onChange={e => handleFile(e, \"video\")} />\r\n+          <input type=\"file\" accept=\"video/*\" hidden onChange={(e) => handleFile(e, \"video\")} />\r\n         </label>\r\n \r\n         <button\r\n           onClick={sendText}\r\n"
                },
                {
                    "date": 1752334580072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,35 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n+import { Users, CircleStop, RefreshCcw } from \"lucide-react\";\r\n const debounce = require(\"lodash/debounce\");\r\n \r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n \r\n interface ChatBoxProps {\r\n   socket: any;\r\n   roomId: string;\r\n+  onStart: () => void;\r\n+  onStop: () => void;\r\n+  onSkip: () => void;\r\n+  sessionStarted: boolean;\r\n+  loading: boolean;\r\n }\r\n \r\n const topEmojis = [\"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\", \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"];\r\n \r\n-export default function ChatBox({ socket, roomId }: ChatBoxProps) {\r\n+export default function ChatBox({\r\n+  socket,\r\n+  roomId,\r\n+  onStart,\r\n+  onStop,\r\n+  onSkip,\r\n+  sessionStarted,\r\n+  loading,\r\n+}: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n   const [partnerTyping, setPartnerTyping] = useState(false);\r\n@@ -123,12 +137,12 @@\n         {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n-      <div className=\"relative p-4 border-t border-neutral-300 dark:border-neutral-700 flex items-center gap-2\">\r\n-        <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-xl\">\r\n-          😊\r\n-        </button>\r\n+      {/* Input + Buttons */}\r\n+      <div className=\"relative p-4 border-t border-neutral-300 dark:border-neutral-700 flex flex-wrap gap-2 items-center\">\r\n+        <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-xl\">😊</button>\r\n+\r\n         {showEmojiPicker && (\r\n           <div className=\"absolute bottom-14 left-0 z-50 bg-white dark:bg-neutral-800 p-2 rounded shadow-md grid grid-cols-5 gap-2\">\r\n             {topEmojis.map((emoji) => (\r\n               <button\r\n@@ -170,8 +184,35 @@\n           className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md disabled:opacity-50\"\r\n         >\r\n           Send\r\n         </button>\r\n+\r\n+        {/* Dynamic Controls */}\r\n+        {!sessionStarted ? (\r\n+          <button\r\n+            onClick={onStart}\r\n+            className=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n+          >\r\n+            <Users className=\"w-4 h-4\" />\r\n+            Start\r\n+          </button>\r\n+        ) : loading ? (\r\n+          <button\r\n+            onClick={onStop}\r\n+            className=\"bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n+          >\r\n+            <CircleStop className=\"w-4 h-4\" />\r\n+            Stop\r\n+          </button>\r\n+        ) : (\r\n+          <button\r\n+            onClick={onSkip}\r\n+            className=\"bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n+          >\r\n+            <RefreshCcw className=\"w-4 h-4\" />\r\n+            Skip\r\n+          </button>\r\n+        )}\r\n       </div>\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1752335195112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,82 +137,87 @@\n         {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n-      {/* Input + Buttons */}\r\n-      <div className=\"relative p-4 border-t border-neutral-300 dark:border-neutral-700 flex flex-wrap gap-2 items-center\">\r\n-        <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-xl\">😊</button>\r\n+      {/* Input + Buttons Section */}\r\n+      <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 space-y-2\">\r\n+        {/* Row 1: Send + Controls */}\r\n+        <div className=\"flex gap-2 flex-wrap\">\r\n+          <button\r\n+            onClick={sendText}\r\n+            disabled={!input.trim()}\r\n+            className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md disabled:opacity-50\"\r\n+          >\r\n+            Send\r\n+          </button>\r\n \r\n-        {showEmojiPicker && (\r\n-          <div className=\"absolute bottom-14 left-0 z-50 bg-white dark:bg-neutral-800 p-2 rounded shadow-md grid grid-cols-5 gap-2\">\r\n-            {topEmojis.map((emoji) => (\r\n-              <button\r\n-                key={emoji}\r\n-                onClick={() => setInput((prev) => prev + emoji)}\r\n-                className=\"text-2xl hover:scale-110 transition-transform\"\r\n-              >\r\n-                {emoji}\r\n-              </button>\r\n-            ))}\r\n-          </div>\r\n-        )}\r\n+          {!sessionStarted ? (\r\n+            <button\r\n+              onClick={onStart}\r\n+              className=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n+            >\r\n+              <Users className=\"w-4 h-4\" />\r\n+              Start\r\n+            </button>\r\n+          ) : loading ? (\r\n+            <button\r\n+              onClick={onStop}\r\n+              className=\"bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n+            >\r\n+              <CircleStop className=\"w-4 h-4\" />\r\n+              Stop\r\n+            </button>\r\n+          ) : (\r\n+            <button\r\n+              onClick={onSkip}\r\n+              className=\"bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n+            >\r\n+              <RefreshCcw className=\"w-4 h-4\" />\r\n+              Skip\r\n+            </button>\r\n+          )}\r\n+        </div>\r\n \r\n-        <input\r\n-          type=\"text\"\r\n-          className=\"flex-1 rounded-md px-3 py-2 border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-700\"\r\n-          placeholder=\"Type a message...\"\r\n-          value={input}\r\n-          onChange={(e) => {\r\n-            setInput(e.target.value);\r\n-            debouncedTyping();\r\n-          }}\r\n-          onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n-        />\r\n+        {/* Row 2: Input + Emoji + File Controls */}\r\n+        <div className=\"relative flex flex-wrap gap-2 items-center\">\r\n+          <input\r\n+            type=\"text\"\r\n+            className=\"flex-1 rounded-md px-3 py-2 border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-700\"\r\n+            placeholder=\"Type a message...\"\r\n+            value={input}\r\n+            onChange={(e) => {\r\n+              setInput(e.target.value);\r\n+              debouncedTyping();\r\n+            }}\r\n+            onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n+          />\r\n \r\n-        <label className=\"cursor-pointer\">📎\r\n-          <input type=\"file\" accept=\"image/*\" hidden onChange={(e) => handleFile(e, \"image\")} />\r\n-        </label>\r\n-        <label className=\"cursor-pointer\">🎤\r\n-          <input type=\"file\" accept=\"audio/*\" hidden onChange={(e) => handleFile(e, \"audio\")} />\r\n-        </label>\r\n-        <label className=\"cursor-pointer\">📹\r\n-          <input type=\"file\" accept=\"video/*\" hidden onChange={(e) => handleFile(e, \"video\")} />\r\n-        </label>\r\n+          <label className=\"cursor-pointer\">📎\r\n+            <input type=\"file\" accept=\"image/*\" hidden onChange={(e) => handleFile(e, \"image\")} />\r\n+          </label>\r\n+          <label className=\"cursor-pointer\">🎤\r\n+            <input type=\"file\" accept=\"audio/*\" hidden onChange={(e) => handleFile(e, \"audio\")} />\r\n+          </label>\r\n+          <label className=\"cursor-pointer\">📹\r\n+            <input type=\"file\" accept=\"video/*\" hidden onChange={(e) => handleFile(e, \"video\")} />\r\n+          </label>\r\n \r\n-        <button\r\n-          onClick={sendText}\r\n-          disabled={!input.trim()}\r\n-          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md disabled:opacity-50\"\r\n-        >\r\n-          Send\r\n-        </button>\r\n+          <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-xl\">😊</button>\r\n \r\n-        {/* Dynamic Controls */}\r\n-        {!sessionStarted ? (\r\n-          <button\r\n-            onClick={onStart}\r\n-            className=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n-          >\r\n-            <Users className=\"w-4 h-4\" />\r\n-            Start\r\n-          </button>\r\n-        ) : loading ? (\r\n-          <button\r\n-            onClick={onStop}\r\n-            className=\"bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n-          >\r\n-            <CircleStop className=\"w-4 h-4\" />\r\n-            Stop\r\n-          </button>\r\n-        ) : (\r\n-          <button\r\n-            onClick={onSkip}\r\n-            className=\"bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n-          >\r\n-            <RefreshCcw className=\"w-4 h-4\" />\r\n-            Skip\r\n-          </button>\r\n-        )}\r\n+          {showEmojiPicker && (\r\n+            <div className=\"absolute bottom-14 right-0 z-50 bg-white dark:bg-neutral-800 p-2 rounded shadow-md grid grid-cols-5 gap-2\">\r\n+              {topEmojis.map((emoji) => (\r\n+                <button\r\n+                  key={emoji}\r\n+                  onClick={() => setInput((prev) => prev + emoji)}\r\n+                  className=\"text-2xl hover:scale-110 transition-transform\"\r\n+                >\r\n+                  {emoji}\r\n+                </button>\r\n+              ))}\r\n+            </div>\r\n+          )}\r\n+        </div>\r\n       </div>\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1752335439547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,8 +119,9 @@\n   };\r\n \r\n   return (\r\n     <div className=\"flex flex-col h-full bg-neutral-50 dark:bg-neutral-800\">\r\n+      {/* Messages */}\r\n       <div className=\"flex-1 overflow-y-auto p-4 space-y-4 custom-scrollbar\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n@@ -137,12 +138,12 @@\n         {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n-      {/* Input + Buttons Section */}\r\n-      <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 space-y-2\">\r\n-        {/* Row 1: Send + Controls */}\r\n-        <div className=\"flex gap-2 flex-wrap\">\r\n+      {/* Input Area */}\r\n+      <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 bg-white dark:bg-neutral-800\">\r\n+        {/* Row 1: Buttons */}\r\n+        <div className=\"flex flex-wrap gap-2 mb-2\">\r\n           <button\r\n             onClick={sendText}\r\n             disabled={!input.trim()}\r\n             className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md disabled:opacity-50\"\r\n@@ -176,9 +177,9 @@\n             </button>\r\n           )}\r\n         </div>\r\n \r\n-        {/* Row 2: Input + Emoji + File Controls */}\r\n+        {/* Row 2: Text input + Attachments */}\r\n         <div className=\"relative flex flex-wrap gap-2 items-center\">\r\n           <input\r\n             type=\"text\"\r\n             className=\"flex-1 rounded-md px-3 py-2 border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-700\"\r\n@@ -203,9 +204,9 @@\n \r\n           <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-xl\">😊</button>\r\n \r\n           {showEmojiPicker && (\r\n-            <div className=\"absolute bottom-14 right-0 z-50 bg-white dark:bg-neutral-800 p-2 rounded shadow-md grid grid-cols-5 gap-2\">\r\n+            <div className=\"absolute bottom-full right-0 mb-2 z-50 bg-white dark:bg-neutral-800 p-2 rounded shadow-md grid grid-cols-5 gap-2\">\r\n               {topEmojis.map((emoji) => (\r\n                 <button\r\n                   key={emoji}\r\n                   onClick={() => setInput((prev) => prev + emoji)}\r\n"
                },
                {
                    "date": 1752335630000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,21 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n-import { Users, CircleStop, RefreshCcw } from \"lucide-react\";\r\n const debounce = require(\"lodash/debounce\");\r\n \r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n \r\n interface ChatBoxProps {\r\n   socket: any;\r\n   roomId: string;\r\n-  onStart: () => void;\r\n-  onStop: () => void;\r\n-  onSkip: () => void;\r\n-  sessionStarted: boolean;\r\n-  loading: boolean;\r\n }\r\n \r\n const topEmojis = [\"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\", \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"];\r\n \r\n-export default function ChatBox({\r\n-  socket,\r\n-  roomId,\r\n-  onStart,\r\n-  onStop,\r\n-  onSkip,\r\n-  sessionStarted,\r\n-  loading,\r\n-}: ChatBoxProps) {\r\n+export default function ChatBox({ socket, roomId }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n   const [partnerTyping, setPartnerTyping] = useState(false);\r\n@@ -119,9 +105,8 @@\n   };\r\n \r\n   return (\r\n     <div className=\"flex flex-col h-full bg-neutral-50 dark:bg-neutral-800\">\r\n-      {/* Messages */}\r\n       <div className=\"flex-1 overflow-y-auto p-4 space-y-4 custom-scrollbar\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n@@ -138,87 +123,55 @@\n         {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n-      {/* Input Area */}\r\n-      <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 bg-white dark:bg-neutral-800\">\r\n-        {/* Row 1: Buttons */}\r\n-        <div className=\"flex flex-wrap gap-2 mb-2\">\r\n-          <button\r\n-            onClick={sendText}\r\n-            disabled={!input.trim()}\r\n-            className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md disabled:opacity-50\"\r\n-          >\r\n-            Send\r\n-          </button>\r\n+      <div className=\"relative p-4 border-t border-neutral-300 dark:border-neutral-700 flex items-center gap-2\">\r\n+        <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-xl\">\r\n+          😊\r\n+        </button>\r\n+        {showEmojiPicker && (\r\n+          <div className=\"absolute bottom-14 left-0 z-50 bg-white dark:bg-neutral-800 p-2 rounded shadow-md grid grid-cols-5 gap-2\">\r\n+            {topEmojis.map((emoji) => (\r\n+              <button\r\n+                key={emoji}\r\n+                onClick={() => setInput((prev) => prev + emoji)}\r\n+                className=\"text-2xl hover:scale-110 transition-transform\"\r\n+              >\r\n+                {emoji}\r\n+              </button>\r\n+            ))}\r\n+          </div>\r\n+        )}\r\n \r\n-          {!sessionStarted ? (\r\n-            <button\r\n-              onClick={onStart}\r\n-              className=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n-            >\r\n-              <Users className=\"w-4 h-4\" />\r\n-              Start\r\n-            </button>\r\n-          ) : loading ? (\r\n-            <button\r\n-              onClick={onStop}\r\n-              className=\"bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n-            >\r\n-              <CircleStop className=\"w-4 h-4\" />\r\n-              Stop\r\n-            </button>\r\n-          ) : (\r\n-            <button\r\n-              onClick={onSkip}\r\n-              className=\"bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded-md flex items-center gap-1\"\r\n-            >\r\n-              <RefreshCcw className=\"w-4 h-4\" />\r\n-              Skip\r\n-            </button>\r\n-          )}\r\n-        </div>\r\n+        <input\r\n+          type=\"text\"\r\n+          className=\"flex-1 rounded-md px-3 py-2 border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-700\"\r\n+          placeholder=\"Type a message...\"\r\n+          value={input}\r\n+          onChange={(e) => {\r\n+            setInput(e.target.value);\r\n+            debouncedTyping();\r\n+          }}\r\n+          onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n+        />\r\n \r\n-        {/* Row 2: Text input + Attachments */}\r\n-        <div className=\"relative flex flex-wrap gap-2 items-center\">\r\n-          <input\r\n-            type=\"text\"\r\n-            className=\"flex-1 rounded-md px-3 py-2 border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-700\"\r\n-            placeholder=\"Type a message...\"\r\n-            value={input}\r\n-            onChange={(e) => {\r\n-              setInput(e.target.value);\r\n-              debouncedTyping();\r\n-            }}\r\n-            onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n-          />\r\n+        <label className=\"cursor-pointer\">📎\r\n+          <input type=\"file\" accept=\"image/*\" hidden onChange={(e) => handleFile(e, \"image\")} />\r\n+        </label>\r\n+        <label className=\"cursor-pointer\">🎤\r\n+          <input type=\"file\" accept=\"audio/*\" hidden onChange={(e) => handleFile(e, \"audio\")} />\r\n+        </label>\r\n+        <label className=\"cursor-pointer\">📹\r\n+          <input type=\"file\" accept=\"video/*\" hidden onChange={(e) => handleFile(e, \"video\")} />\r\n+        </label>\r\n \r\n-          <label className=\"cursor-pointer\">📎\r\n-            <input type=\"file\" accept=\"image/*\" hidden onChange={(e) => handleFile(e, \"image\")} />\r\n-          </label>\r\n-          <label className=\"cursor-pointer\">🎤\r\n-            <input type=\"file\" accept=\"audio/*\" hidden onChange={(e) => handleFile(e, \"audio\")} />\r\n-          </label>\r\n-          <label className=\"cursor-pointer\">📹\r\n-            <input type=\"file\" accept=\"video/*\" hidden onChange={(e) => handleFile(e, \"video\")} />\r\n-          </label>\r\n-\r\n-          <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-xl\">😊</button>\r\n-\r\n-          {showEmojiPicker && (\r\n-            <div className=\"absolute bottom-full right-0 mb-2 z-50 bg-white dark:bg-neutral-800 p-2 rounded shadow-md grid grid-cols-5 gap-2\">\r\n-              {topEmojis.map((emoji) => (\r\n-                <button\r\n-                  key={emoji}\r\n-                  onClick={() => setInput((prev) => prev + emoji)}\r\n-                  className=\"text-2xl hover:scale-110 transition-transform\"\r\n-                >\r\n-                  {emoji}\r\n-                </button>\r\n-              ))}\r\n-            </div>\r\n-          )}\r\n-        </div>\r\n+        <button\r\n+          onClick={sendText}\r\n+          disabled={!input.trim()}\r\n+          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md disabled:opacity-50\"\r\n+        >\r\n+          Send\r\n+        </button>\r\n       </div>\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1752337921924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,11 @@\n     };\r\n \r\n     const onReact = ({ messageId, reaction, user }: any) => {\r\n       setMessages((prev) =>\r\n-        prev.map((m) => (m.id === messageId ? { ...m, reactions: { ...m.reactions, [user]: reaction } } : m))\r\n+        prev.map((m) =>\r\n+          m.id === messageId ? { ...m, reactions: { ...m.reactions, [user]: reaction } } : m\r\n+        )\r\n       );\r\n     };\r\n \r\n     socket.on(\"receive-message\", onMessage);\r\n@@ -79,9 +81,9 @@\n   const sendMessage = (payload: any) => {\r\n     const msg = {\r\n       ...payload,\r\n       id: uuidv4(),\r\n-      sender: \"me\",\r\n+      sender: socket.id,\r\n       timestamp: new Date().toISOString(),\r\n       status: \"sent\",\r\n       reactions: {},\r\n     };\r\n@@ -96,22 +98,24 @@\n     if (!input.trim()) return;\r\n     sendMessage({ content: input.trim(), type: \"text\", roomId });\r\n   };\r\n \r\n-  const handleFile = (e: any, type: string) => {\r\n+  const handleFile = (e: React.ChangeEvent<HTMLInputElement>, type: string) => {\r\n     const f = e.target.files?.[0];\r\n     if (!f) return;\r\n     const url = URL.createObjectURL(f);\r\n     sendMessage({ content: url, roomId, type });\r\n   };\r\n \r\n   return (\r\n     <div className=\"flex flex-col h-full bg-neutral-50 dark:bg-neutral-800\">\r\n+      {/* Chat Messages */}\r\n       <div className=\"flex-1 overflow-y-auto p-4 space-y-4 custom-scrollbar\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n+            sender={msg.sender === socket.id ? \"me\" : \"partner\"}\r\n             onDelete={() => socket.emit(\"delete-message\", { roomId, messageId: msg.id })}\r\n             onEdit={(newContent: string) =>\r\n               socket.emit(\"edit-message\", { roomId, messageId: msg.id, content: newContent })\r\n             }\r\n@@ -123,48 +127,64 @@\n         {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n+      {/* Input Controls */}\r\n       <div className=\"relative p-4 border-t border-neutral-300 dark:border-neutral-700 flex items-center gap-2\">\r\n-        <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-xl\">\r\n+        {/* Emoji Toggle */}\r\n+        <button\r\n+          onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n+          className=\"text-xl\"\r\n+          aria-label=\"Toggle emoji picker\"\r\n+        >\r\n           😊\r\n         </button>\r\n+\r\n+        {/* Emoji Picker */}\r\n         {showEmojiPicker && (\r\n-          <div className=\"absolute bottom-14 left-0 z-50 bg-white dark:bg-neutral-800 p-2 rounded shadow-md grid grid-cols-5 gap-2\">\r\n+          <div className=\"absolute bottom-14 left-0 z-50 bg-white dark:bg-neutral-800 p-2 rounded shadow-md grid grid-cols-5 gap-2 max-h-60 overflow-y-auto\">\r\n             {topEmojis.map((emoji) => (\r\n               <button\r\n                 key={emoji}\r\n                 onClick={() => setInput((prev) => prev + emoji)}\r\n                 className=\"text-2xl hover:scale-110 transition-transform\"\r\n+                aria-label={`Insert emoji ${emoji}`}\r\n               >\r\n                 {emoji}\r\n               </button>\r\n             ))}\r\n           </div>\r\n         )}\r\n \r\n+        {/* Text Input */}\r\n         <input\r\n           type=\"text\"\r\n           className=\"flex-1 rounded-md px-3 py-2 border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-700\"\r\n           placeholder=\"Type a message...\"\r\n           value={input}\r\n+          aria-label=\"Message input\"\r\n           onChange={(e) => {\r\n             setInput(e.target.value);\r\n             debouncedTyping();\r\n           }}\r\n           onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n         />\r\n \r\n-        <label className=\"cursor-pointer\">📎\r\n+        {/* Attachments */}\r\n+        <label className=\"cursor-pointer\" title=\"Send Image\">\r\n+          📎\r\n           <input type=\"file\" accept=\"image/*\" hidden onChange={(e) => handleFile(e, \"image\")} />\r\n         </label>\r\n-        <label className=\"cursor-pointer\">🎤\r\n+        <label className=\"cursor-pointer\" title=\"Send Audio\">\r\n+          🎤\r\n           <input type=\"file\" accept=\"audio/*\" hidden onChange={(e) => handleFile(e, \"audio\")} />\r\n         </label>\r\n-        <label className=\"cursor-pointer\">📹\r\n+        <label className=\"cursor-pointer\" title=\"Send Video\">\r\n+          📹\r\n           <input type=\"file\" accept=\"video/*\" hidden onChange={(e) => handleFile(e, \"video\")} />\r\n         </label>\r\n \r\n+        {/* Send Button */}\r\n         <button\r\n           onClick={sendText}\r\n           disabled={!input.trim()}\r\n           className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md disabled:opacity-50\"\r\n"
                },
                {
                    "date": 1752418333549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,11 +106,11 @@\n     sendMessage({ content: url, roomId, type });\r\n   };\r\n \r\n   return (\r\n-    <div className=\"flex flex-col h-full bg-neutral-50 dark:bg-neutral-800\">\r\n+    <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 border rounded-lg overflow-hidden shadow-lg\">\r\n       {/* Chat Messages */}\r\n-      <div className=\"flex-1 overflow-y-auto p-4 space-y-4 custom-scrollbar\">\r\n+      <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-3 custom-scrollbar\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n@@ -127,68 +127,69 @@\n         {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n+      {/* Emoji Picker */}\r\n+      {showEmojiPicker && (\r\n+        <div className=\"absolute bottom-20 left-4 z-50 bg-white dark:bg-neutral-800 border rounded-md shadow-lg p-3 w-64 max-h-64 overflow-y-auto grid grid-cols-5 gap-2\">\r\n+          {topEmojis.map((emoji) => (\r\n+            <button\r\n+              key={emoji}\r\n+              onClick={() => setInput((prev) => prev + emoji)}\r\n+              className=\"text-2xl hover:scale-110 transition-transform\"\r\n+              aria-label={`Insert emoji ${emoji}`}\r\n+            >\r\n+              {emoji}\r\n+            </button>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+\r\n       {/* Input Controls */}\r\n-      <div className=\"relative p-4 border-t border-neutral-300 dark:border-neutral-700 flex items-center gap-2\">\r\n+      <div className=\"w-full border-t dark:border-neutral-700 px-4 py-3 flex items-center gap-3 bg-white dark:bg-neutral-900\">\r\n         {/* Emoji Toggle */}\r\n         <button\r\n           onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n-          className=\"text-xl\"\r\n+          className=\"text-2xl hover:scale-110 transition-transform\"\r\n           aria-label=\"Toggle emoji picker\"\r\n         >\r\n           😊\r\n         </button>\r\n \r\n-        {/* Emoji Picker */}\r\n-        {showEmojiPicker && (\r\n-          <div className=\"absolute bottom-14 left-0 z-50 bg-white dark:bg-neutral-800 p-2 rounded shadow-md grid grid-cols-5 gap-2 max-h-60 overflow-y-auto\">\r\n-            {topEmojis.map((emoji) => (\r\n-              <button\r\n-                key={emoji}\r\n-                onClick={() => setInput((prev) => prev + emoji)}\r\n-                className=\"text-2xl hover:scale-110 transition-transform\"\r\n-                aria-label={`Insert emoji ${emoji}`}\r\n-              >\r\n-                {emoji}\r\n-              </button>\r\n-            ))}\r\n-          </div>\r\n-        )}\r\n-\r\n         {/* Text Input */}\r\n         <input\r\n           type=\"text\"\r\n-          className=\"flex-1 rounded-md px-3 py-2 border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-700\"\r\n           placeholder=\"Type a message...\"\r\n           value={input}\r\n-          aria-label=\"Message input\"\r\n           onChange={(e) => {\r\n             setInput(e.target.value);\r\n             debouncedTyping();\r\n           }}\r\n           onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n+          className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 text-sm px-4 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n         />\r\n \r\n-        {/* Attachments */}\r\n-        <label className=\"cursor-pointer\" title=\"Send Image\">\r\n-          📎\r\n-          <input type=\"file\" accept=\"image/*\" hidden onChange={(e) => handleFile(e, \"image\")} />\r\n-        </label>\r\n-        <label className=\"cursor-pointer\" title=\"Send Audio\">\r\n-          🎤\r\n-          <input type=\"file\" accept=\"audio/*\" hidden onChange={(e) => handleFile(e, \"audio\")} />\r\n-        </label>\r\n-        <label className=\"cursor-pointer\" title=\"Send Video\">\r\n-          📹\r\n-          <input type=\"file\" accept=\"video/*\" hidden onChange={(e) => handleFile(e, \"video\")} />\r\n-        </label>\r\n+        {/* File Uploads */}\r\n+        <div className=\"flex items-center gap-2 text-xl\">\r\n+          <label className=\"cursor-pointer\" title=\"Send Image\">\r\n+            📎\r\n+            <input type=\"file\" accept=\"image/*\" hidden onChange={(e) => handleFile(e, \"image\")} />\r\n+          </label>\r\n+          <label className=\"cursor-pointer\" title=\"Send Audio\">\r\n+            🎤\r\n+            <input type=\"file\" accept=\"audio/*\" hidden onChange={(e) => handleFile(e, \"audio\")} />\r\n+          </label>\r\n+          <label className=\"cursor-pointer\" title=\"Send Video\">\r\n+            📹\r\n+            <input type=\"file\" accept=\"video/*\" hidden onChange={(e) => handleFile(e, \"video\")} />\r\n+          </label>\r\n+        </div>\r\n \r\n         {/* Send Button */}\r\n         <button\r\n           onClick={sendText}\r\n           disabled={!input.trim()}\r\n-          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md disabled:opacity-50\"\r\n+          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 text-sm rounded-md disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n         >\r\n           Send\r\n         </button>\r\n       </div>\r\n"
                },
                {
                    "date": 1752424025983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,12 @@\n   socket: any;\r\n   roomId: string;\r\n }\r\n \r\n-const topEmojis = [\"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\", \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"];\r\n+const topEmojis = [\r\n+  \"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\",\r\n+  \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"\r\n+];\r\n \r\n export default function ChatBox({ socket, roomId }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n@@ -29,9 +32,13 @@\n     if (!socket) return;\r\n \r\n     const onMessage = (msg: any) => {\r\n       setMessages((prev) => [...prev, msg]);\r\n-      socket.emit(\"message-status\", { roomId, messageId: msg.id, status: \"seen\" });\r\n+      socket.emit(\"message-status\", {\r\n+        roomId,\r\n+        messageId: msg.id,\r\n+        status: \"seen\",\r\n+      });\r\n       setPartnerTyping(false);\r\n     };\r\n \r\n     const onTyping = ({ sender }: any) => {\r\n@@ -41,9 +48,13 @@\n       }\r\n     };\r\n \r\n     const onStatus = ({ messageId, status }: any) => {\r\n-      setMessages((prev) => prev.map((m) => (m.id === messageId ? { ...m, status } : m)));\r\n+      setMessages((prev) =>\r\n+        prev.map((m) =>\r\n+          m.id === messageId ? { ...m, status } : m\r\n+        )\r\n+      );\r\n     };\r\n \r\n     const onDelete = ({ messageId }: any) => {\r\n       setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n@@ -51,9 +62,14 @@\n \r\n     const onReact = ({ messageId, reaction, user }: any) => {\r\n       setMessages((prev) =>\r\n         prev.map((m) =>\r\n-          m.id === messageId ? { ...m, reactions: { ...m.reactions, [user]: reaction } } : m\r\n+          m.id === messageId\r\n+            ? {\r\n+                ...m,\r\n+                reactions: { ...m.reactions, [user]: reaction },\r\n+              }\r\n+            : m\r\n         )\r\n       );\r\n     };\r\n \r\n@@ -98,30 +114,47 @@\n     if (!input.trim()) return;\r\n     sendMessage({ content: input.trim(), type: \"text\", roomId });\r\n   };\r\n \r\n-  const handleFile = (e: React.ChangeEvent<HTMLInputElement>, type: string) => {\r\n+  const handleFile = (\r\n+    e: React.ChangeEvent<HTMLInputElement>,\r\n+    type: string\r\n+  ) => {\r\n     const f = e.target.files?.[0];\r\n     if (!f) return;\r\n     const url = URL.createObjectURL(f);\r\n     sendMessage({ content: url, roomId, type });\r\n   };\r\n \r\n   return (\r\n-    <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 border rounded-lg overflow-hidden shadow-lg\">\r\n+    <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 border rounded-lg overflow-hidden shadow-lg relative\">\r\n       {/* Chat Messages */}\r\n-      <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-3 custom-scrollbar\">\r\n+      <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-3 scrollbar-thin scrollbar-thumb-neutral-400 dark:scrollbar-thumb-neutral-700\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n             sender={msg.sender === socket.id ? \"me\" : \"partner\"}\r\n-            onDelete={() => socket.emit(\"delete-message\", { roomId, messageId: msg.id })}\r\n+            onDelete={() =>\r\n+              socket.emit(\"delete-message\", {\r\n+                roomId,\r\n+                messageId: msg.id,\r\n+              })\r\n+            }\r\n             onEdit={(newContent: string) =>\r\n-              socket.emit(\"edit-message\", { roomId, messageId: msg.id, content: newContent })\r\n+              socket.emit(\"edit-message\", {\r\n+                roomId,\r\n+                messageId: msg.id,\r\n+                content: newContent,\r\n+              })\r\n             }\r\n             onReact={(reaction: string) =>\r\n-              socket.emit(\"react-message\", { roomId, messageId: msg.id, reaction, user: socket.id })\r\n+              socket.emit(\"react-message\", {\r\n+                roomId,\r\n+                messageId: msg.id,\r\n+                reaction,\r\n+                user: socket.id,\r\n+              })\r\n             }\r\n           />\r\n         ))}\r\n         {partnerTyping && <TypingIndicator />}\r\n@@ -129,9 +162,9 @@\n       </div>\r\n \r\n       {/* Emoji Picker */}\r\n       {showEmojiPicker && (\r\n-        <div className=\"absolute bottom-20 left-4 z-50 bg-white dark:bg-neutral-800 border rounded-md shadow-lg p-3 w-64 max-h-64 overflow-y-auto grid grid-cols-5 gap-2\">\r\n+        <div className=\"absolute bottom-20 left-4 z-50 bg-white dark:bg-neutral-800 border rounded-md shadow-lg p-3 w-64 max-h-64 overflow-y-auto grid grid-cols-5 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n           {topEmojis.map((emoji) => (\r\n             <button\r\n               key={emoji}\r\n               onClick={() => setInput((prev) => prev + emoji)}\r\n"
                },
                {
                    "date": 1752426713469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n \r\n   return (\r\n     <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 border rounded-lg overflow-hidden shadow-lg relative\">\r\n       {/* Chat Messages */}\r\n-      <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-3 scrollbar-thin scrollbar-thumb-neutral-400 dark:scrollbar-thumb-neutral-700\">\r\n+      <div className=\"flex-1 overflow-y-scroll px-4 py-3 space-y-3 scrollbar scrollbar-thumb-neutral-400 dark:scrollbar-thumb-neutral-700\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n@@ -162,9 +162,9 @@\n       </div>\r\n \r\n       {/* Emoji Picker */}\r\n       {showEmojiPicker && (\r\n-        <div className=\"absolute bottom-20 left-4 z-50 bg-white dark:bg-neutral-800 border rounded-md shadow-lg p-3 w-64 max-h-64 overflow-y-auto grid grid-cols-5 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n+        <div className=\"absolute bottom-20 left-4 z-50 bg-white dark:bg-neutral-800 border rounded-md shadow-lg p-3 w-64 max-h-64 overflow-y-auto grid grid-cols-5 gap-2 scrollbar scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n           {topEmojis.map((emoji) => (\r\n             <button\r\n               key={emoji}\r\n               onClick={() => setInput((prev) => prev + emoji)}\r\n@@ -178,18 +178,16 @@\n       )}\r\n \r\n       {/* Input Controls */}\r\n       <div className=\"w-full border-t dark:border-neutral-700 px-4 py-3 flex items-center gap-3 bg-white dark:bg-neutral-900\">\r\n-        {/* Emoji Toggle */}\r\n         <button\r\n           onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n           className=\"text-2xl hover:scale-110 transition-transform\"\r\n           aria-label=\"Toggle emoji picker\"\r\n         >\r\n           😊\r\n         </button>\r\n \r\n-        {/* Text Input */}\r\n         <input\r\n           type=\"text\"\r\n           placeholder=\"Type a message...\"\r\n           value={input}\r\n@@ -200,9 +198,8 @@\n           onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n           className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 text-sm px-4 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n         />\r\n \r\n-        {/* File Uploads */}\r\n         <div className=\"flex items-center gap-2 text-xl\">\r\n           <label className=\"cursor-pointer\" title=\"Send Image\">\r\n             📎\r\n             <input type=\"file\" accept=\"image/*\" hidden onChange={(e) => handleFile(e, \"image\")} />\r\n@@ -216,9 +213,8 @@\n             <input type=\"file\" accept=\"video/*\" hidden onChange={(e) => handleFile(e, \"video\")} />\r\n           </label>\r\n         </div>\r\n \r\n-        {/* Send Button */}\r\n         <button\r\n           onClick={sendText}\r\n           disabled={!input.trim()}\r\n           className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 text-sm rounded-md disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n"
                },
                {
                    "date": 1752426807580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n \r\n   return (\r\n     <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 border rounded-lg overflow-hidden shadow-lg relative\">\r\n       {/* Chat Messages */}\r\n-      <div className=\"flex-1 overflow-y-scroll px-4 py-3 space-y-3 scrollbar scrollbar-thumb-neutral-400 dark:scrollbar-thumb-neutral-700\">\r\n+      <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-3 scrollbar-thin scrollbar-thumb-neutral-400 dark:scrollbar-thumb-neutral-700\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n@@ -162,9 +162,9 @@\n       </div>\r\n \r\n       {/* Emoji Picker */}\r\n       {showEmojiPicker && (\r\n-        <div className=\"absolute bottom-20 left-4 z-50 bg-white dark:bg-neutral-800 border rounded-md shadow-lg p-3 w-64 max-h-64 overflow-y-auto grid grid-cols-5 gap-2 scrollbar scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n+        <div className=\"absolute bottom-20 left-4 z-50 bg-white dark:bg-neutral-800 border rounded-md shadow-lg p-3 w-64 max-h-64 overflow-y-auto grid grid-cols-5 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n           {topEmojis.map((emoji) => (\r\n             <button\r\n               key={emoji}\r\n               onClick={() => setInput((prev) => prev + emoji)}\r\n@@ -178,16 +178,18 @@\n       )}\r\n \r\n       {/* Input Controls */}\r\n       <div className=\"w-full border-t dark:border-neutral-700 px-4 py-3 flex items-center gap-3 bg-white dark:bg-neutral-900\">\r\n+        {/* Emoji Toggle */}\r\n         <button\r\n           onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n           className=\"text-2xl hover:scale-110 transition-transform\"\r\n           aria-label=\"Toggle emoji picker\"\r\n         >\r\n           😊\r\n         </button>\r\n \r\n+        {/* Text Input */}\r\n         <input\r\n           type=\"text\"\r\n           placeholder=\"Type a message...\"\r\n           value={input}\r\n@@ -198,8 +200,9 @@\n           onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n           className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 text-sm px-4 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n         />\r\n \r\n+        {/* File Uploads */}\r\n         <div className=\"flex items-center gap-2 text-xl\">\r\n           <label className=\"cursor-pointer\" title=\"Send Image\">\r\n             📎\r\n             <input type=\"file\" accept=\"image/*\" hidden onChange={(e) => handleFile(e, \"image\")} />\r\n@@ -213,8 +216,9 @@\n             <input type=\"file\" accept=\"video/*\" hidden onChange={(e) => handleFile(e, \"video\")} />\r\n           </label>\r\n         </div>\r\n \r\n+        {/* Send Button */}\r\n         <button\r\n           onClick={sendText}\r\n           disabled={!input.trim()}\r\n           className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 text-sm rounded-md disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n"
                },
                {
                    "date": 1752509816589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n \r\n   return (\r\n     <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 border rounded-lg overflow-hidden shadow-lg relative\">\r\n       {/* Chat Messages */}\r\n-      <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-3 scrollbar-thin scrollbar-thumb-neutral-400 dark:scrollbar-thumb-neutral-700\">\r\n+<div className=\"flex-1 overflow-y-scroll px-4 py-3 space-y-3 scrollbar scrollbar-thumb-neutral-400 scrollbar-track-neutral-200 dark:scrollbar-thumb-neutral-600 dark:scrollbar-track-neutral-800\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n"
                },
                {
                    "date": 1752509824499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,11 +64,11 @@\n       setMessages((prev) =>\r\n         prev.map((m) =>\r\n           m.id === messageId\r\n             ? {\r\n-                ...m,\r\n-                reactions: { ...m.reactions, [user]: reaction },\r\n-              }\r\n+              ...m,\r\n+              reactions: { ...m.reactions, [user]: reaction },\r\n+            }\r\n             : m\r\n         )\r\n       );\r\n     };\r\n@@ -127,9 +127,9 @@\n \r\n   return (\r\n     <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 border rounded-lg overflow-hidden shadow-lg relative\">\r\n       {/* Chat Messages */}\r\n-<div className=\"flex-1 overflow-y-scroll px-4 py-3 space-y-3 scrollbar scrollbar-thumb-neutral-400 scrollbar-track-neutral-200 dark:scrollbar-thumb-neutral-600 dark:scrollbar-track-neutral-800\">\r\n+      <div className=\"flex-1 overflow-y-scroll px-4 py-3 space-y-3 scrollbar scrollbar-thumb-neutral-400 scrollbar-track-neutral-200 dark:scrollbar-thumb-neutral-600 dark:scrollbar-track-neutral-800\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n"
                },
                {
                    "date": 1752510652705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,11 +64,11 @@\n       setMessages((prev) =>\r\n         prev.map((m) =>\r\n           m.id === messageId\r\n             ? {\r\n-              ...m,\r\n-              reactions: { ...m.reactions, [user]: reaction },\r\n-            }\r\n+                ...m,\r\n+                reactions: { ...m.reactions, [user]: reaction },\r\n+              }\r\n             : m\r\n         )\r\n       );\r\n     };\r\n@@ -127,9 +127,9 @@\n \r\n   return (\r\n     <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 border rounded-lg overflow-hidden shadow-lg relative\">\r\n       {/* Chat Messages */}\r\n-      <div className=\"flex-1 overflow-y-scroll px-4 py-3 space-y-3 scrollbar scrollbar-thumb-neutral-400 scrollbar-track-neutral-200 dark:scrollbar-thumb-neutral-600 dark:scrollbar-track-neutral-800\">\r\n+      <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-3 scrollbar-thin scrollbar-thumb-neutral-400 dark:scrollbar-thumb-neutral-700\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n"
                },
                {
                    "date": 1752511204438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,20 +72,30 @@\n         )\r\n       );\r\n     };\r\n \r\n+    const onEdit = ({ messageId, content }: any) => {\r\n+      setMessages((prev) =>\r\n+        prev.map((m) =>\r\n+          m.id === messageId ? { ...m, content } : m\r\n+        )\r\n+      );\r\n+    };\r\n+\r\n     socket.on(\"receive-message\", onMessage);\r\n     socket.on(\"typing\", onTyping);\r\n     socket.on(\"message-status-update\", onStatus);\r\n     socket.on(\"message-deleted\", onDelete);\r\n     socket.on(\"message-react\", onReact);\r\n+    socket.on(\"message-edited\", onEdit); // Ensure this event is emitted server-side\r\n \r\n     return () => {\r\n       socket.off(\"receive-message\", onMessage);\r\n       socket.off(\"typing\", onTyping);\r\n       socket.off(\"message-status-update\", onStatus);\r\n       socket.off(\"message-deleted\", onDelete);\r\n       socket.off(\"message-react\", onReact);\r\n+      socket.off(\"message-edited\", onEdit);\r\n     };\r\n   }, [socket, roomId]);\r\n \r\n   const debouncedTyping = useRef(\r\n@@ -133,29 +143,48 @@\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n             sender={msg.sender === socket.id ? \"me\" : \"partner\"}\r\n-            onDelete={() =>\r\n+            onDelete={() => {\r\n               socket.emit(\"delete-message\", {\r\n                 roomId,\r\n                 messageId: msg.id,\r\n-              })\r\n-            }\r\n-            onEdit={(newContent: string) =>\r\n+              });\r\n+              setMessages((prev) => prev.filter((m) => m.id !== msg.id));\r\n+            }}\r\n+            onEdit={(newContent: string) => {\r\n               socket.emit(\"edit-message\", {\r\n                 roomId,\r\n                 messageId: msg.id,\r\n                 content: newContent,\r\n-              })\r\n-            }\r\n-            onReact={(reaction: string) =>\r\n+              });\r\n+              setMessages((prev) =>\r\n+                prev.map((m) =>\r\n+                  m.id === msg.id ? { ...m, content: newContent } : m\r\n+                )\r\n+              );\r\n+            }}\r\n+            onReact={(reaction: string) => {\r\n               socket.emit(\"react-message\", {\r\n                 roomId,\r\n                 messageId: msg.id,\r\n                 reaction,\r\n                 user: socket.id,\r\n-              })\r\n-            }\r\n+              });\r\n+              setMessages((prev) =>\r\n+                prev.map((m) =>\r\n+                  m.id === msg.id\r\n+                    ? {\r\n+                        ...m,\r\n+                        reactions: {\r\n+                          ...m.reactions,\r\n+                          [socket.id]: reaction,\r\n+                        },\r\n+                      }\r\n+                    : m\r\n+                )\r\n+              );\r\n+            }}\r\n           />\r\n         ))}\r\n         {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n"
                },
                {
                    "date": 1752513194797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,11 +49,9 @@\n     };\r\n \r\n     const onStatus = ({ messageId, status }: any) => {\r\n       setMessages((prev) =>\r\n-        prev.map((m) =>\r\n-          m.id === messageId ? { ...m, status } : m\r\n-        )\r\n+        prev.map((m) => (m.id === messageId ? { ...m, status } : m))\r\n       );\r\n     };\r\n \r\n     const onDelete = ({ messageId }: any) => {\r\n@@ -63,31 +61,26 @@\n     const onReact = ({ messageId, reaction, user }: any) => {\r\n       setMessages((prev) =>\r\n         prev.map((m) =>\r\n           m.id === messageId\r\n-            ? {\r\n-                ...m,\r\n-                reactions: { ...m.reactions, [user]: reaction },\r\n-              }\r\n+            ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n             : m\r\n         )\r\n       );\r\n     };\r\n \r\n     const onEdit = ({ messageId, content }: any) => {\r\n       setMessages((prev) =>\r\n-        prev.map((m) =>\r\n-          m.id === messageId ? { ...m, content } : m\r\n-        )\r\n+        prev.map((m) => (m.id === messageId ? { ...m, content } : m))\r\n       );\r\n     };\r\n \r\n     socket.on(\"receive-message\", onMessage);\r\n     socket.on(\"typing\", onTyping);\r\n     socket.on(\"message-status-update\", onStatus);\r\n     socket.on(\"message-deleted\", onDelete);\r\n     socket.on(\"message-react\", onReact);\r\n-    socket.on(\"message-edited\", onEdit); // Ensure this event is emitted server-side\r\n+    socket.on(\"message-edited\", onEdit);\r\n \r\n     return () => {\r\n       socket.off(\"receive-message\", onMessage);\r\n       socket.off(\"typing\", onTyping);\r\n@@ -135,11 +128,11 @@\n     sendMessage({ content: url, roomId, type });\r\n   };\r\n \r\n   return (\r\n-    <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 border rounded-lg overflow-hidden shadow-lg relative\">\r\n+    <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 border rounded-2xl overflow-hidden shadow-xl relative\">\r\n       {/* Chat Messages */}\r\n-      <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-3 scrollbar-thin scrollbar-thumb-neutral-400 dark:scrollbar-thumb-neutral-700\">\r\n+      <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n@@ -157,11 +150,9 @@\n                 messageId: msg.id,\r\n                 content: newContent,\r\n               });\r\n               setMessages((prev) =>\r\n-                prev.map((m) =>\r\n-                  m.id === msg.id ? { ...m, content: newContent } : m\r\n-                )\r\n+                prev.map((m) => (m.id === msg.id ? { ...m, content: newContent } : m))\r\n               );\r\n             }}\r\n             onReact={(reaction: string) => {\r\n               socket.emit(\"react-message\", {\r\n@@ -191,14 +182,14 @@\n       </div>\r\n \r\n       {/* Emoji Picker */}\r\n       {showEmojiPicker && (\r\n-        <div className=\"absolute bottom-20 left-4 z-50 bg-white dark:bg-neutral-800 border rounded-md shadow-lg p-3 w-64 max-h-64 overflow-y-auto grid grid-cols-5 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n+        <div className=\"absolute bottom-20 left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n           {topEmojis.map((emoji) => (\r\n             <button\r\n               key={emoji}\r\n               onClick={() => setInput((prev) => prev + emoji)}\r\n-              className=\"text-2xl hover:scale-110 transition-transform\"\r\n+              className=\"text-2xl hover:scale-125 transition-transform\"\r\n               aria-label={`Insert emoji ${emoji}`}\r\n             >\r\n               {emoji}\r\n             </button>\r\n@@ -207,18 +198,16 @@\n       )}\r\n \r\n       {/* Input Controls */}\r\n       <div className=\"w-full border-t dark:border-neutral-700 px-4 py-3 flex items-center gap-3 bg-white dark:bg-neutral-900\">\r\n-        {/* Emoji Toggle */}\r\n         <button\r\n           onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n           className=\"text-2xl hover:scale-110 transition-transform\"\r\n           aria-label=\"Toggle emoji picker\"\r\n         >\r\n           😊\r\n         </button>\r\n \r\n-        {/* Text Input */}\r\n         <input\r\n           type=\"text\"\r\n           placeholder=\"Type a message...\"\r\n           value={input}\r\n@@ -226,12 +215,11 @@\n             setInput(e.target.value);\r\n             debouncedTyping();\r\n           }}\r\n           onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n-          className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 text-sm px-4 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n+          className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 text-sm px-4 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n         />\r\n \r\n-        {/* File Uploads */}\r\n         <div className=\"flex items-center gap-2 text-xl\">\r\n           <label className=\"cursor-pointer\" title=\"Send Image\">\r\n             📎\r\n             <input type=\"file\" accept=\"image/*\" hidden onChange={(e) => handleFile(e, \"image\")} />\r\n@@ -245,13 +233,12 @@\n             <input type=\"file\" accept=\"video/*\" hidden onChange={(e) => handleFile(e, \"video\")} />\r\n           </label>\r\n         </div>\r\n \r\n-        {/* Send Button */}\r\n         <button\r\n           onClick={sendText}\r\n           disabled={!input.trim()}\r\n-          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 text-sm rounded-md disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n+          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 text-sm rounded-lg disabled:opacity-50 disabled:cursor-not-allowed transition-all\"\r\n         >\r\n           Send\r\n         </button>\r\n       </div>\r\n"
                },
                {
                    "date": 1752513677983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,11 +128,11 @@\n     sendMessage({ content: url, roomId, type });\r\n   };\r\n \r\n   return (\r\n-    <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 border rounded-2xl overflow-hidden shadow-xl relative\">\r\n+    <div className=\"flex flex-col h-full max-h-full bg-white dark:bg-neutral-900 border rounded-2xl overflow-hidden shadow-xl relative\">\r\n       {/* Chat Messages */}\r\n-      <div className=\"flex-1 overflow-y-auto px-4 py-3 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n+      <div className=\"flex-1 min-h-0 overflow-y-auto px-4 py-3 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n"
                },
                {
                    "date": 1752516294425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,22 +9,32 @@\n \r\n interface ChatBoxProps {\r\n   socket: any;\r\n   roomId: string;\r\n+  soundOn?: boolean;\r\n }\r\n \r\n const topEmojis = [\r\n   \"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\",\r\n   \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"\r\n ];\r\n \r\n-export default function ChatBox({ socket, roomId }: ChatBoxProps) {\r\n+export default function ChatBox({ socket, roomId, soundOn = true }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n   const [partnerTyping, setPartnerTyping] = useState(false);\r\n   const messagesEndRef = useRef<HTMLDivElement>(null);\r\n \r\n+  const sentSoundRef = useRef<HTMLAudioElement>(null);\r\n+  const receiveSoundRef = useRef<HTMLAudioElement>(null);\r\n+\r\n+  const playSound = (type: \"sent\" | \"receive\") => {\r\n+    if (!soundOn) return;\r\n+    if (type === \"sent\") sentSoundRef.current?.play().catch(() => {});\r\n+    if (type === \"receive\") receiveSoundRef.current?.play().catch(() => {});\r\n+  };\r\n+\r\n   useEffect(() => {\r\n     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n   }, [messages, partnerTyping]);\r\n \r\n@@ -38,8 +48,9 @@\n         messageId: msg.id,\r\n         status: \"seen\",\r\n       });\r\n       setPartnerTyping(false);\r\n+      playSound(\"receive\");\r\n     };\r\n \r\n     const onTyping = ({ sender }: any) => {\r\n       if (sender !== socket.id) {\r\n@@ -88,9 +99,9 @@\n       socket.off(\"message-deleted\", onDelete);\r\n       socket.off(\"message-react\", onReact);\r\n       socket.off(\"message-edited\", onEdit);\r\n     };\r\n-  }, [socket, roomId]);\r\n+  }, [socket, roomId, soundOn]);\r\n \r\n   const debouncedTyping = useRef(\r\n     debounce(() => {\r\n       socket.emit(\"typing\", { roomId, sender: socket.id });\r\n@@ -107,8 +118,9 @@\n       reactions: {},\r\n     };\r\n     socket.emit(\"send-message\", msg);\r\n     setMessages((prev) => [...prev, msg]);\r\n+    playSound(\"sent\");\r\n     setInput(\"\");\r\n     setShowEmojiPicker(false);\r\n     setPartnerTyping(false);\r\n   };\r\n@@ -129,8 +141,12 @@\n   };\r\n \r\n   return (\r\n     <div className=\"flex flex-col h-full max-h-full bg-white dark:bg-neutral-900 border rounded-2xl overflow-hidden shadow-xl relative\">\r\n+      {/* Audio Elements */}\r\n+      <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" />\r\n+      <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" />\r\n+\r\n       {/* Chat Messages */}\r\n       <div className=\"flex-1 min-h-0 overflow-y-auto px-4 py-3 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n"
                },
                {
                    "date": 1752517148105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,23 @@\n   const receiveSoundRef = useRef<HTMLAudioElement>(null);\r\n \r\n   const playSound = (type: \"sent\" | \"receive\") => {\r\n     if (!soundOn) return;\r\n-    if (type === \"sent\") sentSoundRef.current?.play().catch(() => {});\r\n-    if (type === \"receive\") receiveSoundRef.current?.play().catch(() => {});\r\n+\r\n+    const audioRef = type === \"sent\" ? sentSoundRef : receiveSoundRef;\r\n+    const play = async () => {\r\n+      try {\r\n+        const audio = audioRef.current;\r\n+        if (!audio) return;\r\n+        audio.volume = 0.8;\r\n+        await audio.play();\r\n+      } catch (err) {\r\n+        // Autoplay restrictions: resume on user gesture\r\n+        const ctx = new AudioContext();\r\n+        await ctx.resume();\r\n+      }\r\n+    };\r\n+    play();\r\n   };\r\n \r\n   useEffect(() => {\r\n     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n@@ -129,26 +142,31 @@\n     if (!input.trim()) return;\r\n     sendMessage({ content: input.trim(), type: \"text\", roomId });\r\n   };\r\n \r\n-  const handleFile = (\r\n-    e: React.ChangeEvent<HTMLInputElement>,\r\n-    type: string\r\n-  ) => {\r\n-    const f = e.target.files?.[0];\r\n-    if (!f) return;\r\n-    const url = URL.createObjectURL(f);\r\n-    sendMessage({ content: url, roomId, type });\r\n+  const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    const file = e.target.files?.[0];\r\n+    if (!file) return;\r\n+\r\n+    const url = URL.createObjectURL(file);\r\n+    const mime = file.type;\r\n+\r\n+    let type: \"image\" | \"audio\" | \"video\" | \"file\" = \"file\";\r\n+    if (mime.startsWith(\"image\")) type = \"image\";\r\n+    else if (mime.startsWith(\"audio\")) type = \"audio\";\r\n+    else if (mime.startsWith(\"video\")) type = \"video\";\r\n+\r\n+    sendMessage({ content: url, type, roomId });\r\n   };\r\n \r\n   return (\r\n     <div className=\"flex flex-col h-full max-h-full bg-white dark:bg-neutral-900 border rounded-2xl overflow-hidden shadow-xl relative\">\r\n       {/* Audio Elements */}\r\n-      <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" />\r\n-      <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" />\r\n+      <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n+      <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n \r\n-      {/* Chat Messages */}\r\n-      <div className=\"flex-1 min-h-0 overflow-y-auto px-4 py-3 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n+      {/* Messages */}\r\n+      <div className=\"flex-1 min-h-0 overflow-y-auto px-3 py-3 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n@@ -198,9 +216,9 @@\n       </div>\r\n \r\n       {/* Emoji Picker */}\r\n       {showEmojiPicker && (\r\n-        <div className=\"absolute bottom-20 left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n+        <div className=\"absolute bottom-20 left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-72 max-h-64 overflow-y-auto grid grid-cols-6 sm:grid-cols-7 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n           {topEmojis.map((emoji) => (\r\n             <button\r\n               key={emoji}\r\n               onClick={() => setInput((prev) => prev + emoji)}\r\n@@ -213,9 +231,9 @@\n         </div>\r\n       )}\r\n \r\n       {/* Input Controls */}\r\n-      <div className=\"w-full border-t dark:border-neutral-700 px-4 py-3 flex items-center gap-3 bg-white dark:bg-neutral-900\">\r\n+      <div className=\"w-full border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 sm:gap-3 bg-white dark:bg-neutral-900\">\r\n         <button\r\n           onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n           className=\"text-2xl hover:scale-110 transition-transform\"\r\n           aria-label=\"Toggle emoji picker\"\r\n@@ -231,30 +249,25 @@\n             setInput(e.target.value);\r\n             debouncedTyping();\r\n           }}\r\n           onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n-          className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 text-sm px-4 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n+          className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 text-sm px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n         />\r\n \r\n-        <div className=\"flex items-center gap-2 text-xl\">\r\n-          <label className=\"cursor-pointer\" title=\"Send Image\">\r\n-            📎\r\n-            <input type=\"file\" accept=\"image/*\" hidden onChange={(e) => handleFile(e, \"image\")} />\r\n-          </label>\r\n-          <label className=\"cursor-pointer\" title=\"Send Audio\">\r\n-            🎤\r\n-            <input type=\"file\" accept=\"audio/*\" hidden onChange={(e) => handleFile(e, \"audio\")} />\r\n-          </label>\r\n-          <label className=\"cursor-pointer\" title=\"Send Video\">\r\n-            📹\r\n-            <input type=\"file\" accept=\"video/*\" hidden onChange={(e) => handleFile(e, \"video\")} />\r\n-          </label>\r\n-        </div>\r\n+        <label className=\"cursor-pointer text-xl\" title=\"Send file\">\r\n+          📎\r\n+          <input\r\n+            type=\"file\"\r\n+            accept=\"image/*,audio/*,video/*\"\r\n+            hidden\r\n+            onChange={handleFile}\r\n+          />\r\n+        </label>\r\n \r\n         <button\r\n           onClick={sendText}\r\n           disabled={!input.trim()}\r\n-          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 text-sm rounded-lg disabled:opacity-50 disabled:cursor-not-allowed transition-all\"\r\n+          className=\"bg-blue-600 hover:bg-blue-700 text-white px-3 sm:px-4 py-2 text-sm rounded-lg disabled:opacity-50 disabled:cursor-not-allowed transition-all\"\r\n         >\r\n           Send\r\n         </button>\r\n       </div>\r\n"
                },
                {
                    "date": 1752519847804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,16 +10,24 @@\n interface ChatBoxProps {\r\n   socket: any;\r\n   roomId: string;\r\n   soundOn?: boolean;\r\n+  partnerName?: string;\r\n+  partnerAge?: string | number;\r\n }\r\n \r\n const topEmojis = [\r\n   \"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\",\r\n   \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"\r\n ];\r\n \r\n-export default function ChatBox({ socket, roomId, soundOn = true }: ChatBoxProps) {\r\n+export default function ChatBox({\r\n+  socket,\r\n+  roomId,\r\n+  soundOn = true,\r\n+  partnerName = \"Stranger\",\r\n+  partnerAge,\r\n+}: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n   const [partnerTyping, setPartnerTyping] = useState(false);\r\n@@ -38,9 +46,8 @@\n         if (!audio) return;\r\n         audio.volume = 0.8;\r\n         await audio.play();\r\n       } catch (err) {\r\n-        // Autoplay restrictions: resume on user gesture\r\n         const ctx = new AudioContext();\r\n         await ctx.resume();\r\n       }\r\n     };\r\n@@ -159,19 +166,21 @@\n   };\r\n \r\n   return (\r\n     <div className=\"flex flex-col h-full max-h-full bg-white dark:bg-neutral-900 border rounded-2xl overflow-hidden shadow-xl relative\">\r\n-      {/* Audio Elements */}\r\n+      {/* Sounds */}\r\n       <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n       <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n \r\n       {/* Messages */}\r\n-      <div className=\"flex-1 min-h-0 overflow-y-auto px-3 py-3 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n+      <div className=\"flex-1 overflow-y-auto px-3 py-3 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n             sender={msg.sender === socket.id ? \"me\" : \"partner\"}\r\n+            name={msg.sender === socket.id ? \"You\" : partnerName}\r\n+            age={msg.sender === socket.id ? undefined : partnerAge}\r\n             onDelete={() => {\r\n               socket.emit(\"delete-message\", {\r\n                 roomId,\r\n                 messageId: msg.id,\r\n@@ -222,9 +231,8 @@\n             <button\r\n               key={emoji}\r\n               onClick={() => setInput((prev) => prev + emoji)}\r\n               className=\"text-2xl hover:scale-125 transition-transform\"\r\n-              aria-label={`Insert emoji ${emoji}`}\r\n             >\r\n               {emoji}\r\n             </button>\r\n           ))}\r\n@@ -235,9 +243,8 @@\n       <div className=\"w-full border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 sm:gap-3 bg-white dark:bg-neutral-900\">\r\n         <button\r\n           onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n           className=\"text-2xl hover:scale-110 transition-transform\"\r\n-          aria-label=\"Toggle emoji picker\"\r\n         >\r\n           😊\r\n         </button>\r\n \r\n@@ -265,9 +272,9 @@\n \r\n         <button\r\n           onClick={sendText}\r\n           disabled={!input.trim()}\r\n-          className=\"bg-blue-600 hover:bg-blue-700 text-white px-3 sm:px-4 py-2 text-sm rounded-lg disabled:opacity-50 disabled:cursor-not-allowed transition-all\"\r\n+          className=\"bg-blue-600 hover:bg-blue-700 text-white px-3 sm:px-4 py-2 text-sm rounded-lg disabled:opacity-50 transition\"\r\n         >\r\n           Send\r\n         </button>\r\n       </div>\r\n"
                },
                {
                    "date": 1752521991925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n   roomId: string;\r\n   soundOn?: boolean;\r\n   partnerName?: string;\r\n   partnerAge?: string | number;\r\n+  partnerInfo?: any;\r\n }\r\n \r\n const topEmojis = [\r\n   \"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\",\r\n"
                },
                {
                    "date": 1752603128283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,272 @@\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect, useRef } from \"react\";\r\n+import { v4 as uuidv4 } from \"uuid\";\r\n+const debounce = require(\"lodash/debounce\");\r\n+\r\n+import Message from \"./Message\";\r\n+import TypingIndicator from \"./TypingIndicator\";\r\n+\r\n+interface ChatBoxProps {\r\n+  socket: any;\r\n+  roomId: string;\r\n+  soundOn?: boolean;\r\n+  partnerName?: string;\r\n+  partnerAge?: string | number;\r\n+}\r\n+\r\n+const topEmojis = [\r\n+  \"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\",\r\n+  \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"\r\n+];\r\n+\r\n+export default function ChatBox({\r\n+  socket,\r\n+  roomId,\r\n+  soundOn = true,\r\n+  partnerName = \"Stranger\",\r\n+  partnerAge,\r\n+}: ChatBoxProps) {\r\n+  const [messages, setMessages] = useState<any[]>([]);\r\n+  const [input, setInput] = useState(\"\");\r\n+  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n+  const [partnerTyping, setPartnerTyping] = useState(false);\r\n+  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n+\r\n+  const sentSoundRef = useRef<HTMLAudioElement>(null);\r\n+  const receiveSoundRef = useRef<HTMLAudioElement>(null);\r\n+\r\n+  const playSound = (type: \"sent\" | \"receive\") => {\r\n+    if (!soundOn) return;\r\n+\r\n+    const audioRef = type === \"sent\" ? sentSoundRef : receiveSoundRef;\r\n+    const play = async () => {\r\n+      try {\r\n+        const audio = audioRef.current;\r\n+        if (!audio) return;\r\n+        audio.volume = 0.8;\r\n+        await audio.play();\r\n+      } catch (err) {\r\n+        const ctx = new AudioContext();\r\n+        await ctx.resume();\r\n+      }\r\n+    };\r\n+    play();\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n+  }, [messages, partnerTyping]);\r\n+\r\n+  useEffect(() => {\r\n+    if (!socket) return;\r\n+\r\n+    const onMessage = (msg: any) => {\r\n+      setMessages((prev) => [...prev, msg]);\r\n+      socket.emit(\"message-status\", {\r\n+        roomId,\r\n+        messageId: msg.id,\r\n+        status: \"seen\",\r\n+      });\r\n+      setPartnerTyping(false);\r\n+      playSound(\"receive\");\r\n+    };\r\n+\r\n+    const onTyping = ({ sender }: any) => {\r\n+      if (sender !== socket.id) {\r\n+        setPartnerTyping(true);\r\n+        setTimeout(() => setPartnerTyping(false), 3000);\r\n+      }\r\n+    };\r\n+\r\n+    const onStatus = ({ messageId, status }: any) => {\r\n+      setMessages((prev) =>\r\n+        prev.map((m) => (m.id === messageId ? { ...m, status } : m))\r\n+      );\r\n+    };\r\n+\r\n+    const onDelete = ({ messageId }: any) => {\r\n+      setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n+    };\r\n+\r\n+    const onReact = ({ messageId, reaction, user }: any) => {\r\n+      setMessages((prev) =>\r\n+        prev.map((m) =>\r\n+          m.id === messageId\r\n+            ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n+            : m\r\n+        )\r\n+      );\r\n+    };\r\n+\r\n+    const onEdit = ({ messageId, content }: any) => {\r\n+      setMessages((prev) =>\r\n+        prev.map((m) => (m.id === messageId ? { ...m, content } : m))\r\n+      );\r\n+    };\r\n+\r\n+    socket.on(\"receive-message\", onMessage);\r\n+    socket.on(\"typing\", onTyping);\r\n+    socket.on(\"message-status-update\", onStatus);\r\n+    socket.on(\"message-deleted\", onDelete);\r\n+    socket.on(\"message-react\", onReact);\r\n+    socket.on(\"message-edited\", onEdit);\r\n+\r\n+    return () => {\r\n+      socket.off(\"receive-message\", onMessage);\r\n+      socket.off(\"typing\", onTyping);\r\n+      socket.off(\"message-status-update\", onStatus);\r\n+      socket.off(\"message-deleted\", onDelete);\r\n+      socket.off(\"message-react\", onReact);\r\n+      socket.off(\"message-edited\", onEdit);\r\n+    };\r\n+  }, [socket, roomId, soundOn]);\r\n+\r\n+  const debouncedTyping = useRef(\r\n+    debounce(() => {\r\n+      socket.emit(\"typing\", { roomId, sender: socket.id });\r\n+    }, 300)\r\n+  ).current;\r\n+\r\n+  const sendMessage = (payload: any) => {\r\n+    const msg = {\r\n+      ...payload,\r\n+      id: uuidv4(),\r\n+      sender: socket.id,\r\n+      timestamp: new Date().toISOString(),\r\n+      status: \"sent\",\r\n+      reactions: {},\r\n+    };\r\n+    socket.emit(\"send-message\", msg);\r\n+    setMessages((prev) => [...prev, msg]);\r\n+    playSound(\"sent\");\r\n+    setInput(\"\");\r\n+    setShowEmojiPicker(false);\r\n+    setPartnerTyping(false);\r\n+  };\r\n+\r\n+  const sendText = () => {\r\n+    if (!input.trim()) return;\r\n+    sendMessage({ content: input.trim(), type: \"text\", roomId });\r\n+  };\r\n+\r\n+  const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    const file = e.target.files?.[0];\r\n+    if (!file) return;\r\n+\r\n+    const url = URL.createObjectURL(file);\r\n+    const mime = file.type;\r\n+\r\n+    let type: \"image\" | \"audio\" | \"video\" | \"file\" = \"file\";\r\n+    if (mime.startsWith(\"image\")) type = \"image\";\r\n+    else if (mime.startsWith(\"audio\")) type = \"audio\";\r\n+    else if (mime.startsWith(\"video\")) type = \"video\";\r\n+\r\n+    sendMessage({ content: url, type, roomId });\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"flex flex-col h-full max-h-full bg-white dark:bg-neutral-900 border rounded-2xl overflow-hidden shadow-xl relative\">\r\n+      <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n+      <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n+\r\n+      {/* Messages Scroll Area */}\r\n+      <div className=\"flex-1 overflow-y-auto px-3 py-3 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n+        {messages.map((msg) => (\r\n+          <Message\r\n+            key={msg.id}\r\n+            {...msg}\r\n+            sender={msg.sender === socket.id ? \"me\" : \"partner\"}\r\n+            name={msg.sender === socket.id ? \"You\" : partnerName}\r\n+            age={msg.sender === socket.id ? undefined : partnerAge}\r\n+            onDelete={() => {\r\n+              socket.emit(\"delete-message\", { roomId, messageId: msg.id });\r\n+              setMessages((prev) => prev.filter((m) => m.id !== msg.id));\r\n+            }}\r\n+            onEdit={(newContent: string) => {\r\n+              socket.emit(\"edit-message\", { roomId, messageId: msg.id, content: newContent });\r\n+              setMessages((prev) =>\r\n+                prev.map((m) => (m.id === msg.id ? { ...m, content: newContent } : m))\r\n+              );\r\n+            }}\r\n+            onReact={(reaction: string) => {\r\n+              socket.emit(\"react-message\", {\r\n+                roomId,\r\n+                messageId: msg.id,\r\n+                reaction,\r\n+                user: socket.id,\r\n+              });\r\n+              setMessages((prev) =>\r\n+                prev.map((m) =>\r\n+                  m.id === msg.id\r\n+                    ? {\r\n+                        ...m,\r\n+                        reactions: { ...m.reactions, [socket.id]: reaction },\r\n+                      }\r\n+                    : m\r\n+                )\r\n+              );\r\n+            }}\r\n+          />\r\n+        ))}\r\n+        {partnerTyping && <TypingIndicator />}\r\n+        <div ref={messagesEndRef} />\r\n+      </div>\r\n+\r\n+      {/* Emoji Picker */}\r\n+      {showEmojiPicker && (\r\n+        <div className=\"absolute bottom-24 left-2 sm:left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n+          {topEmojis.map((emoji) => (\r\n+            <button\r\n+              key={emoji}\r\n+              onClick={() => setInput((prev) => prev + emoji)}\r\n+              className=\"text-2xl hover:scale-125 transition-transform\"\r\n+            >\r\n+              {emoji}\r\n+            </button>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Input Area */}\r\n+      <div className=\"w-full border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 sm:gap-3 bg-white dark:bg-neutral-900\">\r\n+        <button\r\n+          onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n+          className=\"text-2xl hover:scale-110 transition-transform\"\r\n+        >\r\n+          😊\r\n+        </button>\r\n+\r\n+        <input\r\n+          type=\"text\"\r\n+          placeholder=\"Type a message...\"\r\n+          value={input}\r\n+          onChange={(e) => {\r\n+            setInput(e.target.value);\r\n+            debouncedTyping();\r\n+          }}\r\n+          onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n+          className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 text-sm px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n+        />\r\n+\r\n+        <label className=\"cursor-pointer text-xl\" title=\"Send file\">\r\n+          📎\r\n+          <input\r\n+            type=\"file\"\r\n+            accept=\"image/*,audio/*,video/*\"\r\n+            hidden\r\n+            onChange={handleFile}\r\n+          />\r\n+        </label>\r\n+\r\n+        <button\r\n+          onClick={sendText}\r\n+          disabled={!input.trim()}\r\n+          className=\"bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 text-sm rounded-lg disabled:opacity-50 transition\"\r\n+        >\r\n+          Send\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1752665966228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,8 @@\n   const receiveSoundRef = useRef<HTMLAudioElement>(null);\r\n \r\n   const playSound = (type: \"sent\" | \"receive\") => {\r\n     if (!soundOn) return;\r\n-\r\n     const audioRef = type === \"sent\" ? sentSoundRef : receiveSoundRef;\r\n     const play = async () => {\r\n       try {\r\n         const audio = audioRef.current;\r\n@@ -166,12 +165,13 @@\n   };\r\n \r\n   return (\r\n     <div className=\"flex flex-col h-full max-h-full bg-white dark:bg-neutral-900 border rounded-2xl overflow-hidden shadow-xl relative\">\r\n+      {/* Sounds */}\r\n       <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n       <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n \r\n-      {/* Messages Scroll Area */}\r\n+      {/* Messages */}\r\n       <div className=\"flex-1 overflow-y-auto px-3 py-3 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n@@ -228,9 +228,9 @@\n         </div>\r\n       )}\r\n \r\n       {/* Input Area */}\r\n-      <div className=\"w-full border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 sm:gap-3 bg-white dark:bg-neutral-900\">\r\n+      <div className=\"w-full border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 sm:gap-3 bg-white dark:bg-neutral-900 sticky bottom-0 z-10\">\r\n         <button\r\n           onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n           className=\"text-2xl hover:scale-110 transition-transform\"\r\n         >\r\n@@ -269,288 +269,4 @@\n       </div>\r\n     </div>\r\n   );\r\n }\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect, useRef } from \"react\";\r\n-import { v4 as uuidv4 } from \"uuid\";\r\n-const debounce = require(\"lodash/debounce\");\r\n-\r\n-import Message from \"./Message\";\r\n-import TypingIndicator from \"./TypingIndicator\";\r\n-\r\n-interface ChatBoxProps {\r\n-  socket: any;\r\n-  roomId: string;\r\n-  soundOn?: boolean;\r\n-  partnerName?: string;\r\n-  partnerAge?: string | number;\r\n-  partnerInfo?: any;\r\n-}\r\n-\r\n-const topEmojis = [\r\n-  \"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\",\r\n-  \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"\r\n-];\r\n-\r\n-export default function ChatBox({\r\n-  socket,\r\n-  roomId,\r\n-  soundOn = true,\r\n-  partnerName = \"Stranger\",\r\n-  partnerAge,\r\n-}: ChatBoxProps) {\r\n-  const [messages, setMessages] = useState<any[]>([]);\r\n-  const [input, setInput] = useState(\"\");\r\n-  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n-  const [partnerTyping, setPartnerTyping] = useState(false);\r\n-  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n-\r\n-  const sentSoundRef = useRef<HTMLAudioElement>(null);\r\n-  const receiveSoundRef = useRef<HTMLAudioElement>(null);\r\n-\r\n-  const playSound = (type: \"sent\" | \"receive\") => {\r\n-    if (!soundOn) return;\r\n-\r\n-    const audioRef = type === \"sent\" ? sentSoundRef : receiveSoundRef;\r\n-    const play = async () => {\r\n-      try {\r\n-        const audio = audioRef.current;\r\n-        if (!audio) return;\r\n-        audio.volume = 0.8;\r\n-        await audio.play();\r\n-      } catch (err) {\r\n-        const ctx = new AudioContext();\r\n-        await ctx.resume();\r\n-      }\r\n-    };\r\n-    play();\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n-  }, [messages, partnerTyping]);\r\n-\r\n-  useEffect(() => {\r\n-    if (!socket) return;\r\n-\r\n-    const onMessage = (msg: any) => {\r\n-      setMessages((prev) => [...prev, msg]);\r\n-      socket.emit(\"message-status\", {\r\n-        roomId,\r\n-        messageId: msg.id,\r\n-        status: \"seen\",\r\n-      });\r\n-      setPartnerTyping(false);\r\n-      playSound(\"receive\");\r\n-    };\r\n-\r\n-    const onTyping = ({ sender }: any) => {\r\n-      if (sender !== socket.id) {\r\n-        setPartnerTyping(true);\r\n-        setTimeout(() => setPartnerTyping(false), 3000);\r\n-      }\r\n-    };\r\n-\r\n-    const onStatus = ({ messageId, status }: any) => {\r\n-      setMessages((prev) =>\r\n-        prev.map((m) => (m.id === messageId ? { ...m, status } : m))\r\n-      );\r\n-    };\r\n-\r\n-    const onDelete = ({ messageId }: any) => {\r\n-      setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n-    };\r\n-\r\n-    const onReact = ({ messageId, reaction, user }: any) => {\r\n-      setMessages((prev) =>\r\n-        prev.map((m) =>\r\n-          m.id === messageId\r\n-            ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n-            : m\r\n-        )\r\n-      );\r\n-    };\r\n-\r\n-    const onEdit = ({ messageId, content }: any) => {\r\n-      setMessages((prev) =>\r\n-        prev.map((m) => (m.id === messageId ? { ...m, content } : m))\r\n-      );\r\n-    };\r\n-\r\n-    socket.on(\"receive-message\", onMessage);\r\n-    socket.on(\"typing\", onTyping);\r\n-    socket.on(\"message-status-update\", onStatus);\r\n-    socket.on(\"message-deleted\", onDelete);\r\n-    socket.on(\"message-react\", onReact);\r\n-    socket.on(\"message-edited\", onEdit);\r\n-\r\n-    return () => {\r\n-      socket.off(\"receive-message\", onMessage);\r\n-      socket.off(\"typing\", onTyping);\r\n-      socket.off(\"message-status-update\", onStatus);\r\n-      socket.off(\"message-deleted\", onDelete);\r\n-      socket.off(\"message-react\", onReact);\r\n-      socket.off(\"message-edited\", onEdit);\r\n-    };\r\n-  }, [socket, roomId, soundOn]);\r\n-\r\n-  const debouncedTyping = useRef(\r\n-    debounce(() => {\r\n-      socket.emit(\"typing\", { roomId, sender: socket.id });\r\n-    }, 300)\r\n-  ).current;\r\n-\r\n-  const sendMessage = (payload: any) => {\r\n-    const msg = {\r\n-      ...payload,\r\n-      id: uuidv4(),\r\n-      sender: socket.id,\r\n-      timestamp: new Date().toISOString(),\r\n-      status: \"sent\",\r\n-      reactions: {},\r\n-    };\r\n-    socket.emit(\"send-message\", msg);\r\n-    setMessages((prev) => [...prev, msg]);\r\n-    playSound(\"sent\");\r\n-    setInput(\"\");\r\n-    setShowEmojiPicker(false);\r\n-    setPartnerTyping(false);\r\n-  };\r\n-\r\n-  const sendText = () => {\r\n-    if (!input.trim()) return;\r\n-    sendMessage({ content: input.trim(), type: \"text\", roomId });\r\n-  };\r\n-\r\n-  const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n-    const file = e.target.files?.[0];\r\n-    if (!file) return;\r\n-\r\n-    const url = URL.createObjectURL(file);\r\n-    const mime = file.type;\r\n-\r\n-    let type: \"image\" | \"audio\" | \"video\" | \"file\" = \"file\";\r\n-    if (mime.startsWith(\"image\")) type = \"image\";\r\n-    else if (mime.startsWith(\"audio\")) type = \"audio\";\r\n-    else if (mime.startsWith(\"video\")) type = \"video\";\r\n-\r\n-    sendMessage({ content: url, type, roomId });\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"flex flex-col h-full max-h-full bg-white dark:bg-neutral-900 border rounded-2xl overflow-hidden shadow-xl relative\">\r\n-      {/* Sounds */}\r\n-      <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n-      <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n-\r\n-      {/* Messages */}\r\n-      <div className=\"flex-1 overflow-y-auto px-3 py-3 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n-        {messages.map((msg) => (\r\n-          <Message\r\n-            key={msg.id}\r\n-            {...msg}\r\n-            sender={msg.sender === socket.id ? \"me\" : \"partner\"}\r\n-            name={msg.sender === socket.id ? \"You\" : partnerName}\r\n-            age={msg.sender === socket.id ? undefined : partnerAge}\r\n-            onDelete={() => {\r\n-              socket.emit(\"delete-message\", {\r\n-                roomId,\r\n-                messageId: msg.id,\r\n-              });\r\n-              setMessages((prev) => prev.filter((m) => m.id !== msg.id));\r\n-            }}\r\n-            onEdit={(newContent: string) => {\r\n-              socket.emit(\"edit-message\", {\r\n-                roomId,\r\n-                messageId: msg.id,\r\n-                content: newContent,\r\n-              });\r\n-              setMessages((prev) =>\r\n-                prev.map((m) => (m.id === msg.id ? { ...m, content: newContent } : m))\r\n-              );\r\n-            }}\r\n-            onReact={(reaction: string) => {\r\n-              socket.emit(\"react-message\", {\r\n-                roomId,\r\n-                messageId: msg.id,\r\n-                reaction,\r\n-                user: socket.id,\r\n-              });\r\n-              setMessages((prev) =>\r\n-                prev.map((m) =>\r\n-                  m.id === msg.id\r\n-                    ? {\r\n-                        ...m,\r\n-                        reactions: {\r\n-                          ...m.reactions,\r\n-                          [socket.id]: reaction,\r\n-                        },\r\n-                      }\r\n-                    : m\r\n-                )\r\n-              );\r\n-            }}\r\n-          />\r\n-        ))}\r\n-        {partnerTyping && <TypingIndicator />}\r\n-        <div ref={messagesEndRef} />\r\n-      </div>\r\n-\r\n-      {/* Emoji Picker */}\r\n-      {showEmojiPicker && (\r\n-        <div className=\"absolute bottom-20 left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-72 max-h-64 overflow-y-auto grid grid-cols-6 sm:grid-cols-7 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n-          {topEmojis.map((emoji) => (\r\n-            <button\r\n-              key={emoji}\r\n-              onClick={() => setInput((prev) => prev + emoji)}\r\n-              className=\"text-2xl hover:scale-125 transition-transform\"\r\n-            >\r\n-              {emoji}\r\n-            </button>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-\r\n-      {/* Input Controls */}\r\n-      <div className=\"w-full border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 sm:gap-3 bg-white dark:bg-neutral-900\">\r\n-        <button\r\n-          onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n-          className=\"text-2xl hover:scale-110 transition-transform\"\r\n-        >\r\n-          😊\r\n-        </button>\r\n-\r\n-        <input\r\n-          type=\"text\"\r\n-          placeholder=\"Type a message...\"\r\n-          value={input}\r\n-          onChange={(e) => {\r\n-            setInput(e.target.value);\r\n-            debouncedTyping();\r\n-          }}\r\n-          onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n-          className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 text-sm px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n-        />\r\n-\r\n-        <label className=\"cursor-pointer text-xl\" title=\"Send file\">\r\n-          📎\r\n-          <input\r\n-            type=\"file\"\r\n-            accept=\"image/*,audio/*,video/*\"\r\n-            hidden\r\n-            onChange={handleFile}\r\n-          />\r\n-        </label>\r\n-\r\n-        <button\r\n-          onClick={sendText}\r\n-          disabled={!input.trim()}\r\n-          className=\"bg-blue-600 hover:bg-blue-700 text-white px-3 sm:px-4 py-2 text-sm rounded-lg disabled:opacity-50 transition\"\r\n-        >\r\n-          Send\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1752669078180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,15 +164,15 @@\n     sendMessage({ content: url, type, roomId });\r\n   };\r\n \r\n   return (\r\n-    <div className=\"flex flex-col h-full max-h-full bg-white dark:bg-neutral-900 border rounded-2xl overflow-hidden shadow-xl relative\">\r\n-      {/* Sounds */}\r\n+    <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 relative\">\r\n+      {/* Sound Effects */}\r\n       <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n       <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n \r\n-      {/* Messages */}\r\n-      <div className=\"flex-1 overflow-y-auto px-3 py-3 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n+      {/* Chat Messages */}\r\n+      <div className=\"flex-1 overflow-y-auto px-3 py-4 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n@@ -214,9 +214,9 @@\n       </div>\r\n \r\n       {/* Emoji Picker */}\r\n       {showEmojiPicker && (\r\n-        <div className=\"absolute bottom-24 left-2 sm:left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n+        <div className=\"absolute bottom-20 left-2 sm:left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n           {topEmojis.map((emoji) => (\r\n             <button\r\n               key={emoji}\r\n               onClick={() => setInput((prev) => prev + emoji)}\r\n@@ -227,10 +227,10 @@\n           ))}\r\n         </div>\r\n       )}\r\n \r\n-      {/* Input Area */}\r\n-      <div className=\"w-full border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 sm:gap-3 bg-white dark:bg-neutral-900 sticky bottom-0 z-10\">\r\n+      {/* Input Panel */}\r\n+      <div className=\"border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 bg-white dark:bg-neutral-900\">\r\n         <button\r\n           onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n           className=\"text-2xl hover:scale-110 transition-transform\"\r\n         >\r\n"
                },
                {
                    "date": 1752683110658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,272 @@\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect, useRef } from \"react\";\r\n+import { v4 as uuidv4 } from \"uuid\";\r\n+const debounce = require(\"lodash/debounce\");\r\n+\r\n+import Message from \"./Message\";\r\n+import TypingIndicator from \"./TypingIndicator\";\r\n+\r\n+interface ChatBoxProps {\r\n+  socket: any;\r\n+  roomId: string;\r\n+  soundOn?: boolean;\r\n+  partnerName?: string;\r\n+  partnerAge?: string | number;\r\n+}\r\n+\r\n+const topEmojis = [\r\n+  \"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\",\r\n+  \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"\r\n+];\r\n+\r\n+export default function ChatBox({\r\n+  socket,\r\n+  roomId,\r\n+  soundOn = true,\r\n+  partnerName = \"Stranger\",\r\n+  partnerAge,\r\n+}: ChatBoxProps) {\r\n+  const [messages, setMessages] = useState<any[]>([]);\r\n+  const [input, setInput] = useState(\"\");\r\n+  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n+  const [partnerTyping, setPartnerTyping] = useState(false);\r\n+  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n+\r\n+  const sentSoundRef = useRef<HTMLAudioElement>(null);\r\n+  const receiveSoundRef = useRef<HTMLAudioElement>(null);\r\n+\r\n+  const playSound = (type: \"sent\" | \"receive\") => {\r\n+    if (!soundOn) return;\r\n+    const audioRef = type === \"sent\" ? sentSoundRef : receiveSoundRef;\r\n+    const play = async () => {\r\n+      try {\r\n+        const audio = audioRef.current;\r\n+        if (!audio) return;\r\n+        audio.volume = 0.8;\r\n+        await audio.play();\r\n+      } catch (err) {\r\n+        const ctx = new AudioContext();\r\n+        await ctx.resume();\r\n+      }\r\n+    };\r\n+    play();\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n+  }, [messages, partnerTyping]);\r\n+\r\n+  useEffect(() => {\r\n+    if (!socket) return;\r\n+\r\n+    const onMessage = (msg: any) => {\r\n+      setMessages((prev) => [...prev, msg]);\r\n+      socket.emit(\"message-status\", {\r\n+        roomId,\r\n+        messageId: msg.id,\r\n+        status: \"seen\",\r\n+      });\r\n+      setPartnerTyping(false);\r\n+      playSound(\"receive\");\r\n+    };\r\n+\r\n+    const onTyping = ({ sender }: any) => {\r\n+      if (sender !== socket.id) {\r\n+        setPartnerTyping(true);\r\n+        setTimeout(() => setPartnerTyping(false), 3000);\r\n+      }\r\n+    };\r\n+\r\n+    const onStatus = ({ messageId, status }: any) => {\r\n+      setMessages((prev) =>\r\n+        prev.map((m) => (m.id === messageId ? { ...m, status } : m))\r\n+      );\r\n+    };\r\n+\r\n+    const onDelete = ({ messageId }: any) => {\r\n+      setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n+    };\r\n+\r\n+    const onReact = ({ messageId, reaction, user }: any) => {\r\n+      setMessages((prev) =>\r\n+        prev.map((m) =>\r\n+          m.id === messageId\r\n+            ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n+            : m\r\n+        )\r\n+      );\r\n+    };\r\n+\r\n+    const onEdit = ({ messageId, content }: any) => {\r\n+      setMessages((prev) =>\r\n+        prev.map((m) => (m.id === messageId ? { ...m, content } : m))\r\n+      );\r\n+    };\r\n+\r\n+    socket.on(\"receive-message\", onMessage);\r\n+    socket.on(\"typing\", onTyping);\r\n+    socket.on(\"message-status-update\", onStatus);\r\n+    socket.on(\"message-deleted\", onDelete);\r\n+    socket.on(\"message-react\", onReact);\r\n+    socket.on(\"message-edited\", onEdit);\r\n+\r\n+    return () => {\r\n+      socket.off(\"receive-message\", onMessage);\r\n+      socket.off(\"typing\", onTyping);\r\n+      socket.off(\"message-status-update\", onStatus);\r\n+      socket.off(\"message-deleted\", onDelete);\r\n+      socket.off(\"message-react\", onReact);\r\n+      socket.off(\"message-edited\", onEdit);\r\n+    };\r\n+  }, [socket, roomId, soundOn]);\r\n+\r\n+  const debouncedTyping = useRef(\r\n+    debounce(() => {\r\n+      socket.emit(\"typing\", { roomId, sender: socket.id });\r\n+    }, 300)\r\n+  ).current;\r\n+\r\n+  const sendMessage = (payload: any) => {\r\n+    const msg = {\r\n+      ...payload,\r\n+      id: uuidv4(),\r\n+      sender: socket.id,\r\n+      timestamp: new Date().toISOString(),\r\n+      status: \"sent\",\r\n+      reactions: {},\r\n+    };\r\n+    socket.emit(\"send-message\", msg);\r\n+    setMessages((prev) => [...prev, msg]);\r\n+    playSound(\"sent\");\r\n+    setInput(\"\");\r\n+    setShowEmojiPicker(false);\r\n+    setPartnerTyping(false);\r\n+  };\r\n+\r\n+  const sendText = () => {\r\n+    if (!input.trim()) return;\r\n+    sendMessage({ content: input.trim(), type: \"text\", roomId });\r\n+  };\r\n+\r\n+  const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    const file = e.target.files?.[0];\r\n+    if (!file) return;\r\n+\r\n+    const url = URL.createObjectURL(file);\r\n+    const mime = file.type;\r\n+\r\n+    let type: \"image\" | \"audio\" | \"video\" | \"file\" = \"file\";\r\n+    if (mime.startsWith(\"image\")) type = \"image\";\r\n+    else if (mime.startsWith(\"audio\")) type = \"audio\";\r\n+    else if (mime.startsWith(\"video\")) type = \"video\";\r\n+\r\n+    sendMessage({ content: url, type, roomId });\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"flex flex-col h-full sm:h-[66vh] bg-white dark:bg-neutral-900 relative\">\r\n+      {/* Sound Effects */}\r\n+      <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n+      <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n+\r\n+      {/* Chat Messages */}\r\n+      <div className=\"flex-1 overflow-y-auto px-3 py-4 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n+        {messages.map((msg) => (\r\n+          <Message\r\n+            key={msg.id}\r\n+            {...msg}\r\n+            sender={msg.sender === socket.id ? \"me\" : \"partner\"}\r\n+            name={msg.sender === socket.id ? \"You\" : partnerName}\r\n+            age={msg.sender === socket.id ? undefined : partnerAge}\r\n+            onDelete={() => {\r\n+              socket.emit(\"delete-message\", { roomId, messageId: msg.id });\r\n+              setMessages((prev) => prev.filter((m) => m.id !== msg.id));\r\n+            }}\r\n+            onEdit={(newContent: string) => {\r\n+              socket.emit(\"edit-message\", { roomId, messageId: msg.id, content: newContent });\r\n+              setMessages((prev) =>\r\n+                prev.map((m) => (m.id === msg.id ? { ...m, content: newContent } : m))\r\n+              );\r\n+            }}\r\n+            onReact={(reaction: string) => {\r\n+              socket.emit(\"react-message\", {\r\n+                roomId,\r\n+                messageId: msg.id,\r\n+                reaction,\r\n+                user: socket.id,\r\n+              });\r\n+              setMessages((prev) =>\r\n+                prev.map((m) =>\r\n+                  m.id === msg.id\r\n+                    ? {\r\n+                        ...m,\r\n+                        reactions: { ...m.reactions, [socket.id]: reaction },\r\n+                      }\r\n+                    : m\r\n+                )\r\n+              );\r\n+            }}\r\n+          />\r\n+        ))}\r\n+        {partnerTyping && <TypingIndicator />}\r\n+        <div ref={messagesEndRef} />\r\n+      </div>\r\n+\r\n+      {/* Emoji Picker */}\r\n+      {showEmojiPicker && (\r\n+        <div className=\"absolute bottom-20 left-2 sm:left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n+          {topEmojis.map((emoji) => (\r\n+            <button\r\n+              key={emoji}\r\n+              onClick={() => setInput((prev) => prev + emoji)}\r\n+              className=\"text-2xl hover:scale-125 transition-transform\"\r\n+            >\r\n+              {emoji}\r\n+            </button>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Input Panel */}\r\n+      <div className=\"border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 bg-white dark:bg-neutral-900\">\r\n+        <button\r\n+          onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n+          className=\"text-2xl hover:scale-110 transition-transform\"\r\n+        >\r\n+          😊\r\n+        </button>\r\n+\r\n+        <input\r\n+          type=\"text\"\r\n+          placeholder=\"Type a message...\"\r\n+          value={input}\r\n+          onChange={(e) => {\r\n+            setInput(e.target.value);\r\n+            debouncedTyping();\r\n+          }}\r\n+          onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n+          className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 text-sm px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n+        />\r\n+\r\n+        <label className=\"cursor-pointer text-xl\" title=\"Send file\">\r\n+          📎\r\n+          <input\r\n+            type=\"file\"\r\n+            accept=\"image/*,audio/*,video/*\"\r\n+            hidden\r\n+            onChange={handleFile}\r\n+          />\r\n+        </label>\r\n+\r\n+        <button\r\n+          onClick={sendText}\r\n+          disabled={!input.trim()}\r\n+          className=\"bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 text-sm rounded-lg disabled:opacity-50 transition\"\r\n+        >\r\n+          Send\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1752683985691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,280 +164,8 @@\n     sendMessage({ content: url, type, roomId });\r\n   };\r\n \r\n   return (\r\n-    <div className=\"flex flex-col h-full sm:h-[66vh] bg-white dark:bg-neutral-900 relative\">\r\n-      {/* Sound Effects */}\r\n-      <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n-      <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n-\r\n-      {/* Chat Messages */}\r\n-      <div className=\"flex-1 overflow-y-auto px-3 py-4 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n-        {messages.map((msg) => (\r\n-          <Message\r\n-            key={msg.id}\r\n-            {...msg}\r\n-            sender={msg.sender === socket.id ? \"me\" : \"partner\"}\r\n-            name={msg.sender === socket.id ? \"You\" : partnerName}\r\n-            age={msg.sender === socket.id ? undefined : partnerAge}\r\n-            onDelete={() => {\r\n-              socket.emit(\"delete-message\", { roomId, messageId: msg.id });\r\n-              setMessages((prev) => prev.filter((m) => m.id !== msg.id));\r\n-            }}\r\n-            onEdit={(newContent: string) => {\r\n-              socket.emit(\"edit-message\", { roomId, messageId: msg.id, content: newContent });\r\n-              setMessages((prev) =>\r\n-                prev.map((m) => (m.id === msg.id ? { ...m, content: newContent } : m))\r\n-              );\r\n-            }}\r\n-            onReact={(reaction: string) => {\r\n-              socket.emit(\"react-message\", {\r\n-                roomId,\r\n-                messageId: msg.id,\r\n-                reaction,\r\n-                user: socket.id,\r\n-              });\r\n-              setMessages((prev) =>\r\n-                prev.map((m) =>\r\n-                  m.id === msg.id\r\n-                    ? {\r\n-                        ...m,\r\n-                        reactions: { ...m.reactions, [socket.id]: reaction },\r\n-                      }\r\n-                    : m\r\n-                )\r\n-              );\r\n-            }}\r\n-          />\r\n-        ))}\r\n-        {partnerTyping && <TypingIndicator />}\r\n-        <div ref={messagesEndRef} />\r\n-      </div>\r\n-\r\n-      {/* Emoji Picker */}\r\n-      {showEmojiPicker && (\r\n-        <div className=\"absolute bottom-20 left-2 sm:left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n-          {topEmojis.map((emoji) => (\r\n-            <button\r\n-              key={emoji}\r\n-              onClick={() => setInput((prev) => prev + emoji)}\r\n-              className=\"text-2xl hover:scale-125 transition-transform\"\r\n-            >\r\n-              {emoji}\r\n-            </button>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-\r\n-      {/* Input Panel */}\r\n-      <div className=\"border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 bg-white dark:bg-neutral-900\">\r\n-        <button\r\n-          onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n-          className=\"text-2xl hover:scale-110 transition-transform\"\r\n-        >\r\n-          😊\r\n-        </button>\r\n-\r\n-        <input\r\n-          type=\"text\"\r\n-          placeholder=\"Type a message...\"\r\n-          value={input}\r\n-          onChange={(e) => {\r\n-            setInput(e.target.value);\r\n-            debouncedTyping();\r\n-          }}\r\n-          onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n-          className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 text-sm px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n-        />\r\n-\r\n-        <label className=\"cursor-pointer text-xl\" title=\"Send file\">\r\n-          📎\r\n-          <input\r\n-            type=\"file\"\r\n-            accept=\"image/*,audio/*,video/*\"\r\n-            hidden\r\n-            onChange={handleFile}\r\n-          />\r\n-        </label>\r\n-\r\n-        <button\r\n-          onClick={sendText}\r\n-          disabled={!input.trim()}\r\n-          className=\"bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 text-sm rounded-lg disabled:opacity-50 transition\"\r\n-        >\r\n-          Send\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect, useRef } from \"react\";\r\n-import { v4 as uuidv4 } from \"uuid\";\r\n-const debounce = require(\"lodash/debounce\");\r\n-\r\n-import Message from \"./Message\";\r\n-import TypingIndicator from \"./TypingIndicator\";\r\n-\r\n-interface ChatBoxProps {\r\n-  socket: any;\r\n-  roomId: string;\r\n-  soundOn?: boolean;\r\n-  partnerName?: string;\r\n-  partnerAge?: string | number;\r\n-}\r\n-\r\n-const topEmojis = [\r\n-  \"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\",\r\n-  \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"\r\n-];\r\n-\r\n-export default function ChatBox({\r\n-  socket,\r\n-  roomId,\r\n-  soundOn = true,\r\n-  partnerName = \"Stranger\",\r\n-  partnerAge,\r\n-}: ChatBoxProps) {\r\n-  const [messages, setMessages] = useState<any[]>([]);\r\n-  const [input, setInput] = useState(\"\");\r\n-  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n-  const [partnerTyping, setPartnerTyping] = useState(false);\r\n-  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n-\r\n-  const sentSoundRef = useRef<HTMLAudioElement>(null);\r\n-  const receiveSoundRef = useRef<HTMLAudioElement>(null);\r\n-\r\n-  const playSound = (type: \"sent\" | \"receive\") => {\r\n-    if (!soundOn) return;\r\n-    const audioRef = type === \"sent\" ? sentSoundRef : receiveSoundRef;\r\n-    const play = async () => {\r\n-      try {\r\n-        const audio = audioRef.current;\r\n-        if (!audio) return;\r\n-        audio.volume = 0.8;\r\n-        await audio.play();\r\n-      } catch (err) {\r\n-        const ctx = new AudioContext();\r\n-        await ctx.resume();\r\n-      }\r\n-    };\r\n-    play();\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n-  }, [messages, partnerTyping]);\r\n-\r\n-  useEffect(() => {\r\n-    if (!socket) return;\r\n-\r\n-    const onMessage = (msg: any) => {\r\n-      setMessages((prev) => [...prev, msg]);\r\n-      socket.emit(\"message-status\", {\r\n-        roomId,\r\n-        messageId: msg.id,\r\n-        status: \"seen\",\r\n-      });\r\n-      setPartnerTyping(false);\r\n-      playSound(\"receive\");\r\n-    };\r\n-\r\n-    const onTyping = ({ sender }: any) => {\r\n-      if (sender !== socket.id) {\r\n-        setPartnerTyping(true);\r\n-        setTimeout(() => setPartnerTyping(false), 3000);\r\n-      }\r\n-    };\r\n-\r\n-    const onStatus = ({ messageId, status }: any) => {\r\n-      setMessages((prev) =>\r\n-        prev.map((m) => (m.id === messageId ? { ...m, status } : m))\r\n-      );\r\n-    };\r\n-\r\n-    const onDelete = ({ messageId }: any) => {\r\n-      setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n-    };\r\n-\r\n-    const onReact = ({ messageId, reaction, user }: any) => {\r\n-      setMessages((prev) =>\r\n-        prev.map((m) =>\r\n-          m.id === messageId\r\n-            ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n-            : m\r\n-        )\r\n-      );\r\n-    };\r\n-\r\n-    const onEdit = ({ messageId, content }: any) => {\r\n-      setMessages((prev) =>\r\n-        prev.map((m) => (m.id === messageId ? { ...m, content } : m))\r\n-      );\r\n-    };\r\n-\r\n-    socket.on(\"receive-message\", onMessage);\r\n-    socket.on(\"typing\", onTyping);\r\n-    socket.on(\"message-status-update\", onStatus);\r\n-    socket.on(\"message-deleted\", onDelete);\r\n-    socket.on(\"message-react\", onReact);\r\n-    socket.on(\"message-edited\", onEdit);\r\n-\r\n-    return () => {\r\n-      socket.off(\"receive-message\", onMessage);\r\n-      socket.off(\"typing\", onTyping);\r\n-      socket.off(\"message-status-update\", onStatus);\r\n-      socket.off(\"message-deleted\", onDelete);\r\n-      socket.off(\"message-react\", onReact);\r\n-      socket.off(\"message-edited\", onEdit);\r\n-    };\r\n-  }, [socket, roomId, soundOn]);\r\n-\r\n-  const debouncedTyping = useRef(\r\n-    debounce(() => {\r\n-      socket.emit(\"typing\", { roomId, sender: socket.id });\r\n-    }, 300)\r\n-  ).current;\r\n-\r\n-  const sendMessage = (payload: any) => {\r\n-    const msg = {\r\n-      ...payload,\r\n-      id: uuidv4(),\r\n-      sender: socket.id,\r\n-      timestamp: new Date().toISOString(),\r\n-      status: \"sent\",\r\n-      reactions: {},\r\n-    };\r\n-    socket.emit(\"send-message\", msg);\r\n-    setMessages((prev) => [...prev, msg]);\r\n-    playSound(\"sent\");\r\n-    setInput(\"\");\r\n-    setShowEmojiPicker(false);\r\n-    setPartnerTyping(false);\r\n-  };\r\n-\r\n-  const sendText = () => {\r\n-    if (!input.trim()) return;\r\n-    sendMessage({ content: input.trim(), type: \"text\", roomId });\r\n-  };\r\n-\r\n-  const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n-    const file = e.target.files?.[0];\r\n-    if (!file) return;\r\n-\r\n-    const url = URL.createObjectURL(file);\r\n-    const mime = file.type;\r\n-\r\n-    let type: \"image\" | \"audio\" | \"video\" | \"file\" = \"file\";\r\n-    if (mime.startsWith(\"image\")) type = \"image\";\r\n-    else if (mime.startsWith(\"audio\")) type = \"audio\";\r\n-    else if (mime.startsWith(\"video\")) type = \"video\";\r\n-\r\n-    sendMessage({ content: url, type, roomId });\r\n-  };\r\n-\r\n-  return (\r\n     <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 relative\">\r\n       {/* Sound Effects */}\r\n       <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n       <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n"
                },
                {
                    "date": 1753187558802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,15 +164,15 @@\n     sendMessage({ content: url, type, roomId });\r\n   };\r\n \r\n   return (\r\n-    <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 relative\">\r\n+    <div className=\"fixed inset-x-0 bottom-0 top-[56px] z-10 flex flex-col bg-white dark:bg-neutral-900 border-t border-neutral-200 dark:border-neutral-800\">\r\n       {/* Sound Effects */}\r\n       <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n       <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n \r\n-      {/* Chat Messages */}\r\n-      <div className=\"flex-1 overflow-y-auto px-3 py-4 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n+      {/* Messages Area */}\r\n+      <div className=\"flex-1 overflow-y-auto px-3 py-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n@@ -183,11 +183,17 @@\n               socket.emit(\"delete-message\", { roomId, messageId: msg.id });\r\n               setMessages((prev) => prev.filter((m) => m.id !== msg.id));\r\n             }}\r\n             onEdit={(newContent: string) => {\r\n-              socket.emit(\"edit-message\", { roomId, messageId: msg.id, content: newContent });\r\n+              socket.emit(\"edit-message\", {\r\n+                roomId,\r\n+                messageId: msg.id,\r\n+                content: newContent,\r\n+              });\r\n               setMessages((prev) =>\r\n-                prev.map((m) => (m.id === msg.id ? { ...m, content: newContent } : m))\r\n+                prev.map((m) =>\r\n+                  m.id === msg.id ? { ...m, content: newContent } : m\r\n+                )\r\n               );\r\n             }}\r\n             onReact={(reaction: string) => {\r\n               socket.emit(\"react-message\", {\r\n@@ -214,9 +220,9 @@\n       </div>\r\n \r\n       {/* Emoji Picker */}\r\n       {showEmojiPicker && (\r\n-        <div className=\"absolute bottom-20 left-2 sm:left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n+        <div className=\"absolute bottom-[64px] left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin\">\r\n           {topEmojis.map((emoji) => (\r\n             <button\r\n               key={emoji}\r\n               onClick={() => setInput((prev) => prev + emoji)}\r\n@@ -228,9 +234,9 @@\n         </div>\r\n       )}\r\n \r\n       {/* Input Panel */}\r\n-      <div className=\"border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 bg-white dark:bg-neutral-900\">\r\n+      <div className=\"border-t dark:border-neutral-700 px-3 py-2 flex items-center gap-2 bg-white dark:bg-neutral-900 sticky bottom-0\">\r\n         <button\r\n           onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n           className=\"text-2xl hover:scale-110 transition-transform\"\r\n         >\r\n"
                },
                {
                    "date": 1753187633916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,21 +12,20 @@\n   roomId: string;\r\n   soundOn?: boolean;\r\n   partnerName?: string;\r\n   partnerAge?: string | number;\r\n+  partnerCountry?: string;\r\n }\r\n \r\n-const topEmojis = [\r\n-  \"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\",\r\n-  \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"\r\n-];\r\n+const topEmojis = [\"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\", \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"];\r\n \r\n export default function ChatBox({\r\n   socket,\r\n   roomId,\r\n   soundOn = true,\r\n   partnerName = \"Stranger\",\r\n   partnerAge,\r\n+  partnerCountry = \"Unknown\",\r\n }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n@@ -169,9 +168,14 @@\n       {/* Sound Effects */}\r\n       <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n       <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n \r\n-      {/* Messages Area */}\r\n+      {/* Country Display */}\r\n+      <div className=\"text-center py-2 bg-neutral-100 dark:bg-neutral-800 text-sm text-gray-700 dark:text-gray-300 border-b dark:border-neutral-700\">\r\n+        Chatting with someone from <strong>{partnerCountry}</strong>\r\n+      </div>\r\n+\r\n+      {/* Messages */}\r\n       <div className=\"flex-1 overflow-y-auto px-3 py-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n@@ -214,9 +218,11 @@\n               );\r\n             }}\r\n           />\r\n         ))}\r\n-        {partnerTyping && <TypingIndicator />}\r\n+        {partnerTyping && (\r\n+          <TypingIndicator name={partnerName} age={partnerAge} />\r\n+        )}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n       {/* Emoji Picker */}\r\n@@ -233,9 +239,9 @@\n           ))}\r\n         </div>\r\n       )}\r\n \r\n-      {/* Input Panel */}\r\n+      {/* Input */}\r\n       <div className=\"border-t dark:border-neutral-700 px-3 py-2 flex items-center gap-2 bg-white dark:bg-neutral-900 sticky bottom-0\">\r\n         <button\r\n           onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n           className=\"text-2xl hover:scale-110 transition-transform\"\r\n"
                },
                {
                    "date": 1753188039367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,20 +12,21 @@\n   roomId: string;\r\n   soundOn?: boolean;\r\n   partnerName?: string;\r\n   partnerAge?: string | number;\r\n-  partnerCountry?: string;\r\n }\r\n \r\n-const topEmojis = [\"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\", \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"];\r\n+const topEmojis = [\r\n+  \"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\",\r\n+  \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"\r\n+];\r\n \r\n export default function ChatBox({\r\n   socket,\r\n   roomId,\r\n   soundOn = true,\r\n   partnerName = \"Stranger\",\r\n   partnerAge,\r\n-  partnerCountry = \"Unknown\",\r\n }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n@@ -168,14 +169,9 @@\n       {/* Sound Effects */}\r\n       <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n       <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n \r\n-      {/* Country Display */}\r\n-      <div className=\"text-center py-2 bg-neutral-100 dark:bg-neutral-800 text-sm text-gray-700 dark:text-gray-300 border-b dark:border-neutral-700\">\r\n-        Chatting with someone from <strong>{partnerCountry}</strong>\r\n-      </div>\r\n-\r\n-      {/* Messages */}\r\n+      {/* Messages Area */}\r\n       <div className=\"flex-1 overflow-y-auto px-3 py-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n@@ -218,11 +214,9 @@\n               );\r\n             }}\r\n           />\r\n         ))}\r\n-        {partnerTyping && (\r\n-          <TypingIndicator name={partnerName} age={partnerAge} />\r\n-        )}\r\n+        {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n       {/* Emoji Picker */}\r\n@@ -239,9 +233,9 @@\n           ))}\r\n         </div>\r\n       )}\r\n \r\n-      {/* Input */}\r\n+      {/* Input Panel */}\r\n       <div className=\"border-t dark:border-neutral-700 px-3 py-2 flex items-center gap-2 bg-white dark:bg-neutral-900 sticky bottom-0\">\r\n         <button\r\n           onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n           className=\"text-2xl hover:scale-110 transition-transform\"\r\n"
                },
                {
                    "date": 1753188466923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,15 +164,15 @@\n     sendMessage({ content: url, type, roomId });\r\n   };\r\n \r\n   return (\r\n-    <div className=\"fixed inset-x-0 bottom-0 top-[56px] z-10 flex flex-col bg-white dark:bg-neutral-900 border-t border-neutral-200 dark:border-neutral-800\">\r\n+    <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 relative\">\r\n       {/* Sound Effects */}\r\n       <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n       <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n \r\n-      {/* Messages Area */}\r\n-      <div className=\"flex-1 overflow-y-auto px-3 py-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n+      {/* Chat Messages */}\r\n+      <div className=\"flex-1 overflow-y-auto px-3 py-4 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n@@ -183,17 +183,11 @@\n               socket.emit(\"delete-message\", { roomId, messageId: msg.id });\r\n               setMessages((prev) => prev.filter((m) => m.id !== msg.id));\r\n             }}\r\n             onEdit={(newContent: string) => {\r\n-              socket.emit(\"edit-message\", {\r\n-                roomId,\r\n-                messageId: msg.id,\r\n-                content: newContent,\r\n-              });\r\n+              socket.emit(\"edit-message\", { roomId, messageId: msg.id, content: newContent });\r\n               setMessages((prev) =>\r\n-                prev.map((m) =>\r\n-                  m.id === msg.id ? { ...m, content: newContent } : m\r\n-                )\r\n+                prev.map((m) => (m.id === msg.id ? { ...m, content: newContent } : m))\r\n               );\r\n             }}\r\n             onReact={(reaction: string) => {\r\n               socket.emit(\"react-message\", {\r\n@@ -220,9 +214,9 @@\n       </div>\r\n \r\n       {/* Emoji Picker */}\r\n       {showEmojiPicker && (\r\n-        <div className=\"absolute bottom-[64px] left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin\">\r\n+        <div className=\"absolute bottom-20 left-2 sm:left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n           {topEmojis.map((emoji) => (\r\n             <button\r\n               key={emoji}\r\n               onClick={() => setInput((prev) => prev + emoji)}\r\n@@ -234,9 +228,9 @@\n         </div>\r\n       )}\r\n \r\n       {/* Input Panel */}\r\n-      <div className=\"border-t dark:border-neutral-700 px-3 py-2 flex items-center gap-2 bg-white dark:bg-neutral-900 sticky bottom-0\">\r\n+      <div className=\"border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 bg-white dark:bg-neutral-900\">\r\n         <button\r\n           onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n           className=\"text-2xl hover:scale-110 transition-transform\"\r\n         >\r\n"
                },
                {
                    "date": 1753188572068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,21 +12,20 @@\n   roomId: string;\r\n   soundOn?: boolean;\r\n   partnerName?: string;\r\n   partnerAge?: string | number;\r\n+  partnerCountry?: string;\r\n }\r\n \r\n-const topEmojis = [\r\n-  \"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\",\r\n-  \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"\r\n-];\r\n+const topEmojis = [\"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\", \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"];\r\n \r\n export default function ChatBox({\r\n   socket,\r\n   roomId,\r\n   soundOn = true,\r\n   partnerName = \"Stranger\",\r\n   partnerAge,\r\n+  partnerCountry = \"Unknown\",\r\n }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n@@ -164,15 +163,20 @@\n     sendMessage({ content: url, type, roomId });\r\n   };\r\n \r\n   return (\r\n-    <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 relative\">\r\n+    <div className=\"fixed inset-x-0 bottom-0 top-[56px] z-10 flex flex-col bg-white dark:bg-neutral-900 border-t border-neutral-200 dark:border-neutral-800\">\r\n       {/* Sound Effects */}\r\n       <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n       <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n \r\n-      {/* Chat Messages */}\r\n-      <div className=\"flex-1 overflow-y-auto px-3 py-4 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n+      {/* Country Display */}\r\n+      <div className=\"text-center py-2 bg-neutral-100 dark:bg-neutral-800 text-sm text-gray-700 dark:text-gray-300 border-b dark:border-neutral-700\">\r\n+        Chatting with someone from <strong>{partnerCountry}</strong>\r\n+      </div>\r\n+\r\n+      {/* Messages */}\r\n+      <div className=\"flex-1 overflow-y-auto px-3 py-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n@@ -183,11 +187,17 @@\n               socket.emit(\"delete-message\", { roomId, messageId: msg.id });\r\n               setMessages((prev) => prev.filter((m) => m.id !== msg.id));\r\n             }}\r\n             onEdit={(newContent: string) => {\r\n-              socket.emit(\"edit-message\", { roomId, messageId: msg.id, content: newContent });\r\n+              socket.emit(\"edit-message\", {\r\n+                roomId,\r\n+                messageId: msg.id,\r\n+                content: newContent,\r\n+              });\r\n               setMessages((prev) =>\r\n-                prev.map((m) => (m.id === msg.id ? { ...m, content: newContent } : m))\r\n+                prev.map((m) =>\r\n+                  m.id === msg.id ? { ...m, content: newContent } : m\r\n+                )\r\n               );\r\n             }}\r\n             onReact={(reaction: string) => {\r\n               socket.emit(\"react-message\", {\r\n@@ -208,15 +218,17 @@\n               );\r\n             }}\r\n           />\r\n         ))}\r\n-        {partnerTyping && <TypingIndicator />}\r\n+        {partnerTyping && (\r\n+          <TypingIndicator name={partnerName} age={partnerAge} />\r\n+        )}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n       {/* Emoji Picker */}\r\n       {showEmojiPicker && (\r\n-        <div className=\"absolute bottom-20 left-2 sm:left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n+        <div className=\"absolute bottom-[64px] left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin\">\r\n           {topEmojis.map((emoji) => (\r\n             <button\r\n               key={emoji}\r\n               onClick={() => setInput((prev) => prev + emoji)}\r\n@@ -227,10 +239,10 @@\n           ))}\r\n         </div>\r\n       )}\r\n \r\n-      {/* Input Panel */}\r\n-      <div className=\"border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 bg-white dark:bg-neutral-900\">\r\n+      {/* Input */}\r\n+      <div className=\"border-t dark:border-neutral-700 px-3 py-2 flex items-center gap-2 bg-white dark:bg-neutral-900 sticky bottom-0\">\r\n         <button\r\n           onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n           className=\"text-2xl hover:scale-110 transition-transform\"\r\n         >\r\n"
                },
                {
                    "date": 1753188757882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,20 +12,21 @@\n   roomId: string;\r\n   soundOn?: boolean;\r\n   partnerName?: string;\r\n   partnerAge?: string | number;\r\n-  partnerCountry?: string;\r\n }\r\n \r\n-const topEmojis = [\"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\", \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"];\r\n+const topEmojis = [\r\n+  \"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\",\r\n+  \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"\r\n+];\r\n \r\n export default function ChatBox({\r\n   socket,\r\n   roomId,\r\n   soundOn = true,\r\n   partnerName = \"Stranger\",\r\n   partnerAge,\r\n-  partnerCountry = \"Unknown\",\r\n }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n@@ -163,20 +164,15 @@\n     sendMessage({ content: url, type, roomId });\r\n   };\r\n \r\n   return (\r\n-    <div className=\"fixed inset-x-0 bottom-0 top-[56px] z-10 flex flex-col bg-white dark:bg-neutral-900 border-t border-neutral-200 dark:border-neutral-800\">\r\n+    <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 relative\">\r\n       {/* Sound Effects */}\r\n       <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n       <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n \r\n-      {/* Country Display */}\r\n-      <div className=\"text-center py-2 bg-neutral-100 dark:bg-neutral-800 text-sm text-gray-700 dark:text-gray-300 border-b dark:border-neutral-700\">\r\n-        Chatting with someone from <strong>{partnerCountry}</strong>\r\n-      </div>\r\n-\r\n-      {/* Messages */}\r\n-      <div className=\"flex-1 overflow-y-auto px-3 py-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n+      {/* Chat Messages */}\r\n+      <div className=\"flex-1 overflow-y-auto px-3 py-4 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n@@ -187,17 +183,11 @@\n               socket.emit(\"delete-message\", { roomId, messageId: msg.id });\r\n               setMessages((prev) => prev.filter((m) => m.id !== msg.id));\r\n             }}\r\n             onEdit={(newContent: string) => {\r\n-              socket.emit(\"edit-message\", {\r\n-                roomId,\r\n-                messageId: msg.id,\r\n-                content: newContent,\r\n-              });\r\n+              socket.emit(\"edit-message\", { roomId, messageId: msg.id, content: newContent });\r\n               setMessages((prev) =>\r\n-                prev.map((m) =>\r\n-                  m.id === msg.id ? { ...m, content: newContent } : m\r\n-                )\r\n+                prev.map((m) => (m.id === msg.id ? { ...m, content: newContent } : m))\r\n               );\r\n             }}\r\n             onReact={(reaction: string) => {\r\n               socket.emit(\"react-message\", {\r\n@@ -218,17 +208,15 @@\n               );\r\n             }}\r\n           />\r\n         ))}\r\n-        {partnerTyping && (\r\n-          <TypingIndicator name={partnerName} age={partnerAge} />\r\n-        )}\r\n+        {partnerTyping && <TypingIndicator />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n       {/* Emoji Picker */}\r\n       {showEmojiPicker && (\r\n-        <div className=\"absolute bottom-[64px] left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin\">\r\n+        <div className=\"absolute bottom-20 left-2 sm:left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n           {topEmojis.map((emoji) => (\r\n             <button\r\n               key={emoji}\r\n               onClick={() => setInput((prev) => prev + emoji)}\r\n@@ -239,10 +227,10 @@\n           ))}\r\n         </div>\r\n       )}\r\n \r\n-      {/* Input */}\r\n-      <div className=\"border-t dark:border-neutral-700 px-3 py-2 flex items-center gap-2 bg-white dark:bg-neutral-900 sticky bottom-0\">\r\n+      {/* Input Panel */}\r\n+      <div className=\"border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 bg-white dark:bg-neutral-900\">\r\n         <button\r\n           onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n           className=\"text-2xl hover:scale-110 transition-transform\"\r\n         >\r\n"
                },
                {
                    "date": 1753189333964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n   roomId: string;\r\n   soundOn?: boolean;\r\n   partnerName?: string;\r\n   partnerAge?: string | number;\r\n+  partnerCountry?: string; // ✅ New prop\r\n }\r\n \r\n const topEmojis = [\r\n   \"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\",\r\n@@ -25,8 +26,9 @@\n   roomId,\r\n   soundOn = true,\r\n   partnerName = \"Stranger\",\r\n   partnerAge,\r\n+  partnerCountry, // ✅ Destructure it\r\n }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n@@ -169,8 +171,21 @@\n       {/* Sound Effects */}\r\n       <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n       <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n \r\n+      {/* ✅ Partner Info */}\r\n+      <div className=\"px-4 py-2 border-b text-sm bg-white dark:bg-neutral-900 dark:border-neutral-700\">\r\n+        <span className=\"font-medium text-blue-600 dark:text-blue-400\">\r\n+          {partnerName}\r\n+        </span>\r\n+        {partnerAge && <span className=\"ml-1\">({partnerAge})</span>}\r\n+        {partnerCountry && (\r\n+          <span className=\"ml-2 text-neutral-500 dark:text-neutral-400\">\r\n+            from {partnerCountry}\r\n+          </span>\r\n+        )}\r\n+      </div>\r\n+\r\n       {/* Chat Messages */}\r\n       <div className=\"flex-1 overflow-y-auto px-3 py-4 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n"
                },
                {
                    "date": 1753190121968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   roomId: string;\r\n   soundOn?: boolean;\r\n   partnerName?: string;\r\n   partnerAge?: string | number;\r\n-  partnerCountry?: string; // ✅ New prop\r\n+  partnerCountry?: string;\r\n }\r\n \r\n const topEmojis = [\r\n   \"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\",\r\n@@ -26,9 +26,9 @@\n   roomId,\r\n   soundOn = true,\r\n   partnerName = \"Stranger\",\r\n   partnerAge,\r\n-  partnerCountry, // ✅ Destructure it\r\n+  partnerCountry,\r\n }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n@@ -223,9 +223,15 @@\n               );\r\n             }}\r\n           />\r\n         ))}\r\n-        {partnerTyping && <TypingIndicator />}\r\n+        {partnerTyping && (\r\n+          <TypingIndicator\r\n+            name={partnerName}\r\n+            age={partnerAge}\r\n+            country={partnerCountry}\r\n+          />\r\n+        )}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n       {/* Emoji Picker */}\r\n"
                },
                {
                    "date": 1753190236565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,10 +226,8 @@\n         ))}\r\n         {partnerTyping && (\r\n           <TypingIndicator\r\n             name={partnerName}\r\n-            age={partnerAge}\r\n-            country={partnerCountry}\r\n           />\r\n         )}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n"
                },
                {
                    "date": 1759344111613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,44 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n+import { ref, push, onChildAdded, onChildChanged, onChildRemoved, update, get } from \"firebase/database\";\r\n+import { database } from \"@/lib/firebaseConfig\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n const debounce = require(\"lodash/debounce\");\r\n \r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n \r\n interface ChatBoxProps {\r\n-  socket: any;\r\n   roomId: string;\r\n+  userId: string; // current user uid\r\n   soundOn?: boolean;\r\n-  partnerName?: string;\r\n-  partnerAge?: string | number;\r\n-  partnerCountry?: string;\r\n }\r\n \r\n-const topEmojis = [\r\n-  \"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\",\r\n-  \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"\r\n-];\r\n+interface ChatMessage {\r\n+  id: string;\r\n+  sender: string;\r\n+  content: string;\r\n+  type: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\";\r\n+  timestamp: string;\r\n+  status: \"sent\" | \"seen\";\r\n+  reactions?: Record<string, string>;\r\n+  name?: string;\r\n+}\r\n \r\n-export default function ChatBox({\r\n-  socket,\r\n-  roomId,\r\n-  soundOn = true,\r\n-  partnerName = \"Stranger\",\r\n-  partnerAge,\r\n-  partnerCountry,\r\n-}: ChatBoxProps) {\r\n-  const [messages, setMessages] = useState<any[]>([]);\r\n+export default function ChatBox({ roomId, userId, soundOn = true }: ChatBoxProps) {\r\n+  const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n-  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n   const [partnerTyping, setPartnerTyping] = useState(false);\r\n+  const [partnerName, setPartnerName] = useState(\"Stranger\");\r\n+  const [partnerId, setPartnerId] = useState<string | null>(null);\r\n   const messagesEndRef = useRef<HTMLDivElement>(null);\r\n \r\n   const sentSoundRef = useRef<HTMLAudioElement>(null);\r\n   const receiveSoundRef = useRef<HTMLAudioElement>(null);\r\n \r\n+  // ---------- Sounds ----------\r\n   const playSound = (type: \"sent\" | \"receive\") => {\r\n     if (!soundOn) return;\r\n     const audioRef = type === \"sent\" ? sentSoundRef : receiveSoundRef;\r\n     const play = async () => {\r\n@@ -46,241 +46,176 @@\n         const audio = audioRef.current;\r\n         if (!audio) return;\r\n         audio.volume = 0.8;\r\n         await audio.play();\r\n-      } catch (err) {\r\n+      } catch {\r\n         const ctx = new AudioContext();\r\n         await ctx.resume();\r\n       }\r\n     };\r\n     play();\r\n   };\r\n \r\n+  // ---------- Scroll to bottom ----------\r\n   useEffect(() => {\r\n     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n   }, [messages, partnerTyping]);\r\n \r\n+  // ---------- Fetch partner info ----------\r\n   useEffect(() => {\r\n-    if (!socket) return;\r\n+    if (!roomId || !userId) return;\r\n \r\n-    const onMessage = (msg: any) => {\r\n-      setMessages((prev) => [...prev, msg]);\r\n-      socket.emit(\"message-status\", {\r\n-        roomId,\r\n-        messageId: msg.id,\r\n-        status: \"seen\",\r\n-      });\r\n-      setPartnerTyping(false);\r\n-      playSound(\"receive\");\r\n-    };\r\n-\r\n-    const onTyping = ({ sender }: any) => {\r\n-      if (sender !== socket.id) {\r\n-        setPartnerTyping(true);\r\n-        setTimeout(() => setPartnerTyping(false), 3000);\r\n+    const fetchPartner = async () => {\r\n+      try {\r\n+        const roomRef = ref(database, `rooms/${roomId}/users`);\r\n+        const snapshot = await get(roomRef);\r\n+        if (snapshot.exists()) {\r\n+          const users = snapshot.val();\r\n+          const partnerUid = Object.keys(users).find((uid) => uid !== userId);\r\n+          if (partnerUid) {\r\n+            setPartnerId(partnerUid);\r\n+            const userRef = ref(database, `users/${partnerUid}`);\r\n+            const userSnap = await get(userRef);\r\n+            if (userSnap.exists()) setPartnerName(userSnap.val().name || \"Stranger\");\r\n+          }\r\n+        }\r\n+      } catch (err) {\r\n+        console.error(\"Error fetching partner info:\", err);\r\n       }\r\n     };\r\n \r\n-    const onStatus = ({ messageId, status }: any) => {\r\n-      setMessages((prev) =>\r\n-        prev.map((m) => (m.id === messageId ? { ...m, status } : m))\r\n-      );\r\n-    };\r\n+    fetchPartner();\r\n+  }, [roomId, userId]);\r\n \r\n-    const onDelete = ({ messageId }: any) => {\r\n-      setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n-    };\r\n+  // ---------- Listen for messages ----------\r\n+  useEffect(() => {\r\n+    if (!roomId) return;\r\n \r\n-    const onReact = ({ messageId, reaction, user }: any) => {\r\n-      setMessages((prev) =>\r\n-        prev.map((m) =>\r\n-          m.id === messageId\r\n-            ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n-            : m\r\n-        )\r\n-      );\r\n-    };\r\n+    const messagesRef = ref(database, `rooms/${roomId}/messages`);\r\n \r\n-    const onEdit = ({ messageId, content }: any) => {\r\n+    const handleNewMessage = onChildAdded(messagesRef, (snap) => {\r\n+      const msg = snap.val() as ChatMessage;\r\n+      setMessages((prev) => [...prev, msg]);\r\n+      if (msg.sender !== userId) playSound(\"receive\");\r\n+    });\r\n+\r\n+    const handleMessageChange = onChildChanged(messagesRef, (snap) => {\r\n+      const updated = snap.val() as ChatMessage;\r\n       setMessages((prev) =>\r\n-        prev.map((m) => (m.id === messageId ? { ...m, content } : m))\r\n+        prev.map((m) => (m.id === updated.id ? updated : m))\r\n       );\r\n-    };\r\n+    });\r\n \r\n-    socket.on(\"receive-message\", onMessage);\r\n-    socket.on(\"typing\", onTyping);\r\n-    socket.on(\"message-status-update\", onStatus);\r\n-    socket.on(\"message-deleted\", onDelete);\r\n-    socket.on(\"message-react\", onReact);\r\n-    socket.on(\"message-edited\", onEdit);\r\n+    const handleMessageRemove = onChildRemoved(messagesRef, (snap) => {\r\n+      const removed = snap.val() as ChatMessage;\r\n+      setMessages((prev) => prev.filter((m) => m.id !== removed.id));\r\n+    });\r\n \r\n     return () => {\r\n-      socket.off(\"receive-message\", onMessage);\r\n-      socket.off(\"typing\", onTyping);\r\n-      socket.off(\"message-status-update\", onStatus);\r\n-      socket.off(\"message-deleted\", onDelete);\r\n-      socket.off(\"message-react\", onReact);\r\n-      socket.off(\"message-edited\", onEdit);\r\n+      messagesRef.off();\r\n     };\r\n-  }, [socket, roomId, soundOn]);\r\n+  }, [roomId, userId, soundOn]);\r\n \r\n+  // ---------- Typing indicator ----------\r\n   const debouncedTyping = useRef(\r\n     debounce(() => {\r\n-      socket.emit(\"typing\", { roomId, sender: socket.id });\r\n+      const typingRef = ref(database, `rooms/${roomId}/typing/${userId}`);\r\n+      update(typingRef, { typing: true, timestamp: Date.now() });\r\n+      setTimeout(() => update(typingRef, { typing: false }), 2000);\r\n     }, 300)\r\n   ).current;\r\n \r\n-  const sendMessage = (payload: any) => {\r\n-    const msg = {\r\n-      ...payload,\r\n+  useEffect(() => {\r\n+    if (!roomId) return;\r\n+    const typingRef = ref(database, `rooms/${roomId}/typing`);\r\n+    const unsub = onChildChanged(typingRef, (snap) => {\r\n+      const data = snap.val();\r\n+      if (snap.key !== userId) setPartnerTyping(data.typing);\r\n+    });\r\n+    return () => unsub();\r\n+  }, [roomId, userId]);\r\n+\r\n+  // ---------- Send message ----------\r\n+  const sendMessage = (content: string, type: ChatMessage[\"type\"] = \"text\") => {\r\n+    if (!content.trim()) return;\r\n+\r\n+    const newMsg: ChatMessage = {\r\n       id: uuidv4(),\r\n-      sender: socket.id,\r\n+      sender: userId,\r\n+      content,\r\n+      type,\r\n       timestamp: new Date().toISOString(),\r\n       status: \"sent\",\r\n       reactions: {},\r\n+      name: \"You\",\r\n     };\r\n-    socket.emit(\"send-message\", msg);\r\n-    setMessages((prev) => [...prev, msg]);\r\n+\r\n+    const messagesRef = ref(database, `rooms/${roomId}/messages`);\r\n+    push(messagesRef, newMsg);\r\n+    setMessages((prev) => [...prev, newMsg]);\r\n     playSound(\"sent\");\r\n     setInput(\"\");\r\n-    setShowEmojiPicker(false);\r\n-    setPartnerTyping(false);\r\n   };\r\n \r\n-  const sendText = () => {\r\n-    if (!input.trim()) return;\r\n-    sendMessage({ content: input.trim(), type: \"text\", roomId });\r\n-  };\r\n-\r\n   const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n     const file = e.target.files?.[0];\r\n     if (!file) return;\r\n-\r\n     const url = URL.createObjectURL(file);\r\n-    const mime = file.type;\r\n-\r\n-    let type: \"image\" | \"audio\" | \"video\" | \"file\" = \"file\";\r\n-    if (mime.startsWith(\"image\")) type = \"image\";\r\n-    else if (mime.startsWith(\"audio\")) type = \"audio\";\r\n-    else if (mime.startsWith(\"video\")) type = \"video\";\r\n-\r\n-    sendMessage({ content: url, type, roomId });\r\n+    let type: ChatMessage[\"type\"] = \"file\";\r\n+    if (file.type.startsWith(\"image\")) type = \"image\";\r\n+    else if (file.type.startsWith(\"audio\")) type = \"audio\";\r\n+    else if (file.type.startsWith(\"video\")) type = \"video\";\r\n+    sendMessage(url, type);\r\n   };\r\n \r\n   return (\r\n     <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 relative\">\r\n-      {/* Sound Effects */}\r\n+      {/* Sounds */}\r\n       <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n       <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n \r\n-      {/* ✅ Partner Info */}\r\n+      {/* Partner Info */}\r\n       <div className=\"px-4 py-2 border-b text-sm bg-white dark:bg-neutral-900 dark:border-neutral-700\">\r\n-        <span className=\"font-medium text-blue-600 dark:text-blue-400\">\r\n-          {partnerName}\r\n-        </span>\r\n-        {partnerAge && <span className=\"ml-1\">({partnerAge})</span>}\r\n-        {partnerCountry && (\r\n-          <span className=\"ml-2 text-neutral-500 dark:text-neutral-400\">\r\n-            from {partnerCountry}\r\n-          </span>\r\n-        )}\r\n+        <span className=\"font-medium text-blue-600 dark:text-blue-400\">{partnerName}</span>\r\n       </div>\r\n \r\n-      {/* Chat Messages */}\r\n+      {/* Messages */}\r\n       <div className=\"flex-1 overflow-y-auto px-3 py-4 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n-            sender={msg.sender === socket.id ? \"me\" : \"partner\"}\r\n-            name={msg.sender === socket.id ? \"You\" : partnerName}\r\n-            age={msg.sender === socket.id ? undefined : partnerAge}\r\n+            sender={msg.sender === userId ? \"me\" : \"partner\"}\r\n+            name={msg.sender === userId ? \"You\" : partnerName}\r\n             onDelete={() => {\r\n-              socket.emit(\"delete-message\", { roomId, messageId: msg.id });\r\n-              setMessages((prev) => prev.filter((m) => m.id !== msg.id));\r\n+              const msgRef = ref(database, `rooms/${roomId}/messages/${msg.id}`);\r\n+              msgRef.remove();\r\n             }}\r\n-            onEdit={(newContent: string) => {\r\n-              socket.emit(\"edit-message\", { roomId, messageId: msg.id, content: newContent });\r\n-              setMessages((prev) =>\r\n-                prev.map((m) => (m.id === msg.id ? { ...m, content: newContent } : m))\r\n-              );\r\n-            }}\r\n-            onReact={(reaction: string) => {\r\n-              socket.emit(\"react-message\", {\r\n-                roomId,\r\n-                messageId: msg.id,\r\n-                reaction,\r\n-                user: socket.id,\r\n-              });\r\n-              setMessages((prev) =>\r\n-                prev.map((m) =>\r\n-                  m.id === msg.id\r\n-                    ? {\r\n-                        ...m,\r\n-                        reactions: { ...m.reactions, [socket.id]: reaction },\r\n-                      }\r\n-                    : m\r\n-                )\r\n-              );\r\n-            }}\r\n           />\r\n         ))}\r\n-        {partnerTyping && (\r\n-          <TypingIndicator\r\n-            name={partnerName}\r\n-          />\r\n-        )}\r\n+        {partnerTyping && <TypingIndicator name={partnerName} />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n-      {/* Emoji Picker */}\r\n-      {showEmojiPicker && (\r\n-        <div className=\"absolute bottom-20 left-2 sm:left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n-          {topEmojis.map((emoji) => (\r\n-            <button\r\n-              key={emoji}\r\n-              onClick={() => setInput((prev) => prev + emoji)}\r\n-              className=\"text-2xl hover:scale-125 transition-transform\"\r\n-            >\r\n-              {emoji}\r\n-            </button>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-\r\n-      {/* Input Panel */}\r\n+      {/* Input */}\r\n       <div className=\"border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 bg-white dark:bg-neutral-900\">\r\n-        <button\r\n-          onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n-          className=\"text-2xl hover:scale-110 transition-transform\"\r\n-        >\r\n-          😊\r\n-        </button>\r\n-\r\n         <input\r\n           type=\"text\"\r\n           placeholder=\"Type a message...\"\r\n           value={input}\r\n           onChange={(e) => {\r\n             setInput(e.target.value);\r\n             debouncedTyping();\r\n           }}\r\n-          onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n+          onKeyDown={(e) => e.key === \"Enter\" && sendMessage(input)}\r\n           className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 text-sm px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n         />\r\n-\r\n         <label className=\"cursor-pointer text-xl\" title=\"Send file\">\r\n           📎\r\n-          <input\r\n-            type=\"file\"\r\n-            accept=\"image/*,audio/*,video/*\"\r\n-            hidden\r\n-            onChange={handleFile}\r\n-          />\r\n+          <input type=\"file\" accept=\"image/*,audio/*,video/*\" hidden onChange={handleFile} />\r\n         </label>\r\n-\r\n         <button\r\n-          onClick={sendText}\r\n+          onClick={() => sendMessage(input)}\r\n           disabled={!input.trim()}\r\n           className=\"bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 text-sm rounded-lg disabled:opacity-50 transition\"\r\n         >\r\n           Send\r\n"
                },
                {
                    "date": 1759344312464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,44 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n-import { ref, push, onChildAdded, onChildChanged, onChildRemoved, update, get } from \"firebase/database\";\r\n-import { database } from \"@/lib/firebaseConfig\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n const debounce = require(\"lodash/debounce\");\r\n \r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n \r\n interface ChatBoxProps {\r\n+  socket: any;\r\n   roomId: string;\r\n-  userId: string; // current user uid\r\n   soundOn?: boolean;\r\n+  partnerName?: string;\r\n+  partnerAge?: string | number;\r\n+  partnerCountry?: string;\r\n }\r\n \r\n-interface ChatMessage {\r\n-  id: string;\r\n-  sender: string;\r\n-  content: string;\r\n-  type: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\";\r\n-  timestamp: string;\r\n-  status: \"sent\" | \"seen\";\r\n-  reactions?: Record<string, string>;\r\n-  name?: string;\r\n-}\r\n+const topEmojis = [\r\n+  \"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\",\r\n+  \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"\r\n+];\r\n \r\n-export default function ChatBox({ roomId, userId, soundOn = true }: ChatBoxProps) {\r\n-  const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n+export default function ChatBox({\r\n+  socket,\r\n+  roomId,\r\n+  soundOn = true,\r\n+  partnerName = \"Stranger\",\r\n+  partnerAge,\r\n+  partnerCountry,\r\n+}: ChatBoxProps) {\r\n+  const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n+  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n   const [partnerTyping, setPartnerTyping] = useState(false);\r\n-  const [partnerName, setPartnerName] = useState(\"Stranger\");\r\n-  const [partnerId, setPartnerId] = useState<string | null>(null);\r\n   const messagesEndRef = useRef<HTMLDivElement>(null);\r\n \r\n   const sentSoundRef = useRef<HTMLAudioElement>(null);\r\n   const receiveSoundRef = useRef<HTMLAudioElement>(null);\r\n \r\n-  // ---------- Sounds ----------\r\n   const playSound = (type: \"sent\" | \"receive\") => {\r\n     if (!soundOn) return;\r\n     const audioRef = type === \"sent\" ? sentSoundRef : receiveSoundRef;\r\n     const play = async () => {\r\n@@ -46,176 +46,241 @@\n         const audio = audioRef.current;\r\n         if (!audio) return;\r\n         audio.volume = 0.8;\r\n         await audio.play();\r\n-      } catch {\r\n+      } catch (err) {\r\n         const ctx = new AudioContext();\r\n         await ctx.resume();\r\n       }\r\n     };\r\n     play();\r\n   };\r\n \r\n-  // ---------- Scroll to bottom ----------\r\n   useEffect(() => {\r\n     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n   }, [messages, partnerTyping]);\r\n \r\n-  // ---------- Fetch partner info ----------\r\n   useEffect(() => {\r\n-    if (!roomId || !userId) return;\r\n+    if (!socket) return;\r\n \r\n-    const fetchPartner = async () => {\r\n-      try {\r\n-        const roomRef = ref(database, `rooms/${roomId}/users`);\r\n-        const snapshot = await get(roomRef);\r\n-        if (snapshot.exists()) {\r\n-          const users = snapshot.val();\r\n-          const partnerUid = Object.keys(users).find((uid) => uid !== userId);\r\n-          if (partnerUid) {\r\n-            setPartnerId(partnerUid);\r\n-            const userRef = ref(database, `users/${partnerUid}`);\r\n-            const userSnap = await get(userRef);\r\n-            if (userSnap.exists()) setPartnerName(userSnap.val().name || \"Stranger\");\r\n-          }\r\n-        }\r\n-      } catch (err) {\r\n-        console.error(\"Error fetching partner info:\", err);\r\n+    const onMessage = (msg: any) => {\r\n+      setMessages((prev) => [...prev, msg]);\r\n+      socket.emit(\"message-status\", {\r\n+        roomId,\r\n+        messageId: msg.id,\r\n+        status: \"seen\",\r\n+      });\r\n+      setPartnerTyping(false);\r\n+      playSound(\"receive\");\r\n+    };\r\n+\r\n+    const onTyping = ({ sender }: any) => {\r\n+      if (sender !== socket.id) {\r\n+        setPartnerTyping(true);\r\n+        setTimeout(() => setPartnerTyping(false), 3000);\r\n       }\r\n     };\r\n \r\n-    fetchPartner();\r\n-  }, [roomId, userId]);\r\n+    const onStatus = ({ messageId, status }: any) => {\r\n+      setMessages((prev) =>\r\n+        prev.map((m) => (m.id === messageId ? { ...m, status } : m))\r\n+      );\r\n+    };\r\n \r\n-  // ---------- Listen for messages ----------\r\n-  useEffect(() => {\r\n-    if (!roomId) return;\r\n+    const onDelete = ({ messageId }: any) => {\r\n+      setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n+    };\r\n \r\n-    const messagesRef = ref(database, `rooms/${roomId}/messages`);\r\n+    const onReact = ({ messageId, reaction, user }: any) => {\r\n+      setMessages((prev) =>\r\n+        prev.map((m) =>\r\n+          m.id === messageId\r\n+            ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n+            : m\r\n+        )\r\n+      );\r\n+    };\r\n \r\n-    const handleNewMessage = onChildAdded(messagesRef, (snap) => {\r\n-      const msg = snap.val() as ChatMessage;\r\n-      setMessages((prev) => [...prev, msg]);\r\n-      if (msg.sender !== userId) playSound(\"receive\");\r\n-    });\r\n-\r\n-    const handleMessageChange = onChildChanged(messagesRef, (snap) => {\r\n-      const updated = snap.val() as ChatMessage;\r\n+    const onEdit = ({ messageId, content }: any) => {\r\n       setMessages((prev) =>\r\n-        prev.map((m) => (m.id === updated.id ? updated : m))\r\n+        prev.map((m) => (m.id === messageId ? { ...m, content } : m))\r\n       );\r\n-    });\r\n+    };\r\n \r\n-    const handleMessageRemove = onChildRemoved(messagesRef, (snap) => {\r\n-      const removed = snap.val() as ChatMessage;\r\n-      setMessages((prev) => prev.filter((m) => m.id !== removed.id));\r\n-    });\r\n+    socket.on(\"receive-message\", onMessage);\r\n+    socket.on(\"typing\", onTyping);\r\n+    socket.on(\"message-status-update\", onStatus);\r\n+    socket.on(\"message-deleted\", onDelete);\r\n+    socket.on(\"message-react\", onReact);\r\n+    socket.on(\"message-edited\", onEdit);\r\n \r\n     return () => {\r\n-      messagesRef.off();\r\n+      socket.off(\"receive-message\", onMessage);\r\n+      socket.off(\"typing\", onTyping);\r\n+      socket.off(\"message-status-update\", onStatus);\r\n+      socket.off(\"message-deleted\", onDelete);\r\n+      socket.off(\"message-react\", onReact);\r\n+      socket.off(\"message-edited\", onEdit);\r\n     };\r\n-  }, [roomId, userId, soundOn]);\r\n+  }, [socket, roomId, soundOn]);\r\n \r\n-  // ---------- Typing indicator ----------\r\n   const debouncedTyping = useRef(\r\n     debounce(() => {\r\n-      const typingRef = ref(database, `rooms/${roomId}/typing/${userId}`);\r\n-      update(typingRef, { typing: true, timestamp: Date.now() });\r\n-      setTimeout(() => update(typingRef, { typing: false }), 2000);\r\n+      socket.emit(\"typing\", { roomId, sender: socket.id });\r\n     }, 300)\r\n   ).current;\r\n \r\n-  useEffect(() => {\r\n-    if (!roomId) return;\r\n-    const typingRef = ref(database, `rooms/${roomId}/typing`);\r\n-    const unsub = onChildChanged(typingRef, (snap) => {\r\n-      const data = snap.val();\r\n-      if (snap.key !== userId) setPartnerTyping(data.typing);\r\n-    });\r\n-    return () => unsub();\r\n-  }, [roomId, userId]);\r\n-\r\n-  // ---------- Send message ----------\r\n-  const sendMessage = (content: string, type: ChatMessage[\"type\"] = \"text\") => {\r\n-    if (!content.trim()) return;\r\n-\r\n-    const newMsg: ChatMessage = {\r\n+  const sendMessage = (payload: any) => {\r\n+    const msg = {\r\n+      ...payload,\r\n       id: uuidv4(),\r\n-      sender: userId,\r\n-      content,\r\n-      type,\r\n+      sender: socket.id,\r\n       timestamp: new Date().toISOString(),\r\n       status: \"sent\",\r\n       reactions: {},\r\n-      name: \"You\",\r\n     };\r\n-\r\n-    const messagesRef = ref(database, `rooms/${roomId}/messages`);\r\n-    push(messagesRef, newMsg);\r\n-    setMessages((prev) => [...prev, newMsg]);\r\n+    socket.emit(\"send-message\", msg);\r\n+    setMessages((prev) => [...prev, msg]);\r\n     playSound(\"sent\");\r\n     setInput(\"\");\r\n+    setShowEmojiPicker(false);\r\n+    setPartnerTyping(false);\r\n   };\r\n \r\n+  const sendText = () => {\r\n+    if (!input.trim()) return;\r\n+    sendMessage({ content: input.trim(), type: \"text\", roomId });\r\n+  };\r\n+\r\n   const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n     const file = e.target.files?.[0];\r\n     if (!file) return;\r\n+\r\n     const url = URL.createObjectURL(file);\r\n-    let type: ChatMessage[\"type\"] = \"file\";\r\n-    if (file.type.startsWith(\"image\")) type = \"image\";\r\n-    else if (file.type.startsWith(\"audio\")) type = \"audio\";\r\n-    else if (file.type.startsWith(\"video\")) type = \"video\";\r\n-    sendMessage(url, type);\r\n+    const mime = file.type;\r\n+\r\n+    let type: \"image\" | \"audio\" | \"video\" | \"file\" = \"file\";\r\n+    if (mime.startsWith(\"image\")) type = \"image\";\r\n+    else if (mime.startsWith(\"audio\")) type = \"audio\";\r\n+    else if (mime.startsWith(\"video\")) type = \"video\";\r\n+\r\n+    sendMessage({ content: url, type, roomId });\r\n   };\r\n \r\n   return (\r\n     <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 relative\">\r\n-      {/* Sounds */}\r\n+      {/* Sound Effects */}\r\n       <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n       <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n \r\n-      {/* Partner Info */}\r\n+      {/* ✅ Partner Info */}\r\n       <div className=\"px-4 py-2 border-b text-sm bg-white dark:bg-neutral-900 dark:border-neutral-700\">\r\n-        <span className=\"font-medium text-blue-600 dark:text-blue-400\">{partnerName}</span>\r\n+        <span className=\"font-medium text-blue-600 dark:text-blue-400\">\r\n+          {partnerName}\r\n+        </span>\r\n+        {partnerAge && <span className=\"ml-1\">({partnerAge})</span>}\r\n+        {partnerCountry && (\r\n+          <span className=\"ml-2 text-neutral-500 dark:text-neutral-400\">\r\n+            from {partnerCountry}\r\n+          </span>\r\n+        )}\r\n       </div>\r\n \r\n-      {/* Messages */}\r\n+      {/* Chat Messages */}\r\n       <div className=\"flex-1 overflow-y-auto px-3 py-4 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n-            sender={msg.sender === userId ? \"me\" : \"partner\"}\r\n-            name={msg.sender === userId ? \"You\" : partnerName}\r\n+            sender={msg.sender === socket.id ? \"me\" : \"partner\"}\r\n+            name={msg.sender === socket.id ? \"You\" : partnerName}\r\n+            age={msg.sender === socket.id ? undefined : partnerAge}\r\n             onDelete={() => {\r\n-              const msgRef = ref(database, `rooms/${roomId}/messages/${msg.id}`);\r\n-              msgRef.remove();\r\n+              socket.emit(\"delete-message\", { roomId, messageId: msg.id });\r\n+              setMessages((prev) => prev.filter((m) => m.id !== msg.id));\r\n             }}\r\n+            onEdit={(newContent: string) => {\r\n+              socket.emit(\"edit-message\", { roomId, messageId: msg.id, content: newContent });\r\n+              setMessages((prev) =>\r\n+                prev.map((m) => (m.id === msg.id ? { ...m, content: newContent } : m))\r\n+              );\r\n+            }}\r\n+            onReact={(reaction: string) => {\r\n+              socket.emit(\"react-message\", {\r\n+                roomId,\r\n+                messageId: msg.id,\r\n+                reaction,\r\n+                user: socket.id,\r\n+              });\r\n+              setMessages((prev) =>\r\n+                prev.map((m) =>\r\n+                  m.id === msg.id\r\n+                    ? {\r\n+                        ...m,\r\n+                        reactions: { ...m.reactions, [socket.id]: reaction },\r\n+                      }\r\n+                    : m\r\n+                )\r\n+              );\r\n+            }}\r\n           />\r\n         ))}\r\n-        {partnerTyping && <TypingIndicator name={partnerName} />}\r\n+        {partnerTyping && (\r\n+          <TypingIndicator\r\n+            name={partnerName}\r\n+          />\r\n+        )}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n-      {/* Input */}\r\n+      {/* Emoji Picker */}\r\n+      {showEmojiPicker && (\r\n+        <div className=\"absolute bottom-20 left-2 sm:left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n+          {topEmojis.map((emoji) => (\r\n+            <button\r\n+              key={emoji}\r\n+              onClick={() => setInput((prev) => prev + emoji)}\r\n+              className=\"text-2xl hover:scale-125 transition-transform\"\r\n+            >\r\n+              {emoji}\r\n+            </button>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Input Panel */}\r\n       <div className=\"border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 bg-white dark:bg-neutral-900\">\r\n+        <button\r\n+          onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n+          className=\"text-2xl hover:scale-110 transition-transform\"\r\n+        >\r\n+          😊\r\n+        </button>\r\n+\r\n         <input\r\n           type=\"text\"\r\n           placeholder=\"Type a message...\"\r\n           value={input}\r\n           onChange={(e) => {\r\n             setInput(e.target.value);\r\n             debouncedTyping();\r\n           }}\r\n-          onKeyDown={(e) => e.key === \"Enter\" && sendMessage(input)}\r\n+          onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n           className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 text-sm px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n         />\r\n+\r\n         <label className=\"cursor-pointer text-xl\" title=\"Send file\">\r\n           📎\r\n-          <input type=\"file\" accept=\"image/*,audio/*,video/*\" hidden onChange={handleFile} />\r\n+          <input\r\n+            type=\"file\"\r\n+            accept=\"image/*,audio/*,video/*\"\r\n+            hidden\r\n+            onChange={handleFile}\r\n+          />\r\n         </label>\r\n+\r\n         <button\r\n-          onClick={() => sendMessage(input)}\r\n+          onClick={sendText}\r\n           disabled={!input.trim()}\r\n           className=\"bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 text-sm rounded-lg disabled:opacity-50 transition\"\r\n         >\r\n           Send\r\n"
                },
                {
                    "date": 1759344382896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,18 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n-const debounce = require(\"lodash/debounce\");\r\n-\r\n+import { ref, push, onValue, remove } from \"firebase/database\";\r\n+import { database } from \"@/lib/firebaseConfig\";\r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n+import debounce from \"lodash/debounce\";\r\n \r\n interface ChatBoxProps {\r\n   socket: any;\r\n   roomId: string;\r\n+  userId: string;\r\n   soundOn?: boolean;\r\n   partnerName?: string;\r\n   partnerAge?: string | number;\r\n   partnerCountry?: string;\r\n@@ -23,8 +25,9 @@\n \r\n export default function ChatBox({\r\n   socket,\r\n   roomId,\r\n+  userId,\r\n   soundOn = true,\r\n   partnerName = \"Stranger\",\r\n   partnerAge,\r\n   partnerCountry,\r\n@@ -37,8 +40,9 @@\n \r\n   const sentSoundRef = useRef<HTMLAudioElement>(null);\r\n   const receiveSoundRef = useRef<HTMLAudioElement>(null);\r\n \r\n+  // Play sounds\r\n   const playSound = (type: \"sent\" | \"receive\") => {\r\n     if (!soundOn) return;\r\n     const audioRef = type === \"sent\" ? sentSoundRef : receiveSoundRef;\r\n     const play = async () => {\r\n@@ -46,190 +50,124 @@\n         const audio = audioRef.current;\r\n         if (!audio) return;\r\n         audio.volume = 0.8;\r\n         await audio.play();\r\n-      } catch (err) {\r\n+      } catch {\r\n         const ctx = new AudioContext();\r\n         await ctx.resume();\r\n       }\r\n     };\r\n     play();\r\n   };\r\n \r\n+  // Scroll to bottom\r\n   useEffect(() => {\r\n     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n   }, [messages, partnerTyping]);\r\n \r\n+  // Firebase listener\r\n   useEffect(() => {\r\n+    if (!roomId) return;\r\n+    const messagesRef = ref(database, `rooms/${roomId}/messages`);\r\n+    return onValue(messagesRef, (snapshot) => {\r\n+      const data = snapshot.val() || {};\r\n+      setMessages(Object.values(data));\r\n+    });\r\n+  }, [roomId]);\r\n+\r\n+  // Socket events\r\n+  useEffect(() => {\r\n     if (!socket) return;\r\n \r\n-    const onMessage = (msg: any) => {\r\n-      setMessages((prev) => [...prev, msg]);\r\n-      socket.emit(\"message-status\", {\r\n-        roomId,\r\n-        messageId: msg.id,\r\n-        status: \"seen\",\r\n-      });\r\n-      setPartnerTyping(false);\r\n-      playSound(\"receive\");\r\n-    };\r\n-\r\n     const onTyping = ({ sender }: any) => {\r\n       if (sender !== socket.id) {\r\n         setPartnerTyping(true);\r\n         setTimeout(() => setPartnerTyping(false), 3000);\r\n       }\r\n     };\r\n \r\n-    const onStatus = ({ messageId, status }: any) => {\r\n-      setMessages((prev) =>\r\n-        prev.map((m) => (m.id === messageId ? { ...m, status } : m))\r\n-      );\r\n-    };\r\n-\r\n-    const onDelete = ({ messageId }: any) => {\r\n-      setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n-    };\r\n-\r\n-    const onReact = ({ messageId, reaction, user }: any) => {\r\n-      setMessages((prev) =>\r\n-        prev.map((m) =>\r\n-          m.id === messageId\r\n-            ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n-            : m\r\n-        )\r\n-      );\r\n-    };\r\n-\r\n-    const onEdit = ({ messageId, content }: any) => {\r\n-      setMessages((prev) =>\r\n-        prev.map((m) => (m.id === messageId ? { ...m, content } : m))\r\n-      );\r\n-    };\r\n-\r\n-    socket.on(\"receive-message\", onMessage);\r\n     socket.on(\"typing\", onTyping);\r\n-    socket.on(\"message-status-update\", onStatus);\r\n-    socket.on(\"message-deleted\", onDelete);\r\n-    socket.on(\"message-react\", onReact);\r\n-    socket.on(\"message-edited\", onEdit);\r\n+    return () => socket.off(\"typing\", onTyping);\r\n+  }, [socket]);\r\n \r\n-    return () => {\r\n-      socket.off(\"receive-message\", onMessage);\r\n-      socket.off(\"typing\", onTyping);\r\n-      socket.off(\"message-status-update\", onStatus);\r\n-      socket.off(\"message-deleted\", onDelete);\r\n-      socket.off(\"message-react\", onReact);\r\n-      socket.off(\"message-edited\", onEdit);\r\n-    };\r\n-  }, [socket, roomId, soundOn]);\r\n-\r\n+  // Debounced typing\r\n   const debouncedTyping = useRef(\r\n     debounce(() => {\r\n       socket.emit(\"typing\", { roomId, sender: socket.id });\r\n     }, 300)\r\n   ).current;\r\n \r\n-  const sendMessage = (payload: any) => {\r\n+  // Send message to Firebase + Socket\r\n+  const sendMessage = (content: string, type: \"text\" | \"image\" | \"audio\" | \"video\" = \"text\") => {\r\n+    if (!content.trim() || !roomId) return;\r\n+\r\n+    const msgId = uuidv4();\r\n     const msg = {\r\n-      ...payload,\r\n-      id: uuidv4(),\r\n-      sender: socket.id,\r\n+      id: msgId,\r\n+      sender: userId,\r\n+      content,\r\n       timestamp: new Date().toISOString(),\r\n+      type,\r\n       status: \"sent\",\r\n       reactions: {},\r\n     };\r\n-    socket.emit(\"send-message\", msg);\r\n-    setMessages((prev) => [...prev, msg]);\r\n+\r\n+    // Push to Firebase\r\n+    const msgRef = ref(database, `rooms/${roomId}/messages/${msgId}`);\r\n+    msgRef.set(msg).catch(err => console.error(err));\r\n+\r\n     playSound(\"sent\");\r\n     setInput(\"\");\r\n     setShowEmojiPicker(false);\r\n-    setPartnerTyping(false);\r\n   };\r\n \r\n-  const sendText = () => {\r\n-    if (!input.trim()) return;\r\n-    sendMessage({ content: input.trim(), type: \"text\", roomId });\r\n-  };\r\n+  const sendText = () => sendMessage(input, \"text\");\r\n \r\n   const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n     const file = e.target.files?.[0];\r\n     if (!file) return;\r\n-\r\n     const url = URL.createObjectURL(file);\r\n     const mime = file.type;\r\n \r\n     let type: \"image\" | \"audio\" | \"video\" | \"file\" = \"file\";\r\n     if (mime.startsWith(\"image\")) type = \"image\";\r\n     else if (mime.startsWith(\"audio\")) type = \"audio\";\r\n     else if (mime.startsWith(\"video\")) type = \"video\";\r\n \r\n-    sendMessage({ content: url, type, roomId });\r\n+    sendMessage(url, type);\r\n   };\r\n \r\n   return (\r\n     <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 relative\">\r\n-      {/* Sound Effects */}\r\n       <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n       <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n \r\n-      {/* ✅ Partner Info */}\r\n+      {/* Partner Info */}\r\n       <div className=\"px-4 py-2 border-b text-sm bg-white dark:bg-neutral-900 dark:border-neutral-700\">\r\n-        <span className=\"font-medium text-blue-600 dark:text-blue-400\">\r\n-          {partnerName}\r\n-        </span>\r\n+        <span className=\"font-medium text-blue-600 dark:text-blue-400\">{partnerName}</span>\r\n         {partnerAge && <span className=\"ml-1\">({partnerAge})</span>}\r\n         {partnerCountry && (\r\n-          <span className=\"ml-2 text-neutral-500 dark:text-neutral-400\">\r\n-            from {partnerCountry}\r\n-          </span>\r\n+          <span className=\"ml-2 text-neutral-500 dark:text-neutral-400\">from {partnerCountry}</span>\r\n         )}\r\n       </div>\r\n \r\n-      {/* Chat Messages */}\r\n+      {/* Messages */}\r\n       <div className=\"flex-1 overflow-y-auto px-3 py-4 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n-            sender={msg.sender === socket.id ? \"me\" : \"partner\"}\r\n-            name={msg.sender === socket.id ? \"You\" : partnerName}\r\n-            age={msg.sender === socket.id ? undefined : partnerAge}\r\n-            onDelete={() => {\r\n-              socket.emit(\"delete-message\", { roomId, messageId: msg.id });\r\n-              setMessages((prev) => prev.filter((m) => m.id !== msg.id));\r\n-            }}\r\n-            onEdit={(newContent: string) => {\r\n-              socket.emit(\"edit-message\", { roomId, messageId: msg.id, content: newContent });\r\n-              setMessages((prev) =>\r\n-                prev.map((m) => (m.id === msg.id ? { ...m, content: newContent } : m))\r\n-              );\r\n-            }}\r\n-            onReact={(reaction: string) => {\r\n-              socket.emit(\"react-message\", {\r\n-                roomId,\r\n-                messageId: msg.id,\r\n-                reaction,\r\n-                user: socket.id,\r\n-              });\r\n-              setMessages((prev) =>\r\n-                prev.map((m) =>\r\n-                  m.id === msg.id\r\n-                    ? {\r\n-                        ...m,\r\n-                        reactions: { ...m.reactions, [socket.id]: reaction },\r\n-                      }\r\n-                    : m\r\n-                )\r\n-              );\r\n-            }}\r\n+            sender={msg.sender === userId ? \"me\" : \"partner\"}\r\n+            name={msg.sender === userId ? \"You\" : partnerName}\r\n+            age={msg.sender === userId ? undefined : partnerAge}\r\n+            country={msg.sender === userId ? undefined : partnerCountry}\r\n+            onDelete={() => remove(ref(database, `rooms/${roomId}/messages/${msg.id}`))}\r\n+            onEdit={(newContent: string) =>\r\n+              ref(database, `rooms/${roomId}/messages/${msg.id}`).update({ content: newContent })\r\n+            }\r\n           />\r\n         ))}\r\n-        {partnerTyping && (\r\n-          <TypingIndicator\r\n-            name={partnerName}\r\n-          />\r\n-        )}\r\n+        {partnerTyping && <TypingIndicator name={partnerName} />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n       {/* Emoji Picker */}\r\n@@ -237,9 +175,9 @@\n         <div className=\"absolute bottom-20 left-2 sm:left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n           {topEmojis.map((emoji) => (\r\n             <button\r\n               key={emoji}\r\n-              onClick={() => setInput((prev) => prev + emoji)}\r\n+              onClick={() => setInput(prev => prev + emoji)}\r\n               className=\"text-2xl hover:scale-125 transition-transform\"\r\n             >\r\n               {emoji}\r\n             </button>\r\n@@ -248,37 +186,21 @@\n       )}\r\n \r\n       {/* Input Panel */}\r\n       <div className=\"border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 bg-white dark:bg-neutral-900\">\r\n-        <button\r\n-          onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n-          className=\"text-2xl hover:scale-110 transition-transform\"\r\n-        >\r\n-          😊\r\n-        </button>\r\n-\r\n+        <button onClick={() => setShowEmojiPicker(prev => !prev)} className=\"text-2xl hover:scale-110 transition-transform\">😊</button>\r\n         <input\r\n           type=\"text\"\r\n           placeholder=\"Type a message...\"\r\n           value={input}\r\n-          onChange={(e) => {\r\n-            setInput(e.target.value);\r\n-            debouncedTyping();\r\n-          }}\r\n-          onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n+          onChange={e => { setInput(e.target.value); debouncedTyping(); }}\r\n+          onKeyDown={e => e.key === \"Enter\" && sendText()}\r\n           className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 text-sm px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n         />\r\n-\r\n         <label className=\"cursor-pointer text-xl\" title=\"Send file\">\r\n           📎\r\n-          <input\r\n-            type=\"file\"\r\n-            accept=\"image/*,audio/*,video/*\"\r\n-            hidden\r\n-            onChange={handleFile}\r\n-          />\r\n+          <input type=\"file\" accept=\"image/*,audio/*,video/*\" hidden onChange={handleFile} />\r\n         </label>\r\n-\r\n         <button\r\n           onClick={sendText}\r\n           disabled={!input.trim()}\r\n           className=\"bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 text-sm rounded-lg disabled:opacity-50 transition\"\r\n"
                },
                {
                    "date": 1759344609576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n-import { ref, push, onValue, remove } from \"firebase/database\";\r\n+import { ref, onValue, set, remove, update } from \"firebase/database\";\r\n import { database } from \"@/lib/firebaseConfig\";\r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n import debounce from \"lodash/debounce\";\r\n@@ -40,9 +40,8 @@\n \r\n   const sentSoundRef = useRef<HTMLAudioElement>(null);\r\n   const receiveSoundRef = useRef<HTMLAudioElement>(null);\r\n \r\n-  // Play sounds\r\n   const playSound = (type: \"sent\" | \"receive\") => {\r\n     if (!soundOn) return;\r\n     const audioRef = type === \"sent\" ? sentSoundRef : receiveSoundRef;\r\n     const play = async () => {\r\n@@ -84,13 +83,24 @@\n         setTimeout(() => setPartnerTyping(false), 3000);\r\n       }\r\n     };\r\n \r\n+    const onReceiveMessage = (msg: any) => {\r\n+      // Push received message to Firebase if not exist\r\n+      const msgRef = ref(database, `rooms/${roomId}/messages/${msg.id}`);\r\n+      set(msgRef, msg).catch(console.error);\r\n+      playSound(\"receive\");\r\n+    };\r\n+\r\n     socket.on(\"typing\", onTyping);\r\n-    return () => socket.off(\"typing\", onTyping);\r\n-  }, [socket]);\r\n+    socket.on(\"receive-message\", onReceiveMessage);\r\n \r\n-  // Debounced typing\r\n+    return () => {\r\n+      socket.off(\"typing\", onTyping);\r\n+      socket.off(\"receive-message\", onReceiveMessage);\r\n+    };\r\n+  }, [socket, roomId]);\r\n+\r\n   const debouncedTyping = useRef(\r\n     debounce(() => {\r\n       socket.emit(\"typing\", { roomId, sender: socket.id });\r\n     }, 300)\r\n@@ -110,12 +120,14 @@\n       status: \"sent\",\r\n       reactions: {},\r\n     };\r\n \r\n-    // Push to Firebase\r\n-    const msgRef = ref(database, `rooms/${roomId}/messages/${msgId}`);\r\n-    msgRef.set(msg).catch(err => console.error(err));\r\n+    // Firebase\r\n+    set(ref(database, `rooms/${roomId}/messages/${msgId}`), msg).catch(console.error);\r\n \r\n+    // Socket\r\n+    socket.emit(\"send-message\", msg);\r\n+\r\n     playSound(\"sent\");\r\n     setInput(\"\");\r\n     setShowEmojiPicker(false);\r\n   };\r\n@@ -124,8 +136,9 @@\n \r\n   const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n     const file = e.target.files?.[0];\r\n     if (!file) return;\r\n+\r\n     const url = URL.createObjectURL(file);\r\n     const mime = file.type;\r\n \r\n     let type: \"image\" | \"audio\" | \"video\" | \"file\" = \"file\";\r\n@@ -161,10 +174,13 @@\n             age={msg.sender === userId ? undefined : partnerAge}\r\n             country={msg.sender === userId ? undefined : partnerCountry}\r\n             onDelete={() => remove(ref(database, `rooms/${roomId}/messages/${msg.id}`))}\r\n             onEdit={(newContent: string) =>\r\n-              ref(database, `rooms/${roomId}/messages/${msg.id}`).update({ content: newContent })\r\n+              update(ref(database, `rooms/${roomId}/messages/${msg.id}`), { content: newContent })\r\n             }\r\n+            onReact={(reaction: string) =>\r\n+              update(ref(database, `rooms/${roomId}/messages/${msg.id}/reactions`), { [userId]: reaction })\r\n+            }\r\n           />\r\n         ))}\r\n         {partnerTyping && <TypingIndicator name={partnerName} />}\r\n         <div ref={messagesEndRef} />\r\n"
                },
                {
                    "date": 1759344806974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,14 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n-import { ref, onValue, set, remove, update } from \"firebase/database\";\r\n+import { ref, set, onValue, remove, update } from \"firebase/database\";\r\n import { database } from \"@/lib/firebaseConfig\";\r\n+import debounce from \"lodash/debounce\";\r\n+\r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n-import debounce from \"lodash/debounce\";\r\n \r\n interface ChatBoxProps {\r\n   socket: any;\r\n   roomId: string;\r\n@@ -40,8 +41,9 @@\n \r\n   const sentSoundRef = useRef<HTMLAudioElement>(null);\r\n   const receiveSoundRef = useRef<HTMLAudioElement>(null);\r\n \r\n+  // Play sounds\r\n   const playSound = (type: \"sent\" | \"receive\") => {\r\n     if (!soundOn) return;\r\n     const audioRef = type === \"sent\" ? sentSoundRef : receiveSoundRef;\r\n     const play = async () => {\r\n@@ -62,9 +64,9 @@\n   useEffect(() => {\r\n     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n   }, [messages, partnerTyping]);\r\n \r\n-  // Firebase listener\r\n+  // Firebase listener for messages\r\n   useEffect(() => {\r\n     if (!roomId) return;\r\n     const messagesRef = ref(database, `rooms/${roomId}/messages`);\r\n     return onValue(messagesRef, (snapshot) => {\r\n@@ -83,24 +85,45 @@\n         setTimeout(() => setPartnerTyping(false), 3000);\r\n       }\r\n     };\r\n \r\n-    const onReceiveMessage = (msg: any) => {\r\n-      // Push received message to Firebase if not exist\r\n-      const msgRef = ref(database, `rooms/${roomId}/messages/${msg.id}`);\r\n-      set(msgRef, msg).catch(console.error);\r\n-      playSound(\"receive\");\r\n+    const onMessageUpdate = (msg: any) => {\r\n+      setMessages((prev) => {\r\n+        const exists = prev.find((m) => m.id === msg.id);\r\n+        if (exists) return prev.map((m) => (m.id === msg.id ? msg : m));\r\n+        return [...prev, msg];\r\n+      });\r\n+      if (msg.sender !== userId) playSound(\"receive\");\r\n     };\r\n \r\n+    const onMessageDelete = ({ messageId }: any) => {\r\n+      setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n+    };\r\n+\r\n+    const onMessageReact = ({ messageId, reaction, user }: any) => {\r\n+      setMessages((prev) =>\r\n+        prev.map((m) =>\r\n+          m.id === messageId\r\n+            ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n+            : m\r\n+        )\r\n+      );\r\n+    };\r\n+\r\n     socket.on(\"typing\", onTyping);\r\n-    socket.on(\"receive-message\", onReceiveMessage);\r\n+    socket.on(\"message-update\", onMessageUpdate);\r\n+    socket.on(\"message-delete\", onMessageDelete);\r\n+    socket.on(\"message-react\", onMessageReact);\r\n \r\n     return () => {\r\n       socket.off(\"typing\", onTyping);\r\n-      socket.off(\"receive-message\", onReceiveMessage);\r\n+      socket.off(\"message-update\", onMessageUpdate);\r\n+      socket.off(\"message-delete\", onMessageDelete);\r\n+      socket.off(\"message-react\", onMessageReact);\r\n     };\r\n-  }, [socket, roomId]);\r\n+  }, [socket, userId]);\r\n \r\n+  // Debounced typing\r\n   const debouncedTyping = useRef(\r\n     debounce(() => {\r\n       socket.emit(\"typing\", { roomId, sender: socket.id });\r\n     }, 300)\r\n@@ -120,14 +143,16 @@\n       status: \"sent\",\r\n       reactions: {},\r\n     };\r\n \r\n-    // Firebase\r\n-    set(ref(database, `rooms/${roomId}/messages/${msgId}`), msg).catch(console.error);\r\n+    // Push to Firebase\r\n+    set(ref(database, `rooms/${roomId}/messages/${msgId}`), msg)\r\n+      .catch(err => console.error(err));\r\n \r\n-    // Socket\r\n-    socket.emit(\"send-message\", msg);\r\n+    // Emit via socket\r\n+    socket.emit(\"message-update\", msg);\r\n \r\n+    setMessages((prev) => [...prev, msg]);\r\n     playSound(\"sent\");\r\n     setInput(\"\");\r\n     setShowEmojiPicker(false);\r\n   };\r\n@@ -136,9 +161,8 @@\n \r\n   const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n     const file = e.target.files?.[0];\r\n     if (!file) return;\r\n-\r\n     const url = URL.createObjectURL(file);\r\n     const mime = file.type;\r\n \r\n     let type: \"image\" | \"audio\" | \"video\" | \"file\" = \"file\";\r\n@@ -148,8 +172,26 @@\n \r\n     sendMessage(url, type);\r\n   };\r\n \r\n+  const handleDelete = (msgId: string) => {\r\n+    remove(ref(database, `rooms/${roomId}/messages/${msgId}`))\r\n+      .catch(err => console.error(err));\r\n+    socket.emit(\"message-delete\", { messageId: msgId });\r\n+  };\r\n+\r\n+  const handleEdit = (msgId: string, newContent: string) => {\r\n+    update(ref(database, `rooms/${roomId}/messages/${msgId}`), { content: newContent })\r\n+      .catch(err => console.error(err));\r\n+    socket.emit(\"message-update\", { id: msgId, content: newContent, sender: userId });\r\n+  };\r\n+\r\n+  const handleReact = (msgId: string, emoji: string) => {\r\n+    const msgRef = ref(database, `rooms/${roomId}/messages/${msgId}/reactions/${userId}`);\r\n+    set(msgRef, emoji).catch(err => console.error(err));\r\n+    socket.emit(\"message-react\", { messageId: msgId, reaction: emoji, user: userId });\r\n+  };\r\n+\r\n   return (\r\n     <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 relative\">\r\n       <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n       <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n@@ -169,18 +211,15 @@\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n             sender={msg.sender === userId ? \"me\" : \"partner\"}\r\n-            name={msg.sender === userId ? \"You\" : partnerName}\r\n+            name={msg.sender === userId ? undefined : partnerName}\r\n             age={msg.sender === userId ? undefined : partnerAge}\r\n             country={msg.sender === userId ? undefined : partnerCountry}\r\n-            onDelete={() => remove(ref(database, `rooms/${roomId}/messages/${msg.id}`))}\r\n-            onEdit={(newContent: string) =>\r\n-              update(ref(database, `rooms/${roomId}/messages/${msg.id}`), { content: newContent })\r\n-            }\r\n-            onReact={(reaction: string) =>\r\n-              update(ref(database, `rooms/${roomId}/messages/${msg.id}/reactions`), { [userId]: reaction })\r\n-            }\r\n+            status={msg.status}\r\n+            onDelete={() => handleDelete(msg.id)}\r\n+            onEdit={(newContent: string) => handleEdit(msg.id, newContent)}\r\n+            onReact={(emoji: string) => handleReact(msg.id, emoji)}\r\n           />\r\n         ))}\r\n         {partnerTyping && <TypingIndicator name={partnerName} />}\r\n         <div ref={messagesEndRef} />\r\n"
                },
                {
                    "date": 1759344846727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,14 +164,19 @@\n     if (!file) return;\r\n     const url = URL.createObjectURL(file);\r\n     const mime = file.type;\r\n \r\n-    let type: \"image\" | \"audio\" | \"video\" | \"file\" = \"file\";\r\n+    let type: \"image\" | \"audio\" | \"video\" | undefined = undefined;\r\n     if (mime.startsWith(\"image\")) type = \"image\";\r\n     else if (mime.startsWith(\"audio\")) type = \"audio\";\r\n     else if (mime.startsWith(\"video\")) type = \"video\";\r\n \r\n-    sendMessage(url, type);\r\n+    if (type) {\r\n+      sendMessage(url, type);\r\n+    } else {\r\n+      // Optionally handle unsupported file types here\r\n+      console.warn(\"Unsupported file type\");\r\n+    }\r\n   };\r\n \r\n   const handleDelete = (msgId: string) => {\r\n     remove(ref(database, `rooms/${roomId}/messages/${msgId}`))\r\n"
                },
                {
                    "date": 1759345438143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n   useEffect(() => {\r\n     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n   }, [messages, partnerTyping]);\r\n \r\n-  // Firebase listener for messages\r\n+  // Firebase listener\r\n   useEffect(() => {\r\n     if (!roomId) return;\r\n     const messagesRef = ref(database, `rooms/${roomId}/messages`);\r\n     return onValue(messagesRef, (snapshot) => {\r\n@@ -88,9 +88,9 @@\n \r\n     const onMessageUpdate = (msg: any) => {\r\n       setMessages((prev) => {\r\n         const exists = prev.find((m) => m.id === msg.id);\r\n-        if (exists) return prev.map((m) => (m.id === msg.id ? msg : m));\r\n+        if (exists) return prev.map((m) => (m.id === msg.id ? { ...m, ...msg } : m));\r\n         return [...prev, msg];\r\n       });\r\n       if (msg.sender !== userId) playSound(\"receive\");\r\n     };\r\n@@ -128,9 +128,9 @@\n       socket.emit(\"typing\", { roomId, sender: socket.id });\r\n     }, 300)\r\n   ).current;\r\n \r\n-  // Send message to Firebase + Socket\r\n+  // Send message\r\n   const sendMessage = (content: string, type: \"text\" | \"image\" | \"audio\" | \"video\" = \"text\") => {\r\n     if (!content.trim() || !roomId) return;\r\n \r\n     const msgId = uuidv4();\r\n@@ -143,13 +143,9 @@\n       status: \"sent\",\r\n       reactions: {},\r\n     };\r\n \r\n-    // Push to Firebase\r\n-    set(ref(database, `rooms/${roomId}/messages/${msgId}`), msg)\r\n-      .catch(err => console.error(err));\r\n-\r\n-    // Emit via socket\r\n+    set(ref(database, `rooms/${roomId}/messages/${msgId}`), msg).catch(console.error);\r\n     socket.emit(\"message-update\", msg);\r\n \r\n     setMessages((prev) => [...prev, msg]);\r\n     playSound(\"sent\");\r\n@@ -164,36 +160,29 @@\n     if (!file) return;\r\n     const url = URL.createObjectURL(file);\r\n     const mime = file.type;\r\n \r\n-    let type: \"image\" | \"audio\" | \"video\" | undefined = undefined;\r\n+    let type: \"image\" | \"audio\" | \"video\" | undefined;\r\n     if (mime.startsWith(\"image\")) type = \"image\";\r\n     else if (mime.startsWith(\"audio\")) type = \"audio\";\r\n     else if (mime.startsWith(\"video\")) type = \"video\";\r\n \r\n-    if (type) {\r\n-      sendMessage(url, type);\r\n-    } else {\r\n-      // Optionally handle unsupported file types here\r\n-      console.warn(\"Unsupported file type\");\r\n-    }\r\n+    if (type) sendMessage(url, type);\r\n+    else console.warn(\"Unsupported file type\");\r\n   };\r\n \r\n   const handleDelete = (msgId: string) => {\r\n-    remove(ref(database, `rooms/${roomId}/messages/${msgId}`))\r\n-      .catch(err => console.error(err));\r\n+    remove(ref(database, `rooms/${roomId}/messages/${msgId}`)).catch(console.error);\r\n     socket.emit(\"message-delete\", { messageId: msgId });\r\n   };\r\n \r\n   const handleEdit = (msgId: string, newContent: string) => {\r\n-    update(ref(database, `rooms/${roomId}/messages/${msgId}`), { content: newContent })\r\n-      .catch(err => console.error(err));\r\n+    update(ref(database, `rooms/${roomId}/messages/${msgId}`), { content: newContent }).catch(console.error);\r\n     socket.emit(\"message-update\", { id: msgId, content: newContent, sender: userId });\r\n   };\r\n \r\n   const handleReact = (msgId: string, emoji: string) => {\r\n-    const msgRef = ref(database, `rooms/${roomId}/messages/${msgId}/reactions/${userId}`);\r\n-    set(msgRef, emoji).catch(err => console.error(err));\r\n+    set(ref(database, `rooms/${roomId}/messages/${msgId}/reactions/${userId}`), emoji).catch(console.error);\r\n     socket.emit(\"message-react\", { messageId: msgId, reaction: emoji, user: userId });\r\n   };\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1759757439651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,27 @@\n+// components/chat/ChatBox.tsx\r\n \"use client\";\r\n \r\n-import React, { useState, useEffect, useRef } from \"react\";\r\n+import React, { useEffect, useRef, useState } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n-import { ref, set, onValue, remove, update } from \"firebase/database\";\r\n+import { ref as dbRef, set, onValue, remove, update } from \"firebase/database\";\r\n import { database } from \"@/lib/firebaseConfig\";\r\n import debounce from \"lodash/debounce\";\r\n \r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n+import socketClient from \"@/lib/socketClient\";\r\n \r\n interface ChatBoxProps {\r\n-  socket: any;\r\n+  socket?: any; // optional: you can also import socketClient.getSocket()\r\n   roomId: string;\r\n   userId: string;\r\n   soundOn?: boolean;\r\n   partnerName?: string;\r\n   partnerAge?: string | number;\r\n   partnerCountry?: string;\r\n }\r\n \r\n-const topEmojis = [\r\n-  \"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\",\r\n-  \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"\r\n-];\r\n-\r\n export default function ChatBox({\r\n   socket,\r\n   roomId,\r\n   userId,\r\n@@ -36,225 +33,219 @@\n   const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n   const [partnerTyping, setPartnerTyping] = useState(false);\r\n-  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n+  const messagesEndRef = useRef<HTMLDivElement | null>(null);\r\n \r\n-  const sentSoundRef = useRef<HTMLAudioElement>(null);\r\n-  const receiveSoundRef = useRef<HTMLAudioElement>(null);\r\n+  const sentSoundRef = useRef<HTMLAudioElement | null>(null);\r\n+  const receiveSoundRef = useRef<HTMLAudioElement | null>(null);\r\n \r\n-  // Play sounds\r\n-  const playSound = (type: \"sent\" | \"receive\") => {\r\n+  const sock = socket ?? socketClient.getSocket();\r\n+\r\n+  // sounds helper\r\n+  const playSound = async (type: \"sent\" | \"receive\") => {\r\n     if (!soundOn) return;\r\n-    const audioRef = type === \"sent\" ? sentSoundRef : receiveSoundRef;\r\n-    const play = async () => {\r\n-      try {\r\n-        const audio = audioRef.current;\r\n-        if (!audio) return;\r\n-        audio.volume = 0.8;\r\n-        await audio.play();\r\n-      } catch {\r\n-        const ctx = new AudioContext();\r\n-        await ctx.resume();\r\n-      }\r\n-    };\r\n-    play();\r\n+    const refEl = type === \"sent\" ? sentSoundRef.current : receiveSoundRef.current;\r\n+    try {\r\n+      if (!refEl) return;\r\n+      refEl.volume = 0.8;\r\n+      await refEl.play();\r\n+    } catch {\r\n+      const ctx = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n+      await ctx.resume();\r\n+    }\r\n   };\r\n \r\n-  // Scroll to bottom\r\n+  // scroll to bottom on messages\r\n   useEffect(() => {\r\n     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n   }, [messages, partnerTyping]);\r\n \r\n-  // Firebase listener\r\n+  // listen firebase messages (persistent source of truth)\r\n   useEffect(() => {\r\n     if (!roomId) return;\r\n-    const messagesRef = ref(database, `rooms/${roomId}/messages`);\r\n-    return onValue(messagesRef, (snapshot) => {\r\n-      const data = snapshot.val() || {};\r\n-      setMessages(Object.values(data));\r\n+    const refPath = dbRef(database, `rooms/${roomId}/messages`);\r\n+    const off = onValue(refPath, (snap) => {\r\n+      const val = snap.val() || {};\r\n+      // messages stored keyed by id; convert to array and sort by timestamp\r\n+      const arr = Object.values(val).sort((a: any, b: any) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\r\n+      setMessages(arr);\r\n     });\r\n+    return () => off();\r\n   }, [roomId]);\r\n \r\n-  // Socket events\r\n+  // socket real-time events (instant)\r\n   useEffect(() => {\r\n-    if (!socket) return;\r\n+    if (!sock) return;\r\n \r\n     const onTyping = ({ sender }: any) => {\r\n-      if (sender !== socket.id) {\r\n+      if (sender !== sock.id) {\r\n         setPartnerTyping(true);\r\n         setTimeout(() => setPartnerTyping(false), 3000);\r\n       }\r\n     };\r\n \r\n-    const onMessageUpdate = (msg: any) => {\r\n+    const onReceive = ({ message }: any) => {\r\n+      // ensure firebase persisted version will also arrive; still update UI instantly\r\n       setMessages((prev) => {\r\n-        const exists = prev.find((m) => m.id === msg.id);\r\n-        if (exists) return prev.map((m) => (m.id === msg.id ? { ...m, ...msg } : m));\r\n-        return [...prev, msg];\r\n+        if (prev.find((m) => m.id === message.id)) return prev;\r\n+        return [...prev, message];\r\n       });\r\n-      if (msg.sender !== userId) playSound(\"receive\");\r\n+      if (message.sender !== userId) playSound(\"receive\");\r\n     };\r\n \r\n-    const onMessageDelete = ({ messageId }: any) => {\r\n-      setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n-    };\r\n+    const onDelete = ({ messageId }: any) => setMessages((p) => p.filter((m) => m.id !== messageId));\r\n+    const onEdit = ({ messageId, content }: any) =>\r\n+      setMessages((p) => p.map((m) => (m.id === messageId ? { ...m, content } : m)));\r\n+    const onReact = ({ messageId, reaction, user }: any) =>\r\n+      setMessages((p) => p.map((m) => (m.id === messageId ? { ...m, reactions: { ...m.reactions, [user]: reaction } } : m)));\r\n \r\n-    const onMessageReact = ({ messageId, reaction, user }: any) => {\r\n-      setMessages((prev) =>\r\n-        prev.map((m) =>\r\n-          m.id === messageId\r\n-            ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n-            : m\r\n-        )\r\n-      );\r\n-    };\r\n+    sock.on(\"typing\", onTyping);\r\n+    sock.on(\"receive-message\", onReceive);\r\n+    sock.on(\"message-deleted\", onDelete);\r\n+    sock.on(\"message-edited\", onEdit);\r\n+    sock.on(\"message-react\", onReact);\r\n \r\n-    socket.on(\"typing\", onTyping);\r\n-    socket.on(\"message-update\", onMessageUpdate);\r\n-    socket.on(\"message-delete\", onMessageDelete);\r\n-    socket.on(\"message-react\", onMessageReact);\r\n-\r\n     return () => {\r\n-      socket.off(\"typing\", onTyping);\r\n-      socket.off(\"message-update\", onMessageUpdate);\r\n-      socket.off(\"message-delete\", onMessageDelete);\r\n-      socket.off(\"message-react\", onMessageReact);\r\n+      sock.off(\"typing\", onTyping);\r\n+      sock.off(\"receive-message\", onReceive);\r\n+      sock.off(\"message-deleted\", onDelete);\r\n+      sock.off(\"message-edited\", onEdit);\r\n+      sock.off(\"message-react\", onReact);\r\n     };\r\n-  }, [socket, userId]);\r\n+  }, [sock, userId]);\r\n \r\n-  // Debounced typing\r\n+  // typing debounce\r\n   const debouncedTyping = useRef(\r\n     debounce(() => {\r\n-      socket.emit(\"typing\", { roomId, sender: socket.id });\r\n+      sock?.emit(\"typing\", { roomId, sender: sock?.id });\r\n     }, 300)\r\n   ).current;\r\n \r\n-  // Send message\r\n-  const sendMessage = (content: string, type: \"text\" | \"image\" | \"audio\" | \"video\" = \"text\") => {\r\n-    if (!content.trim() || !roomId) return;\r\n-\r\n+  // send message: persist to firebase and broadcast via socket\r\n+  const sendMessage = async (content: string, type: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\" = \"text\") => {\r\n+    if (!content?.trim() || !roomId) return;\r\n     const msgId = uuidv4();\r\n     const msg = {\r\n       id: msgId,\r\n       sender: userId,\r\n       content,\r\n+      type,\r\n       timestamp: new Date().toISOString(),\r\n-      type,\r\n       status: \"sent\",\r\n       reactions: {},\r\n     };\r\n \r\n-    set(ref(database, `rooms/${roomId}/messages/${msgId}`), msg).catch(console.error);\r\n-    socket.emit(\"message-update\", msg);\r\n+    // Persist to Firebase\r\n+    await set(dbRef(database, `rooms/${roomId}/messages/${msgId}`), msg).catch((e) => {\r\n+      console.error(\"Firebase set error:\", e);\r\n+    });\r\n \r\n-    setMessages((prev) => [...prev, msg]);\r\n-    playSound(\"sent\");\r\n+    // Emit via socket for instant update\r\n+    sock?.emit(\"send-message\", { roomId, message: msg });\r\n+\r\n     setInput(\"\");\r\n     setShowEmojiPicker(false);\r\n+    playSound(\"sent\");\r\n   };\r\n \r\n   const sendText = () => sendMessage(input, \"text\");\r\n \r\n+  // simple file -> blob preview (for real apps, upload to storage and use returned URL)\r\n   const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n     const file = e.target.files?.[0];\r\n     if (!file) return;\r\n     const url = URL.createObjectURL(file);\r\n     const mime = file.type;\r\n-\r\n-    let type: \"image\" | \"audio\" | \"video\" | undefined;\r\n-    if (mime.startsWith(\"image\")) type = \"image\";\r\n-    else if (mime.startsWith(\"audio\")) type = \"audio\";\r\n-    else if (mime.startsWith(\"video\")) type = \"video\";\r\n-\r\n-    if (type) sendMessage(url, type);\r\n-    else console.warn(\"Unsupported file type\");\r\n+    let t: any = \"file\";\r\n+    if (mime.startsWith(\"image\")) t = \"image\";\r\n+    else if (mime.startsWith(\"audio\")) t = \"audio\";\r\n+    else if (mime.startsWith(\"video\")) t = \"video\";\r\n+    sendMessage(url, t);\r\n   };\r\n \r\n-  const handleDelete = (msgId: string) => {\r\n-    remove(ref(database, `rooms/${roomId}/messages/${msgId}`)).catch(console.error);\r\n-    socket.emit(\"message-delete\", { messageId: msgId });\r\n+  // edit\r\n+  const handleEdit = async (messageId: string, newContent: string) => {\r\n+    await update(dbRef(database, `rooms/${roomId}/messages/${messageId}`), { content: newContent }).catch(console.error);\r\n+    sock?.emit(\"edit-message\", { roomId, messageId, content: newContent });\r\n   };\r\n \r\n-  const handleEdit = (msgId: string, newContent: string) => {\r\n-    update(ref(database, `rooms/${roomId}/messages/${msgId}`), { content: newContent }).catch(console.error);\r\n-    socket.emit(\"message-update\", { id: msgId, content: newContent, sender: userId });\r\n+  // delete\r\n+  const handleDelete = async (messageId: string) => {\r\n+    await remove(dbRef(database, `rooms/${roomId}/messages/${messageId}`)).catch(console.error);\r\n+    sock?.emit(\"delete-message\", { roomId, messageId });\r\n   };\r\n \r\n-  const handleReact = (msgId: string, emoji: string) => {\r\n-    set(ref(database, `rooms/${roomId}/messages/${msgId}/reactions/${userId}`), emoji).catch(console.error);\r\n-    socket.emit(\"message-react\", { messageId: msgId, reaction: emoji, user: userId });\r\n+  // react\r\n+  const handleReact = async (messageId: string, emoji: string) => {\r\n+    await set(dbRef(database, `rooms/${roomId}/messages/${messageId}/reactions/${userId}`), emoji).catch(console.error);\r\n+    sock?.emit(\"react-message\", { roomId, messageId, reaction: emoji, user: userId });\r\n   };\r\n \r\n   return (\r\n     <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 relative\">\r\n       <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n       <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n \r\n-      {/* Partner Info */}\r\n+      {/* header */}\r\n       <div className=\"px-4 py-2 border-b text-sm bg-white dark:bg-neutral-900 dark:border-neutral-700\">\r\n         <span className=\"font-medium text-blue-600 dark:text-blue-400\">{partnerName}</span>\r\n         {partnerAge && <span className=\"ml-1\">({partnerAge})</span>}\r\n-        {partnerCountry && (\r\n-          <span className=\"ml-2 text-neutral-500 dark:text-neutral-400\">from {partnerCountry}</span>\r\n-        )}\r\n+        {partnerCountry && <span className=\"ml-2 text-neutral-500 dark:text-neutral-400\">from {partnerCountry}</span>}\r\n       </div>\r\n \r\n-      {/* Messages */}\r\n-      <div className=\"flex-1 overflow-y-auto px-3 py-4 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n-        {messages.map((msg) => (\r\n+      {/* messages */}\r\n+      <div className=\"flex-1 overflow-y-auto px-3 py-4 sm:px-4 space-y-3\">\r\n+        {messages.map((m) => (\r\n           <Message\r\n-            key={msg.id}\r\n-            {...msg}\r\n-            sender={msg.sender === userId ? \"me\" : \"partner\"}\r\n-            name={msg.sender === userId ? undefined : partnerName}\r\n-            age={msg.sender === userId ? undefined : partnerAge}\r\n-            country={msg.sender === userId ? undefined : partnerCountry}\r\n-            status={msg.status}\r\n-            onDelete={() => handleDelete(msg.id)}\r\n-            onEdit={(newContent: string) => handleEdit(msg.id, newContent)}\r\n-            onReact={(emoji: string) => handleReact(msg.id, emoji)}\r\n+            key={m.id}\r\n+            id={m.id}\r\n+            sender={m.sender === userId ? \"me\" : \"partner\"}\r\n+            content={m.content}\r\n+            timestamp={m.timestamp}\r\n+            status={m.status}\r\n+            type={m.type}\r\n+            reactions={m.reactions}\r\n+            name={m.sender === userId ? undefined : partnerName}\r\n+            age={m.sender === userId ? undefined : partnerAge}\r\n+            country={m.sender === userId ? undefined : partnerCountry}\r\n+            onDelete={() => handleDelete(m.id)}\r\n+            onEdit={(newContent) => handleEdit(m.id, newContent)}\r\n+            onReact={(emoji) => handleReact(m.id, emoji)}\r\n           />\r\n         ))}\r\n         {partnerTyping && <TypingIndicator name={partnerName} />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n-      {/* Emoji Picker */}\r\n+      {/* emoji picker */}\r\n       {showEmojiPicker && (\r\n-        <div className=\"absolute bottom-20 left-2 sm:left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n-          {topEmojis.map((emoji) => (\r\n-            <button\r\n-              key={emoji}\r\n-              onClick={() => setInput(prev => prev + emoji)}\r\n-              className=\"text-2xl hover:scale-125 transition-transform\"\r\n-            >\r\n-              {emoji}\r\n-            </button>\r\n+        <div className=\"absolute bottom-20 left-2 sm:left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2\">\r\n+          {[\"😀\",\"😂\",\"😍\",\"👍\",\"🔥\",\"❤️\",\"😭\",\"🎉\",\"🙏\",\"👏\",\"😅\",\"😘\"].map((e) => (\r\n+            <button key={e} onClick={() => setInput((p) => p + e)} className=\"text-2xl\">{e}</button>\r\n           ))}\r\n         </div>\r\n       )}\r\n \r\n-      {/* Input Panel */}\r\n-      <div className=\"border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 bg-white dark:bg-neutral-900\">\r\n-        <button onClick={() => setShowEmojiPicker(prev => !prev)} className=\"text-2xl hover:scale-110 transition-transform\">😊</button>\r\n+      {/* input */}\r\n+      <div className=\"border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2\">\r\n+        <button onClick={() => setShowEmojiPicker((s) => !s)} className=\"text-2xl\">😊</button>\r\n         <input\r\n           type=\"text\"\r\n           placeholder=\"Type a message...\"\r\n           value={input}\r\n-          onChange={e => { setInput(e.target.value); debouncedTyping(); }}\r\n-          onKeyDown={e => e.key === \"Enter\" && sendText()}\r\n-          className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 text-sm px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n+          onChange={(e) => {\r\n+            setInput(e.target.value);\r\n+            debouncedTyping();\r\n+          }}\r\n+          onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n+          className=\"flex-1 px-3 py-2 rounded-lg border\"\r\n         />\r\n         <label className=\"cursor-pointer text-xl\" title=\"Send file\">\r\n           📎\r\n           <input type=\"file\" accept=\"image/*,audio/*,video/*\" hidden onChange={handleFile} />\r\n         </label>\r\n-        <button\r\n-          onClick={sendText}\r\n-          disabled={!input.trim()}\r\n-          className=\"bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 text-sm rounded-lg disabled:opacity-50 transition\"\r\n-        >\r\n+        <button onClick={sendText} disabled={!input.trim()} className=\"bg-blue-600 text-white px-3 py-2 rounded-lg\">\r\n           Send\r\n         </button>\r\n       </div>\r\n     </div>\r\n"
                },
                {
                    "date": 1759757514511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,30 @@\n-// components/chat/ChatBox.tsx\r\n \"use client\";\r\n \r\n-import React, { useEffect, useRef, useState } from \"react\";\r\n+import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n-import { ref as dbRef, set, onValue, remove, update } from \"firebase/database\";\r\n+import { ref, set, onValue, remove, update } from \"firebase/database\";\r\n import { database } from \"@/lib/firebaseConfig\";\r\n import debounce from \"lodash/debounce\";\r\n \r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n-import socketClient from \"@/lib/socketClient\";\r\n \r\n interface ChatBoxProps {\r\n-  socket?: any; // optional: you can also import socketClient.getSocket()\r\n+  socket: any;\r\n   roomId: string;\r\n   userId: string;\r\n   soundOn?: boolean;\r\n   partnerName?: string;\r\n   partnerAge?: string | number;\r\n   partnerCountry?: string;\r\n }\r\n \r\n+const topEmojis = [\r\n+  \"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\",\r\n+  \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"\r\n+];\r\n+\r\n export default function ChatBox({\r\n   socket,\r\n   roomId,\r\n   userId,\r\n@@ -33,219 +36,225 @@\n   const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n   const [partnerTyping, setPartnerTyping] = useState(false);\r\n-  const messagesEndRef = useRef<HTMLDivElement | null>(null);\r\n+  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n \r\n-  const sentSoundRef = useRef<HTMLAudioElement | null>(null);\r\n-  const receiveSoundRef = useRef<HTMLAudioElement | null>(null);\r\n+  const sentSoundRef = useRef<HTMLAudioElement>(null);\r\n+  const receiveSoundRef = useRef<HTMLAudioElement>(null);\r\n \r\n-  const sock = socket ?? socketClient.getSocket();\r\n-\r\n-  // sounds helper\r\n-  const playSound = async (type: \"sent\" | \"receive\") => {\r\n+  // Play sounds\r\n+  const playSound = (type: \"sent\" | \"receive\") => {\r\n     if (!soundOn) return;\r\n-    const refEl = type === \"sent\" ? sentSoundRef.current : receiveSoundRef.current;\r\n-    try {\r\n-      if (!refEl) return;\r\n-      refEl.volume = 0.8;\r\n-      await refEl.play();\r\n-    } catch {\r\n-      const ctx = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n-      await ctx.resume();\r\n-    }\r\n+    const audioRef = type === \"sent\" ? sentSoundRef : receiveSoundRef;\r\n+    const play = async () => {\r\n+      try {\r\n+        const audio = audioRef.current;\r\n+        if (!audio) return;\r\n+        audio.volume = 0.8;\r\n+        await audio.play();\r\n+      } catch {\r\n+        const ctx = new AudioContext();\r\n+        await ctx.resume();\r\n+      }\r\n+    };\r\n+    play();\r\n   };\r\n \r\n-  // scroll to bottom on messages\r\n+  // Scroll to bottom\r\n   useEffect(() => {\r\n     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n   }, [messages, partnerTyping]);\r\n \r\n-  // listen firebase messages (persistent source of truth)\r\n+  // Firebase listener\r\n   useEffect(() => {\r\n     if (!roomId) return;\r\n-    const refPath = dbRef(database, `rooms/${roomId}/messages`);\r\n-    const off = onValue(refPath, (snap) => {\r\n-      const val = snap.val() || {};\r\n-      // messages stored keyed by id; convert to array and sort by timestamp\r\n-      const arr = Object.values(val).sort((a: any, b: any) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\r\n-      setMessages(arr);\r\n+    const messagesRef = ref(database, `rooms/${roomId}/messages`);\r\n+    return onValue(messagesRef, (snapshot) => {\r\n+      const data = snapshot.val() || {};\r\n+      setMessages(Object.values(data));\r\n     });\r\n-    return () => off();\r\n   }, [roomId]);\r\n \r\n-  // socket real-time events (instant)\r\n+  // Socket events\r\n   useEffect(() => {\r\n-    if (!sock) return;\r\n+    if (!socket) return;\r\n \r\n     const onTyping = ({ sender }: any) => {\r\n-      if (sender !== sock.id) {\r\n+      if (sender !== socket.id) {\r\n         setPartnerTyping(true);\r\n         setTimeout(() => setPartnerTyping(false), 3000);\r\n       }\r\n     };\r\n \r\n-    const onReceive = ({ message }: any) => {\r\n-      // ensure firebase persisted version will also arrive; still update UI instantly\r\n+    const onMessageUpdate = (msg: any) => {\r\n       setMessages((prev) => {\r\n-        if (prev.find((m) => m.id === message.id)) return prev;\r\n-        return [...prev, message];\r\n+        const exists = prev.find((m) => m.id === msg.id);\r\n+        if (exists) return prev.map((m) => (m.id === msg.id ? { ...m, ...msg } : m));\r\n+        return [...prev, msg];\r\n       });\r\n-      if (message.sender !== userId) playSound(\"receive\");\r\n+      if (msg.sender !== userId) playSound(\"receive\");\r\n     };\r\n \r\n-    const onDelete = ({ messageId }: any) => setMessages((p) => p.filter((m) => m.id !== messageId));\r\n-    const onEdit = ({ messageId, content }: any) =>\r\n-      setMessages((p) => p.map((m) => (m.id === messageId ? { ...m, content } : m)));\r\n-    const onReact = ({ messageId, reaction, user }: any) =>\r\n-      setMessages((p) => p.map((m) => (m.id === messageId ? { ...m, reactions: { ...m.reactions, [user]: reaction } } : m)));\r\n+    const onMessageDelete = ({ messageId }: any) => {\r\n+      setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n+    };\r\n \r\n-    sock.on(\"typing\", onTyping);\r\n-    sock.on(\"receive-message\", onReceive);\r\n-    sock.on(\"message-deleted\", onDelete);\r\n-    sock.on(\"message-edited\", onEdit);\r\n-    sock.on(\"message-react\", onReact);\r\n+    const onMessageReact = ({ messageId, reaction, user }: any) => {\r\n+      setMessages((prev) =>\r\n+        prev.map((m) =>\r\n+          m.id === messageId\r\n+            ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n+            : m\r\n+        )\r\n+      );\r\n+    };\r\n \r\n+    socket.on(\"typing\", onTyping);\r\n+    socket.on(\"message-update\", onMessageUpdate);\r\n+    socket.on(\"message-delete\", onMessageDelete);\r\n+    socket.on(\"message-react\", onMessageReact);\r\n+\r\n     return () => {\r\n-      sock.off(\"typing\", onTyping);\r\n-      sock.off(\"receive-message\", onReceive);\r\n-      sock.off(\"message-deleted\", onDelete);\r\n-      sock.off(\"message-edited\", onEdit);\r\n-      sock.off(\"message-react\", onReact);\r\n+      socket.off(\"typing\", onTyping);\r\n+      socket.off(\"message-update\", onMessageUpdate);\r\n+      socket.off(\"message-delete\", onMessageDelete);\r\n+      socket.off(\"message-react\", onMessageReact);\r\n     };\r\n-  }, [sock, userId]);\r\n+  }, [socket, userId]);\r\n \r\n-  // typing debounce\r\n+  // Debounced typing\r\n   const debouncedTyping = useRef(\r\n     debounce(() => {\r\n-      sock?.emit(\"typing\", { roomId, sender: sock?.id });\r\n+      socket.emit(\"typing\", { roomId, sender: socket.id });\r\n     }, 300)\r\n   ).current;\r\n \r\n-  // send message: persist to firebase and broadcast via socket\r\n-  const sendMessage = async (content: string, type: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\" = \"text\") => {\r\n-    if (!content?.trim() || !roomId) return;\r\n+  // Send message\r\n+  const sendMessage = (content: string, type: \"text\" | \"image\" | \"audio\" | \"video\" = \"text\") => {\r\n+    if (!content.trim() || !roomId) return;\r\n+\r\n     const msgId = uuidv4();\r\n     const msg = {\r\n       id: msgId,\r\n       sender: userId,\r\n       content,\r\n+      timestamp: new Date().toISOString(),\r\n       type,\r\n-      timestamp: new Date().toISOString(),\r\n       status: \"sent\",\r\n       reactions: {},\r\n     };\r\n \r\n-    // Persist to Firebase\r\n-    await set(dbRef(database, `rooms/${roomId}/messages/${msgId}`), msg).catch((e) => {\r\n-      console.error(\"Firebase set error:\", e);\r\n-    });\r\n+    set(ref(database, `rooms/${roomId}/messages/${msgId}`), msg).catch(console.error);\r\n+    socket.emit(\"message-update\", msg);\r\n \r\n-    // Emit via socket for instant update\r\n-    sock?.emit(\"send-message\", { roomId, message: msg });\r\n-\r\n+    setMessages((prev) => [...prev, msg]);\r\n+    playSound(\"sent\");\r\n     setInput(\"\");\r\n     setShowEmojiPicker(false);\r\n-    playSound(\"sent\");\r\n   };\r\n \r\n   const sendText = () => sendMessage(input, \"text\");\r\n \r\n-  // simple file -> blob preview (for real apps, upload to storage and use returned URL)\r\n   const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n     const file = e.target.files?.[0];\r\n     if (!file) return;\r\n     const url = URL.createObjectURL(file);\r\n     const mime = file.type;\r\n-    let t: any = \"file\";\r\n-    if (mime.startsWith(\"image\")) t = \"image\";\r\n-    else if (mime.startsWith(\"audio\")) t = \"audio\";\r\n-    else if (mime.startsWith(\"video\")) t = \"video\";\r\n-    sendMessage(url, t);\r\n+\r\n+    let type: \"image\" | \"audio\" | \"video\" | undefined;\r\n+    if (mime.startsWith(\"image\")) type = \"image\";\r\n+    else if (mime.startsWith(\"audio\")) type = \"audio\";\r\n+    else if (mime.startsWith(\"video\")) type = \"video\";\r\n+\r\n+    if (type) sendMessage(url, type);\r\n+    else console.warn(\"Unsupported file type\");\r\n   };\r\n \r\n-  // edit\r\n-  const handleEdit = async (messageId: string, newContent: string) => {\r\n-    await update(dbRef(database, `rooms/${roomId}/messages/${messageId}`), { content: newContent }).catch(console.error);\r\n-    sock?.emit(\"edit-message\", { roomId, messageId, content: newContent });\r\n+  const handleDelete = (msgId: string) => {\r\n+    remove(ref(database, `rooms/${roomId}/messages/${msgId}`)).catch(console.error);\r\n+    socket.emit(\"message-delete\", { messageId: msgId });\r\n   };\r\n \r\n-  // delete\r\n-  const handleDelete = async (messageId: string) => {\r\n-    await remove(dbRef(database, `rooms/${roomId}/messages/${messageId}`)).catch(console.error);\r\n-    sock?.emit(\"delete-message\", { roomId, messageId });\r\n+  const handleEdit = (msgId: string, newContent: string) => {\r\n+    update(ref(database, `rooms/${roomId}/messages/${msgId}`), { content: newContent }).catch(console.error);\r\n+    socket.emit(\"message-update\", { id: msgId, content: newContent, sender: userId });\r\n   };\r\n \r\n-  // react\r\n-  const handleReact = async (messageId: string, emoji: string) => {\r\n-    await set(dbRef(database, `rooms/${roomId}/messages/${messageId}/reactions/${userId}`), emoji).catch(console.error);\r\n-    sock?.emit(\"react-message\", { roomId, messageId, reaction: emoji, user: userId });\r\n+  const handleReact = (msgId: string, emoji: string) => {\r\n+    set(ref(database, `rooms/${roomId}/messages/${msgId}/reactions/${userId}`), emoji).catch(console.error);\r\n+    socket.emit(\"message-react\", { messageId: msgId, reaction: emoji, user: userId });\r\n   };\r\n \r\n   return (\r\n     <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 relative\">\r\n       <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n       <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n \r\n-      {/* header */}\r\n+      {/* Partner Info */}\r\n       <div className=\"px-4 py-2 border-b text-sm bg-white dark:bg-neutral-900 dark:border-neutral-700\">\r\n         <span className=\"font-medium text-blue-600 dark:text-blue-400\">{partnerName}</span>\r\n         {partnerAge && <span className=\"ml-1\">({partnerAge})</span>}\r\n-        {partnerCountry && <span className=\"ml-2 text-neutral-500 dark:text-neutral-400\">from {partnerCountry}</span>}\r\n+        {partnerCountry && (\r\n+          <span className=\"ml-2 text-neutral-500 dark:text-neutral-400\">from {partnerCountry}</span>\r\n+        )}\r\n       </div>\r\n \r\n-      {/* messages */}\r\n-      <div className=\"flex-1 overflow-y-auto px-3 py-4 sm:px-4 space-y-3\">\r\n-        {messages.map((m) => (\r\n+      {/* Messages */}\r\n+      <div className=\"flex-1 overflow-y-auto px-3 py-4 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n+        {messages.map((msg) => (\r\n           <Message\r\n-            key={m.id}\r\n-            id={m.id}\r\n-            sender={m.sender === userId ? \"me\" : \"partner\"}\r\n-            content={m.content}\r\n-            timestamp={m.timestamp}\r\n-            status={m.status}\r\n-            type={m.type}\r\n-            reactions={m.reactions}\r\n-            name={m.sender === userId ? undefined : partnerName}\r\n-            age={m.sender === userId ? undefined : partnerAge}\r\n-            country={m.sender === userId ? undefined : partnerCountry}\r\n-            onDelete={() => handleDelete(m.id)}\r\n-            onEdit={(newContent) => handleEdit(m.id, newContent)}\r\n-            onReact={(emoji) => handleReact(m.id, emoji)}\r\n+            key={msg.id}\r\n+            {...msg}\r\n+            sender={msg.sender === userId ? \"me\" : \"partner\"}\r\n+            name={msg.sender === userId ? undefined : partnerName}\r\n+            age={msg.sender === userId ? undefined : partnerAge}\r\n+            country={msg.sender === userId ? undefined : partnerCountry}\r\n+            status={msg.status}\r\n+            onDelete={() => handleDelete(msg.id)}\r\n+            onEdit={(newContent: string) => handleEdit(msg.id, newContent)}\r\n+            onReact={(emoji: string) => handleReact(msg.id, emoji)}\r\n           />\r\n         ))}\r\n         {partnerTyping && <TypingIndicator name={partnerName} />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n-      {/* emoji picker */}\r\n+      {/* Emoji Picker */}\r\n       {showEmojiPicker && (\r\n-        <div className=\"absolute bottom-20 left-2 sm:left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2\">\r\n-          {[\"😀\",\"😂\",\"😍\",\"👍\",\"🔥\",\"❤️\",\"😭\",\"🎉\",\"🙏\",\"👏\",\"😅\",\"😘\"].map((e) => (\r\n-            <button key={e} onClick={() => setInput((p) => p + e)} className=\"text-2xl\">{e}</button>\r\n+        <div className=\"absolute bottom-20 left-2 sm:left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n+          {topEmojis.map((emoji) => (\r\n+            <button\r\n+              key={emoji}\r\n+              onClick={() => setInput(prev => prev + emoji)}\r\n+              className=\"text-2xl hover:scale-125 transition-transform\"\r\n+            >\r\n+              {emoji}\r\n+            </button>\r\n           ))}\r\n         </div>\r\n       )}\r\n \r\n-      {/* input */}\r\n-      <div className=\"border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2\">\r\n-        <button onClick={() => setShowEmojiPicker((s) => !s)} className=\"text-2xl\">😊</button>\r\n+      {/* Input Panel */}\r\n+      <div className=\"border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 bg-white dark:bg-neutral-900\">\r\n+        <button onClick={() => setShowEmojiPicker(prev => !prev)} className=\"text-2xl hover:scale-110 transition-transform\">😊</button>\r\n         <input\r\n           type=\"text\"\r\n           placeholder=\"Type a message...\"\r\n           value={input}\r\n-          onChange={(e) => {\r\n-            setInput(e.target.value);\r\n-            debouncedTyping();\r\n-          }}\r\n-          onKeyDown={(e) => e.key === \"Enter\" && sendText()}\r\n-          className=\"flex-1 px-3 py-2 rounded-lg border\"\r\n+          onChange={e => { setInput(e.target.value); debouncedTyping(); }}\r\n+          onKeyDown={e => e.key === \"Enter\" && sendText()}\r\n+          className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 text-sm px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n         />\r\n         <label className=\"cursor-pointer text-xl\" title=\"Send file\">\r\n           📎\r\n           <input type=\"file\" accept=\"image/*,audio/*,video/*\" hidden onChange={handleFile} />\r\n         </label>\r\n-        <button onClick={sendText} disabled={!input.trim()} className=\"bg-blue-600 text-white px-3 py-2 rounded-lg\">\r\n+        <button\r\n+          onClick={sendText}\r\n+          disabled={!input.trim()}\r\n+          className=\"bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 text-sm rounded-lg disabled:opacity-50 transition\"\r\n+        >\r\n           Send\r\n         </button>\r\n       </div>\r\n     </div>\r\n"
                },
                {
                    "date": 1759757844607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,20 @@\n import debounce from \"lodash/debounce\";\r\n \r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n+import {\r\n+  sendTyping,\r\n+  onTyping,\r\n+  sendMessageStatus,\r\n+  onMessageStatusUpdate,\r\n+  deleteMessage,\r\n+  onMessageDeleted,\r\n+  editMessage,\r\n+  reactToMessage,\r\n+  onMessageReacted,\r\n+  sendFile,\r\n+} from \"@/features/anonymousChat/services/signalingService\";\r\n \r\n interface ChatBoxProps {\r\n   socket: any;\r\n   roomId: string;\r\n@@ -20,9 +32,9 @@\n }\r\n \r\n const topEmojis = [\r\n   \"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\",\r\n-  \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\"\r\n+  \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\",\r\n ];\r\n \r\n export default function ChatBox({\r\n   socket,\r\n@@ -41,32 +53,29 @@\n \r\n   const sentSoundRef = useRef<HTMLAudioElement>(null);\r\n   const receiveSoundRef = useRef<HTMLAudioElement>(null);\r\n \r\n-  // Play sounds\r\n-  const playSound = (type: \"sent\" | \"receive\") => {\r\n+  // ------------------ SOUNDS ------------------\r\n+  const playSound = async (type: \"sent\" | \"receive\") => {\r\n     if (!soundOn) return;\r\n-    const audioRef = type === \"sent\" ? sentSoundRef : receiveSoundRef;\r\n-    const play = async () => {\r\n-      try {\r\n-        const audio = audioRef.current;\r\n-        if (!audio) return;\r\n+    try {\r\n+      const audioRef = type === \"sent\" ? sentSoundRef : receiveSoundRef;\r\n+      const audio = audioRef.current;\r\n+      if (audio) {\r\n         audio.volume = 0.8;\r\n         await audio.play();\r\n-      } catch {\r\n-        const ctx = new AudioContext();\r\n-        await ctx.resume();\r\n       }\r\n-    };\r\n-    play();\r\n+    } catch (err) {\r\n+      console.warn(\"Audio playback issue:\", err);\r\n+    }\r\n   };\r\n \r\n-  // Scroll to bottom\r\n+  // ------------------ AUTO SCROLL ------------------\r\n   useEffect(() => {\r\n     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n   }, [messages, partnerTyping]);\r\n \r\n-  // Firebase listener\r\n+  // ------------------ FIREBASE LISTENER ------------------\r\n   useEffect(() => {\r\n     if (!roomId) return;\r\n     const messagesRef = ref(database, `rooms/${roomId}/messages`);\r\n     return onValue(messagesRef, (snapshot) => {\r\n@@ -74,64 +83,53 @@\n       setMessages(Object.values(data));\r\n     });\r\n   }, [roomId]);\r\n \r\n-  // Socket events\r\n+  // ------------------ SOCKET EVENTS ------------------\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n-    const onTyping = ({ sender }: any) => {\r\n+    // Typing\r\n+    onTyping(({ sender }: any) => {\r\n       if (sender !== socket.id) {\r\n         setPartnerTyping(true);\r\n         setTimeout(() => setPartnerTyping(false), 3000);\r\n       }\r\n-    };\r\n+    });\r\n \r\n-    const onMessageUpdate = (msg: any) => {\r\n-      setMessages((prev) => {\r\n-        const exists = prev.find((m) => m.id === msg.id);\r\n-        if (exists) return prev.map((m) => (m.id === msg.id ? { ...m, ...msg } : m));\r\n-        return [...prev, msg];\r\n-      });\r\n-      if (msg.sender !== userId) playSound(\"receive\");\r\n-    };\r\n+    // Message status updates\r\n+    onMessageStatusUpdate(({ messageId, status }: any) => {\r\n+      setMessages((prev) =>\r\n+        prev.map((m) => (m.id === messageId ? { ...m, status } : m))\r\n+      );\r\n+    });\r\n \r\n-    const onMessageDelete = ({ messageId }: any) => {\r\n+    // Message deleted\r\n+    onMessageDeleted(({ messageId }: any) => {\r\n       setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n-    };\r\n+    });\r\n \r\n-    const onMessageReact = ({ messageId, reaction, user }: any) => {\r\n+    // Message reacted\r\n+    onMessageReacted(({ messageId, reaction, user }: any) => {\r\n       setMessages((prev) =>\r\n         prev.map((m) =>\r\n           m.id === messageId\r\n             ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n             : m\r\n         )\r\n       );\r\n-    };\r\n+    });\r\n+  }, [socket]);\r\n \r\n-    socket.on(\"typing\", onTyping);\r\n-    socket.on(\"message-update\", onMessageUpdate);\r\n-    socket.on(\"message-delete\", onMessageDelete);\r\n-    socket.on(\"message-react\", onMessageReact);\r\n-\r\n-    return () => {\r\n-      socket.off(\"typing\", onTyping);\r\n-      socket.off(\"message-update\", onMessageUpdate);\r\n-      socket.off(\"message-delete\", onMessageDelete);\r\n-      socket.off(\"message-react\", onMessageReact);\r\n-    };\r\n-  }, [socket, userId]);\r\n-\r\n-  // Debounced typing\r\n+  // ------------------ DEBOUNCED TYPING ------------------\r\n   const debouncedTyping = useRef(\r\n     debounce(() => {\r\n-      socket.emit(\"typing\", { roomId, sender: socket.id });\r\n-    }, 300)\r\n+      if (roomId) sendTyping(roomId);\r\n+    }, 400)\r\n   ).current;\r\n \r\n-  // Send message\r\n-  const sendMessage = (content: string, type: \"text\" | \"image\" | \"audio\" | \"video\" = \"text\") => {\r\n+  // ------------------ SEND MESSAGE ------------------\r\n+  const sendMessage = (content: string, type: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\" = \"text\") => {\r\n     if (!content.trim() || !roomId) return;\r\n \r\n     const msgId = uuidv4();\r\n     const msg = {\r\n@@ -144,48 +142,38 @@\n       reactions: {},\r\n     };\r\n \r\n     set(ref(database, `rooms/${roomId}/messages/${msgId}`), msg).catch(console.error);\r\n-    socket.emit(\"message-update\", msg);\r\n-\r\n     setMessages((prev) => [...prev, msg]);\r\n     playSound(\"sent\");\r\n     setInput(\"\");\r\n     setShowEmojiPicker(false);\r\n   };\r\n \r\n-  const sendText = () => sendMessage(input, \"text\");\r\n-\r\n+  // ------------------ FILE UPLOAD ------------------\r\n   const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n     const file = e.target.files?.[0];\r\n     if (!file) return;\r\n-    const url = URL.createObjectURL(file);\r\n-    const mime = file.type;\r\n-\r\n-    let type: \"image\" | \"audio\" | \"video\" | undefined;\r\n-    if (mime.startsWith(\"image\")) type = \"image\";\r\n-    else if (mime.startsWith(\"audio\")) type = \"audio\";\r\n-    else if (mime.startsWith(\"video\")) type = \"video\";\r\n-\r\n-    if (type) sendMessage(url, type);\r\n-    else console.warn(\"Unsupported file type\");\r\n+    sendFile(roomId, file);\r\n   };\r\n \r\n+  // ------------------ DELETE / EDIT / REACT ------------------\r\n   const handleDelete = (msgId: string) => {\r\n     remove(ref(database, `rooms/${roomId}/messages/${msgId}`)).catch(console.error);\r\n-    socket.emit(\"message-delete\", { messageId: msgId });\r\n+    deleteMessage(roomId, msgId);\r\n   };\r\n \r\n   const handleEdit = (msgId: string, newContent: string) => {\r\n     update(ref(database, `rooms/${roomId}/messages/${msgId}`), { content: newContent }).catch(console.error);\r\n-    socket.emit(\"message-update\", { id: msgId, content: newContent, sender: userId });\r\n+    editMessage(roomId, msgId, newContent);\r\n   };\r\n \r\n   const handleReact = (msgId: string, emoji: string) => {\r\n     set(ref(database, `rooms/${roomId}/messages/${msgId}/reactions/${userId}`), emoji).catch(console.error);\r\n-    socket.emit(\"message-react\", { messageId: msgId, reaction: emoji, user: userId });\r\n+    reactToMessage(roomId, msgId, emoji);\r\n   };\r\n \r\n+  // ------------------ RENDER ------------------\r\n   return (\r\n     <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 relative\">\r\n       <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n       <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n@@ -208,9 +196,8 @@\n             sender={msg.sender === userId ? \"me\" : \"partner\"}\r\n             name={msg.sender === userId ? undefined : partnerName}\r\n             age={msg.sender === userId ? undefined : partnerAge}\r\n             country={msg.sender === userId ? undefined : partnerCountry}\r\n-            status={msg.status}\r\n             onDelete={() => handleDelete(msg.id)}\r\n             onEdit={(newContent: string) => handleEdit(msg.id, newContent)}\r\n             onReact={(emoji: string) => handleReact(msg.id, emoji)}\r\n           />\r\n@@ -224,34 +211,47 @@\n         <div className=\"absolute bottom-20 left-2 sm:left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n           {topEmojis.map((emoji) => (\r\n             <button\r\n               key={emoji}\r\n-              onClick={() => setInput(prev => prev + emoji)}\r\n+              onClick={() => setInput((prev) => prev + emoji)}\r\n               className=\"text-2xl hover:scale-125 transition-transform\"\r\n             >\r\n               {emoji}\r\n             </button>\r\n           ))}\r\n         </div>\r\n       )}\r\n \r\n-      {/* Input Panel */}\r\n+      {/* Input Bar */}\r\n       <div className=\"border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 bg-white dark:bg-neutral-900\">\r\n-        <button onClick={() => setShowEmojiPicker(prev => !prev)} className=\"text-2xl hover:scale-110 transition-transform\">😊</button>\r\n+        <button\r\n+          onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n+          className=\"text-2xl hover:scale-110 transition-transform\"\r\n+        >\r\n+          😊\r\n+        </button>\r\n         <input\r\n           type=\"text\"\r\n           placeholder=\"Type a message...\"\r\n           value={input}\r\n-          onChange={e => { setInput(e.target.value); debouncedTyping(); }}\r\n-          onKeyDown={e => e.key === \"Enter\" && sendText()}\r\n+          onChange={(e) => {\r\n+            setInput(e.target.value);\r\n+            debouncedTyping();\r\n+          }}\r\n+          onKeyDown={(e) => e.key === \"Enter\" && sendMessage(input, \"text\")}\r\n           className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 text-sm px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n         />\r\n         <label className=\"cursor-pointer text-xl\" title=\"Send file\">\r\n           📎\r\n-          <input type=\"file\" accept=\"image/*,audio/*,video/*\" hidden onChange={handleFile} />\r\n+          <input\r\n+            type=\"file\"\r\n+            accept=\"image/*,audio/*,video/*\"\r\n+            hidden\r\n+            onChange={handleFile}\r\n+          />\r\n         </label>\r\n         <button\r\n-          onClick={sendText}\r\n+          onClick={() => sendMessage(input, \"text\")}\r\n           disabled={!input.trim()}\r\n           className=\"bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 text-sm rounded-lg disabled:opacity-50 transition\"\r\n         >\r\n           Send\r\n"
                },
                {
                    "date": 1759858412506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,19 @@\n \"use client\";\r\n \r\n import React, { useState, useEffect, useRef } from \"react\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n-import { ref, set, onValue, remove, update } from \"firebase/database\";\r\n+import { ref, set, onValue, remove, update, off } from \"firebase/database\";\r\n import { database } from \"@/lib/firebaseConfig\";\r\n import debounce from \"lodash/debounce\";\r\n \r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n import {\r\n   sendTyping,\r\n-  onTyping,\r\n-  sendMessageStatus,\r\n-  onMessageStatusUpdate,\r\n   deleteMessage,\r\n-  onMessageDeleted,\r\n   editMessage,\r\n   reactToMessage,\r\n-  onMessageReacted,\r\n   sendFile,\r\n } from \"@/features/anonymousChat/services/signalingService\";\r\n \r\n interface ChatBoxProps {\r\n@@ -77,59 +72,79 @@\n   // ------------------ FIREBASE LISTENER ------------------\r\n   useEffect(() => {\r\n     if (!roomId) return;\r\n     const messagesRef = ref(database, `rooms/${roomId}/messages`);\r\n-    return onValue(messagesRef, (snapshot) => {\r\n+    onValue(messagesRef, (snapshot) => {\r\n       const data = snapshot.val() || {};\r\n       setMessages(Object.values(data));\r\n     });\r\n+    return () => off(messagesRef);\r\n   }, [roomId]);\r\n \r\n   // ------------------ SOCKET EVENTS ------------------\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n-    // Typing\r\n-    onTyping(({ sender }: any) => {\r\n-      if (sender !== socket.id) {\r\n+    // Typing indicator\r\n+    socket.on(\"typing\", ({ sender }) => {\r\n+      if (sender !== userId) {\r\n         setPartnerTyping(true);\r\n-        setTimeout(() => setPartnerTyping(false), 3000);\r\n+        setTimeout(() => setPartnerTyping(false), 2500);\r\n       }\r\n     });\r\n \r\n-    // Message status updates\r\n-    onMessageStatusUpdate(({ messageId, status }: any) => {\r\n-      setMessages((prev) =>\r\n-        prev.map((m) => (m.id === messageId ? { ...m, status } : m))\r\n-      );\r\n+    // Receive new message from partner\r\n+    socket.on(\"receive-message\", (msg) => {\r\n+      setMessages((prev) => [...prev, msg]);\r\n+      playSound(\"receive\");\r\n     });\r\n \r\n-    // Message deleted\r\n-    onMessageDeleted(({ messageId }: any) => {\r\n+    // Partner deleted message\r\n+    socket.on(\"message-deleted\", ({ messageId }) => {\r\n       setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n     });\r\n \r\n-    // Message reacted\r\n-    onMessageReacted(({ messageId, reaction, user }: any) => {\r\n+    // Partner edited message\r\n+    socket.on(\"message-edited\", ({ messageId, newContent }) => {\r\n       setMessages((prev) =>\r\n         prev.map((m) =>\r\n+          m.id === messageId ? { ...m, content: newContent } : m\r\n+        )\r\n+      );\r\n+    });\r\n+\r\n+    // Partner reacted\r\n+    socket.on(\"message-reacted\", ({ messageId, emoji, user }) => {\r\n+      setMessages((prev) =>\r\n+        prev.map((m) =>\r\n           m.id === messageId\r\n-            ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n+            ? { ...m, reactions: { ...m.reactions, [user]: emoji } }\r\n             : m\r\n         )\r\n       );\r\n     });\r\n-  }, [socket]);\r\n \r\n+    return () => {\r\n+      socket.off(\"typing\");\r\n+      socket.off(\"receive-message\");\r\n+      socket.off(\"message-deleted\");\r\n+      socket.off(\"message-edited\");\r\n+      socket.off(\"message-reacted\");\r\n+    };\r\n+  }, [socket, userId]);\r\n+\r\n   // ------------------ DEBOUNCED TYPING ------------------\r\n   const debouncedTyping = useRef(\r\n     debounce(() => {\r\n-      if (roomId) sendTyping(roomId);\r\n+      socket.emit(\"typing\", { roomId, sender: userId });\r\n     }, 400)\r\n   ).current;\r\n \r\n   // ------------------ SEND MESSAGE ------------------\r\n-  const sendMessage = (content: string, type: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\" = \"text\") => {\r\n+  const sendMessage = async (\r\n+    content: string,\r\n+    type: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\" = \"text\"\r\n+  ) => {\r\n     if (!content.trim() || !roomId) return;\r\n \r\n     const msgId = uuidv4();\r\n     const msg = {\r\n@@ -141,13 +156,18 @@\n       status: \"sent\",\r\n       reactions: {},\r\n     };\r\n \r\n-    set(ref(database, `rooms/${roomId}/messages/${msgId}`), msg).catch(console.error);\r\n-    setMessages((prev) => [...prev, msg]);\r\n-    playSound(\"sent\");\r\n-    setInput(\"\");\r\n-    setShowEmojiPicker(false);\r\n+    try {\r\n+      await set(ref(database, `rooms/${roomId}/messages/${msgId}`), msg);\r\n+      socket.emit(\"send-message\", { roomId, message: msg });\r\n+      setMessages((prev) => [...prev, msg]);\r\n+      playSound(\"sent\");\r\n+      setInput(\"\");\r\n+      setShowEmojiPicker(false);\r\n+    } catch (err) {\r\n+      console.error(\"Send error:\", err);\r\n+    }\r\n   };\r\n \r\n   // ------------------ FILE UPLOAD ------------------\r\n   const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n@@ -158,19 +178,21 @@\n \r\n   // ------------------ DELETE / EDIT / REACT ------------------\r\n   const handleDelete = (msgId: string) => {\r\n     remove(ref(database, `rooms/${roomId}/messages/${msgId}`)).catch(console.error);\r\n-    deleteMessage(roomId, msgId);\r\n+    socket.emit(\"delete-message\", { roomId, messageId: msgId });\r\n   };\r\n \r\n   const handleEdit = (msgId: string, newContent: string) => {\r\n-    update(ref(database, `rooms/${roomId}/messages/${msgId}`), { content: newContent }).catch(console.error);\r\n-    editMessage(roomId, msgId, newContent);\r\n+    update(ref(database, `rooms/${roomId}/messages/${msgId}`), {\r\n+      content: newContent,\r\n+    }).catch(console.error);\r\n+    socket.emit(\"edit-message\", { roomId, messageId: msgId, newContent });\r\n   };\r\n \r\n   const handleReact = (msgId: string, emoji: string) => {\r\n     set(ref(database, `rooms/${roomId}/messages/${msgId}/reactions/${userId}`), emoji).catch(console.error);\r\n-    reactToMessage(roomId, msgId, emoji);\r\n+    socket.emit(\"react-message\", { roomId, messageId: msgId, emoji, user: userId });\r\n   };\r\n \r\n   // ------------------ RENDER ------------------\r\n   return (\r\n"
                },
                {
                    "date": 1759859663593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,15 +7,8 @@\n import debounce from \"lodash/debounce\";\r\n \r\n import Message from \"./Message\";\r\n import TypingIndicator from \"./TypingIndicator\";\r\n-import {\r\n-  sendTyping,\r\n-  deleteMessage,\r\n-  editMessage,\r\n-  reactToMessage,\r\n-  sendFile,\r\n-} from \"@/features/anonymousChat/services/signalingService\";\r\n \r\n interface ChatBoxProps {\r\n   socket: any;\r\n   roomId: string;\r\n@@ -48,14 +41,14 @@\n \r\n   const sentSoundRef = useRef<HTMLAudioElement>(null);\r\n   const receiveSoundRef = useRef<HTMLAudioElement>(null);\r\n \r\n-  // ------------------ SOUNDS ------------------\r\n+  // ------------------ PLAY SOUND ------------------\r\n   const playSound = async (type: \"sent\" | \"receive\") => {\r\n     if (!soundOn) return;\r\n     try {\r\n-      const audioRef = type === \"sent\" ? sentSoundRef : receiveSoundRef;\r\n-      const audio = audioRef.current;\r\n+      const ref = type === \"sent\" ? sentSoundRef : receiveSoundRef;\r\n+      const audio = ref.current;\r\n       if (audio) {\r\n         audio.volume = 0.8;\r\n         await audio.play();\r\n       }\r\n@@ -83,42 +76,35 @@\n   // ------------------ SOCKET EVENTS ------------------\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n-    // Typing indicator\r\n     socket.on(\"typing\", ({ sender }) => {\r\n       if (sender !== userId) {\r\n         setPartnerTyping(true);\r\n         setTimeout(() => setPartnerTyping(false), 2500);\r\n       }\r\n     });\r\n \r\n-    // Receive new message from partner\r\n-    socket.on(\"receive-message\", (msg) => {\r\n-      setMessages((prev) => [...prev, msg]);\r\n+    socket.on(\"receive-message\", ({ message }) => {\r\n+      setMessages((prev) => [...prev, message]);\r\n       playSound(\"receive\");\r\n     });\r\n \r\n-    // Partner deleted message\r\n     socket.on(\"message-deleted\", ({ messageId }) => {\r\n       setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n     });\r\n \r\n-    // Partner edited message\r\n-    socket.on(\"message-edited\", ({ messageId, newContent }) => {\r\n+    socket.on(\"message-edited\", ({ messageId, content }) => {\r\n       setMessages((prev) =>\r\n-        prev.map((m) =>\r\n-          m.id === messageId ? { ...m, content: newContent } : m\r\n-        )\r\n+        prev.map((m) => (m.id === messageId ? { ...m, content, edited: true } : m))\r\n       );\r\n     });\r\n \r\n-    // Partner reacted\r\n-    socket.on(\"message-reacted\", ({ messageId, emoji, user }) => {\r\n+    socket.on(\"message-react\", ({ messageId, reaction, user }) => {\r\n       setMessages((prev) =>\r\n         prev.map((m) =>\r\n           m.id === messageId\r\n-            ? { ...m, reactions: { ...m.reactions, [user]: emoji } }\r\n+            ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n             : m\r\n         )\r\n       );\r\n     });\r\n@@ -127,13 +113,13 @@\n       socket.off(\"typing\");\r\n       socket.off(\"receive-message\");\r\n       socket.off(\"message-deleted\");\r\n       socket.off(\"message-edited\");\r\n-      socket.off(\"message-reacted\");\r\n+      socket.off(\"message-react\");\r\n     };\r\n   }, [socket, userId]);\r\n \r\n-  // ------------------ DEBOUNCED TYPING ------------------\r\n+  // ------------------ TYPING ------------------\r\n   const debouncedTyping = useRef(\r\n     debounce(() => {\r\n       socket.emit(\"typing\", { roomId, sender: userId });\r\n     }, 400)\r\n@@ -172,9 +158,15 @@\n   // ------------------ FILE UPLOAD ------------------\r\n   const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n     const file = e.target.files?.[0];\r\n     if (!file) return;\r\n-    sendFile(roomId, file);\r\n+\r\n+    const reader = new FileReader();\r\n+    reader.onload = () => {\r\n+      const base64 = reader.result as string;\r\n+      sendMessage(base64, file.type.startsWith(\"image\") ? \"image\" : \"file\");\r\n+    };\r\n+    reader.readAsDataURL(file);\r\n   };\r\n \r\n   // ------------------ DELETE / EDIT / REACT ------------------\r\n   const handleDelete = (msgId: string) => {\r\n@@ -185,14 +177,17 @@\n   const handleEdit = (msgId: string, newContent: string) => {\r\n     update(ref(database, `rooms/${roomId}/messages/${msgId}`), {\r\n       content: newContent,\r\n     }).catch(console.error);\r\n-    socket.emit(\"edit-message\", { roomId, messageId: msgId, newContent });\r\n+    socket.emit(\"edit-message\", { roomId, messageId: msgId, content: newContent });\r\n   };\r\n \r\n   const handleReact = (msgId: string, emoji: string) => {\r\n-    set(ref(database, `rooms/${roomId}/messages/${msgId}/reactions/${userId}`), emoji).catch(console.error);\r\n-    socket.emit(\"react-message\", { roomId, messageId: msgId, emoji, user: userId });\r\n+    set(\r\n+      ref(database, `rooms/${roomId}/messages/${msgId}/reactions/${userId}`),\r\n+      emoji\r\n+    ).catch(console.error);\r\n+    socket.emit(\"react-message\", { roomId, messageId: msgId, reaction: emoji, user: userId });\r\n   };\r\n \r\n   // ------------------ RENDER ------------------\r\n   return (\r\n@@ -204,9 +199,11 @@\n       <div className=\"px-4 py-2 border-b text-sm bg-white dark:bg-neutral-900 dark:border-neutral-700\">\r\n         <span className=\"font-medium text-blue-600 dark:text-blue-400\">{partnerName}</span>\r\n         {partnerAge && <span className=\"ml-1\">({partnerAge})</span>}\r\n         {partnerCountry && (\r\n-          <span className=\"ml-2 text-neutral-500 dark:text-neutral-400\">from {partnerCountry}</span>\r\n+          <span className=\"ml-2 text-neutral-500 dark:text-neutral-400\">\r\n+            from {partnerCountry}\r\n+          </span>\r\n         )}\r\n       </div>\r\n \r\n       {/* Messages */}\r\n"
                },
                {
                    "date": 1759860298714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,52 +73,53 @@\n     return () => off(messagesRef);\r\n   }, [roomId]);\r\n \r\n   // ------------------ SOCKET EVENTS ------------------\r\n-  useEffect(() => {\r\n-    if (!socket) return;\r\n+useEffect(() => {\r\n+  if (!socket) return;\r\n \r\n-    socket.on(\"typing\", ({ sender }) => {\r\n-      if (sender !== userId) {\r\n-        setPartnerTyping(true);\r\n-        setTimeout(() => setPartnerTyping(false), 2500);\r\n-      }\r\n-    });\r\n+  socket.on(\"typing\", ({ sender }) => {\r\n+    if (sender !== userId) {\r\n+      setPartnerTyping(true);\r\n+      setTimeout(() => setPartnerTyping(false), 2500);\r\n+    }\r\n+  });\r\n \r\n-    socket.on(\"receive-message\", ({ message }) => {\r\n-      setMessages((prev) => [...prev, message]);\r\n-      playSound(\"receive\");\r\n-    });\r\n+  socket.on(\"receive-message\", ({ message, sender }) => {\r\n+    setMessages((prev) => [...prev, message]);\r\n+    playSound(\"receive\");\r\n+  });\r\n \r\n-    socket.on(\"message-deleted\", ({ messageId }) => {\r\n-      setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n-    });\r\n+  socket.on(\"message-deleted\", ({ messageId }) => {\r\n+    setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n+  });\r\n \r\n-    socket.on(\"message-edited\", ({ messageId, content }) => {\r\n-      setMessages((prev) =>\r\n-        prev.map((m) => (m.id === messageId ? { ...m, content, edited: true } : m))\r\n-      );\r\n-    });\r\n+  socket.on(\"message-edited\", ({ messageId, content, sender }) => {\r\n+    setMessages((prev) =>\r\n+      prev.map((m) => (m.id === messageId ? { ...m, content, edited: true } : m))\r\n+    );\r\n+  });\r\n \r\n-    socket.on(\"message-react\", ({ messageId, reaction, user }) => {\r\n-      setMessages((prev) =>\r\n-        prev.map((m) =>\r\n-          m.id === messageId\r\n-            ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n-            : m\r\n-        )\r\n-      );\r\n-    });\r\n+  socket.on(\"message-reacted\", ({ messageId, reaction, user }) => {\r\n+    setMessages((prev) =>\r\n+      prev.map((m) =>\r\n+        m.id === messageId\r\n+          ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n+          : m\r\n+      )\r\n+    );\r\n+  });\r\n \r\n-    return () => {\r\n-      socket.off(\"typing\");\r\n-      socket.off(\"receive-message\");\r\n-      socket.off(\"message-deleted\");\r\n-      socket.off(\"message-edited\");\r\n-      socket.off(\"message-react\");\r\n-    };\r\n-  }, [socket, userId]);\r\n+  return () => {\r\n+    socket.off(\"typing\");\r\n+    socket.off(\"receive-message\");\r\n+    socket.off(\"message-deleted\");\r\n+    socket.off(\"message-edited\");\r\n+    socket.off(\"message-reacted\");\r\n+  };\r\n+}, [socket, userId]);\r\n \r\n+\r\n   // ------------------ TYPING ------------------\r\n   const debouncedTyping = useRef(\r\n     debounce(() => {\r\n       socket.emit(\"typing\", { roomId, sender: userId });\r\n"
                },
                {
                    "date": 1759860521708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,10 +19,10 @@\n   partnerCountry?: string;\r\n }\r\n \r\n const topEmojis = [\r\n-  \"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\",\r\n-  \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\",\r\n+  \"😀\",\"😂\",\"😍\",\"🤣\",\"😊\",\"😭\",\"🥰\",\"😎\",\"👍\",\"🙏\",\r\n+  \"😘\",\"😅\",\"🎉\",\"🤔\",\"🙄\",\"😢\",\"🔥\",\"💯\",\"❤️\",\"👏\"\r\n ];\r\n \r\n export default function ChatBox({\r\n   socket,\r\n@@ -73,53 +73,52 @@\n     return () => off(messagesRef);\r\n   }, [roomId]);\r\n \r\n   // ------------------ SOCKET EVENTS ------------------\r\n-useEffect(() => {\r\n-  if (!socket) return;\r\n+  useEffect(() => {\r\n+    if (!socket) return;\r\n \r\n-  socket.on(\"typing\", ({ sender }) => {\r\n-    if (sender !== userId) {\r\n-      setPartnerTyping(true);\r\n-      setTimeout(() => setPartnerTyping(false), 2500);\r\n-    }\r\n-  });\r\n+    socket.on(\"typing\", ({ sender }) => {\r\n+      if (sender !== userId) {\r\n+        setPartnerTyping(true);\r\n+        setTimeout(() => setPartnerTyping(false), 2500);\r\n+      }\r\n+    });\r\n \r\n-  socket.on(\"receive-message\", ({ message, sender }) => {\r\n-    setMessages((prev) => [...prev, message]);\r\n-    playSound(\"receive\");\r\n-  });\r\n+    socket.on(\"receive-message\", ({ message, sender }) => {\r\n+      setMessages((prev) => [...prev, message]);\r\n+      playSound(\"receive\");\r\n+    });\r\n \r\n-  socket.on(\"message-deleted\", ({ messageId }) => {\r\n-    setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n-  });\r\n+    socket.on(\"message-deleted\", ({ messageId }) => {\r\n+      setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n+    });\r\n \r\n-  socket.on(\"message-edited\", ({ messageId, content, sender }) => {\r\n-    setMessages((prev) =>\r\n-      prev.map((m) => (m.id === messageId ? { ...m, content, edited: true } : m))\r\n-    );\r\n-  });\r\n+    socket.on(\"message-edited\", ({ messageId, content }) => {\r\n+      setMessages((prev) =>\r\n+        prev.map((m) => (m.id === messageId ? { ...m, content, edited: true } : m))\r\n+      );\r\n+    });\r\n \r\n-  socket.on(\"message-reacted\", ({ messageId, reaction, user }) => {\r\n-    setMessages((prev) =>\r\n-      prev.map((m) =>\r\n-        m.id === messageId\r\n-          ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n-          : m\r\n-      )\r\n-    );\r\n-  });\r\n+    socket.on(\"message-reacted\", ({ messageId, reaction, user }) => {\r\n+      setMessages((prev) =>\r\n+        prev.map((m) =>\r\n+          m.id === messageId\r\n+            ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n+            : m\r\n+        )\r\n+      );\r\n+    });\r\n \r\n-  return () => {\r\n-    socket.off(\"typing\");\r\n-    socket.off(\"receive-message\");\r\n-    socket.off(\"message-deleted\");\r\n-    socket.off(\"message-edited\");\r\n-    socket.off(\"message-reacted\");\r\n-  };\r\n-}, [socket, userId]);\r\n+    return () => {\r\n+      socket.off(\"typing\");\r\n+      socket.off(\"receive-message\");\r\n+      socket.off(\"message-deleted\");\r\n+      socket.off(\"message-edited\");\r\n+      socket.off(\"message-reacted\");\r\n+    };\r\n+  }, [socket, userId]);\r\n \r\n-\r\n   // ------------------ TYPING ------------------\r\n   const debouncedTyping = useRef(\r\n     debounce(() => {\r\n       socket.emit(\"typing\", { roomId, sender: userId });\r\n@@ -182,12 +181,9 @@\n     socket.emit(\"edit-message\", { roomId, messageId: msgId, content: newContent });\r\n   };\r\n \r\n   const handleReact = (msgId: string, emoji: string) => {\r\n-    set(\r\n-      ref(database, `rooms/${roomId}/messages/${msgId}/reactions/${userId}`),\r\n-      emoji\r\n-    ).catch(console.error);\r\n+    set(ref(database, `rooms/${roomId}/messages/${msgId}/reactions/${userId}`), emoji).catch(console.error);\r\n     socket.emit(\"react-message\", { roomId, messageId: msgId, reaction: emoji, user: userId });\r\n   };\r\n \r\n   // ------------------ RENDER ------------------\r\n"
                },
                {
                    "date": 1759860595754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,52 +73,66 @@\n     return () => off(messagesRef);\r\n   }, [roomId]);\r\n \r\n   // ------------------ SOCKET EVENTS ------------------\r\n-  useEffect(() => {\r\n-    if (!socket) return;\r\n+useEffect(() => {\r\n+  if (!socket) return;\r\n \r\n-    socket.on(\"typing\", ({ sender }) => {\r\n-      if (sender !== userId) {\r\n-        setPartnerTyping(true);\r\n-        setTimeout(() => setPartnerTyping(false), 2500);\r\n-      }\r\n-    });\r\n+  // Typing indicator\r\n+  const typingHandler = (data: { sender: string }) => {\r\n+    if (data.sender !== userId) {\r\n+      setPartnerTyping(true);\r\n+      setTimeout(() => setPartnerTyping(false), 2500);\r\n+    }\r\n+  };\r\n+  socket.on(\"typing\", typingHandler);\r\n \r\n-    socket.on(\"receive-message\", ({ message, sender }) => {\r\n-      setMessages((prev) => [...prev, message]);\r\n-      playSound(\"receive\");\r\n-    });\r\n+  // Receive message\r\n+  const receiveHandler = (data: { message: any; sender: string }) => {\r\n+    setMessages((prev) => [...prev, data.message]);\r\n+    playSound(\"receive\");\r\n+  };\r\n+  socket.on(\"receive-message\", receiveHandler);\r\n \r\n-    socket.on(\"message-deleted\", ({ messageId }) => {\r\n-      setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n-    });\r\n+  // Message deleted\r\n+  const deletedHandler = (data: { messageId: string }) => {\r\n+    setMessages((prev) => prev.filter((m) => m.id !== data.messageId));\r\n+  };\r\n+  socket.on(\"message-deleted\", deletedHandler);\r\n \r\n-    socket.on(\"message-edited\", ({ messageId, content }) => {\r\n-      setMessages((prev) =>\r\n-        prev.map((m) => (m.id === messageId ? { ...m, content, edited: true } : m))\r\n-      );\r\n-    });\r\n+  // Message edited\r\n+  const editedHandler = (data: { messageId: string; content: string }) => {\r\n+    setMessages((prev) =>\r\n+      prev.map((m) =>\r\n+        m.id === data.messageId ? { ...m, content: data.content, edited: true } : m\r\n+      )\r\n+    );\r\n+  };\r\n+  socket.on(\"message-edited\", editedHandler);\r\n \r\n-    socket.on(\"message-reacted\", ({ messageId, reaction, user }) => {\r\n-      setMessages((prev) =>\r\n-        prev.map((m) =>\r\n-          m.id === messageId\r\n-            ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n-            : m\r\n-        )\r\n-      );\r\n-    });\r\n+  // Message reacted\r\n+  const reactedHandler = (data: { messageId: string; reaction: string; user: string }) => {\r\n+    setMessages((prev) =>\r\n+      prev.map((m) =>\r\n+        m.id === data.messageId\r\n+          ? { ...m, reactions: { ...m.reactions, [data.user]: data.reaction } }\r\n+          : m\r\n+      )\r\n+    );\r\n+  };\r\n+  socket.on(\"message-react\", reactedHandler); // <-- make sure your backend emits \"message-react\"\r\n \r\n-    return () => {\r\n-      socket.off(\"typing\");\r\n-      socket.off(\"receive-message\");\r\n-      socket.off(\"message-deleted\");\r\n-      socket.off(\"message-edited\");\r\n-      socket.off(\"message-reacted\");\r\n-    };\r\n-  }, [socket, userId]);\r\n+  // Cleanup\r\n+  return () => {\r\n+    socket.off(\"typing\", typingHandler);\r\n+    socket.off(\"receive-message\", receiveHandler);\r\n+    socket.off(\"message-deleted\", deletedHandler);\r\n+    socket.off(\"message-edited\", editedHandler);\r\n+    socket.off(\"message-react\", reactedHandler);\r\n+  };\r\n+}, [socket, userId]);\r\n \r\n+\r\n   // ------------------ TYPING ------------------\r\n   const debouncedTyping = useRef(\r\n     debounce(() => {\r\n       socket.emit(\"typing\", { roomId, sender: userId });\r\n"
                },
                {
                    "date": 1759947429928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,284 @@\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect, useRef } from \"react\";\r\n+import { v4 as uuidv4 } from \"uuid\";\r\n+import { ref, set, onValue, remove, update, off } from \"firebase/database\";\r\n+import { database } from \"@/lib/firebaseConfig\";\r\n+import debounce from \"lodash/debounce\";\r\n+\r\n+import Message from \"./Message\";\r\n+import TypingIndicator from \"./TypingIndicator\";\r\n+\r\n+interface ChatBoxProps {\r\n+  socket: any;\r\n+  roomId: string;\r\n+  userId: string;\r\n+  soundOn?: boolean;\r\n+  partnerName?: string;\r\n+  partnerAge?: string | number;\r\n+  partnerCountry?: string;\r\n+}\r\n+\r\n+const topEmojis = [\r\n+  \"😀\",\"😂\",\"😍\",\"🤣\",\"😊\",\"😭\",\"🥰\",\"😎\",\"👍\",\"🙏\",\r\n+  \"😘\",\"😅\",\"🎉\",\"🤔\",\"🙄\",\"😢\",\"🔥\",\"💯\",\"❤️\",\"👏\"\r\n+];\r\n+\r\n+export default function ChatBox({\r\n+  socket,\r\n+  roomId,\r\n+  userId,\r\n+  soundOn = true,\r\n+  partnerName = \"Stranger\",\r\n+  partnerAge,\r\n+  partnerCountry,\r\n+}: ChatBoxProps) {\r\n+  const [messages, setMessages] = useState<any[]>([]);\r\n+  const [input, setInput] = useState(\"\");\r\n+  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n+  const [partnerTyping, setPartnerTyping] = useState(false);\r\n+  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n+\r\n+  const sentSoundRef = useRef<HTMLAudioElement>(null);\r\n+  const receiveSoundRef = useRef<HTMLAudioElement>(null);\r\n+\r\n+  // ------------------ PLAY SOUND ------------------\r\n+  const playSound = async (type: \"sent\" | \"receive\") => {\r\n+    if (!soundOn) return;\r\n+    try {\r\n+      const ref = type === \"sent\" ? sentSoundRef : receiveSoundRef;\r\n+      const audio = ref.current;\r\n+      if (audio) {\r\n+        audio.volume = 0.8;\r\n+        await audio.play();\r\n+      }\r\n+    } catch (err) {\r\n+      console.warn(\"Audio playback issue:\", err);\r\n+    }\r\n+  };\r\n+\r\n+  // ------------------ AUTO SCROLL ------------------\r\n+  useEffect(() => {\r\n+    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n+  }, [messages, partnerTyping]);\r\n+\r\n+  // ------------------ FIREBASE LISTENER ------------------\r\n+  useEffect(() => {\r\n+    if (!roomId) return;\r\n+    const messagesRef = ref(database, `rooms/${roomId}/messages`);\r\n+    onValue(messagesRef, (snapshot) => {\r\n+      const data = snapshot.val() || {};\r\n+      const msgs = Object.values(data).sort(\r\n+        (a: any, b: any) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n+      );\r\n+      setMessages(msgs);\r\n+    });\r\n+    return () => off(messagesRef);\r\n+  }, [roomId]);\r\n+\r\n+  // ------------------ SOCKET EVENTS ------------------\r\n+  useEffect(() => {\r\n+    if (!socket) return;\r\n+\r\n+    // Typing indicator\r\n+    const typingHandler = (data: { sender: string }) => {\r\n+      if (data.sender !== userId) {\r\n+        setPartnerTyping(true);\r\n+        setTimeout(() => setPartnerTyping(false), 2500);\r\n+      }\r\n+    };\r\n+    socket.on(\"typing\", typingHandler);\r\n+\r\n+    // Message deleted\r\n+    const deletedHandler = (data: { messageId: string }) => {\r\n+      setMessages((prev) => prev.filter((m) => m.id !== data.messageId));\r\n+    };\r\n+    socket.on(\"message-deleted\", deletedHandler);\r\n+\r\n+    // Message edited\r\n+    const editedHandler = (data: { messageId: string; content: string }) => {\r\n+      setMessages((prev) =>\r\n+        prev.map((m) =>\r\n+          m.id === data.messageId ? { ...m, content: data.content, edited: true } : m\r\n+        )\r\n+      );\r\n+    };\r\n+    socket.on(\"message-edited\", editedHandler);\r\n+\r\n+    // Message reacted\r\n+    const reactedHandler = (data: { messageId: string; reaction: string; user: string }) => {\r\n+      setMessages((prev) =>\r\n+        prev.map((m) =>\r\n+          m.id === data.messageId\r\n+            ? { ...m, reactions: { ...m.reactions, [data.user]: data.reaction } }\r\n+            : m\r\n+        )\r\n+      );\r\n+    };\r\n+    socket.on(\"message-react\", reactedHandler);\r\n+\r\n+    return () => {\r\n+      socket.off(\"typing\", typingHandler);\r\n+      socket.off(\"message-deleted\", deletedHandler);\r\n+      socket.off(\"message-edited\", editedHandler);\r\n+      socket.off(\"message-react\", reactedHandler);\r\n+    };\r\n+  }, [socket, userId]);\r\n+\r\n+  // ------------------ TYPING ------------------\r\n+  const debouncedTyping = useRef(\r\n+    debounce(() => {\r\n+      socket.emit(\"typing\", { roomId, sender: userId });\r\n+    }, 400)\r\n+  ).current;\r\n+\r\n+  // ------------------ SEND MESSAGE ------------------\r\n+  const sendMessage = async (\r\n+    content: string,\r\n+    type: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\" = \"text\"\r\n+  ) => {\r\n+    if (!content.trim() || !roomId) return;\r\n+\r\n+    const msgId = uuidv4();\r\n+    const msg = {\r\n+      id: msgId,\r\n+      sender: userId,\r\n+      content,\r\n+      timestamp: new Date().toISOString(),\r\n+      type,\r\n+      status: \"sent\",\r\n+      reactions: {},\r\n+    };\r\n+\r\n+    try {\r\n+      // Save only to Firebase (Socket does not resend messages)\r\n+      await set(ref(database, `rooms/${roomId}/messages/${msgId}`), msg);\r\n+      playSound(\"sent\");\r\n+      setInput(\"\");\r\n+      setShowEmojiPicker(false);\r\n+    } catch (err) {\r\n+      console.error(\"Send error:\", err);\r\n+    }\r\n+  };\r\n+\r\n+  // ------------------ FILE UPLOAD ------------------\r\n+  const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    const file = e.target.files?.[0];\r\n+    if (!file) return;\r\n+\r\n+    const reader = new FileReader();\r\n+    reader.onload = () => {\r\n+      const base64 = reader.result as string;\r\n+      sendMessage(base64, file.type.startsWith(\"image\") ? \"image\" : \"file\");\r\n+    };\r\n+    reader.readAsDataURL(file);\r\n+  };\r\n+\r\n+  // ------------------ DELETE / EDIT / REACT ------------------\r\n+  const handleDelete = (msgId: string) => {\r\n+    remove(ref(database, `rooms/${roomId}/messages/${msgId}`)).catch(console.error);\r\n+    socket.emit(\"delete-message\", { roomId, messageId: msgId });\r\n+  };\r\n+\r\n+  const handleEdit = (msgId: string, newContent: string) => {\r\n+    update(ref(database, `rooms/${roomId}/messages/${msgId}`), {\r\n+      content: newContent,\r\n+    }).catch(console.error);\r\n+    socket.emit(\"edit-message\", { roomId, messageId: msgId, content: newContent });\r\n+  };\r\n+\r\n+  const handleReact = (msgId: string, emoji: string) => {\r\n+    set(ref(database, `rooms/${roomId}/messages/${msgId}/reactions/${userId}`), emoji).catch(console.error);\r\n+    socket.emit(\"react-message\", { roomId, messageId: msgId, reaction: emoji, user: userId });\r\n+  };\r\n+\r\n+  // ------------------ RENDER ------------------\r\n+  return (\r\n+    <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 relative\">\r\n+      <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n+      <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n+\r\n+      {/* Partner Info */}\r\n+      <div className=\"px-4 py-2 border-b text-sm bg-white dark:bg-neutral-900 dark:border-neutral-700\">\r\n+        <span className=\"font-medium text-blue-600 dark:text-blue-400\">{partnerName}</span>\r\n+        {partnerAge && <span className=\"ml-1\">({partnerAge})</span>}\r\n+        {partnerCountry && (\r\n+          <span className=\"ml-2 text-neutral-500 dark:text-neutral-400\">\r\n+            from {partnerCountry}\r\n+          </span>\r\n+        )}\r\n+      </div>\r\n+\r\n+      {/* Messages */}\r\n+      <div className=\"flex-1 overflow-y-auto px-3 py-4 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n+        {messages.map((msg) => (\r\n+          <Message\r\n+            key={msg.id}\r\n+            {...msg}\r\n+            sender={msg.sender === userId ? \"me\" : \"partner\"}\r\n+            name={msg.sender === userId ? undefined : partnerName}\r\n+            age={msg.sender === userId ? undefined : partnerAge}\r\n+            country={msg.sender === userId ? undefined : partnerCountry}\r\n+            onDelete={() => handleDelete(msg.id)}\r\n+            onEdit={(newContent: string) => handleEdit(msg.id, newContent)}\r\n+            onReact={(emoji: string) => handleReact(msg.id, emoji)}\r\n+          />\r\n+        ))}\r\n+        {partnerTyping && <TypingIndicator name={partnerName} />}\r\n+        <div ref={messagesEndRef} />\r\n+      </div>\r\n+\r\n+      {/* Emoji Picker */}\r\n+      {showEmojiPicker && (\r\n+        <div className=\"absolute bottom-20 left-2 sm:left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n+          {topEmojis.map((emoji) => (\r\n+            <button\r\n+              key={emoji}\r\n+              onClick={() => setInput((prev) => prev + emoji)}\r\n+              className=\"text-2xl hover:scale-125 transition-transform\"\r\n+            >\r\n+              {emoji}\r\n+            </button>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Input Bar */}\r\n+      <div className=\"border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 bg-white dark:bg-neutral-900\">\r\n+        <button\r\n+          onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n+          className=\"text-2xl hover:scale-110 transition-transform\"\r\n+        >\r\n+          😊\r\n+        </button>\r\n+        <input\r\n+          type=\"text\"\r\n+          placeholder=\"Type a message...\"\r\n+          value={input}\r\n+          onChange={(e) => {\r\n+            setInput(e.target.value);\r\n+            debouncedTyping();\r\n+          }}\r\n+          onKeyDown={(e) => e.key === \"Enter\" && sendMessage(input, \"text\")}\r\n+          className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 text-sm px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n+        />\r\n+        <label className=\"cursor-pointer text-xl\" title=\"Send file\">\r\n+          📎\r\n+          <input\r\n+            type=\"file\"\r\n+            accept=\"image/*,audio/*,video/*\"\r\n+            hidden\r\n+            onChange={handleFile}\r\n+          />\r\n+        </label>\r\n+        <button\r\n+          onClick={() => sendMessage(input, \"text\")}\r\n+          disabled={!input.trim()}\r\n+          className=\"bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 text-sm rounded-lg disabled:opacity-50 transition\"\r\n+        >\r\n+          Send\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1759947430105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -281,296 +281,4 @@\n       </div>\r\n     </div>\r\n   );\r\n }\r\n-\"use client\";\r\n-\r\n-import React, { useState, useEffect, useRef } from \"react\";\r\n-import { v4 as uuidv4 } from \"uuid\";\r\n-import { ref, set, onValue, remove, update, off } from \"firebase/database\";\r\n-import { database } from \"@/lib/firebaseConfig\";\r\n-import debounce from \"lodash/debounce\";\r\n-\r\n-import Message from \"./Message\";\r\n-import TypingIndicator from \"./TypingIndicator\";\r\n-\r\n-interface ChatBoxProps {\r\n-  socket: any;\r\n-  roomId: string;\r\n-  userId: string;\r\n-  soundOn?: boolean;\r\n-  partnerName?: string;\r\n-  partnerAge?: string | number;\r\n-  partnerCountry?: string;\r\n-}\r\n-\r\n-const topEmojis = [\r\n-  \"😀\",\"😂\",\"😍\",\"🤣\",\"😊\",\"😭\",\"🥰\",\"😎\",\"👍\",\"🙏\",\r\n-  \"😘\",\"😅\",\"🎉\",\"🤔\",\"🙄\",\"😢\",\"🔥\",\"💯\",\"❤️\",\"👏\"\r\n-];\r\n-\r\n-export default function ChatBox({\r\n-  socket,\r\n-  roomId,\r\n-  userId,\r\n-  soundOn = true,\r\n-  partnerName = \"Stranger\",\r\n-  partnerAge,\r\n-  partnerCountry,\r\n-}: ChatBoxProps) {\r\n-  const [messages, setMessages] = useState<any[]>([]);\r\n-  const [input, setInput] = useState(\"\");\r\n-  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n-  const [partnerTyping, setPartnerTyping] = useState(false);\r\n-  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n-\r\n-  const sentSoundRef = useRef<HTMLAudioElement>(null);\r\n-  const receiveSoundRef = useRef<HTMLAudioElement>(null);\r\n-\r\n-  // ------------------ PLAY SOUND ------------------\r\n-  const playSound = async (type: \"sent\" | \"receive\") => {\r\n-    if (!soundOn) return;\r\n-    try {\r\n-      const ref = type === \"sent\" ? sentSoundRef : receiveSoundRef;\r\n-      const audio = ref.current;\r\n-      if (audio) {\r\n-        audio.volume = 0.8;\r\n-        await audio.play();\r\n-      }\r\n-    } catch (err) {\r\n-      console.warn(\"Audio playback issue:\", err);\r\n-    }\r\n-  };\r\n-\r\n-  // ------------------ AUTO SCROLL ------------------\r\n-  useEffect(() => {\r\n-    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n-  }, [messages, partnerTyping]);\r\n-\r\n-  // ------------------ FIREBASE LISTENER ------------------\r\n-  useEffect(() => {\r\n-    if (!roomId) return;\r\n-    const messagesRef = ref(database, `rooms/${roomId}/messages`);\r\n-    onValue(messagesRef, (snapshot) => {\r\n-      const data = snapshot.val() || {};\r\n-      setMessages(Object.values(data));\r\n-    });\r\n-    return () => off(messagesRef);\r\n-  }, [roomId]);\r\n-\r\n-  // ------------------ SOCKET EVENTS ------------------\r\n-useEffect(() => {\r\n-  if (!socket) return;\r\n-\r\n-  // Typing indicator\r\n-  const typingHandler = (data: { sender: string }) => {\r\n-    if (data.sender !== userId) {\r\n-      setPartnerTyping(true);\r\n-      setTimeout(() => setPartnerTyping(false), 2500);\r\n-    }\r\n-  };\r\n-  socket.on(\"typing\", typingHandler);\r\n-\r\n-  // Receive message\r\n-  const receiveHandler = (data: { message: any; sender: string }) => {\r\n-    setMessages((prev) => [...prev, data.message]);\r\n-    playSound(\"receive\");\r\n-  };\r\n-  socket.on(\"receive-message\", receiveHandler);\r\n-\r\n-  // Message deleted\r\n-  const deletedHandler = (data: { messageId: string }) => {\r\n-    setMessages((prev) => prev.filter((m) => m.id !== data.messageId));\r\n-  };\r\n-  socket.on(\"message-deleted\", deletedHandler);\r\n-\r\n-  // Message edited\r\n-  const editedHandler = (data: { messageId: string; content: string }) => {\r\n-    setMessages((prev) =>\r\n-      prev.map((m) =>\r\n-        m.id === data.messageId ? { ...m, content: data.content, edited: true } : m\r\n-      )\r\n-    );\r\n-  };\r\n-  socket.on(\"message-edited\", editedHandler);\r\n-\r\n-  // Message reacted\r\n-  const reactedHandler = (data: { messageId: string; reaction: string; user: string }) => {\r\n-    setMessages((prev) =>\r\n-      prev.map((m) =>\r\n-        m.id === data.messageId\r\n-          ? { ...m, reactions: { ...m.reactions, [data.user]: data.reaction } }\r\n-          : m\r\n-      )\r\n-    );\r\n-  };\r\n-  socket.on(\"message-react\", reactedHandler); // <-- make sure your backend emits \"message-react\"\r\n-\r\n-  // Cleanup\r\n-  return () => {\r\n-    socket.off(\"typing\", typingHandler);\r\n-    socket.off(\"receive-message\", receiveHandler);\r\n-    socket.off(\"message-deleted\", deletedHandler);\r\n-    socket.off(\"message-edited\", editedHandler);\r\n-    socket.off(\"message-react\", reactedHandler);\r\n-  };\r\n-}, [socket, userId]);\r\n-\r\n-\r\n-  // ------------------ TYPING ------------------\r\n-  const debouncedTyping = useRef(\r\n-    debounce(() => {\r\n-      socket.emit(\"typing\", { roomId, sender: userId });\r\n-    }, 400)\r\n-  ).current;\r\n-\r\n-  // ------------------ SEND MESSAGE ------------------\r\n-  const sendMessage = async (\r\n-    content: string,\r\n-    type: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\" = \"text\"\r\n-  ) => {\r\n-    if (!content.trim() || !roomId) return;\r\n-\r\n-    const msgId = uuidv4();\r\n-    const msg = {\r\n-      id: msgId,\r\n-      sender: userId,\r\n-      content,\r\n-      timestamp: new Date().toISOString(),\r\n-      type,\r\n-      status: \"sent\",\r\n-      reactions: {},\r\n-    };\r\n-\r\n-    try {\r\n-      await set(ref(database, `rooms/${roomId}/messages/${msgId}`), msg);\r\n-      socket.emit(\"send-message\", { roomId, message: msg });\r\n-      setMessages((prev) => [...prev, msg]);\r\n-      playSound(\"sent\");\r\n-      setInput(\"\");\r\n-      setShowEmojiPicker(false);\r\n-    } catch (err) {\r\n-      console.error(\"Send error:\", err);\r\n-    }\r\n-  };\r\n-\r\n-  // ------------------ FILE UPLOAD ------------------\r\n-  const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n-    const file = e.target.files?.[0];\r\n-    if (!file) return;\r\n-\r\n-    const reader = new FileReader();\r\n-    reader.onload = () => {\r\n-      const base64 = reader.result as string;\r\n-      sendMessage(base64, file.type.startsWith(\"image\") ? \"image\" : \"file\");\r\n-    };\r\n-    reader.readAsDataURL(file);\r\n-  };\r\n-\r\n-  // ------------------ DELETE / EDIT / REACT ------------------\r\n-  const handleDelete = (msgId: string) => {\r\n-    remove(ref(database, `rooms/${roomId}/messages/${msgId}`)).catch(console.error);\r\n-    socket.emit(\"delete-message\", { roomId, messageId: msgId });\r\n-  };\r\n-\r\n-  const handleEdit = (msgId: string, newContent: string) => {\r\n-    update(ref(database, `rooms/${roomId}/messages/${msgId}`), {\r\n-      content: newContent,\r\n-    }).catch(console.error);\r\n-    socket.emit(\"edit-message\", { roomId, messageId: msgId, content: newContent });\r\n-  };\r\n-\r\n-  const handleReact = (msgId: string, emoji: string) => {\r\n-    set(ref(database, `rooms/${roomId}/messages/${msgId}/reactions/${userId}`), emoji).catch(console.error);\r\n-    socket.emit(\"react-message\", { roomId, messageId: msgId, reaction: emoji, user: userId });\r\n-  };\r\n-\r\n-  // ------------------ RENDER ------------------\r\n-  return (\r\n-    <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 relative\">\r\n-      <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n-      <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n-\r\n-      {/* Partner Info */}\r\n-      <div className=\"px-4 py-2 border-b text-sm bg-white dark:bg-neutral-900 dark:border-neutral-700\">\r\n-        <span className=\"font-medium text-blue-600 dark:text-blue-400\">{partnerName}</span>\r\n-        {partnerAge && <span className=\"ml-1\">({partnerAge})</span>}\r\n-        {partnerCountry && (\r\n-          <span className=\"ml-2 text-neutral-500 dark:text-neutral-400\">\r\n-            from {partnerCountry}\r\n-          </span>\r\n-        )}\r\n-      </div>\r\n-\r\n-      {/* Messages */}\r\n-      <div className=\"flex-1 overflow-y-auto px-3 py-4 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n-        {messages.map((msg) => (\r\n-          <Message\r\n-            key={msg.id}\r\n-            {...msg}\r\n-            sender={msg.sender === userId ? \"me\" : \"partner\"}\r\n-            name={msg.sender === userId ? undefined : partnerName}\r\n-            age={msg.sender === userId ? undefined : partnerAge}\r\n-            country={msg.sender === userId ? undefined : partnerCountry}\r\n-            onDelete={() => handleDelete(msg.id)}\r\n-            onEdit={(newContent: string) => handleEdit(msg.id, newContent)}\r\n-            onReact={(emoji: string) => handleReact(msg.id, emoji)}\r\n-          />\r\n-        ))}\r\n-        {partnerTyping && <TypingIndicator name={partnerName} />}\r\n-        <div ref={messagesEndRef} />\r\n-      </div>\r\n-\r\n-      {/* Emoji Picker */}\r\n-      {showEmojiPicker && (\r\n-        <div className=\"absolute bottom-20 left-2 sm:left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n-          {topEmojis.map((emoji) => (\r\n-            <button\r\n-              key={emoji}\r\n-              onClick={() => setInput((prev) => prev + emoji)}\r\n-              className=\"text-2xl hover:scale-125 transition-transform\"\r\n-            >\r\n-              {emoji}\r\n-            </button>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-\r\n-      {/* Input Bar */}\r\n-      <div className=\"border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 bg-white dark:bg-neutral-900\">\r\n-        <button\r\n-          onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n-          className=\"text-2xl hover:scale-110 transition-transform\"\r\n-        >\r\n-          😊\r\n-        </button>\r\n-        <input\r\n-          type=\"text\"\r\n-          placeholder=\"Type a message...\"\r\n-          value={input}\r\n-          onChange={(e) => {\r\n-            setInput(e.target.value);\r\n-            debouncedTyping();\r\n-          }}\r\n-          onKeyDown={(e) => e.key === \"Enter\" && sendMessage(input, \"text\")}\r\n-          className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 text-sm px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n-        />\r\n-        <label className=\"cursor-pointer text-xl\" title=\"Send file\">\r\n-          📎\r\n-          <input\r\n-            type=\"file\"\r\n-            accept=\"image/*,audio/*,video/*\"\r\n-            hidden\r\n-            onChange={handleFile}\r\n-          />\r\n-        </label>\r\n-        <button\r\n-          onClick={() => sendMessage(input, \"text\")}\r\n-          disabled={!input.trim()}\r\n-          className=\"bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 text-sm rounded-lg disabled:opacity-50 transition\"\r\n-        >\r\n-          Send\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1759947725826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,31 +13,21 @@\n   socket: any;\r\n   roomId: string;\r\n   userId: string;\r\n   soundOn?: boolean;\r\n-  partnerName?: string;\r\n-  partnerAge?: string | number;\r\n-  partnerCountry?: string;\r\n }\r\n \r\n const topEmojis = [\r\n   \"😀\",\"😂\",\"😍\",\"🤣\",\"😊\",\"😭\",\"🥰\",\"😎\",\"👍\",\"🙏\",\r\n   \"😘\",\"😅\",\"🎉\",\"🤔\",\"🙄\",\"😢\",\"🔥\",\"💯\",\"❤️\",\"👏\"\r\n ];\r\n \r\n-export default function ChatBox({\r\n-  socket,\r\n-  roomId,\r\n-  userId,\r\n-  soundOn = true,\r\n-  partnerName = \"Stranger\",\r\n-  partnerAge,\r\n-  partnerCountry,\r\n-}: ChatBoxProps) {\r\n+export default function ChatBox({ socket, roomId, userId, soundOn = true }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n   const [partnerTyping, setPartnerTyping] = useState(false);\r\n+  const [partnerInfo, setPartnerInfo] = useState<{ name?: string; age?: number | string; country?: string }>({});\r\n   const messagesEndRef = useRef<HTMLDivElement>(null);\r\n \r\n   const sentSoundRef = useRef<HTMLAudioElement>(null);\r\n   const receiveSoundRef = useRef<HTMLAudioElement>(null);\r\n@@ -61,9 +51,9 @@\n   useEffect(() => {\r\n     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n   }, [messages, partnerTyping]);\r\n \r\n-  // ------------------ FIREBASE LISTENER ------------------\r\n+  // ------------------ FETCH MESSAGES ------------------\r\n   useEffect(() => {\r\n     if (!roomId) return;\r\n     const messagesRef = ref(database, `rooms/${roomId}/messages`);\r\n     onValue(messagesRef, (snapshot) => {\r\n@@ -75,8 +65,32 @@\n     });\r\n     return () => off(messagesRef);\r\n   }, [roomId]);\r\n \r\n+  // ------------------ FETCH PARTNER INFO ------------------\r\n+  useEffect(() => {\r\n+    if (!roomId || !userId) return;\r\n+\r\n+    const participantsRef = ref(database, `rooms/${roomId}/participants`);\r\n+    onValue(participantsRef, (snapshot) => {\r\n+      const participants = snapshot.val() || {};\r\n+      const partnerId = Object.keys(participants).find((id) => id !== userId);\r\n+      if (!partnerId) return;\r\n+\r\n+      const userRef = ref(database, `users/${partnerId}`);\r\n+      onValue(userRef, (userSnap) => {\r\n+        const data = userSnap.val();\r\n+        setPartnerInfo({\r\n+          name: data?.name || \"Stranger\",\r\n+          age: data?.age,\r\n+          country: data?.country,\r\n+        });\r\n+      });\r\n+    });\r\n+\r\n+    return () => off(participantsRef);\r\n+  }, [roomId, userId]);\r\n+\r\n   // ------------------ SOCKET EVENTS ------------------\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n@@ -132,12 +146,9 @@\n     }, 400)\r\n   ).current;\r\n \r\n   // ------------------ SEND MESSAGE ------------------\r\n-  const sendMessage = async (\r\n-    content: string,\r\n-    type: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\" = \"text\"\r\n-  ) => {\r\n+  const sendMessage = async (content: string, type: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\" = \"text\") => {\r\n     if (!content.trim() || !roomId) return;\r\n \r\n     const msgId = uuidv4();\r\n     const msg = {\r\n@@ -150,10 +161,11 @@\n       reactions: {},\r\n     };\r\n \r\n     try {\r\n-      // Save only to Firebase (Socket does not resend messages)\r\n       await set(ref(database, `rooms/${roomId}/messages/${msgId}`), msg);\r\n+      socket.emit(\"send-message\", { roomId, message: msg });\r\n+      setMessages((prev) => [...prev, msg]);\r\n       playSound(\"sent\");\r\n       setInput(\"\");\r\n       setShowEmojiPicker(false);\r\n     } catch (err) {\r\n@@ -180,11 +192,9 @@\n     socket.emit(\"delete-message\", { roomId, messageId: msgId });\r\n   };\r\n \r\n   const handleEdit = (msgId: string, newContent: string) => {\r\n-    update(ref(database, `rooms/${roomId}/messages/${msgId}`), {\r\n-      content: newContent,\r\n-    }).catch(console.error);\r\n+    update(ref(database, `rooms/${roomId}/messages/${msgId}`), { content: newContent }).catch(console.error);\r\n     socket.emit(\"edit-message\", { roomId, messageId: msgId, content: newContent });\r\n   };\r\n \r\n   const handleReact = (msgId: string, emoji: string) => {\r\n@@ -199,14 +209,12 @@\n       <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n \r\n       {/* Partner Info */}\r\n       <div className=\"px-4 py-2 border-b text-sm bg-white dark:bg-neutral-900 dark:border-neutral-700\">\r\n-        <span className=\"font-medium text-blue-600 dark:text-blue-400\">{partnerName}</span>\r\n-        {partnerAge && <span className=\"ml-1\">({partnerAge})</span>}\r\n-        {partnerCountry && (\r\n-          <span className=\"ml-2 text-neutral-500 dark:text-neutral-400\">\r\n-            from {partnerCountry}\r\n-          </span>\r\n+        <span className=\"font-medium text-blue-600 dark:text-blue-400\">{partnerInfo.name || \"Stranger\"}</span>\r\n+        {partnerInfo.age && <span className=\"ml-1\">({partnerInfo.age})</span>}\r\n+        {partnerInfo.country && (\r\n+          <span className=\"ml-2 text-neutral-500 dark:text-neutral-400\">from {partnerInfo.country}</span>\r\n         )}\r\n       </div>\r\n \r\n       {/* Messages */}\r\n@@ -215,17 +223,17 @@\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n             sender={msg.sender === userId ? \"me\" : \"partner\"}\r\n-            name={msg.sender === userId ? undefined : partnerName}\r\n-            age={msg.sender === userId ? undefined : partnerAge}\r\n-            country={msg.sender === userId ? undefined : partnerCountry}\r\n+            name={msg.sender === userId ? undefined : partnerInfo.name}\r\n+            age={msg.sender === userId ? undefined : partnerInfo.age}\r\n+            country={msg.sender === userId ? undefined : partnerInfo.country}\r\n             onDelete={() => handleDelete(msg.id)}\r\n-            onEdit={(newContent: string) => handleEdit(msg.id, newContent)}\r\n-            onReact={(emoji: string) => handleReact(msg.id, emoji)}\r\n+            onEdit={(newContent) => handleEdit(msg.id, newContent)}\r\n+            onReact={(emoji) => handleReact(msg.id, emoji)}\r\n           />\r\n         ))}\r\n-        {partnerTyping && <TypingIndicator name={partnerName} />}\r\n+        {partnerTyping && <TypingIndicator name={partnerInfo.name || \"Stranger\"} />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n       {/* Emoji Picker */}\r\n@@ -244,36 +252,23 @@\n       )}\r\n \r\n       {/* Input Bar */}\r\n       <div className=\"border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 bg-white dark:bg-neutral-900\">\r\n-        <button\r\n-          onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n-          className=\"text-2xl hover:scale-110 transition-transform\"\r\n-        >\r\n-          😊\r\n-        </button>\r\n+        <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-2xl hover:scale-110 transition-transform\">😊</button>\r\n         <input\r\n           type=\"text\"\r\n           placeholder=\"Type a message...\"\r\n           value={input}\r\n-          onChange={(e) => {\r\n-            setInput(e.target.value);\r\n-            debouncedTyping();\r\n-          }}\r\n-          onKeyDown={(e) => e.key === \"Enter\" && sendMessage(input, \"text\")}\r\n+          onChange={(e) => { setInput(e.target.value); debouncedTyping(); }}\r\n+          onKeyDown={(e) => e.key === \"Enter\" && sendMessage(input)}\r\n           className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 text-sm px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n         />\r\n         <label className=\"cursor-pointer text-xl\" title=\"Send file\">\r\n           📎\r\n-          <input\r\n-            type=\"file\"\r\n-            accept=\"image/*,audio/*,video/*\"\r\n-            hidden\r\n-            onChange={handleFile}\r\n-          />\r\n+          <input type=\"file\" accept=\"image/*,audio/*,video/*\" hidden onChange={handleFile} />\r\n         </label>\r\n         <button\r\n-          onClick={() => sendMessage(input, \"text\")}\r\n+          onClick={() => sendMessage(input)}\r\n           disabled={!input.trim()}\r\n           className=\"bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 text-sm rounded-lg disabled:opacity-50 transition\"\r\n         >\r\n           Send\r\n"
                },
                {
                    "date": 1759948438289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,11 @@\n   socket: any;\r\n   roomId: string;\r\n   userId: string;\r\n   soundOn?: boolean;\r\n+  partnerName?: string;          // ✅ Make sure this exists\r\n+  partnerAge?: string | number;  // ✅ Make sure this exists\r\n+  partnerCountry?: string;       // ✅ Make sure this exists\r\n }\r\n \r\n const topEmojis = [\r\n   \"😀\",\"😂\",\"😍\",\"🤣\",\"😊\",\"😭\",\"🥰\",\"😎\",\"👍\",\"🙏\",\r\n"
                },
                {
                    "date": 1759970159459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,34 +149,37 @@\n     }, 400)\r\n   ).current;\r\n \r\n   // ------------------ SEND MESSAGE ------------------\r\n-  const sendMessage = async (content: string, type: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\" = \"text\") => {\r\n-    if (!content.trim() || !roomId) return;\r\n+const sendMessage = async (\r\n+  content: string,\r\n+  type: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\" = \"text\"\r\n+) => {\r\n+  if (!content.trim() || !roomId) return;\r\n \r\n-    const msgId = uuidv4();\r\n-    const msg = {\r\n-      id: msgId,\r\n-      sender: userId,\r\n-      content,\r\n-      timestamp: new Date().toISOString(),\r\n-      type,\r\n-      status: \"sent\",\r\n-      reactions: {},\r\n-    };\r\n-\r\n-    try {\r\n-      await set(ref(database, `rooms/${roomId}/messages/${msgId}`), msg);\r\n-      socket.emit(\"send-message\", { roomId, message: msg });\r\n-      setMessages((prev) => [...prev, msg]);\r\n-      playSound(\"sent\");\r\n-      setInput(\"\");\r\n-      setShowEmojiPicker(false);\r\n-    } catch (err) {\r\n-      console.error(\"Send error:\", err);\r\n-    }\r\n+  const msgId = uuidv4();\r\n+  const msg = {\r\n+    id: msgId,\r\n+    sender: userId,\r\n+    content,\r\n+    timestamp: new Date().toISOString(),\r\n+    type,\r\n+    status: \"sent\",\r\n+    reactions: {},\r\n   };\r\n \r\n+  try {\r\n+    await set(ref(database, `rooms/${roomId}/messages/${msgId}`), msg);\r\n+    socket.emit(\"send-message\", { roomId, message: msg });\r\n+    playSound(\"sent\");\r\n+    setInput(\"\");\r\n+    setShowEmojiPicker(false);\r\n+  } catch (err) {\r\n+    console.error(\"Send error:\", err);\r\n+  }\r\n+};\r\n+\r\n+\r\n   // ------------------ FILE UPLOAD ------------------\r\n   const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n     const file = e.target.files?.[0];\r\n     if (!file) return;\r\n"
                },
                {
                    "date": 1759970470211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,26 +13,35 @@\n   socket: any;\r\n   roomId: string;\r\n   userId: string;\r\n   soundOn?: boolean;\r\n-  partnerName?: string;          // ✅ Make sure this exists\r\n-  partnerAge?: string | number;  // ✅ Make sure this exists\r\n-  partnerCountry?: string;       // ✅ Make sure this exists\r\n+  partnerName?: string;\r\n+  partnerAge?: string | number;\r\n+  partnerCountry?: string;\r\n }\r\n \r\n const topEmojis = [\r\n-  \"😀\",\"😂\",\"😍\",\"🤣\",\"😊\",\"😭\",\"🥰\",\"😎\",\"👍\",\"🙏\",\r\n-  \"😘\",\"😅\",\"🎉\",\"🤔\",\"🙄\",\"😢\",\"🔥\",\"💯\",\"❤️\",\"👏\"\r\n+  \"😀\", \"😂\", \"😍\", \"🤣\", \"😊\", \"😭\", \"🥰\", \"😎\", \"👍\", \"🙏\",\r\n+  \"😘\", \"😅\", \"🎉\", \"🤔\", \"🙄\", \"😢\", \"🔥\", \"💯\", \"❤️\", \"👏\",\r\n ];\r\n \r\n-export default function ChatBox({ socket, roomId, userId, soundOn = true }: ChatBoxProps) {\r\n+export default function ChatBox({\r\n+  socket,\r\n+  roomId,\r\n+  userId,\r\n+  soundOn = true,\r\n+}: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n   const [partnerTyping, setPartnerTyping] = useState(false);\r\n-  const [partnerInfo, setPartnerInfo] = useState<{ name?: string; age?: number | string; country?: string }>({});\r\n+  const [partnerInfo, setPartnerInfo] = useState<{\r\n+    name?: string;\r\n+    age?: number | string;\r\n+    country?: string;\r\n+  }>({});\r\n+\r\n   const messagesEndRef = useRef<HTMLDivElement>(null);\r\n-\r\n   const sentSoundRef = useRef<HTMLAudioElement>(null);\r\n   const receiveSoundRef = useRef<HTMLAudioElement>(null);\r\n \r\n   // ------------------ PLAY SOUND ------------------\r\n@@ -61,9 +70,10 @@\n     const messagesRef = ref(database, `rooms/${roomId}/messages`);\r\n     onValue(messagesRef, (snapshot) => {\r\n       const data = snapshot.val() || {};\r\n       const msgs = Object.values(data).sort(\r\n-        (a: any, b: any) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n+        (a: any, b: any) =>\r\n+          new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n       );\r\n       setMessages(msgs);\r\n     });\r\n     return () => off(messagesRef);\r\n@@ -71,49 +81,63 @@\n \r\n   // ------------------ FETCH PARTNER INFO ------------------\r\n   useEffect(() => {\r\n     if (!roomId || !userId) return;\r\n-\r\n     const participantsRef = ref(database, `rooms/${roomId}/participants`);\r\n     onValue(participantsRef, (snapshot) => {\r\n       const participants = snapshot.val() || {};\r\n       const partnerId = Object.keys(participants).find((id) => id !== userId);\r\n       if (!partnerId) return;\r\n-\r\n       const userRef = ref(database, `users/${partnerId}`);\r\n       onValue(userRef, (userSnap) => {\r\n         const data = userSnap.val();\r\n         setPartnerInfo({\r\n-          name: data?.name || \"Stranger\",\r\n+          name: data?.name || data?.username || \"User\",\r\n           age: data?.age,\r\n           country: data?.country,\r\n         });\r\n       });\r\n     });\r\n-\r\n     return () => off(participantsRef);\r\n   }, [roomId, userId]);\r\n \r\n   // ------------------ SOCKET EVENTS ------------------\r\n   useEffect(() => {\r\n     if (!socket) return;\r\n \r\n-    // Typing indicator\r\n     const typingHandler = (data: { sender: string }) => {\r\n       if (data.sender !== userId) {\r\n         setPartnerTyping(true);\r\n         setTimeout(() => setPartnerTyping(false), 2500);\r\n       }\r\n     };\r\n     socket.on(\"typing\", typingHandler);\r\n \r\n-    // Message deleted\r\n+    const receiveHandler = ({ message }: { message: any }) => {\r\n+      setMessages((prev) => [...prev, { ...message, status: \"delivered\" }]);\r\n+      socket.emit(\"message-delivered\", { roomId, messageId: message.id });\r\n+      playSound(\"receive\");\r\n+    };\r\n+    socket.on(\"receive-message\", receiveHandler);\r\n+\r\n+    const statusHandler = ({\r\n+      messageId,\r\n+      status,\r\n+    }: {\r\n+      messageId: string;\r\n+      status: string;\r\n+    }) => {\r\n+      setMessages((prev) =>\r\n+        prev.map((m) => (m.id === messageId ? { ...m, status } : m))\r\n+      );\r\n+    };\r\n+    socket.on(\"message-status-update\", statusHandler);\r\n+\r\n     const deletedHandler = (data: { messageId: string }) => {\r\n       setMessages((prev) => prev.filter((m) => m.id !== data.messageId));\r\n     };\r\n     socket.on(\"message-deleted\", deletedHandler);\r\n \r\n-    // Message edited\r\n     const editedHandler = (data: { messageId: string; content: string }) => {\r\n       setMessages((prev) =>\r\n         prev.map((m) =>\r\n           m.id === data.messageId ? { ...m, content: data.content, edited: true } : m\r\n@@ -121,10 +145,13 @@\n       );\r\n     };\r\n     socket.on(\"message-edited\", editedHandler);\r\n \r\n-    // Message reacted\r\n-    const reactedHandler = (data: { messageId: string; reaction: string; user: string }) => {\r\n+    const reactedHandler = (data: {\r\n+      messageId: string;\r\n+      reaction: string;\r\n+      user: string;\r\n+    }) => {\r\n       setMessages((prev) =>\r\n         prev.map((m) =>\r\n           m.id === data.messageId\r\n             ? { ...m, reactions: { ...m.reactions, [data.user]: data.reaction } }\r\n@@ -135,13 +162,15 @@\n     socket.on(\"message-react\", reactedHandler);\r\n \r\n     return () => {\r\n       socket.off(\"typing\", typingHandler);\r\n+      socket.off(\"receive-message\", receiveHandler);\r\n+      socket.off(\"message-status-update\", statusHandler);\r\n       socket.off(\"message-deleted\", deletedHandler);\r\n       socket.off(\"message-edited\", editedHandler);\r\n       socket.off(\"message-react\", reactedHandler);\r\n     };\r\n-  }, [socket, userId]);\r\n+  }, [socket, userId, roomId]);\r\n \r\n   // ------------------ TYPING ------------------\r\n   const debouncedTyping = useRef(\r\n     debounce(() => {\r\n@@ -149,42 +178,49 @@\n     }, 400)\r\n   ).current;\r\n \r\n   // ------------------ SEND MESSAGE ------------------\r\n-const sendMessage = async (\r\n-  content: string,\r\n-  type: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\" = \"text\"\r\n-) => {\r\n-  if (!content.trim() || !roomId) return;\r\n-\r\n-  const msgId = uuidv4();\r\n-  const msg = {\r\n-    id: msgId,\r\n-    sender: userId,\r\n-    content,\r\n-    timestamp: new Date().toISOString(),\r\n-    type,\r\n-    status: \"sent\",\r\n-    reactions: {},\r\n+  const sendMessage = async (\r\n+    content: string,\r\n+    type: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\" = \"text\"\r\n+  ) => {\r\n+    if (!content.trim() || !roomId) return;\r\n+    const msgId = uuidv4();\r\n+    const msg = {\r\n+      id: msgId,\r\n+      sender: userId,\r\n+      content,\r\n+      timestamp: new Date().toISOString(),\r\n+      type,\r\n+      status: \"sent\",\r\n+      reactions: {},\r\n+    };\r\n+    try {\r\n+      await set(ref(database, `rooms/${roomId}/messages/${msgId}`), msg);\r\n+      socket.emit(\"send-message\", { roomId, message: msg });\r\n+      playSound(\"sent\");\r\n+      setInput(\"\");\r\n+      setShowEmojiPicker(false);\r\n+    } catch (err) {\r\n+      console.error(\"Send error:\", err);\r\n+    }\r\n   };\r\n \r\n-  try {\r\n-    await set(ref(database, `rooms/${roomId}/messages/${msgId}`), msg);\r\n-    socket.emit(\"send-message\", { roomId, message: msg });\r\n-    playSound(\"sent\");\r\n-    setInput(\"\");\r\n-    setShowEmojiPicker(false);\r\n-  } catch (err) {\r\n-    console.error(\"Send error:\", err);\r\n-  }\r\n-};\r\n+  // ------------------ MARK AS SEEN ------------------\r\n+  useEffect(() => {\r\n+    if (!socket || !roomId) return;\r\n+    const unseen = messages.filter(\r\n+      (m) => m.sender !== userId && m.status !== \"seen\"\r\n+    );\r\n+    unseen.forEach((m) => {\r\n+      socket.emit(\"message-seen\", { roomId, messageId: m.id });\r\n+    });\r\n+  }, [messages, socket, roomId, userId]);\r\n \r\n-\r\n   // ------------------ FILE UPLOAD ------------------\r\n   const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n     const file = e.target.files?.[0];\r\n     if (!file) return;\r\n-\r\n     const reader = new FileReader();\r\n     reader.onload = () => {\r\n       const base64 = reader.result as string;\r\n       sendMessage(base64, file.type.startsWith(\"image\") ? \"image\" : \"file\");\r\n@@ -198,15 +234,22 @@\n     socket.emit(\"delete-message\", { roomId, messageId: msgId });\r\n   };\r\n \r\n   const handleEdit = (msgId: string, newContent: string) => {\r\n-    update(ref(database, `rooms/${roomId}/messages/${msgId}`), { content: newContent }).catch(console.error);\r\n+    update(ref(database, `rooms/${roomId}/messages/${msgId}`), {\r\n+      content: newContent,\r\n+    }).catch(console.error);\r\n     socket.emit(\"edit-message\", { roomId, messageId: msgId, content: newContent });\r\n   };\r\n \r\n   const handleReact = (msgId: string, emoji: string) => {\r\n     set(ref(database, `rooms/${roomId}/messages/${msgId}/reactions/${userId}`), emoji).catch(console.error);\r\n-    socket.emit(\"react-message\", { roomId, messageId: msgId, reaction: emoji, user: userId });\r\n+    socket.emit(\"react-message\", {\r\n+      roomId,\r\n+      messageId: msgId,\r\n+      reaction: emoji,\r\n+      user: userId,\r\n+    });\r\n   };\r\n \r\n   // ------------------ RENDER ------------------\r\n   return (\r\n@@ -215,12 +258,16 @@\n       <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n \r\n       {/* Partner Info */}\r\n       <div className=\"px-4 py-2 border-b text-sm bg-white dark:bg-neutral-900 dark:border-neutral-700\">\r\n-        <span className=\"font-medium text-blue-600 dark:text-blue-400\">{partnerInfo.name || \"Stranger\"}</span>\r\n+        <span className=\"font-medium text-blue-600 dark:text-blue-400\">\r\n+          {partnerInfo.name || \"User\"}\r\n+        </span>\r\n         {partnerInfo.age && <span className=\"ml-1\">({partnerInfo.age})</span>}\r\n         {partnerInfo.country && (\r\n-          <span className=\"ml-2 text-neutral-500 dark:text-neutral-400\">from {partnerInfo.country}</span>\r\n+          <span className=\"ml-2 text-neutral-500 dark:text-neutral-400\">\r\n+            from {partnerInfo.country}\r\n+          </span>\r\n         )}\r\n       </div>\r\n \r\n       {/* Messages */}\r\n@@ -237,9 +284,9 @@\n             onEdit={(newContent) => handleEdit(msg.id, newContent)}\r\n             onReact={(emoji) => handleReact(msg.id, emoji)}\r\n           />\r\n         ))}\r\n-        {partnerTyping && <TypingIndicator name={partnerInfo.name || \"Stranger\"} />}\r\n+        {partnerTyping && <TypingIndicator name={partnerInfo.name || \"User\"} />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n       {/* Emoji Picker */}\r\n@@ -258,20 +305,33 @@\n       )}\r\n \r\n       {/* Input Bar */}\r\n       <div className=\"border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 bg-white dark:bg-neutral-900\">\r\n-        <button onClick={() => setShowEmojiPicker((prev) => !prev)} className=\"text-2xl hover:scale-110 transition-transform\">😊</button>\r\n+        <button\r\n+          onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n+          className=\"text-2xl hover:scale-110 transition-transform\"\r\n+        >\r\n+          😊\r\n+        </button>\r\n         <input\r\n           type=\"text\"\r\n           placeholder=\"Type a message...\"\r\n           value={input}\r\n-          onChange={(e) => { setInput(e.target.value); debouncedTyping(); }}\r\n+          onChange={(e) => {\r\n+            setInput(e.target.value);\r\n+            debouncedTyping();\r\n+          }}\r\n           onKeyDown={(e) => e.key === \"Enter\" && sendMessage(input)}\r\n           className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 text-sm px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n         />\r\n         <label className=\"cursor-pointer text-xl\" title=\"Send file\">\r\n           📎\r\n-          <input type=\"file\" accept=\"image/*,audio/*,video/*\" hidden onChange={handleFile} />\r\n+          <input\r\n+            type=\"file\"\r\n+            accept=\"image/*,audio/*,video/*\"\r\n+            hidden\r\n+            onChange={handleFile}\r\n+          />\r\n         </label>\r\n         <button\r\n           onClick={() => sendMessage(input)}\r\n           disabled={!input.trim()}\r\n"
                },
                {
                    "date": 1759970786175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,158 +28,110 @@\n   socket,\r\n   roomId,\r\n   userId,\r\n   soundOn = true,\r\n+  partnerName = \"Stranger\",\r\n+  partnerAge,\r\n+  partnerCountry,\r\n }: ChatBoxProps) {\r\n   const [messages, setMessages] = useState<any[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n   const [partnerTyping, setPartnerTyping] = useState(false);\r\n-  const [partnerInfo, setPartnerInfo] = useState<{\r\n-    name?: string;\r\n-    age?: number | string;\r\n-    country?: string;\r\n-  }>({});\r\n \r\n   const messagesEndRef = useRef<HTMLDivElement>(null);\r\n   const sentSoundRef = useRef<HTMLAudioElement>(null);\r\n   const receiveSoundRef = useRef<HTMLAudioElement>(null);\r\n \r\n-  // ------------------ PLAY SOUND ------------------\r\n+  // ---------- PLAY SOUND ----------\r\n   const playSound = async (type: \"sent\" | \"receive\") => {\r\n     if (!soundOn) return;\r\n     try {\r\n       const ref = type === \"sent\" ? sentSoundRef : receiveSoundRef;\r\n-      const audio = ref.current;\r\n-      if (audio) {\r\n-        audio.volume = 0.8;\r\n-        await audio.play();\r\n-      }\r\n+      await ref.current?.play();\r\n     } catch (err) {\r\n       console.warn(\"Audio playback issue:\", err);\r\n     }\r\n   };\r\n \r\n-  // ------------------ AUTO SCROLL ------------------\r\n+  // ---------- AUTO SCROLL ----------\r\n   useEffect(() => {\r\n     messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n   }, [messages, partnerTyping]);\r\n \r\n-  // ------------------ FETCH MESSAGES ------------------\r\n+  // ---------- FETCH MESSAGES (Firebase) ----------\r\n   useEffect(() => {\r\n     if (!roomId) return;\r\n     const messagesRef = ref(database, `rooms/${roomId}/messages`);\r\n     onValue(messagesRef, (snapshot) => {\r\n       const data = snapshot.val() || {};\r\n       const msgs = Object.values(data).sort(\r\n-        (a: any, b: any) =>\r\n-          new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n+        (a: any, b: any) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n       );\r\n       setMessages(msgs);\r\n     });\r\n     return () => off(messagesRef);\r\n   }, [roomId]);\r\n \r\n-  // ------------------ FETCH PARTNER INFO ------------------\r\n+  // ---------- SOCKET EVENTS ----------\r\n   useEffect(() => {\r\n-    if (!roomId || !userId) return;\r\n-    const participantsRef = ref(database, `rooms/${roomId}/participants`);\r\n-    onValue(participantsRef, (snapshot) => {\r\n-      const participants = snapshot.val() || {};\r\n-      const partnerId = Object.keys(participants).find((id) => id !== userId);\r\n-      if (!partnerId) return;\r\n-      const userRef = ref(database, `users/${partnerId}`);\r\n-      onValue(userRef, (userSnap) => {\r\n-        const data = userSnap.val();\r\n-        setPartnerInfo({\r\n-          name: data?.name || data?.username || \"User\",\r\n-          age: data?.age,\r\n-          country: data?.country,\r\n-        });\r\n-      });\r\n-    });\r\n-    return () => off(participantsRef);\r\n-  }, [roomId, userId]);\r\n-\r\n-  // ------------------ SOCKET EVENTS ------------------\r\n-  useEffect(() => {\r\n     if (!socket) return;\r\n \r\n-    const typingHandler = (data: { sender: string }) => {\r\n-      if (data.sender !== userId) {\r\n+    socket.on(\"typing\", ({ sender }: { sender: string }) => {\r\n+      if (sender !== userId) {\r\n         setPartnerTyping(true);\r\n-        setTimeout(() => setPartnerTyping(false), 2500);\r\n+        setTimeout(() => setPartnerTyping(false), 2000);\r\n       }\r\n-    };\r\n-    socket.on(\"typing\", typingHandler);\r\n+    });\r\n \r\n-    const receiveHandler = ({ message }: { message: any }) => {\r\n-      setMessages((prev) => [...prev, { ...message, status: \"delivered\" }]);\r\n-      socket.emit(\"message-delivered\", { roomId, messageId: message.id });\r\n+    socket.on(\"receive-message\", (msg: any) => {\r\n+      setMessages((prev) => [...prev, { ...msg, status: \"delivered\" }]);\r\n+      socket.emit(\"seen-message\", { roomId, messageId: msg.id }); // mark seen\r\n       playSound(\"receive\");\r\n-    };\r\n-    socket.on(\"receive-message\", receiveHandler);\r\n+    });\r\n \r\n-    const statusHandler = ({\r\n-      messageId,\r\n-      status,\r\n-    }: {\r\n-      messageId: string;\r\n-      status: string;\r\n-    }) => {\r\n+    socket.on(\"message-status-update\", ({ messageId, status }: any) => {\r\n       setMessages((prev) =>\r\n         prev.map((m) => (m.id === messageId ? { ...m, status } : m))\r\n       );\r\n-    };\r\n-    socket.on(\"message-status-update\", statusHandler);\r\n+    });\r\n \r\n-    const deletedHandler = (data: { messageId: string }) => {\r\n-      setMessages((prev) => prev.filter((m) => m.id !== data.messageId));\r\n-    };\r\n-    socket.on(\"message-deleted\", deletedHandler);\r\n+    socket.on(\"message-deleted\", ({ messageId }: any) => {\r\n+      setMessages((prev) => prev.filter((m) => m.id !== messageId));\r\n+    });\r\n \r\n-    const editedHandler = (data: { messageId: string; content: string }) => {\r\n+    socket.on(\"message-edited\", ({ id, content }: any) => {\r\n       setMessages((prev) =>\r\n-        prev.map((m) =>\r\n-          m.id === data.messageId ? { ...m, content: data.content, edited: true } : m\r\n-        )\r\n+        prev.map((m) => (m.id === id ? { ...m, content, edited: true } : m))\r\n       );\r\n-    };\r\n-    socket.on(\"message-edited\", editedHandler);\r\n+    });\r\n \r\n-    const reactedHandler = (data: {\r\n-      messageId: string;\r\n-      reaction: string;\r\n-      user: string;\r\n-    }) => {\r\n+    socket.on(\"message-react\", ({ messageId, reaction, user }: any) => {\r\n       setMessages((prev) =>\r\n         prev.map((m) =>\r\n-          m.id === data.messageId\r\n-            ? { ...m, reactions: { ...m.reactions, [data.user]: data.reaction } }\r\n+          m.id === messageId\r\n+            ? { ...m, reactions: { ...m.reactions, [user]: reaction } }\r\n             : m\r\n         )\r\n       );\r\n-    };\r\n-    socket.on(\"message-react\", reactedHandler);\r\n+    });\r\n \r\n     return () => {\r\n-      socket.off(\"typing\", typingHandler);\r\n-      socket.off(\"receive-message\", receiveHandler);\r\n-      socket.off(\"message-status-update\", statusHandler);\r\n-      socket.off(\"message-deleted\", deletedHandler);\r\n-      socket.off(\"message-edited\", editedHandler);\r\n-      socket.off(\"message-react\", reactedHandler);\r\n+      socket.off(\"typing\");\r\n+      socket.off(\"receive-message\");\r\n+      socket.off(\"message-status-update\");\r\n+      socket.off(\"message-deleted\");\r\n+      socket.off(\"message-edited\");\r\n+      socket.off(\"message-react\");\r\n     };\r\n-  }, [socket, userId, roomId]);\r\n+  }, [socket, roomId, userId]);\r\n \r\n-  // ------------------ TYPING ------------------\r\n+  // ---------- TYPING ----------\r\n   const debouncedTyping = useRef(\r\n-    debounce(() => {\r\n-      socket.emit(\"typing\", { roomId, sender: userId });\r\n-    }, 400)\r\n+    debounce(() => socket.emit(\"typing\", { roomId, sender: userId }), 400)\r\n   ).current;\r\n \r\n-  // ------------------ SEND MESSAGE ------------------\r\n+  // ---------- SEND MESSAGE ----------\r\n   const sendMessage = async (\r\n     content: string,\r\n     type: \"text\" | \"image\" | \"audio\" | \"video\" | \"file\" = \"text\"\r\n   ) => {\r\n@@ -193,31 +145,16 @@\n       type,\r\n       status: \"sent\",\r\n       reactions: {},\r\n     };\r\n-    try {\r\n-      await set(ref(database, `rooms/${roomId}/messages/${msgId}`), msg);\r\n-      socket.emit(\"send-message\", { roomId, message: msg });\r\n-      playSound(\"sent\");\r\n-      setInput(\"\");\r\n-      setShowEmojiPicker(false);\r\n-    } catch (err) {\r\n-      console.error(\"Send error:\", err);\r\n-    }\r\n+    await set(ref(database, `rooms/${roomId}/messages/${msgId}`), msg);\r\n+    socket.emit(\"send-message\", { roomId, ...msg });\r\n+    playSound(\"sent\");\r\n+    setInput(\"\");\r\n+    setShowEmojiPicker(false);\r\n   };\r\n \r\n-  // ------------------ MARK AS SEEN ------------------\r\n-  useEffect(() => {\r\n-    if (!socket || !roomId) return;\r\n-    const unseen = messages.filter(\r\n-      (m) => m.sender !== userId && m.status !== \"seen\"\r\n-    );\r\n-    unseen.forEach((m) => {\r\n-      socket.emit(\"message-seen\", { roomId, messageId: m.id });\r\n-    });\r\n-  }, [messages, socket, roomId, userId]);\r\n-\r\n-  // ------------------ FILE UPLOAD ------------------\r\n+  // ---------- HANDLE FILE ----------\r\n   const handleFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n     const file = e.target.files?.[0];\r\n     if (!file) return;\r\n     const reader = new FileReader();\r\n@@ -227,72 +164,63 @@\n     };\r\n     reader.readAsDataURL(file);\r\n   };\r\n \r\n-  // ------------------ DELETE / EDIT / REACT ------------------\r\n-  const handleDelete = (msgId: string) => {\r\n-    remove(ref(database, `rooms/${roomId}/messages/${msgId}`)).catch(console.error);\r\n-    socket.emit(\"delete-message\", { roomId, messageId: msgId });\r\n+  // ---------- DELETE / EDIT / REACT ----------\r\n+  const handleDelete = (id: string) => {\r\n+    remove(ref(database, `rooms/${roomId}/messages/${id}`));\r\n+    socket.emit(\"delete-message\", { roomId, messageId: id });\r\n   };\r\n \r\n-  const handleEdit = (msgId: string, newContent: string) => {\r\n-    update(ref(database, `rooms/${roomId}/messages/${msgId}`), {\r\n-      content: newContent,\r\n-    }).catch(console.error);\r\n-    socket.emit(\"edit-message\", { roomId, messageId: msgId, content: newContent });\r\n+  const handleEdit = (id: string, content: string) => {\r\n+    update(ref(database, `rooms/${roomId}/messages/${id}`), { content });\r\n+    socket.emit(\"edit-message\", { roomId, messageId: id, content });\r\n   };\r\n \r\n-  const handleReact = (msgId: string, emoji: string) => {\r\n-    set(ref(database, `rooms/${roomId}/messages/${msgId}/reactions/${userId}`), emoji).catch(console.error);\r\n-    socket.emit(\"react-message\", {\r\n-      roomId,\r\n-      messageId: msgId,\r\n-      reaction: emoji,\r\n-      user: userId,\r\n-    });\r\n+  const handleReact = (id: string, emoji: string) => {\r\n+    set(ref(database, `rooms/${roomId}/messages/${id}/reactions/${userId}`), emoji);\r\n+    socket.emit(\"react-message\", { roomId, messageId: id, reaction: emoji, user: userId });\r\n   };\r\n \r\n-  // ------------------ RENDER ------------------\r\n+  // ---------- RENDER ----------\r\n   return (\r\n     <div className=\"flex flex-col h-full bg-white dark:bg-neutral-900 relative\">\r\n       <audio ref={sentSoundRef} src=\"/sounds/sent.mp3\" preload=\"auto\" />\r\n       <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n \r\n-      {/* Partner Info */}\r\n+      {/* Header */}\r\n       <div className=\"px-4 py-2 border-b text-sm bg-white dark:bg-neutral-900 dark:border-neutral-700\">\r\n         <span className=\"font-medium text-blue-600 dark:text-blue-400\">\r\n-          {partnerInfo.name || \"User\"}\r\n+          {partnerName}\r\n         </span>\r\n-        {partnerInfo.age && <span className=\"ml-1\">({partnerInfo.age})</span>}\r\n-        {partnerInfo.country && (\r\n+        {partnerAge && <span className=\"ml-1\">({partnerAge})</span>}\r\n+        {partnerCountry && (\r\n           <span className=\"ml-2 text-neutral-500 dark:text-neutral-400\">\r\n-            from {partnerInfo.country}\r\n+            from {partnerCountry}\r\n           </span>\r\n         )}\r\n       </div>\r\n \r\n       {/* Messages */}\r\n-      <div className=\"flex-1 overflow-y-auto px-3 py-4 sm:px-4 space-y-3 scrollbar-thin scrollbar-thumb-blue-400 dark:scrollbar-thumb-blue-600\">\r\n+      <div className=\"flex-1 overflow-y-auto px-3 py-4 sm:px-4 space-y-3\">\r\n         {messages.map((msg) => (\r\n           <Message\r\n             key={msg.id}\r\n             {...msg}\r\n             sender={msg.sender === userId ? \"me\" : \"partner\"}\r\n-            name={msg.sender === userId ? undefined : partnerInfo.name}\r\n-            age={msg.sender === userId ? undefined : partnerInfo.age}\r\n-            country={msg.sender === userId ? undefined : partnerInfo.country}\r\n+            name={msg.sender === userId ? undefined : partnerName}\r\n             onDelete={() => handleDelete(msg.id)}\r\n             onEdit={(newContent) => handleEdit(msg.id, newContent)}\r\n             onReact={(emoji) => handleReact(msg.id, emoji)}\r\n           />\r\n         ))}\r\n-        {partnerTyping && <TypingIndicator name={partnerInfo.name || \"User\"} />}\r\n+        {partnerTyping && <TypingIndicator name={partnerName} />}\r\n         <div ref={messagesEndRef} />\r\n       </div>\r\n \r\n       {/* Emoji Picker */}\r\n       {showEmojiPicker && (\r\n-        <div className=\"absolute bottom-20 left-2 sm:left-4 z-50 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 sm:w-72 max-h-64 overflow-y-auto grid grid-cols-6 gap-2 scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700\">\r\n+        <div className=\"absolute bottom-20 left-3 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 max-h-64 overflow-y-auto grid grid-cols-6 gap-2\">\r\n           {topEmojis.map((emoji) => (\r\n             <button\r\n               key={emoji}\r\n               onClick={() => setInput((prev) => prev + emoji)}\r\n@@ -303,12 +231,12 @@\n           ))}\r\n         </div>\r\n       )}\r\n \r\n-      {/* Input Bar */}\r\n-      <div className=\"border-t dark:border-neutral-700 px-3 py-2 sm:px-4 sm:py-3 flex items-center gap-2 bg-white dark:bg-neutral-900\">\r\n+      {/* Input */}\r\n+      <div className=\"border-t px-3 py-2 flex items-center gap-2\">\r\n         <button\r\n-          onClick={() => setShowEmojiPicker((prev) => !prev)}\r\n+          onClick={() => setShowEmojiPicker((p) => !p)}\r\n           className=\"text-2xl hover:scale-110 transition-transform\"\r\n         >\r\n           😊\r\n         </button>\r\n@@ -320,23 +248,18 @@\n             setInput(e.target.value);\r\n             debouncedTyping();\r\n           }}\r\n           onKeyDown={(e) => e.key === \"Enter\" && sendMessage(input)}\r\n-          className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 border border-neutral-300 dark:border-neutral-600 text-sm px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n+          className=\"flex-1 bg-neutral-100 dark:bg-neutral-800 px-3 py-2 rounded-lg focus:outline-none\"\r\n         />\r\n         <label className=\"cursor-pointer text-xl\" title=\"Send file\">\r\n           📎\r\n-          <input\r\n-            type=\"file\"\r\n-            accept=\"image/*,audio/*,video/*\"\r\n-            hidden\r\n-            onChange={handleFile}\r\n-          />\r\n+          <input type=\"file\" accept=\"image/*,audio/*,video/*\" hidden onChange={handleFile} />\r\n         </label>\r\n         <button\r\n           onClick={() => sendMessage(input)}\r\n           disabled={!input.trim()}\r\n-          className=\"bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 text-sm rounded-lg disabled:opacity-50 transition\"\r\n+          className=\"bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-lg disabled:opacity-50\"\r\n         >\r\n           Send\r\n         </button>\r\n       </div>\r\n"
                },
                {
                    "date": 1759971418874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,16 +61,22 @@\n   // ---------- FETCH MESSAGES (Firebase) ----------\r\n   useEffect(() => {\r\n     if (!roomId) return;\r\n     const messagesRef = ref(database, `rooms/${roomId}/messages`);\r\n-    onValue(messagesRef, (snapshot) => {\r\n+    const handleValue = (snapshot: any) => {\r\n       const data = snapshot.val() || {};\r\n-      const msgs = Object.values(data).sort(\r\n-        (a: any, b: any) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n-      );\r\n+      const msgs = Object.values(data)\r\n+        .map((m: any) => ({\r\n+          ...m,\r\n+          timestamp: m.timestamp || new Date().toISOString(),\r\n+        }))\r\n+        .sort(\r\n+          (a: any, b: any) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n+        );\r\n       setMessages(msgs);\r\n-    });\r\n-    return () => off(messagesRef);\r\n+    };\r\n+    onValue(messagesRef, handleValue);\r\n+    return () => off(messagesRef, \"value\", handleValue);\r\n   }, [roomId]);\r\n \r\n   // ---------- SOCKET EVENTS ----------\r\n   useEffect(() => {\r\n@@ -83,10 +89,16 @@\n       }\r\n     });\r\n \r\n     socket.on(\"receive-message\", (msg: any) => {\r\n-      setMessages((prev) => [...prev, { ...msg, status: \"delivered\" }]);\r\n-      socket.emit(\"seen-message\", { roomId, messageId: msg.id }); // mark seen\r\n+      setMessages((prev) => {\r\n+        const newMsg = { ...msg, status: \"delivered\", timestamp: msg.timestamp || new Date().toISOString() };\r\n+        const updated = [...prev, newMsg].sort(\r\n+          (a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n+        );\r\n+        return updated;\r\n+      });\r\n+      socket.emit(\"seen-message\", { roomId, messageId: msg.id });\r\n       playSound(\"receive\");\r\n     });\r\n \r\n     socket.on(\"message-status-update\", ({ messageId, status }: any) => {\r\n@@ -126,9 +138,9 @@\n   }, [socket, roomId, userId]);\r\n \r\n   // ---------- TYPING ----------\r\n   const debouncedTyping = useRef(\r\n-    debounce(() => socket.emit(\"typing\", { roomId, sender: userId }), 400)\r\n+    debounce(() => socket?.emit(\"typing\", { roomId, sender: userId }), 400)\r\n   ).current;\r\n \r\n   // ---------- SEND MESSAGE ----------\r\n   const sendMessage = async (\r\n@@ -146,9 +158,9 @@\n       status: \"sent\",\r\n       reactions: {},\r\n     };\r\n     await set(ref(database, `rooms/${roomId}/messages/${msgId}`), msg);\r\n-    socket.emit(\"send-message\", { roomId, ...msg });\r\n+    socket?.emit(\"send-message\", { roomId, ...msg });\r\n     playSound(\"sent\");\r\n     setInput(\"\");\r\n     setShowEmojiPicker(false);\r\n   };\r\n@@ -167,19 +179,19 @@\n \r\n   // ---------- DELETE / EDIT / REACT ----------\r\n   const handleDelete = (id: string) => {\r\n     remove(ref(database, `rooms/${roomId}/messages/${id}`));\r\n-    socket.emit(\"delete-message\", { roomId, messageId: id });\r\n+    socket?.emit(\"delete-message\", { roomId, messageId: id });\r\n   };\r\n \r\n   const handleEdit = (id: string, content: string) => {\r\n     update(ref(database, `rooms/${roomId}/messages/${id}`), { content });\r\n-    socket.emit(\"edit-message\", { roomId, messageId: id, content });\r\n+    socket?.emit(\"edit-message\", { roomId, messageId: id, content });\r\n   };\r\n \r\n   const handleReact = (id: string, emoji: string) => {\r\n     set(ref(database, `rooms/${roomId}/messages/${id}/reactions/${userId}`), emoji);\r\n-    socket.emit(\"react-message\", { roomId, messageId: id, reaction: emoji, user: userId });\r\n+    socket?.emit(\"react-message\", { roomId, messageId: id, reaction: emoji, user: userId });\r\n   };\r\n \r\n   // ---------- RENDER ----------\r\n   return (\r\n@@ -188,17 +200,11 @@\n       <audio ref={receiveSoundRef} src=\"/sounds/receive.mp3\" preload=\"auto\" />\r\n \r\n       {/* Header */}\r\n       <div className=\"px-4 py-2 border-b text-sm bg-white dark:bg-neutral-900 dark:border-neutral-700\">\r\n-        <span className=\"font-medium text-blue-600 dark:text-blue-400\">\r\n-          {partnerName}\r\n-        </span>\r\n+        <span className=\"font-medium text-blue-600 dark:text-blue-400\">{partnerName}</span>\r\n         {partnerAge && <span className=\"ml-1\">({partnerAge})</span>}\r\n-        {partnerCountry && (\r\n-          <span className=\"ml-2 text-neutral-500 dark:text-neutral-400\">\r\n-            from {partnerCountry}\r\n-          </span>\r\n-        )}\r\n+        {partnerCountry && <span className=\"ml-2 text-neutral-500 dark:text-neutral-400\">from {partnerCountry}</span>}\r\n       </div>\r\n \r\n       {/* Messages */}\r\n       <div className=\"flex-1 overflow-y-auto px-3 py-4 sm:px-4 space-y-3\">\r\n@@ -220,25 +226,18 @@\n       {/* Emoji Picker */}\r\n       {showEmojiPicker && (\r\n         <div className=\"absolute bottom-20 left-3 bg-white dark:bg-neutral-800 border rounded-xl shadow-xl p-3 w-64 max-h-64 overflow-y-auto grid grid-cols-6 gap-2\">\r\n           {topEmojis.map((emoji) => (\r\n-            <button\r\n-              key={emoji}\r\n-              onClick={() => setInput((prev) => prev + emoji)}\r\n-              className=\"text-2xl hover:scale-125 transition-transform\"\r\n-            >\r\n+            <button key={emoji} onClick={() => setInput((prev) => prev + emoji)} className=\"text-2xl hover:scale-125 transition-transform\">\r\n               {emoji}\r\n             </button>\r\n           ))}\r\n         </div>\r\n       )}\r\n \r\n       {/* Input */}\r\n       <div className=\"border-t px-3 py-2 flex items-center gap-2\">\r\n-        <button\r\n-          onClick={() => setShowEmojiPicker((p) => !p)}\r\n-          className=\"text-2xl hover:scale-110 transition-transform\"\r\n-        >\r\n+        <button onClick={() => setShowEmojiPicker((p) => !p)} className=\"text-2xl hover:scale-110 transition-transform\">\r\n           😊\r\n         </button>\r\n         <input\r\n           type=\"text\"\r\n"
                }
            ],
            "date": 1752230234858,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport Message from \"./Message\";\r\n\r\ninterface ChatBoxProps {\r\n  socket: any;\r\n}\r\n\r\nexport default function ChatBox({ socket }: ChatBoxProps) {\r\n  const [messages, setMessages] = useState<{ content: string; sender: string }[]>([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    socket?.on(\"message\", (message: string) => {\r\n      setMessages((prev) => [...prev, { content: message, sender: \"partner\" }]);\r\n    });\r\n  }, [socket]);\r\n\r\n  const sendMessage = () => {\r\n    if (!input.trim()) return;\r\n    socket.emit(\"message\", input);\r\n    setMessages((prev) => [...prev, { content: input, sender: \"me\" }]);\r\n    setInput(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-full\">\r\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-2\">\r\n        {messages.map((msg, i) => (\r\n          <Message key={i} content={msg.content} sender={msg.sender as \"me\" | \"partner\"} />\r\n        ))}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      <div className=\"p-4 border-t border-neutral-300 dark:border-neutral-700 flex\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"flex-1 rounded-l-md px-3 py-2 text-sm focus:outline-none border border-neutral-300 dark:border-neutral-700 dark:bg-neutral-800\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type a message...\"\r\n        />\r\n        <button\r\n          onClick={sendMessage}\r\n          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-r-md text-sm transition\"\r\n        >\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}