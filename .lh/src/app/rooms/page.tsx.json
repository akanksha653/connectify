{
    "sourceFile": "src/app/rooms/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 25,
            "patches": [
                {
                    "date": 1758888366382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758889405116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,14 +25,18 @@\n     password: \"\",\r\n   });\r\n \r\n   useEffect(() => {\r\n-    // Connect to your signaling server (adjust URL if needed)\r\n+    // Connect to signaling server\r\n     socket = io(process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\", {\r\n       transports: [\"websocket\"],\r\n     });\r\n \r\n-    socket.emit(\"list-rooms\");\r\n+    socket.on(\"connect\", () => {\r\n+      console.log(\"✅ Connected to server:\", socket?.id);\r\n+      // Request room list once connected\r\n+      socket?.emit(\"list-rooms\");\r\n+    });\r\n \r\n     socket.on(\"rooms\", (data: Room[]) => setRooms(data));\r\n \r\n     socket.on(\"room-created\", (newRoom: Room) => {\r\n@@ -40,20 +44,23 @@\n     });\r\n \r\n     return () => {\r\n       socket?.disconnect();\r\n+      socket = null;\r\n     };\r\n   }, []);\r\n \r\n   const handleCreateRoom = () => {\r\n     if (!form.name || !form.topic) {\r\n       alert(\"Room name and topic are required\");\r\n       return;\r\n     }\r\n+\r\n     socket?.emit(\"create-room\", {\r\n       ...form,\r\n       password: form.password || null,\r\n     });\r\n+\r\n     setForm({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n     setShowModal(false);\r\n   };\r\n \r\n@@ -64,9 +71,8 @@\n       socket?.emit(\"join-room\", { roomId: room.id, password: pass });\r\n     } else {\r\n       socket?.emit(\"join-room\", { roomId: room.id });\r\n     }\r\n-    // Redirect to dedicated room page\r\n     window.location.href = `/rooms/${room.id}`;\r\n   };\r\n \r\n   return (\r\n@@ -115,10 +121,9 @@\n                   <button\r\n                     onClick={() => handleJoinRoom(room)}\r\n                     className=\"px-3 py-1 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm shadow-sm\"\r\n                   >\r\n-                    Join\r\n-                    {room.hasPassword ? \" 🔒\" : \"\"}\r\n+                    Join{room.hasPassword ? \" 🔒\" : \"\"}\r\n                   </button>\r\n                 </div>\r\n               </motion.div>\r\n             ))}\r\n@@ -159,9 +164,8 @@\n               className=\"w-full mb-4 px-4 py-2 rounded-md border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-800 text-neutral-900 dark:text-white\"\r\n               value={form.password}\r\n               onChange={(e) => setForm({ ...form, password: e.target.value })}\r\n             />\r\n-\r\n             <div className=\"flex justify-end gap-3\">\r\n               <button\r\n                 onClick={() => setShowModal(false)}\r\n                 className=\"px-4 py-2 bg-neutral-300 dark:bg-neutral-700 text-neutral-900 dark:text-white rounded-md\"\r\n"
                },
                {
                    "date": 1758892953239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,14 +2,15 @@\n \r\n import { useEffect, useState } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n import { motion } from \"framer-motion\";\r\n+import { v4 as uuidv4 } from \"uuid\";\r\n \r\n type Room = {\r\n   id: string;\r\n   name: string;\r\n   topic: string;\r\n-  description: string;\r\n+  description?: string;\r\n   userCount: number;\r\n   hasPassword: boolean;\r\n };\r\n \r\n@@ -32,9 +33,8 @@\n     });\r\n \r\n     socket.on(\"connect\", () => {\r\n       console.log(\"✅ Connected to server:\", socket?.id);\r\n-      // Request room list once connected\r\n       socket?.emit(\"list-rooms\");\r\n     });\r\n \r\n     socket.on(\"rooms\", (data: Room[]) => setRooms(data));\r\n@@ -42,36 +42,46 @@\n     socket.on(\"room-created\", (newRoom: Room) => {\r\n       setRooms((prev) => [...prev, newRoom]);\r\n     });\r\n \r\n+    socket.on(\"disconnect\", () => {\r\n+      console.log(\"⚠️ Disconnected from server\");\r\n+    });\r\n+\r\n     return () => {\r\n       socket?.disconnect();\r\n       socket = null;\r\n     };\r\n   }, []);\r\n \r\n   const handleCreateRoom = () => {\r\n-    if (!form.name || !form.topic) {\r\n+    if (!form.name.trim() || !form.topic.trim()) {\r\n       alert(\"Room name and topic are required\");\r\n       return;\r\n     }\r\n \r\n-    socket?.emit(\"create-room\", {\r\n-      ...form,\r\n+    const newRoom = {\r\n+      id: uuidv4(),\r\n+      name: form.name.trim(),\r\n+      topic: form.topic.trim(),\r\n+      description: form.description.trim(),\r\n+      hasPassword: !!form.password,\r\n+      userCount: 0,\r\n       password: form.password || null,\r\n-    });\r\n+    };\r\n \r\n+    socket?.emit(\"create-room\", newRoom);\r\n     setForm({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n     setShowModal(false);\r\n   };\r\n \r\n   const handleJoinRoom = (room: Room) => {\r\n     if (room.hasPassword) {\r\n-      const pass = prompt(\"Enter room password\");\r\n-      if (!pass) return;\r\n-      socket?.emit(\"join-room\", { roomId: room.id, password: pass });\r\n-    } else {\r\n-      socket?.emit(\"join-room\", { roomId: room.id });\r\n+      const pass = prompt(\"Enter room password:\");\r\n+      if (!pass || pass !== (room as any).password) {\r\n+        alert(\"Incorrect password!\");\r\n+        return;\r\n+      }\r\n     }\r\n     window.location.href = `/rooms/${room.id}`;\r\n   };\r\n \r\n"
                },
                {
                    "date": 1758893296985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n   topic: string;\r\n   description?: string;\r\n   userCount: number;\r\n   hasPassword: boolean;\r\n+  password?: string | null;\r\n };\r\n \r\n let socket: Socket | null = null;\r\n \r\n@@ -42,8 +43,14 @@\n     socket.on(\"room-created\", (newRoom: Room) => {\r\n       setRooms((prev) => [...prev, newRoom]);\r\n     });\r\n \r\n+    socket.on(\"room-updated\", (updatedRoom: Room) => {\r\n+      setRooms((prev) =>\r\n+        prev.map((r) => (r.id === updatedRoom.id ? updatedRoom : r))\r\n+      );\r\n+    });\r\n+\r\n     socket.on(\"disconnect\", () => {\r\n       console.log(\"⚠️ Disconnected from server\");\r\n     });\r\n \r\n@@ -58,9 +65,9 @@\n       alert(\"Room name and topic are required\");\r\n       return;\r\n     }\r\n \r\n-    const newRoom = {\r\n+    const newRoom: Room = {\r\n       id: uuidv4(),\r\n       name: form.name.trim(),\r\n       topic: form.topic.trim(),\r\n       description: form.description.trim(),\r\n@@ -76,9 +83,9 @@\n \r\n   const handleJoinRoom = (room: Room) => {\r\n     if (room.hasPassword) {\r\n       const pass = prompt(\"Enter room password:\");\r\n-      if (!pass || pass !== (room as any).password) {\r\n+      if (!pass || pass !== room.password) {\r\n         alert(\"Incorrect password!\");\r\n         return;\r\n       }\r\n     }\r\n"
                },
                {
                    "date": 1758902485637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n   id: string;\r\n   name: string;\r\n   topic: string;\r\n   description?: string;\r\n-  userCount: number;\r\n+  users: { id: string; userInfo: any }[];\r\n   hasPassword: boolean;\r\n   password?: string | null;\r\n };\r\n \r\n@@ -27,9 +27,8 @@\n     password: \"\",\r\n   });\r\n \r\n   useEffect(() => {\r\n-    // Connect to signaling server\r\n     socket = io(process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\", {\r\n       transports: [\"websocket\"],\r\n     });\r\n \r\n@@ -40,12 +39,12 @@\n \r\n     socket.on(\"rooms\", (data: Room[]) => setRooms(data));\r\n \r\n     socket.on(\"room-created\", (newRoom: Room) => {\r\n-      setRooms((prev) => [...prev, newRoom]);\r\n+      setRooms((prev) => [...prev, { ...newRoom, users: [] }]);\r\n     });\r\n \r\n-    socket.on(\"room-updated\", (updatedRoom: Room) => {\r\n+    socket.on(\"room-update\", (updatedRoom: Room) => {\r\n       setRooms((prev) =>\r\n         prev.map((r) => (r.id === updatedRoom.id ? updatedRoom : r))\r\n       );\r\n     });\r\n@@ -71,10 +70,10 @@\n       name: form.name.trim(),\r\n       topic: form.topic.trim(),\r\n       description: form.description.trim(),\r\n       hasPassword: !!form.password,\r\n-      userCount: 0,\r\n       password: form.password || null,\r\n+      users: [],\r\n     };\r\n \r\n     socket?.emit(\"create-room\", newRoom);\r\n     setForm({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n@@ -132,9 +131,9 @@\n                   </p>\r\n                 </div>\r\n                 <div className=\"flex items-center justify-between mt-4\">\r\n                   <span className=\"text-sm text-neutral-700 dark:text-neutral-300\">\r\n-                    {room.userCount} {room.userCount === 1 ? \"user\" : \"users\"}\r\n+                    {room.users.length} {room.users.length === 1 ? \"user\" : \"users\"}\r\n                   </span>\r\n                   <button\r\n                     onClick={() => handleJoinRoom(room)}\r\n                     className=\"px-3 py-1 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm shadow-sm\"\r\n@@ -147,9 +146,8 @@\n           </div>\r\n         )}\r\n       </div>\r\n \r\n-      {/* Create Room Modal */}\r\n       {showModal && (\r\n         <div className=\"fixed inset-0 flex items-center justify-center bg-black/50 z-50\">\r\n           <div className=\"bg-white dark:bg-neutral-900 p-6 rounded-xl shadow-xl w-full max-w-md\">\r\n             <h2 className=\"text-xl font-bold mb-4 text-neutral-900 dark:text-white\">\r\n"
                },
                {
                    "date": 1758906435605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,27 @@\n \"use client\";\r\n \r\n-import { useEffect, useState } from \"react\";\r\n+import { useEffect, useState, useCallback } from \"react\";\r\n import { io, Socket } from \"socket.io-client\";\r\n import { motion } from \"framer-motion\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n \r\n-type Room = {\r\n+interface UserInfo {\r\n+  name?: string;\r\n+  age?: string;\r\n+  gender?: string;\r\n+  country?: string;\r\n+}\r\n+\r\n+interface Room {\r\n   id: string;\r\n   name: string;\r\n   topic: string;\r\n   description?: string;\r\n-  users: { id: string; userInfo: any }[];\r\n+  users: { id: string; userInfo: UserInfo }[];\r\n   hasPassword: boolean;\r\n   password?: string | null;\r\n-};\r\n+}\r\n \r\n let socket: Socket | null = null;\r\n \r\n export default function RoomsPage() {\r\n@@ -26,41 +33,38 @@\n     description: \"\",\r\n     password: \"\",\r\n   });\r\n \r\n+  /** ---- Socket Connection ---- */\r\n   useEffect(() => {\r\n+    if (socket) return; // prevent duplicate connections\r\n     socket = io(process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\", {\r\n       transports: [\"websocket\"],\r\n     });\r\n \r\n     socket.on(\"connect\", () => {\r\n-      console.log(\"✅ Connected to server:\", socket?.id);\r\n+      console.log(\"✅ Connected to signaling:\", socket?.id);\r\n       socket?.emit(\"list-rooms\");\r\n     });\r\n \r\n-    socket.on(\"rooms\", (data: Room[]) => setRooms(data));\r\n+    socket.on(\"rooms\", (data: Room[]) => setRooms(data || []));\r\n+    socket.on(\"room-created\", (newRoom: Room) =>\r\n+      setRooms((prev) => [...prev, { ...newRoom, users: [] }])\r\n+    );\r\n+    socket.on(\"room-update\", (updatedRoom: Room) =>\r\n+      setRooms((prev) => prev.map((r) => (r.id === updatedRoom.id ? updatedRoom : r)))\r\n+    );\r\n \r\n-    socket.on(\"room-created\", (newRoom: Room) => {\r\n-      setRooms((prev) => [...prev, { ...newRoom, users: [] }]);\r\n-    });\r\n+    socket.on(\"disconnect\", () => console.log(\"⚠️ Disconnected\"));\r\n \r\n-    socket.on(\"room-update\", (updatedRoom: Room) => {\r\n-      setRooms((prev) =>\r\n-        prev.map((r) => (r.id === updatedRoom.id ? updatedRoom : r))\r\n-      );\r\n-    });\r\n-\r\n-    socket.on(\"disconnect\", () => {\r\n-      console.log(\"⚠️ Disconnected from server\");\r\n-    });\r\n-\r\n     return () => {\r\n       socket?.disconnect();\r\n       socket = null;\r\n     };\r\n   }, []);\r\n \r\n-  const handleCreateRoom = () => {\r\n+  /** ---- Create Room ---- */\r\n+  const handleCreateRoom = useCallback(() => {\r\n     if (!form.name.trim() || !form.topic.trim()) {\r\n       alert(\"Room name and topic are required\");\r\n       return;\r\n     }\r\n@@ -77,67 +81,71 @@\n \r\n     socket?.emit(\"create-room\", newRoom);\r\n     setForm({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n     setShowModal(false);\r\n-  };\r\n+  }, [form]);\r\n \r\n+  /** ---- Join Room ---- */\r\n   const handleJoinRoom = (room: Room) => {\r\n     if (room.hasPassword) {\r\n       const pass = prompt(\"Enter room password:\");\r\n       if (!pass || pass !== room.password) {\r\n-        alert(\"Incorrect password!\");\r\n+        alert(\"Incorrect password\");\r\n         return;\r\n       }\r\n     }\r\n     window.location.href = `/rooms/${room.id}`;\r\n   };\r\n \r\n   return (\r\n     <main className=\"min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100 dark:from-neutral-900 dark:to-neutral-800 p-6\">\r\n-      <div className=\"max-w-4xl mx-auto\">\r\n+      <div className=\"max-w-5xl mx-auto\">\r\n+        {/* Header */}\r\n         <div className=\"flex items-center justify-between mb-6\">\r\n-          <h1 className=\"text-3xl font-bold text-neutral-800 dark:text-white\">\r\n-            👥 Join a Room\r\n-          </h1>\r\n+          <h1 className=\"text-3xl font-bold text-neutral-800 dark:text-white\">👥 Join a Room</h1>\r\n           <button\r\n             onClick={() => setShowModal(true)}\r\n-            className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg shadow-md\"\r\n+            className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg shadow-md transition-colors\"\r\n           >\r\n             ➕ Create Room\r\n           </button>\r\n         </div>\r\n \r\n+        {/* Rooms List */}\r\n         {rooms.length === 0 ? (\r\n           <p className=\"text-center text-neutral-600 dark:text-neutral-300\">\r\n             No rooms available. Create one to get started!\r\n           </p>\r\n         ) : (\r\n-          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n+          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-5\">\r\n             {rooms.map((room) => (\r\n               <motion.div\r\n                 key={room.id}\r\n                 initial={{ opacity: 0, y: 10 }}\r\n                 animate={{ opacity: 1, y: 0 }}\r\n-                className=\"bg-white dark:bg-neutral-900 p-4 rounded-xl shadow-md flex flex-col justify-between\"\r\n+                className=\"bg-white dark:bg-neutral-900 p-5 rounded-xl shadow-md flex flex-col justify-between border border-neutral-200 dark:border-neutral-800\"\r\n               >\r\n                 <div>\r\n-                  <h2 className=\"text-xl font-semibold text-neutral-900 dark:text-white\">\r\n+                  <h2 className=\"text-xl font-semibold text-neutral-900 dark:text-white truncate\">\r\n                     {room.name}\r\n                   </h2>\r\n-                  <p className=\"text-sm text-neutral-600 dark:text-neutral-300\">\r\n+                  <p className=\"text-sm text-neutral-600 dark:text-neutral-300 mt-1\">\r\n                     Topic: {room.topic}\r\n                   </p>\r\n-                  <p className=\"text-xs mt-1 text-neutral-500 dark:text-neutral-400 line-clamp-2\">\r\n-                    {room.description || \"No description\"}\r\n-                  </p>\r\n+                  {room.description && (\r\n+                    <p className=\"text-xs mt-2 text-neutral-500 dark:text-neutral-400 line-clamp-2\">\r\n+                      {room.description}\r\n+                    </p>\r\n+                  )}\r\n                 </div>\r\n+\r\n                 <div className=\"flex items-center justify-between mt-4\">\r\n                   <span className=\"text-sm text-neutral-700 dark:text-neutral-300\">\r\n                     {room.users.length} {room.users.length === 1 ? \"user\" : \"users\"}\r\n                   </span>\r\n                   <button\r\n                     onClick={() => handleJoinRoom(room)}\r\n-                    className=\"px-3 py-1 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm shadow-sm\"\r\n+                    className=\"px-3 py-1 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm shadow-sm transition-colors\"\r\n                   >\r\n                     Join{room.hasPassword ? \" 🔒\" : \"\"}\r\n                   </button>\r\n                 </div>\r\n@@ -146,38 +154,39 @@\n           </div>\r\n         )}\r\n       </div>\r\n \r\n+      {/* ---- Create Room Modal ---- */}\r\n       {showModal && (\r\n-        <div className=\"fixed inset-0 flex items-center justify-center bg-black/50 z-50\">\r\n+        <div className=\"fixed inset-0 flex items-center justify-center bg-black/50 backdrop-blur-sm z-50\">\r\n           <div className=\"bg-white dark:bg-neutral-900 p-6 rounded-xl shadow-xl w-full max-w-md\">\r\n             <h2 className=\"text-xl font-bold mb-4 text-neutral-900 dark:text-white\">\r\n               Create a Room\r\n             </h2>\r\n             <input\r\n               type=\"text\"\r\n               placeholder=\"Room Name\"\r\n-              className=\"w-full mb-3 px-4 py-2 rounded-md border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-800 text-neutral-900 dark:text-white\"\r\n+              className=\"input-field\"\r\n               value={form.name}\r\n               onChange={(e) => setForm({ ...form, name: e.target.value })}\r\n             />\r\n             <input\r\n               type=\"text\"\r\n               placeholder=\"Topic\"\r\n-              className=\"w-full mb-3 px-4 py-2 rounded-md border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-800 text-neutral-900 dark:text-white\"\r\n+              className=\"input-field\"\r\n               value={form.topic}\r\n               onChange={(e) => setForm({ ...form, topic: e.target.value })}\r\n             />\r\n             <textarea\r\n               placeholder=\"Description (optional)\"\r\n-              className=\"w-full mb-3 px-4 py-2 rounded-md border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-800 text-neutral-900 dark:text-white\"\r\n+              className=\"input-field resize-none\"\r\n               value={form.description}\r\n               onChange={(e) => setForm({ ...form, description: e.target.value })}\r\n             />\r\n             <input\r\n               type=\"password\"\r\n               placeholder=\"Password (optional)\"\r\n-              className=\"w-full mb-4 px-4 py-2 rounded-md border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-800 text-neutral-900 dark:text-white\"\r\n+              className=\"input-field mb-4\"\r\n               value={form.password}\r\n               onChange={(e) => setForm({ ...form, password: e.target.value })}\r\n             />\r\n             <div className=\"flex justify-end gap-3\">\r\n@@ -188,9 +197,9 @@\n                 Cancel\r\n               </button>\r\n               <button\r\n                 onClick={handleCreateRoom}\r\n-                className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-md shadow-md\"\r\n+                className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-md shadow-md transition-colors\"\r\n               >\r\n                 Create\r\n               </button>\r\n             </div>\r\n@@ -199,4 +208,12 @@\n       )}\r\n     </main>\r\n   );\r\n }\r\n+\r\n+/* ✅ Tailwind helper for inputs (add to globals.css or use className directly)\r\n+.input-field {\r\n+  @apply w-full mb-3 px-4 py-2 rounded-md border border-neutral-300 dark:border-neutral-700\r\n+  bg-neutral-100 dark:bg-neutral-800 text-neutral-900 dark:text-white focus:outline-none\r\n+  focus:ring-2 focus:ring-purple-500;\r\n+}\r\n+*/\r\n"
                },
                {
                    "date": 1760156557277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,14 +36,15 @@\n \r\n   /** ---- Socket Connection ---- */\r\n   useEffect(() => {\r\n     if (socket) return; // prevent duplicate connections\r\n-    socket = io(process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\", {\r\n+\r\n+    socket = io(`${process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\"}/rooms`, {\r\n       transports: [\"websocket\"],\r\n     });\r\n \r\n     socket.on(\"connect\", () => {\r\n-      console.log(\"✅ Connected to signaling:\", socket?.id);\r\n+      console.log(\"✅ Connected to /rooms namespace:\", socket?.id);\r\n       socket?.emit(\"list-rooms\");\r\n     });\r\n \r\n     socket.on(\"rooms\", (data: Room[]) => setRooms(data || []));\r\n"
                },
                {
                    "date": 1760158534910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,18 @@\n \"use client\";\r\n \r\n import { useEffect, useState, useCallback } from \"react\";\r\n-import { io, Socket } from \"socket.io-client\";\r\n import { motion } from \"framer-motion\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n+import { db } from \"@/lib/firebaseConfig\";\r\n+import {\r\n+  collection,\r\n+  getDocs,\r\n+  addDoc,\r\n+  onSnapshot,\r\n+  query,\r\n+  orderBy,\r\n+} from \"firebase/firestore\";\r\n \r\n interface UserInfo {\r\n   name?: string;\r\n   age?: string;\r\n@@ -21,10 +29,8 @@\n   hasPassword: boolean;\r\n   password?: string | null;\r\n }\r\n \r\n-let socket: Socket | null = null;\r\n-\r\n export default function RoomsPage() {\r\n   const [rooms, setRooms] = useState<Room[]>([]);\r\n   const [showModal, setShowModal] = useState(false);\r\n   const [form, setForm] = useState({\r\n@@ -33,60 +39,60 @@\n     description: \"\",\r\n     password: \"\",\r\n   });\r\n \r\n-  /** ---- Socket Connection ---- */\r\n+  const roomsCollection = collection(db, \"rooms\");\r\n+\r\n+  // -------------------------\r\n+  // Load rooms from Firestore\r\n+  // -------------------------\r\n   useEffect(() => {\r\n-    if (socket) return; // prevent duplicate connections\r\n+    const q = query(roomsCollection, orderBy(\"createdAt\", \"desc\"));\r\n \r\n-    socket = io(`${process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\"}/rooms`, {\r\n-      transports: [\"websocket\"],\r\n+    // Realtime listener\r\n+    const unsubscribe = onSnapshot(q, (snapshot) => {\r\n+      const fetchedRooms: Room[] = snapshot.docs.map((doc) => ({\r\n+        id: doc.id,\r\n+        ...doc.data(),\r\n+      })) as Room[];\r\n+      setRooms(fetchedRooms);\r\n     });\r\n \r\n-    socket.on(\"connect\", () => {\r\n-      console.log(\"✅ Connected to /rooms namespace:\", socket?.id);\r\n-      socket?.emit(\"list-rooms\");\r\n-    });\r\n-\r\n-    socket.on(\"rooms\", (data: Room[]) => setRooms(data || []));\r\n-    socket.on(\"room-created\", (newRoom: Room) =>\r\n-      setRooms((prev) => [...prev, { ...newRoom, users: [] }])\r\n-    );\r\n-    socket.on(\"room-update\", (updatedRoom: Room) =>\r\n-      setRooms((prev) => prev.map((r) => (r.id === updatedRoom.id ? updatedRoom : r)))\r\n-    );\r\n-\r\n-    socket.on(\"disconnect\", () => console.log(\"⚠️ Disconnected\"));\r\n-\r\n-    return () => {\r\n-      socket?.disconnect();\r\n-      socket = null;\r\n-    };\r\n+    return () => unsubscribe();\r\n   }, []);\r\n \r\n-  /** ---- Create Room ---- */\r\n-  const handleCreateRoom = useCallback(() => {\r\n+  // -------------------------\r\n+  // Create Room (Firestore)\r\n+  // -------------------------\r\n+  const handleCreateRoom = useCallback(async () => {\r\n     if (!form.name.trim() || !form.topic.trim()) {\r\n       alert(\"Room name and topic are required\");\r\n       return;\r\n     }\r\n \r\n-    const newRoom: Room = {\r\n-      id: uuidv4(),\r\n+    const newRoom: Omit<Room, \"id\"> & { createdAt: any } = {\r\n       name: form.name.trim(),\r\n       topic: form.topic.trim(),\r\n       description: form.description.trim(),\r\n       hasPassword: !!form.password,\r\n       password: form.password || null,\r\n       users: [],\r\n+      createdAt: new Date(),\r\n     };\r\n \r\n-    socket?.emit(\"create-room\", newRoom);\r\n-    setForm({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n-    setShowModal(false);\r\n+    try {\r\n+      await addDoc(roomsCollection, newRoom);\r\n+      setForm({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n+      setShowModal(false);\r\n+    } catch (err) {\r\n+      console.error(\"❌ Error creating room:\", err);\r\n+      alert(\"Failed to create room. Try again.\");\r\n+    }\r\n   }, [form]);\r\n \r\n-  /** ---- Join Room ---- */\r\n+  // -------------------------\r\n+  // Join Room\r\n+  // -------------------------\r\n   const handleJoinRoom = (room: Room) => {\r\n     if (room.hasPassword) {\r\n       const pass = prompt(\"Enter room password:\");\r\n       if (!pass || pass !== room.password) {\r\n@@ -101,9 +107,11 @@\n     <main className=\"min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100 dark:from-neutral-900 dark:to-neutral-800 p-6\">\r\n       <div className=\"max-w-5xl mx-auto\">\r\n         {/* Header */}\r\n         <div className=\"flex items-center justify-between mb-6\">\r\n-          <h1 className=\"text-3xl font-bold text-neutral-800 dark:text-white\">👥 Join a Room</h1>\r\n+          <h1 className=\"text-3xl font-bold text-neutral-800 dark:text-white\">\r\n+            👥 Join a Room\r\n+          </h1>\r\n           <button\r\n             onClick={() => setShowModal(true)}\r\n             className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg shadow-md transition-colors\"\r\n           >\r\n@@ -140,9 +148,9 @@\n                 </div>\r\n \r\n                 <div className=\"flex items-center justify-between mt-4\">\r\n                   <span className=\"text-sm text-neutral-700 dark:text-neutral-300\">\r\n-                    {room.users.length} {room.users.length === 1 ? \"user\" : \"users\"}\r\n+                    {room.users?.length || 0} {room.users?.length === 1 ? \"user\" : \"users\"}\r\n                   </span>\r\n                   <button\r\n                     onClick={() => handleJoinRoom(room)}\r\n                     className=\"px-3 py-1 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm shadow-sm transition-colors\"\r\n@@ -155,9 +163,9 @@\n           </div>\r\n         )}\r\n       </div>\r\n \r\n-      {/* ---- Create Room Modal ---- */}\r\n+      {/* Create Room Modal */}\r\n       {showModal && (\r\n         <div className=\"fixed inset-0 flex items-center justify-center bg-black/50 backdrop-blur-sm z-50\">\r\n           <div className=\"bg-white dark:bg-neutral-900 p-6 rounded-xl shadow-xl w-full max-w-md\">\r\n             <h2 className=\"text-xl font-bold mb-4 text-neutral-900 dark:text-white\">\r\n@@ -210,9 +218,9 @@\n     </main>\r\n   );\r\n }\r\n \r\n-/* ✅ Tailwind helper for inputs (add to globals.css or use className directly)\r\n+/* Tailwind helper for inputs (add to globals.css)\r\n .input-field {\r\n   @apply w-full mb-3 px-4 py-2 rounded-md border border-neutral-300 dark:border-neutral-700\r\n   bg-neutral-100 dark:bg-neutral-800 text-neutral-900 dark:text-white focus:outline-none\r\n   focus:ring-2 focus:ring-purple-500;\r\n"
                },
                {
                    "date": 1760187724392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,14 +5,14 @@\n import { v4 as uuidv4 } from \"uuid\";\r\n import { db } from \"@/lib/firebaseConfig\";\r\n import {\r\n   collection,\r\n-  getDocs,\r\n   addDoc,\r\n   onSnapshot,\r\n   query,\r\n   orderBy,\r\n } from \"firebase/firestore\";\r\n+import { connectRoomSocket } from \"@/features/RoomChat/services/roomSocketService\";\r\n \r\n interface UserInfo {\r\n   name?: string;\r\n   age?: string;\r\n@@ -24,11 +24,12 @@\n   id: string;\r\n   name: string;\r\n   topic: string;\r\n   description?: string;\r\n-  users: { id: string; userInfo: UserInfo }[];\r\n+  users: { socketId: string; userInfo: UserInfo }[];\r\n   hasPassword: boolean;\r\n   password?: string | null;\r\n+  createdAt?: any;\r\n }\r\n \r\n export default function RoomsPage() {\r\n   const [rooms, setRooms] = useState<Room[]>([]);\r\n@@ -40,55 +41,51 @@\n     password: \"\",\r\n   });\r\n \r\n   const roomsCollection = collection(db, \"rooms\");\r\n+  const socket = connectRoomSocket();\r\n \r\n   // -------------------------\r\n-  // Load rooms from Firestore\r\n+  // Load rooms from Firestore in real-time\r\n   // -------------------------\r\n   useEffect(() => {\r\n     const q = query(roomsCollection, orderBy(\"createdAt\", \"desc\"));\r\n-\r\n-    // Realtime listener\r\n     const unsubscribe = onSnapshot(q, (snapshot) => {\r\n       const fetchedRooms: Room[] = snapshot.docs.map((doc) => ({\r\n         id: doc.id,\r\n         ...doc.data(),\r\n       })) as Room[];\r\n       setRooms(fetchedRooms);\r\n     });\r\n-\r\n     return () => unsubscribe();\r\n   }, []);\r\n \r\n   // -------------------------\r\n-  // Create Room (Firestore)\r\n+  // Create Room (via signaling + Firestore)\r\n   // -------------------------\r\n   const handleCreateRoom = useCallback(async () => {\r\n     if (!form.name.trim() || !form.topic.trim()) {\r\n       alert(\"Room name and topic are required\");\r\n       return;\r\n     }\r\n \r\n-    const newRoom: Omit<Room, \"id\"> & { createdAt: any } = {\r\n+    const newRoom = {\r\n       name: form.name.trim(),\r\n       topic: form.topic.trim(),\r\n       description: form.description.trim(),\r\n       hasPassword: !!form.password,\r\n       password: form.password || null,\r\n-      users: [],\r\n-      createdAt: new Date(),\r\n     };\r\n \r\n     try {\r\n-      await addDoc(roomsCollection, newRoom);\r\n+      socket.emit(\"create-room\", newRoom);\r\n       setForm({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n       setShowModal(false);\r\n     } catch (err) {\r\n       console.error(\"❌ Error creating room:\", err);\r\n       alert(\"Failed to create room. Try again.\");\r\n     }\r\n-  }, [form]);\r\n+  }, [form, socket]);\r\n \r\n   // -------------------------\r\n   // Join Room\r\n   // -------------------------\r\n@@ -99,11 +96,45 @@\n         alert(\"Incorrect password\");\r\n         return;\r\n       }\r\n     }\r\n+\r\n+    // Get user info from localStorage (from pre-chat form)\r\n+    const userInfoStr = localStorage.getItem(\"userInfo\");\r\n+    let userInfo: UserInfo = {};\r\n+    if (userInfoStr) {\r\n+      userInfo = JSON.parse(userInfoStr);\r\n+    } else {\r\n+      userInfo = {\r\n+        name: \"Guest \" + Math.floor(Math.random() * 1000),\r\n+        gender: \"Unknown\",\r\n+        country: \"Unknown\",\r\n+        age: \"N/A\",\r\n+      };\r\n+    }\r\n+\r\n+    // Tell server you joined\r\n+    socket.emit(\"join-room\", { roomId: room.id, user: userInfo });\r\n+\r\n+    // Navigate to room\r\n     window.location.href = `/rooms/${room.id}`;\r\n   };\r\n \r\n+  // -------------------------\r\n+  // Sync latest room list from socket\r\n+  // -------------------------\r\n+  useEffect(() => {\r\n+    if (!socket) return;\r\n+\r\n+    socket.on(\"rooms\", (updatedRooms: Room[]) => {\r\n+      setRooms(updatedRooms);\r\n+    });\r\n+\r\n+    return () => {\r\n+      socket.off(\"rooms\");\r\n+    };\r\n+  }, [socket]);\r\n+\r\n   return (\r\n     <main className=\"min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100 dark:from-neutral-900 dark:to-neutral-800 p-6\">\r\n       <div className=\"max-w-5xl mx-auto\">\r\n         {/* Header */}\r\n@@ -148,9 +179,10 @@\n                 </div>\r\n \r\n                 <div className=\"flex items-center justify-between mt-4\">\r\n                   <span className=\"text-sm text-neutral-700 dark:text-neutral-300\">\r\n-                    {room.users?.length || 0} {room.users?.length === 1 ? \"user\" : \"users\"}\r\n+                    {room.users?.length || 0}{\" \"}\r\n+                    {room.users?.length === 1 ? \"user\" : \"users\"}\r\n                   </span>\r\n                   <button\r\n                     onClick={() => handleJoinRoom(room)}\r\n                     className=\"px-3 py-1 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm shadow-sm transition-colors\"\r\n@@ -188,9 +220,11 @@\n             <textarea\r\n               placeholder=\"Description (optional)\"\r\n               className=\"input-field resize-none\"\r\n               value={form.description}\r\n-              onChange={(e) => setForm({ ...form, description: e.target.value })}\r\n+              onChange={(e) =>\r\n+                setForm({ ...form, description: e.target.value })\r\n+              }\r\n             />\r\n             <input\r\n               type=\"password\"\r\n               placeholder=\"Password (optional)\"\r\n@@ -217,12 +251,4 @@\n       )}\r\n     </main>\r\n   );\r\n }\r\n-\r\n-/* Tailwind helper for inputs (add to globals.css)\r\n-.input-field {\r\n-  @apply w-full mb-3 px-4 py-2 rounded-md border border-neutral-300 dark:border-neutral-700\r\n-  bg-neutral-100 dark:bg-neutral-800 text-neutral-900 dark:text-white focus:outline-none\r\n-  focus:ring-2 focus:ring-purple-500;\r\n-}\r\n-*/\r\n"
                },
                {
                    "date": 1760191552753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,10 @@\n \"use client\";\r\n \r\n-import { useEffect, useState, useCallback } from \"react\";\r\n-import { motion } from \"framer-motion\";\r\n-import { v4 as uuidv4 } from \"uuid\";\r\n+import { useEffect, useState, useCallback, useMemo } from \"react\";\r\n+import { motion, AnimatePresence } from \"framer-motion\";\r\n import { db } from \"@/lib/firebaseConfig\";\r\n-import {\r\n-  collection,\r\n-  addDoc,\r\n-  onSnapshot,\r\n-  query,\r\n-  orderBy,\r\n-} from \"firebase/firestore\";\r\n+import { collection, onSnapshot, query, orderBy } from \"firebase/firestore\";\r\n import { connectRoomSocket } from \"@/features/RoomChat/services/roomSocketService\";\r\n \r\n interface UserInfo {\r\n   name?: string;\r\n@@ -33,42 +26,57 @@\n \r\n export default function RoomsPage() {\r\n   const [rooms, setRooms] = useState<Room[]>([]);\r\n   const [showModal, setShowModal] = useState(false);\r\n+  const [isCreating, setIsCreating] = useState(false);\r\n+  const [toast, setToast] = useState<string | null>(null);\r\n+\r\n   const [form, setForm] = useState({\r\n     name: \"\",\r\n     topic: \"\",\r\n     description: \"\",\r\n     password: \"\",\r\n   });\r\n \r\n-  const roomsCollection = collection(db, \"rooms\");\r\n-  const socket = connectRoomSocket();\r\n+  const roomsCollection = useMemo(() => collection(db, \"rooms\"), []);\r\n+  const socket = useMemo(() => connectRoomSocket(), []);\r\n \r\n   // -------------------------\r\n-  // Load rooms from Firestore in real-time\r\n+  // Load rooms from Firestore + Sync via socket\r\n   // -------------------------\r\n   useEffect(() => {\r\n     const q = query(roomsCollection, orderBy(\"createdAt\", \"desc\"));\r\n-    const unsubscribe = onSnapshot(q, (snapshot) => {\r\n-      const fetchedRooms: Room[] = snapshot.docs.map((doc) => ({\r\n+    const unsubscribeFirestore = onSnapshot(q, (snapshot) => {\r\n+      const fetchedRooms = snapshot.docs.map((doc) => ({\r\n         id: doc.id,\r\n         ...doc.data(),\r\n       })) as Room[];\r\n       setRooms(fetchedRooms);\r\n     });\r\n-    return () => unsubscribe();\r\n-  }, []);\r\n \r\n+    socket.on(\"rooms\", (updatedRooms: Room[]) => {\r\n+      setRooms(updatedRooms);\r\n+    });\r\n+\r\n+    socket.on(\"connected\", () => console.log(\"🟢 Room socket connected\"));\r\n+\r\n+    return () => {\r\n+      unsubscribeFirestore();\r\n+      socket.off(\"rooms\");\r\n+      socket.off(\"connected\");\r\n+    };\r\n+  }, [roomsCollection, socket]);\r\n+\r\n   // -------------------------\r\n-  // Create Room (via signaling + Firestore)\r\n+  // Create Room\r\n   // -------------------------\r\n   const handleCreateRoom = useCallback(async () => {\r\n     if (!form.name.trim() || !form.topic.trim()) {\r\n       alert(\"Room name and topic are required\");\r\n       return;\r\n     }\r\n \r\n+    setIsCreating(true);\r\n     const newRoom = {\r\n       name: form.name.trim(),\r\n       topic: form.topic.trim(),\r\n       description: form.description.trim(),\r\n@@ -79,62 +87,47 @@\n     try {\r\n       socket.emit(\"create-room\", newRoom);\r\n       setForm({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n       setShowModal(false);\r\n+      setToast(\"Room created successfully!\");\r\n+      setTimeout(() => setToast(null), 2000);\r\n     } catch (err) {\r\n       console.error(\"❌ Error creating room:\", err);\r\n       alert(\"Failed to create room. Try again.\");\r\n+    } finally {\r\n+      setIsCreating(false);\r\n     }\r\n   }, [form, socket]);\r\n \r\n   // -------------------------\r\n   // Join Room\r\n   // -------------------------\r\n-  const handleJoinRoom = (room: Room) => {\r\n-    if (room.hasPassword) {\r\n-      const pass = prompt(\"Enter room password:\");\r\n-      if (!pass || pass !== room.password) {\r\n-        alert(\"Incorrect password\");\r\n-        return;\r\n+  const handleJoinRoom = useCallback(\r\n+    (room: Room) => {\r\n+      if (room.hasPassword) {\r\n+        const pass = prompt(\"Enter room password:\");\r\n+        if (!pass || pass !== room.password) {\r\n+          alert(\"Incorrect password\");\r\n+          return;\r\n+        }\r\n       }\r\n-    }\r\n \r\n-    // Get user info from localStorage (from pre-chat form)\r\n-    const userInfoStr = localStorage.getItem(\"userInfo\");\r\n-    let userInfo: UserInfo = {};\r\n-    if (userInfoStr) {\r\n-      userInfo = JSON.parse(userInfoStr);\r\n-    } else {\r\n-      userInfo = {\r\n-        name: \"Guest \" + Math.floor(Math.random() * 1000),\r\n-        gender: \"Unknown\",\r\n-        country: \"Unknown\",\r\n-        age: \"N/A\",\r\n-      };\r\n-    }\r\n+      const userInfoStr = localStorage.getItem(\"userInfo\");\r\n+      let userInfo: UserInfo = userInfoStr\r\n+        ? JSON.parse(userInfoStr)\r\n+        : {\r\n+            name: \"Guest \" + Math.floor(Math.random() * 1000),\r\n+            gender: \"Unknown\",\r\n+            country: \"Unknown\",\r\n+            age: \"N/A\",\r\n+          };\r\n \r\n-    // Tell server you joined\r\n-    socket.emit(\"join-room\", { roomId: room.id, user: userInfo });\r\n+      socket.emit(\"join-room\", { roomId: room.id, user: userInfo });\r\n+      window.location.href = `/rooms/${room.id}`;\r\n+    },\r\n+    [socket]\r\n+  );\r\n \r\n-    // Navigate to room\r\n-    window.location.href = `/rooms/${room.id}`;\r\n-  };\r\n-\r\n-  // -------------------------\r\n-  // Sync latest room list from socket\r\n-  // -------------------------\r\n-  useEffect(() => {\r\n-    if (!socket) return;\r\n-\r\n-    socket.on(\"rooms\", (updatedRooms: Room[]) => {\r\n-      setRooms(updatedRooms);\r\n-    });\r\n-\r\n-    return () => {\r\n-      socket.off(\"rooms\");\r\n-    };\r\n-  }, [socket]);\r\n-\r\n   return (\r\n     <main className=\"min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100 dark:from-neutral-900 dark:to-neutral-800 p-6\">\r\n       <div className=\"max-w-5xl mx-auto\">\r\n         {/* Header */}\r\n@@ -150,105 +143,131 @@\n           </button>\r\n         </div>\r\n \r\n         {/* Rooms List */}\r\n-        {rooms.length === 0 ? (\r\n-          <p className=\"text-center text-neutral-600 dark:text-neutral-300\">\r\n-            No rooms available. Create one to get started!\r\n-          </p>\r\n-        ) : (\r\n-          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-5\">\r\n-            {rooms.map((room) => (\r\n-              <motion.div\r\n-                key={room.id}\r\n-                initial={{ opacity: 0, y: 10 }}\r\n-                animate={{ opacity: 1, y: 0 }}\r\n-                className=\"bg-white dark:bg-neutral-900 p-5 rounded-xl shadow-md flex flex-col justify-between border border-neutral-200 dark:border-neutral-800\"\r\n-              >\r\n-                <div>\r\n-                  <h2 className=\"text-xl font-semibold text-neutral-900 dark:text-white truncate\">\r\n-                    {room.name}\r\n-                  </h2>\r\n-                  <p className=\"text-sm text-neutral-600 dark:text-neutral-300 mt-1\">\r\n-                    Topic: {room.topic}\r\n-                  </p>\r\n-                  {room.description && (\r\n-                    <p className=\"text-xs mt-2 text-neutral-500 dark:text-neutral-400 line-clamp-2\">\r\n-                      {room.description}\r\n+        <AnimatePresence mode=\"popLayout\">\r\n+          {rooms.length === 0 ? (\r\n+            <motion.p\r\n+              initial={{ opacity: 0 }}\r\n+              animate={{ opacity: 1 }}\r\n+              className=\"text-center text-neutral-600 dark:text-neutral-300\"\r\n+            >\r\n+              No rooms available. Create one to get started!\r\n+            </motion.p>\r\n+          ) : (\r\n+            <motion.div\r\n+              layout\r\n+              className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-5\"\r\n+            >\r\n+              {rooms.map((room) => (\r\n+                <motion.div\r\n+                  key={room.id}\r\n+                  layout\r\n+                  initial={{ opacity: 0, y: 10 }}\r\n+                  animate={{ opacity: 1, y: 0 }}\r\n+                  className=\"bg-white dark:bg-neutral-900 p-5 rounded-xl shadow-md border border-neutral-200 dark:border-neutral-800 flex flex-col justify-between\"\r\n+                >\r\n+                  <div>\r\n+                    <h2 className=\"text-xl font-semibold text-neutral-900 dark:text-white truncate\">\r\n+                      {room.name}\r\n+                    </h2>\r\n+                    <p className=\"text-sm text-neutral-600 dark:text-neutral-300 mt-1\">\r\n+                      Topic: {room.topic}\r\n                     </p>\r\n-                  )}\r\n-                </div>\r\n+                    {room.description && (\r\n+                      <p className=\"text-xs mt-2 text-neutral-500 dark:text-neutral-400 line-clamp-2\">\r\n+                        {room.description}\r\n+                      </p>\r\n+                    )}\r\n+                  </div>\r\n \r\n-                <div className=\"flex items-center justify-between mt-4\">\r\n-                  <span className=\"text-sm text-neutral-700 dark:text-neutral-300\">\r\n-                    {room.users?.length || 0}{\" \"}\r\n-                    {room.users?.length === 1 ? \"user\" : \"users\"}\r\n-                  </span>\r\n-                  <button\r\n-                    onClick={() => handleJoinRoom(room)}\r\n-                    className=\"px-3 py-1 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm shadow-sm transition-colors\"\r\n-                  >\r\n-                    Join{room.hasPassword ? \" 🔒\" : \"\"}\r\n-                  </button>\r\n-                </div>\r\n-              </motion.div>\r\n-            ))}\r\n-          </div>\r\n-        )}\r\n+                  <div className=\"flex items-center justify-between mt-4\">\r\n+                    <span className=\"text-sm text-neutral-700 dark:text-neutral-300\">\r\n+                      {room.users?.length || 0}{\" \"}\r\n+                      {room.users?.length === 1 ? \"user\" : \"users\"}\r\n+                    </span>\r\n+                    <button\r\n+                      onClick={() => handleJoinRoom(room)}\r\n+                      className=\"px-3 py-1 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm shadow-sm transition-colors\"\r\n+                    >\r\n+                      Join{room.hasPassword ? \" 🔒\" : \"\"}\r\n+                    </button>\r\n+                  </div>\r\n+                </motion.div>\r\n+              ))}\r\n+            </motion.div>\r\n+          )}\r\n+        </AnimatePresence>\r\n       </div>\r\n \r\n       {/* Create Room Modal */}\r\n-      {showModal && (\r\n-        <div className=\"fixed inset-0 flex items-center justify-center bg-black/50 backdrop-blur-sm z-50\">\r\n-          <div className=\"bg-white dark:bg-neutral-900 p-6 rounded-xl shadow-xl w-full max-w-md\">\r\n-            <h2 className=\"text-xl font-bold mb-4 text-neutral-900 dark:text-white\">\r\n-              Create a Room\r\n-            </h2>\r\n-            <input\r\n-              type=\"text\"\r\n-              placeholder=\"Room Name\"\r\n-              className=\"input-field\"\r\n-              value={form.name}\r\n-              onChange={(e) => setForm({ ...form, name: e.target.value })}\r\n-            />\r\n-            <input\r\n-              type=\"text\"\r\n-              placeholder=\"Topic\"\r\n-              className=\"input-field\"\r\n-              value={form.topic}\r\n-              onChange={(e) => setForm({ ...form, topic: e.target.value })}\r\n-            />\r\n-            <textarea\r\n-              placeholder=\"Description (optional)\"\r\n-              className=\"input-field resize-none\"\r\n-              value={form.description}\r\n-              onChange={(e) =>\r\n-                setForm({ ...form, description: e.target.value })\r\n-              }\r\n-            />\r\n-            <input\r\n-              type=\"password\"\r\n-              placeholder=\"Password (optional)\"\r\n-              className=\"input-field mb-4\"\r\n-              value={form.password}\r\n-              onChange={(e) => setForm({ ...form, password: e.target.value })}\r\n-            />\r\n-            <div className=\"flex justify-end gap-3\">\r\n-              <button\r\n-                onClick={() => setShowModal(false)}\r\n-                className=\"px-4 py-2 bg-neutral-300 dark:bg-neutral-700 text-neutral-900 dark:text-white rounded-md\"\r\n-              >\r\n-                Cancel\r\n-              </button>\r\n-              <button\r\n-                onClick={handleCreateRoom}\r\n-                className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-md shadow-md transition-colors\"\r\n-              >\r\n-                Create\r\n-              </button>\r\n-            </div>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n+      <AnimatePresence>\r\n+        {showModal && (\r\n+          <motion.div\r\n+            initial={{ opacity: 0 }}\r\n+            animate={{ opacity: 1 }}\r\n+            exit={{ opacity: 0 }}\r\n+            className=\"fixed inset-0 flex items-center justify-center bg-black/50 backdrop-blur-sm z-50\"\r\n+          >\r\n+            <motion.div\r\n+              initial={{ scale: 0.9, opacity: 0 }}\r\n+              animate={{ scale: 1, opacity: 1 }}\r\n+              exit={{ scale: 0.9, opacity: 0 }}\r\n+              className=\"bg-white dark:bg-neutral-900 p-6 rounded-xl shadow-xl w-full max-w-md\"\r\n+            >\r\n+              <h2 className=\"text-xl font-bold mb-4 text-neutral-900 dark:text-white\">\r\n+                Create a Room\r\n+              </h2>\r\n+              {[\"name\", \"topic\", \"description\", \"password\"].map((field, idx) => (\r\n+                <input\r\n+                  key={field}\r\n+                  type={field === \"password\" ? \"password\" : \"text\"}\r\n+                  placeholder={\r\n+                    field === \"description\"\r\n+                      ? \"Description (optional)\"\r\n+                      : field === \"password\"\r\n+                      ? \"Password (optional)\"\r\n+                      : `Room ${field[0].toUpperCase() + field.slice(1)}`\r\n+                  }\r\n+                  className=\"input-field mb-3\"\r\n+                  value={(form as any)[field]}\r\n+                  onChange={(e) =>\r\n+                    setForm({ ...form, [field]: e.target.value })\r\n+                  }\r\n+                />\r\n+              ))}\r\n+              <div className=\"flex justify-end gap-3 mt-4\">\r\n+                <button\r\n+                  onClick={() => setShowModal(false)}\r\n+                  className=\"px-4 py-2 bg-neutral-300 dark:bg-neutral-700 text-neutral-900 dark:text-white rounded-md\"\r\n+                >\r\n+                  Cancel\r\n+                </button>\r\n+                <button\r\n+                  disabled={isCreating}\r\n+                  onClick={handleCreateRoom}\r\n+                  className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-md shadow-md transition-colors disabled:opacity-50\"\r\n+                >\r\n+                  {isCreating ? \"Creating...\" : \"Create\"}\r\n+                </button>\r\n+              </div>\r\n+            </motion.div>\r\n+          </motion.div>\r\n+        )}\r\n+      </AnimatePresence>\r\n+\r\n+      {/* Toast */}\r\n+      <AnimatePresence>\r\n+        {toast && (\r\n+          <motion.div\r\n+            initial={{ y: 40, opacity: 0 }}\r\n+            animate={{ y: 0, opacity: 1 }}\r\n+            exit={{ y: 40, opacity: 0 }}\r\n+            className=\"fixed bottom-6 left-1/2 -translate-x-1/2 bg-indigo-600 text-white px-4 py-2 rounded-md shadow-lg\"\r\n+          >\r\n+            {toast}\r\n+          </motion.div>\r\n+        )}\r\n+      </AnimatePresence>\r\n     </main>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1760246662274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,268 @@\n+\"use client\";\r\n+\r\n+import { useEffect, useState, useCallback, useMemo } from \"react\";\r\n+import { motion, AnimatePresence } from \"framer-motion\";\r\n+import { db } from \"@/lib/firebaseConfig\";\r\n+import { collection, onSnapshot, query, orderBy } from \"firebase/firestore\";\r\n+import { connectRoomSocket } from \"@/features/RoomChat/services/roomSocketService\";\r\n+\r\n+interface UserInfo {\r\n+  name?: string;\r\n+  age?: string;\r\n+  gender?: string;\r\n+  country?: string;\r\n+}\r\n+\r\n+interface Room {\r\n+  id: string;\r\n+  name: string;\r\n+  topic: string;\r\n+  description?: string;\r\n+  users: { socketId: string; userInfo: UserInfo }[];\r\n+  hasPassword: boolean;\r\n+  password?: string | null;\r\n+  createdAt?: any;\r\n+}\r\n+\r\n+export default function RoomsPage() {\r\n+  const [rooms, setRooms] = useState<Room[]>([]);\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [isCreating, setIsCreating] = useState(false);\r\n+  const [toast, setToast] = useState<string | null>(null);\r\n+\r\n+  const [form, setForm] = useState({\r\n+    name: \"\",\r\n+    topic: \"\",\r\n+    description: \"\",\r\n+    password: \"\",\r\n+  });\r\n+\r\n+  const roomsCollection = useMemo(() => collection(db, \"rooms\"), []);\r\n+  const socket = useMemo(() => connectRoomSocket(), []);\r\n+\r\n+  // -------------------------\r\n+  // Load rooms from Firestore + Socket\r\n+  // -------------------------\r\n+  useEffect(() => {\r\n+    const q = query(roomsCollection, orderBy(\"createdAt\", \"desc\"));\r\n+    const unsubscribeFirestore = onSnapshot(q, (snapshot) => {\r\n+      const fetchedRooms = snapshot.docs.map((doc) => ({\r\n+        id: doc.id,\r\n+        ...doc.data(),\r\n+      })) as Room[];\r\n+      setRooms(fetchedRooms);\r\n+    });\r\n+\r\n+    socket.on(\"rooms\", (updatedRooms: Room[]) => setRooms(updatedRooms));\r\n+    socket.on(\"connected\", () => console.log(\"🟢 Room socket connected\"));\r\n+\r\n+    return () => {\r\n+      unsubscribeFirestore();\r\n+      socket.off(\"rooms\");\r\n+      socket.off(\"connected\");\r\n+    };\r\n+  }, [roomsCollection, socket]);\r\n+\r\n+  // -------------------------\r\n+  // Create Room\r\n+  // -------------------------\r\n+  const handleCreateRoom = useCallback(async () => {\r\n+    if (!form.name.trim() || !form.topic.trim()) {\r\n+      alert(\"Room name and topic are required\");\r\n+      return;\r\n+    }\r\n+\r\n+    setIsCreating(true);\r\n+    const newRoom = {\r\n+      name: form.name.trim(),\r\n+      topic: form.topic.trim(),\r\n+      description: form.description.trim(),\r\n+      hasPassword: !!form.password,\r\n+      password: form.password || null,\r\n+    };\r\n+\r\n+    try {\r\n+      socket.emit(\"create-room\", newRoom);\r\n+      setForm({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n+      setShowModal(false);\r\n+      setToast(\"Room created successfully!\");\r\n+      setTimeout(() => setToast(null), 2000);\r\n+    } catch (err) {\r\n+      console.error(\"❌ Error creating room:\", err);\r\n+      alert(\"Failed to create room. Try again.\");\r\n+    } finally {\r\n+      setIsCreating(false);\r\n+    }\r\n+  }, [form, socket]);\r\n+\r\n+  // -------------------------\r\n+  // Join Room\r\n+  // -------------------------\r\n+  const handleJoinRoom = useCallback(\r\n+    (room: Room) => {\r\n+      if (room.hasPassword) {\r\n+        const pass = prompt(\"Enter room password:\");\r\n+        if (!pass || pass !== room.password) {\r\n+          alert(\"Incorrect password\");\r\n+          return;\r\n+        }\r\n+      }\r\n+\r\n+      const userInfoStr = localStorage.getItem(\"user-info\");\r\n+      let userInfo: UserInfo = userInfoStr\r\n+        ? JSON.parse(userInfoStr)\r\n+        : {\r\n+            name: \"Guest \" + Math.floor(Math.random() * 1000),\r\n+            gender: \"Unknown\",\r\n+            country: \"Unknown\",\r\n+            age: \"N/A\",\r\n+          };\r\n+\r\n+      socket.emit(\"join-room\", { roomId: room.id, user: userInfo });\r\n+      window.location.href = `/rooms/${room.id}`;\r\n+    },\r\n+    [socket]\r\n+  );\r\n+\r\n+  return (\r\n+    <main className=\"min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100 dark:from-neutral-900 dark:to-neutral-800 p-6\">\r\n+      <div className=\"max-w-5xl mx-auto\">\r\n+        {/* Header */}\r\n+        <div className=\"flex items-center justify-between mb-6\">\r\n+          <h1 className=\"text-3xl font-bold text-neutral-800 dark:text-white\">\r\n+            👥 Join a Room\r\n+          </h1>\r\n+          <button\r\n+            onClick={() => setShowModal(true)}\r\n+            className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg shadow-md transition-colors\"\r\n+          >\r\n+            ➕ Create Room\r\n+          </button>\r\n+        </div>\r\n+\r\n+        {/* Rooms List */}\r\n+        <AnimatePresence mode=\"popLayout\">\r\n+          {rooms.length === 0 ? (\r\n+            <motion.p\r\n+              initial={{ opacity: 0 }}\r\n+              animate={{ opacity: 1 }}\r\n+              className=\"text-center text-neutral-600 dark:text-neutral-300\"\r\n+            >\r\n+              No rooms available. Create one to get started!\r\n+            </motion.p>\r\n+          ) : (\r\n+            <motion.div\r\n+              layout\r\n+              className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-5\"\r\n+            >\r\n+              {rooms.map((room) => (\r\n+                <motion.div\r\n+                  key={room.id}\r\n+                  layout\r\n+                  initial={{ opacity: 0, y: 10 }}\r\n+                  animate={{ opacity: 1, y: 0 }}\r\n+                  className=\"bg-white dark:bg-neutral-900 p-5 rounded-xl shadow-md border border-neutral-200 dark:border-neutral-800 flex flex-col justify-between\"\r\n+                >\r\n+                  <div>\r\n+                    <h2 className=\"text-xl font-semibold text-neutral-900 dark:text-white truncate\">\r\n+                      {room.name}\r\n+                    </h2>\r\n+                    <p className=\"text-sm text-neutral-600 dark:text-neutral-300 mt-1\">\r\n+                      Topic: {room.topic}\r\n+                    </p>\r\n+                    {room.description && (\r\n+                      <p className=\"text-xs mt-2 text-neutral-500 dark:text-neutral-400 line-clamp-2\">\r\n+                        {room.description}\r\n+                      </p>\r\n+                    )}\r\n+                  </div>\r\n+\r\n+                  <div className=\"flex items-center justify-between mt-4\">\r\n+                    <span className=\"text-sm text-neutral-700 dark:text-neutral-300\">\r\n+                      {room.users?.length || 0}{\" \"}\r\n+                      {room.users?.length === 1 ? \"user\" : \"users\"}\r\n+                    </span>\r\n+                    <button\r\n+                      onClick={() => handleJoinRoom(room)}\r\n+                      className=\"px-3 py-1 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm shadow-sm transition-colors\"\r\n+                    >\r\n+                      Join{room.hasPassword ? \" 🔒\" : \"\"}\r\n+                    </button>\r\n+                  </div>\r\n+                </motion.div>\r\n+              ))}\r\n+            </motion.div>\r\n+          )}\r\n+        </AnimatePresence>\r\n+      </div>\r\n+\r\n+      {/* Create Room Modal */}\r\n+      <AnimatePresence>\r\n+        {showModal && (\r\n+          <motion.div\r\n+            initial={{ opacity: 0 }}\r\n+            animate={{ opacity: 1 }}\r\n+            exit={{ opacity: 0 }}\r\n+            className=\"fixed inset-0 flex items-center justify-center bg-black/50 backdrop-blur-sm z-50\"\r\n+          >\r\n+            <motion.div\r\n+              initial={{ scale: 0.9, opacity: 0 }}\r\n+              animate={{ scale: 1, opacity: 1 }}\r\n+              exit={{ scale: 0.9, opacity: 0 }}\r\n+              className=\"bg-white dark:bg-neutral-900 p-6 rounded-xl shadow-xl w-full max-w-md\"\r\n+            >\r\n+              <h2 className=\"text-xl font-bold mb-4 text-neutral-900 dark:text-white\">\r\n+                Create a Room\r\n+              </h2>\r\n+              {[\"name\", \"topic\", \"description\", \"password\"].map((field) => (\r\n+                <input\r\n+                  key={field}\r\n+                  type={field === \"password\" ? \"password\" : \"text\"}\r\n+                  placeholder={\r\n+                    field === \"description\"\r\n+                      ? \"Description (optional)\"\r\n+                      : field === \"password\"\r\n+                      ? \"Password (optional)\"\r\n+                      : `Room ${field[0].toUpperCase() + field.slice(1)}`\r\n+                  }\r\n+                  className=\"input-field mb-3 w-full px-3 py-2 rounded-md border border-gray-300 dark:border-neutral-700 dark:bg-neutral-800 text-neutral-900 dark:text-white\"\r\n+                  value={(form as any)[field]}\r\n+                  onChange={(e) => setForm({ ...form, [field]: e.target.value })}\r\n+                />\r\n+              ))}\r\n+              <div className=\"flex justify-end gap-3 mt-4\">\r\n+                <button\r\n+                  onClick={() => setShowModal(false)}\r\n+                  className=\"px-4 py-2 bg-neutral-300 dark:bg-neutral-700 text-neutral-900 dark:text-white rounded-md\"\r\n+                >\r\n+                  Cancel\r\n+                </button>\r\n+                <button\r\n+                  disabled={isCreating}\r\n+                  onClick={handleCreateRoom}\r\n+                  className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-md shadow-md transition-colors disabled:opacity-50\"\r\n+                >\r\n+                  {isCreating ? \"Creating...\" : \"Create\"}\r\n+                </button>\r\n+              </div>\r\n+            </motion.div>\r\n+          </motion.div>\r\n+        )}\r\n+      </AnimatePresence>\r\n+\r\n+      {/* Toast */}\r\n+      <AnimatePresence>\r\n+        {toast && (\r\n+          <motion.div\r\n+            initial={{ y: 40, opacity: 0 }}\r\n+            animate={{ y: 0, opacity: 1 }}\r\n+            exit={{ y: 40, opacity: 0 }}\r\n+            className=\"fixed bottom-6 left-1/2 -translate-x-1/2 bg-indigo-600 text-white px-4 py-2 rounded-md shadow-lg\"\r\n+          >\r\n+            {toast}\r\n+          </motion.div>\r\n+        )}\r\n+      </AnimatePresence>\r\n+    </main>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1760246778729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n \"use client\";\r\n \r\n import { useEffect, useState, useCallback, useMemo } from \"react\";\r\n import { motion, AnimatePresence } from \"framer-motion\";\r\n+import { useRouter } from \"next/navigation\";\r\n import { db } from \"@/lib/firebaseConfig\";\r\n import { collection, onSnapshot, query, orderBy } from \"firebase/firestore\";\r\n import { connectRoomSocket } from \"@/features/RoomChat/services/roomSocketService\";\r\n \r\n@@ -24,13 +25,13 @@\n   createdAt?: any;\r\n }\r\n \r\n export default function RoomsPage() {\r\n+  const router = useRouter();\r\n   const [rooms, setRooms] = useState<Room[]>([]);\r\n   const [showModal, setShowModal] = useState(false);\r\n   const [isCreating, setIsCreating] = useState(false);\r\n   const [toast, setToast] = useState<string | null>(null);\r\n-\r\n   const [form, setForm] = useState({\r\n     name: \"\",\r\n     topic: \"\",\r\n     description: \"\",\r\n@@ -95,9 +96,9 @@\n     }\r\n   }, [form, socket]);\r\n \r\n   // -------------------------\r\n-  // Join Room\r\n+  // Join Room (Navigate to RoomPage)\r\n   // -------------------------\r\n   const handleJoinRoom = useCallback(\r\n     (room: Room) => {\r\n       if (room.hasPassword) {\r\n@@ -117,18 +118,19 @@\n             country: \"Unknown\",\r\n             age: \"N/A\",\r\n           };\r\n \r\n-      socket.emit(\"join-room\", { roomId: room.id, user: userInfo });\r\n-      window.location.href = `/rooms/${room.id}`;\r\n+      // Save to localStorage to use in RoomPage\r\n+      localStorage.setItem(\"user-info\", JSON.stringify(userInfo));\r\n+\r\n+      router.push(`/rooms/${room.id}`);\r\n     },\r\n-    [socket]\r\n+    [router]\r\n   );\r\n \r\n   return (\r\n     <main className=\"min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100 dark:from-neutral-900 dark:to-neutral-800 p-6\">\r\n       <div className=\"max-w-5xl mx-auto\">\r\n-        {/* Header */}\r\n         <div className=\"flex items-center justify-between mb-6\">\r\n           <h1 className=\"text-3xl font-bold text-neutral-800 dark:text-white\">\r\n             👥 Join a Room\r\n           </h1>\r\n@@ -226,279 +228,8 @@\n                       : `Room ${field[0].toUpperCase() + field.slice(1)}`\r\n                   }\r\n                   className=\"input-field mb-3 w-full px-3 py-2 rounded-md border border-gray-300 dark:border-neutral-700 dark:bg-neutral-800 text-neutral-900 dark:text-white\"\r\n                   value={(form as any)[field]}\r\n-                  onChange={(e) => setForm({ ...form, [field]: e.target.value })}\r\n-                />\r\n-              ))}\r\n-              <div className=\"flex justify-end gap-3 mt-4\">\r\n-                <button\r\n-                  onClick={() => setShowModal(false)}\r\n-                  className=\"px-4 py-2 bg-neutral-300 dark:bg-neutral-700 text-neutral-900 dark:text-white rounded-md\"\r\n-                >\r\n-                  Cancel\r\n-                </button>\r\n-                <button\r\n-                  disabled={isCreating}\r\n-                  onClick={handleCreateRoom}\r\n-                  className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-md shadow-md transition-colors disabled:opacity-50\"\r\n-                >\r\n-                  {isCreating ? \"Creating...\" : \"Create\"}\r\n-                </button>\r\n-              </div>\r\n-            </motion.div>\r\n-          </motion.div>\r\n-        )}\r\n-      </AnimatePresence>\r\n-\r\n-      {/* Toast */}\r\n-      <AnimatePresence>\r\n-        {toast && (\r\n-          <motion.div\r\n-            initial={{ y: 40, opacity: 0 }}\r\n-            animate={{ y: 0, opacity: 1 }}\r\n-            exit={{ y: 40, opacity: 0 }}\r\n-            className=\"fixed bottom-6 left-1/2 -translate-x-1/2 bg-indigo-600 text-white px-4 py-2 rounded-md shadow-lg\"\r\n-          >\r\n-            {toast}\r\n-          </motion.div>\r\n-        )}\r\n-      </AnimatePresence>\r\n-    </main>\r\n-  );\r\n-}\r\n-\"use client\";\r\n-\r\n-import { useEffect, useState, useCallback, useMemo } from \"react\";\r\n-import { motion, AnimatePresence } from \"framer-motion\";\r\n-import { db } from \"@/lib/firebaseConfig\";\r\n-import { collection, onSnapshot, query, orderBy } from \"firebase/firestore\";\r\n-import { connectRoomSocket } from \"@/features/RoomChat/services/roomSocketService\";\r\n-\r\n-interface UserInfo {\r\n-  name?: string;\r\n-  age?: string;\r\n-  gender?: string;\r\n-  country?: string;\r\n-}\r\n-\r\n-interface Room {\r\n-  id: string;\r\n-  name: string;\r\n-  topic: string;\r\n-  description?: string;\r\n-  users: { socketId: string; userInfo: UserInfo }[];\r\n-  hasPassword: boolean;\r\n-  password?: string | null;\r\n-  createdAt?: any;\r\n-}\r\n-\r\n-export default function RoomsPage() {\r\n-  const [rooms, setRooms] = useState<Room[]>([]);\r\n-  const [showModal, setShowModal] = useState(false);\r\n-  const [isCreating, setIsCreating] = useState(false);\r\n-  const [toast, setToast] = useState<string | null>(null);\r\n-\r\n-  const [form, setForm] = useState({\r\n-    name: \"\",\r\n-    topic: \"\",\r\n-    description: \"\",\r\n-    password: \"\",\r\n-  });\r\n-\r\n-  const roomsCollection = useMemo(() => collection(db, \"rooms\"), []);\r\n-  const socket = useMemo(() => connectRoomSocket(), []);\r\n-\r\n-  // -------------------------\r\n-  // Load rooms from Firestore + Sync via socket\r\n-  // -------------------------\r\n-  useEffect(() => {\r\n-    const q = query(roomsCollection, orderBy(\"createdAt\", \"desc\"));\r\n-    const unsubscribeFirestore = onSnapshot(q, (snapshot) => {\r\n-      const fetchedRooms = snapshot.docs.map((doc) => ({\r\n-        id: doc.id,\r\n-        ...doc.data(),\r\n-      })) as Room[];\r\n-      setRooms(fetchedRooms);\r\n-    });\r\n-\r\n-    socket.on(\"rooms\", (updatedRooms: Room[]) => {\r\n-      setRooms(updatedRooms);\r\n-    });\r\n-\r\n-    socket.on(\"connected\", () => console.log(\"🟢 Room socket connected\"));\r\n-\r\n-    return () => {\r\n-      unsubscribeFirestore();\r\n-      socket.off(\"rooms\");\r\n-      socket.off(\"connected\");\r\n-    };\r\n-  }, [roomsCollection, socket]);\r\n-\r\n-  // -------------------------\r\n-  // Create Room\r\n-  // -------------------------\r\n-  const handleCreateRoom = useCallback(async () => {\r\n-    if (!form.name.trim() || !form.topic.trim()) {\r\n-      alert(\"Room name and topic are required\");\r\n-      return;\r\n-    }\r\n-\r\n-    setIsCreating(true);\r\n-    const newRoom = {\r\n-      name: form.name.trim(),\r\n-      topic: form.topic.trim(),\r\n-      description: form.description.trim(),\r\n-      hasPassword: !!form.password,\r\n-      password: form.password || null,\r\n-    };\r\n-\r\n-    try {\r\n-      socket.emit(\"create-room\", newRoom);\r\n-      setForm({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n-      setShowModal(false);\r\n-      setToast(\"Room created successfully!\");\r\n-      setTimeout(() => setToast(null), 2000);\r\n-    } catch (err) {\r\n-      console.error(\"❌ Error creating room:\", err);\r\n-      alert(\"Failed to create room. Try again.\");\r\n-    } finally {\r\n-      setIsCreating(false);\r\n-    }\r\n-  }, [form, socket]);\r\n-\r\n-  // -------------------------\r\n-  // Join Room\r\n-  // -------------------------\r\n-  const handleJoinRoom = useCallback(\r\n-    (room: Room) => {\r\n-      if (room.hasPassword) {\r\n-        const pass = prompt(\"Enter room password:\");\r\n-        if (!pass || pass !== room.password) {\r\n-          alert(\"Incorrect password\");\r\n-          return;\r\n-        }\r\n-      }\r\n-\r\n-      const userInfoStr = localStorage.getItem(\"userInfo\");\r\n-      let userInfo: UserInfo = userInfoStr\r\n-        ? JSON.parse(userInfoStr)\r\n-        : {\r\n-            name: \"Guest \" + Math.floor(Math.random() * 1000),\r\n-            gender: \"Unknown\",\r\n-            country: \"Unknown\",\r\n-            age: \"N/A\",\r\n-          };\r\n-\r\n-      socket.emit(\"join-room\", { roomId: room.id, user: userInfo });\r\n-      window.location.href = `/rooms/${room.id}`;\r\n-    },\r\n-    [socket]\r\n-  );\r\n-\r\n-  return (\r\n-    <main className=\"min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100 dark:from-neutral-900 dark:to-neutral-800 p-6\">\r\n-      <div className=\"max-w-5xl mx-auto\">\r\n-        {/* Header */}\r\n-        <div className=\"flex items-center justify-between mb-6\">\r\n-          <h1 className=\"text-3xl font-bold text-neutral-800 dark:text-white\">\r\n-            👥 Join a Room\r\n-          </h1>\r\n-          <button\r\n-            onClick={() => setShowModal(true)}\r\n-            className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg shadow-md transition-colors\"\r\n-          >\r\n-            ➕ Create Room\r\n-          </button>\r\n-        </div>\r\n-\r\n-        {/* Rooms List */}\r\n-        <AnimatePresence mode=\"popLayout\">\r\n-          {rooms.length === 0 ? (\r\n-            <motion.p\r\n-              initial={{ opacity: 0 }}\r\n-              animate={{ opacity: 1 }}\r\n-              className=\"text-center text-neutral-600 dark:text-neutral-300\"\r\n-            >\r\n-              No rooms available. Create one to get started!\r\n-            </motion.p>\r\n-          ) : (\r\n-            <motion.div\r\n-              layout\r\n-              className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-5\"\r\n-            >\r\n-              {rooms.map((room) => (\r\n-                <motion.div\r\n-                  key={room.id}\r\n-                  layout\r\n-                  initial={{ opacity: 0, y: 10 }}\r\n-                  animate={{ opacity: 1, y: 0 }}\r\n-                  className=\"bg-white dark:bg-neutral-900 p-5 rounded-xl shadow-md border border-neutral-200 dark:border-neutral-800 flex flex-col justify-between\"\r\n-                >\r\n-                  <div>\r\n-                    <h2 className=\"text-xl font-semibold text-neutral-900 dark:text-white truncate\">\r\n-                      {room.name}\r\n-                    </h2>\r\n-                    <p className=\"text-sm text-neutral-600 dark:text-neutral-300 mt-1\">\r\n-                      Topic: {room.topic}\r\n-                    </p>\r\n-                    {room.description && (\r\n-                      <p className=\"text-xs mt-2 text-neutral-500 dark:text-neutral-400 line-clamp-2\">\r\n-                        {room.description}\r\n-                      </p>\r\n-                    )}\r\n-                  </div>\r\n-\r\n-                  <div className=\"flex items-center justify-between mt-4\">\r\n-                    <span className=\"text-sm text-neutral-700 dark:text-neutral-300\">\r\n-                      {room.users?.length || 0}{\" \"}\r\n-                      {room.users?.length === 1 ? \"user\" : \"users\"}\r\n-                    </span>\r\n-                    <button\r\n-                      onClick={() => handleJoinRoom(room)}\r\n-                      className=\"px-3 py-1 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm shadow-sm transition-colors\"\r\n-                    >\r\n-                      Join{room.hasPassword ? \" 🔒\" : \"\"}\r\n-                    </button>\r\n-                  </div>\r\n-                </motion.div>\r\n-              ))}\r\n-            </motion.div>\r\n-          )}\r\n-        </AnimatePresence>\r\n-      </div>\r\n-\r\n-      {/* Create Room Modal */}\r\n-      <AnimatePresence>\r\n-        {showModal && (\r\n-          <motion.div\r\n-            initial={{ opacity: 0 }}\r\n-            animate={{ opacity: 1 }}\r\n-            exit={{ opacity: 0 }}\r\n-            className=\"fixed inset-0 flex items-center justify-center bg-black/50 backdrop-blur-sm z-50\"\r\n-          >\r\n-            <motion.div\r\n-              initial={{ scale: 0.9, opacity: 0 }}\r\n-              animate={{ scale: 1, opacity: 1 }}\r\n-              exit={{ scale: 0.9, opacity: 0 }}\r\n-              className=\"bg-white dark:bg-neutral-900 p-6 rounded-xl shadow-xl w-full max-w-md\"\r\n-            >\r\n-              <h2 className=\"text-xl font-bold mb-4 text-neutral-900 dark:text-white\">\r\n-                Create a Room\r\n-              </h2>\r\n-              {[\"name\", \"topic\", \"description\", \"password\"].map((field, idx) => (\r\n-                <input\r\n-                  key={field}\r\n-                  type={field === \"password\" ? \"password\" : \"text\"}\r\n-                  placeholder={\r\n-                    field === \"description\"\r\n-                      ? \"Description (optional)\"\r\n-                      : field === \"password\"\r\n-                      ? \"Password (optional)\"\r\n-                      : `Room ${field[0].toUpperCase() + field.slice(1)}`\r\n-                  }\r\n-                  className=\"input-field mb-3\"\r\n-                  value={(form as any)[field]}\r\n                   onChange={(e) =>\r\n                     setForm({ ...form, [field]: e.target.value })\r\n                   }\r\n                 />\r\n"
                },
                {
                    "date": 1760247972778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { motion, AnimatePresence } from \"framer-motion\";\r\n import { useRouter } from \"next/navigation\";\r\n import { db } from \"@/lib/firebaseConfig\";\r\n import { collection, onSnapshot, query, orderBy } from \"firebase/firestore\";\r\n-import { connectRoomSocket } from \"@/features/RoomChat/services/roomSocketService\";\r\n+import { connectRoomSocket, createRoom as createRoomSocket } from \"@/features/RoomChat/services/roomSocketService\";\r\n \r\n interface UserInfo {\r\n   name?: string;\r\n   age?: string;\r\n@@ -53,15 +53,31 @@\n       })) as Room[];\r\n       setRooms(fetchedRooms);\r\n     });\r\n \r\n-    socket.on(\"rooms\", (updatedRooms: Room[]) => setRooms(updatedRooms));\r\n+    // Dynamic room updates from socket\r\n+    socket.on(\"new-room\", (room: Room) => {\r\n+      setRooms((prev) => [room, ...prev]);\r\n+    });\r\n+\r\n+    // Update users count dynamically\r\n+    socket.on(\"rooms-users-count\", ({ roomId, count }: { roomId: string; count: number }) => {\r\n+      setRooms((prev) =>\r\n+        prev.map((r) =>\r\n+          r.id === roomId ? { ...r, users: new Array(count).fill({}) } : r\r\n+        )\r\n+      );\r\n+    });\r\n+\r\n     socket.on(\"connected\", () => console.log(\"🟢 Room socket connected\"));\r\n+    socket.on(\"disconnect\", (reason) => console.warn(\"🔴 Disconnected:\", reason));\r\n \r\n     return () => {\r\n       unsubscribeFirestore();\r\n-      socket.off(\"rooms\");\r\n+      socket.off(\"new-room\");\r\n+      socket.off(\"rooms-users-count\");\r\n       socket.off(\"connected\");\r\n+      socket.off(\"disconnect\");\r\n     };\r\n   }, [roomsCollection, socket]);\r\n \r\n   // -------------------------\r\n@@ -73,8 +89,9 @@\n       return;\r\n     }\r\n \r\n     setIsCreating(true);\r\n+\r\n     const newRoom = {\r\n       name: form.name.trim(),\r\n       topic: form.topic.trim(),\r\n       description: form.description.trim(),\r\n@@ -82,9 +99,9 @@\n       password: form.password || null,\r\n     };\r\n \r\n     try {\r\n-      socket.emit(\"create-room\", newRoom);\r\n+      await createRoomSocket(newRoom); // <- Firebase + Socket handled inside\r\n       setForm({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n       setShowModal(false);\r\n       setToast(\"Room created successfully!\");\r\n       setTimeout(() => setToast(null), 2000);\r\n@@ -93,12 +110,12 @@\n       alert(\"Failed to create room. Try again.\");\r\n     } finally {\r\n       setIsCreating(false);\r\n     }\r\n-  }, [form, socket]);\r\n+  }, [form]);\r\n \r\n   // -------------------------\r\n-  // Join Room (Navigate to RoomPage)\r\n+  // Join Room\r\n   // -------------------------\r\n   const handleJoinRoom = useCallback(\r\n     (room: Room) => {\r\n       if (room.hasPassword) {\r\n@@ -118,11 +135,9 @@\n             country: \"Unknown\",\r\n             age: \"N/A\",\r\n           };\r\n \r\n-      // Save to localStorage to use in RoomPage\r\n       localStorage.setItem(\"user-info\", JSON.stringify(userInfo));\r\n-\r\n       router.push(`/rooms/${room.id}`);\r\n     },\r\n     [router]\r\n   );\r\n@@ -130,11 +145,9 @@\n   return (\r\n     <main className=\"min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100 dark:from-neutral-900 dark:to-neutral-800 p-6\">\r\n       <div className=\"max-w-5xl mx-auto\">\r\n         <div className=\"flex items-center justify-between mb-6\">\r\n-          <h1 className=\"text-3xl font-bold text-neutral-800 dark:text-white\">\r\n-            👥 Join a Room\r\n-          </h1>\r\n+          <h1 className=\"text-3xl font-bold text-neutral-800 dark:text-white\">👥 Join a Room</h1>\r\n           <button\r\n             onClick={() => setShowModal(true)}\r\n             className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg shadow-md transition-colors\"\r\n           >\r\n@@ -144,51 +157,26 @@\n \r\n         {/* Rooms List */}\r\n         <AnimatePresence mode=\"popLayout\">\r\n           {rooms.length === 0 ? (\r\n-            <motion.p\r\n-              initial={{ opacity: 0 }}\r\n-              animate={{ opacity: 1 }}\r\n-              className=\"text-center text-neutral-600 dark:text-neutral-300\"\r\n-            >\r\n+            <motion.p initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"text-center text-neutral-600 dark:text-neutral-300\">\r\n               No rooms available. Create one to get started!\r\n             </motion.p>\r\n           ) : (\r\n-            <motion.div\r\n-              layout\r\n-              className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-5\"\r\n-            >\r\n+            <motion.div layout className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-5\">\r\n               {rooms.map((room) => (\r\n-                <motion.div\r\n-                  key={room.id}\r\n-                  layout\r\n-                  initial={{ opacity: 0, y: 10 }}\r\n-                  animate={{ opacity: 1, y: 0 }}\r\n-                  className=\"bg-white dark:bg-neutral-900 p-5 rounded-xl shadow-md border border-neutral-200 dark:border-neutral-800 flex flex-col justify-between\"\r\n-                >\r\n+                <motion.div key={room.id} layout initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} className=\"bg-white dark:bg-neutral-900 p-5 rounded-xl shadow-md border border-neutral-200 dark:border-neutral-800 flex flex-col justify-between\">\r\n                   <div>\r\n-                    <h2 className=\"text-xl font-semibold text-neutral-900 dark:text-white truncate\">\r\n-                      {room.name}\r\n-                    </h2>\r\n-                    <p className=\"text-sm text-neutral-600 dark:text-neutral-300 mt-1\">\r\n-                      Topic: {room.topic}\r\n-                    </p>\r\n-                    {room.description && (\r\n-                      <p className=\"text-xs mt-2 text-neutral-500 dark:text-neutral-400 line-clamp-2\">\r\n-                        {room.description}\r\n-                      </p>\r\n-                    )}\r\n+                    <h2 className=\"text-xl font-semibold text-neutral-900 dark:text-white truncate\">{room.name}</h2>\r\n+                    <p className=\"text-sm text-neutral-600 dark:text-neutral-300 mt-1\">Topic: {room.topic}</p>\r\n+                    {room.description && <p className=\"text-xs mt-2 text-neutral-500 dark:text-neutral-400 line-clamp-2\">{room.description}</p>}\r\n                   </div>\r\n \r\n                   <div className=\"flex items-center justify-between mt-4\">\r\n                     <span className=\"text-sm text-neutral-700 dark:text-neutral-300\">\r\n-                      {room.users?.length || 0}{\" \"}\r\n-                      {room.users?.length === 1 ? \"user\" : \"users\"}\r\n+                      {room.users?.length || 0} {room.users?.length === 1 ? \"user\" : \"users\"}\r\n                     </span>\r\n-                    <button\r\n-                      onClick={() => handleJoinRoom(room)}\r\n-                      className=\"px-3 py-1 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm shadow-sm transition-colors\"\r\n-                    >\r\n+                    <button onClick={() => handleJoinRoom(room)} className=\"px-3 py-1 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm shadow-sm transition-colors\">\r\n                       Join{room.hasPassword ? \" 🔒\" : \"\"}\r\n                     </button>\r\n                   </div>\r\n                 </motion.div>\r\n@@ -197,76 +185,8 @@\n           )}\r\n         </AnimatePresence>\r\n       </div>\r\n \r\n-      {/* Create Room Modal */}\r\n-      <AnimatePresence>\r\n-        {showModal && (\r\n-          <motion.div\r\n-            initial={{ opacity: 0 }}\r\n-            animate={{ opacity: 1 }}\r\n-            exit={{ opacity: 0 }}\r\n-            className=\"fixed inset-0 flex items-center justify-center bg-black/50 backdrop-blur-sm z-50\"\r\n-          >\r\n-            <motion.div\r\n-              initial={{ scale: 0.9, opacity: 0 }}\r\n-              animate={{ scale: 1, opacity: 1 }}\r\n-              exit={{ scale: 0.9, opacity: 0 }}\r\n-              className=\"bg-white dark:bg-neutral-900 p-6 rounded-xl shadow-xl w-full max-w-md\"\r\n-            >\r\n-              <h2 className=\"text-xl font-bold mb-4 text-neutral-900 dark:text-white\">\r\n-                Create a Room\r\n-              </h2>\r\n-              {[\"name\", \"topic\", \"description\", \"password\"].map((field) => (\r\n-                <input\r\n-                  key={field}\r\n-                  type={field === \"password\" ? \"password\" : \"text\"}\r\n-                  placeholder={\r\n-                    field === \"description\"\r\n-                      ? \"Description (optional)\"\r\n-                      : field === \"password\"\r\n-                      ? \"Password (optional)\"\r\n-                      : `Room ${field[0].toUpperCase() + field.slice(1)}`\r\n-                  }\r\n-                  className=\"input-field mb-3 w-full px-3 py-2 rounded-md border border-gray-300 dark:border-neutral-700 dark:bg-neutral-800 text-neutral-900 dark:text-white\"\r\n-                  value={(form as any)[field]}\r\n-                  onChange={(e) =>\r\n-                    setForm({ ...form, [field]: e.target.value })\r\n-                  }\r\n-                />\r\n-              ))}\r\n-              <div className=\"flex justify-end gap-3 mt-4\">\r\n-                <button\r\n-                  onClick={() => setShowModal(false)}\r\n-                  className=\"px-4 py-2 bg-neutral-300 dark:bg-neutral-700 text-neutral-900 dark:text-white rounded-md\"\r\n-                >\r\n-                  Cancel\r\n-                </button>\r\n-                <button\r\n-                  disabled={isCreating}\r\n-                  onClick={handleCreateRoom}\r\n-                  className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-md shadow-md transition-colors disabled:opacity-50\"\r\n-                >\r\n-                  {isCreating ? \"Creating...\" : \"Create\"}\r\n-                </button>\r\n-              </div>\r\n-            </motion.div>\r\n-          </motion.div>\r\n-        )}\r\n-      </AnimatePresence>\r\n-\r\n-      {/* Toast */}\r\n-      <AnimatePresence>\r\n-        {toast && (\r\n-          <motion.div\r\n-            initial={{ y: 40, opacity: 0 }}\r\n-            animate={{ y: 0, opacity: 1 }}\r\n-            exit={{ y: 40, opacity: 0 }}\r\n-            className=\"fixed bottom-6 left-1/2 -translate-x-1/2 bg-indigo-600 text-white px-4 py-2 rounded-md shadow-lg\"\r\n-          >\r\n-            {toast}\r\n-          </motion.div>\r\n-        )}\r\n-      </AnimatePresence>\r\n+      {/* Modal + Toast... (same as before) */}\r\n     </main>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1760261879974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,192 +1,147 @@\n \"use client\";\r\n \r\n-import { useEffect, useState, useCallback, useMemo } from \"react\";\r\n-import { motion, AnimatePresence } from \"framer-motion\";\r\n+import React, { useEffect, useState } from \"react\";\r\n import { useRouter } from \"next/navigation\";\r\n-import { db } from \"@/lib/firebaseConfig\";\r\n-import { collection, onSnapshot, query, orderBy } from \"firebase/firestore\";\r\n-import { connectRoomSocket, createRoom as createRoomSocket } from \"@/features/RoomChat/services/roomSocketService\";\r\n+import { connectRoomSocket, disconnectRoomSocket } from \"../../features/RoomChat/services/roomSocketService\";\r\n \r\n-interface UserInfo {\r\n-  name?: string;\r\n-  age?: string;\r\n-  gender?: string;\r\n-  country?: string;\r\n-}\r\n-\r\n interface Room {\r\n   id: string;\r\n   name: string;\r\n   topic: string;\r\n   description?: string;\r\n-  users: { socketId: string; userInfo: UserInfo }[];\r\n-  hasPassword: boolean;\r\n-  password?: string | null;\r\n-  createdAt?: any;\r\n+  hasPassword?: boolean;\r\n+  users?: { socketId: string }[];\r\n }\r\n \r\n export default function RoomsPage() {\r\n   const router = useRouter();\r\n   const [rooms, setRooms] = useState<Room[]>([]);\r\n-  const [showModal, setShowModal] = useState(false);\r\n-  const [isCreating, setIsCreating] = useState(false);\r\n-  const [toast, setToast] = useState<string | null>(null);\r\n-  const [form, setForm] = useState({\r\n-    name: \"\",\r\n-    topic: \"\",\r\n-    description: \"\",\r\n-    password: \"\",\r\n-  });\r\n+  const [socket, setSocket] = useState<any>(null);\r\n \r\n-  const roomsCollection = useMemo(() => collection(db, \"rooms\"), []);\r\n-  const socket = useMemo(() => connectRoomSocket(), []);\r\n+  const [newRoom, setNewRoom] = useState({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n \r\n-  // -------------------------\r\n-  // Load rooms from Firestore + Socket\r\n-  // -------------------------\r\n+  // -----------------------------\r\n+  // Connect to /rooms namespace\r\n+  // -----------------------------\r\n   useEffect(() => {\r\n-    const q = query(roomsCollection, orderBy(\"createdAt\", \"desc\"));\r\n-    const unsubscribeFirestore = onSnapshot(q, (snapshot) => {\r\n-      const fetchedRooms = snapshot.docs.map((doc) => ({\r\n-        id: doc.id,\r\n-        ...doc.data(),\r\n-      })) as Room[];\r\n-      setRooms(fetchedRooms);\r\n-    });\r\n+    const s = connectRoomSocket(\"/rooms\");\r\n+    setSocket(s);\r\n \r\n-    // Dynamic room updates from socket\r\n-    socket.on(\"new-room\", (room: Room) => {\r\n-      setRooms((prev) => [room, ...prev]);\r\n-    });\r\n+    s.on(\"connected\", () => console.log(\"✅ Connected to /rooms namespace\"));\r\n+    s.on(\"rooms\", (list: Room[]) => setRooms(list));\r\n \r\n-    // Update users count dynamically\r\n-    socket.on(\"rooms-users-count\", ({ roomId, count }: { roomId: string; count: number }) => {\r\n-      setRooms((prev) =>\r\n-        prev.map((r) =>\r\n-          r.id === roomId ? { ...r, users: new Array(count).fill({}) } : r\r\n-        )\r\n-      );\r\n-    });\r\n-\r\n-    socket.on(\"connected\", () => console.log(\"🟢 Room socket connected\"));\r\n-    socket.on(\"disconnect\", (reason) => console.warn(\"🔴 Disconnected:\", reason));\r\n-\r\n     return () => {\r\n-      unsubscribeFirestore();\r\n-      socket.off(\"new-room\");\r\n-      socket.off(\"rooms-users-count\");\r\n-      socket.off(\"connected\");\r\n-      socket.off(\"disconnect\");\r\n+      disconnectRoomSocket();\r\n+      setSocket(null);\r\n     };\r\n-  }, [roomsCollection, socket]);\r\n+  }, []);\r\n \r\n-  // -------------------------\r\n+  // -----------------------------\r\n   // Create Room\r\n-  // -------------------------\r\n-  const handleCreateRoom = useCallback(async () => {\r\n-    if (!form.name.trim() || !form.topic.trim()) {\r\n-      alert(\"Room name and topic are required\");\r\n-      return;\r\n-    }\r\n+  // -----------------------------\r\n+  const handleCreateRoom = () => {\r\n+    if (!newRoom.name || !newRoom.topic) return alert(\"Name & Topic are required\");\r\n+    socket.emit(\"create-room\", newRoom);\r\n+    setNewRoom({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n+  };\r\n \r\n-    setIsCreating(true);\r\n+  useEffect(() => {\r\n+    if (!socket) return;\r\n \r\n-    const newRoom = {\r\n-      name: form.name.trim(),\r\n-      topic: form.topic.trim(),\r\n-      description: form.description.trim(),\r\n-      hasPassword: !!form.password,\r\n-      password: form.password || null,\r\n+    socket.on(\"room-created\", (room: Room) => {\r\n+      setRooms((prev) => [...prev, room]);\r\n+      // Automatically join new room\r\n+      router.push(`/rooms/${room.id}`);\r\n+    });\r\n+\r\n+    socket.on(\"create-room-error\", (err: { message: string }) => {\r\n+      alert(\"Error creating room: \" + err.message);\r\n+    });\r\n+\r\n+    return () => {\r\n+      socket.off(\"room-created\");\r\n+      socket.off(\"create-room-error\");\r\n     };\r\n+  }, [socket, router]);\r\n \r\n-    try {\r\n-      await createRoomSocket(newRoom); // <- Firebase + Socket handled inside\r\n-      setForm({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n-      setShowModal(false);\r\n-      setToast(\"Room created successfully!\");\r\n-      setTimeout(() => setToast(null), 2000);\r\n-    } catch (err) {\r\n-      console.error(\"❌ Error creating room:\", err);\r\n-      alert(\"Failed to create room. Try again.\");\r\n-    } finally {\r\n-      setIsCreating(false);\r\n-    }\r\n-  }, [form]);\r\n-\r\n-  // -------------------------\r\n+  // -----------------------------\r\n   // Join Room\r\n-  // -------------------------\r\n-  const handleJoinRoom = useCallback(\r\n-    (room: Room) => {\r\n-      if (room.hasPassword) {\r\n-        const pass = prompt(\"Enter room password:\");\r\n-        if (!pass || pass !== room.password) {\r\n-          alert(\"Incorrect password\");\r\n-          return;\r\n-        }\r\n-      }\r\n+  // -----------------------------\r\n+  const joinRoom = (roomId: string) => {\r\n+    router.push(`/rooms/${roomId}`);\r\n+  };\r\n \r\n-      const userInfoStr = localStorage.getItem(\"user-info\");\r\n-      let userInfo: UserInfo = userInfoStr\r\n-        ? JSON.parse(userInfoStr)\r\n-        : {\r\n-            name: \"Guest \" + Math.floor(Math.random() * 1000),\r\n-            gender: \"Unknown\",\r\n-            country: \"Unknown\",\r\n-            age: \"N/A\",\r\n-          };\r\n-\r\n-      localStorage.setItem(\"user-info\", JSON.stringify(userInfo));\r\n-      router.push(`/rooms/${room.id}`);\r\n-    },\r\n-    [router]\r\n-  );\r\n-\r\n   return (\r\n-    <main className=\"min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100 dark:from-neutral-900 dark:to-neutral-800 p-6\">\r\n-      <div className=\"max-w-5xl mx-auto\">\r\n-        <div className=\"flex items-center justify-between mb-6\">\r\n-          <h1 className=\"text-3xl font-bold text-neutral-800 dark:text-white\">👥 Join a Room</h1>\r\n-          <button\r\n-            onClick={() => setShowModal(true)}\r\n-            className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg shadow-md transition-colors\"\r\n-          >\r\n-            ➕ Create Room\r\n-          </button>\r\n-        </div>\r\n+    <div className=\"p-6 max-w-5xl mx-auto flex flex-col gap-6\">\r\n+      <h1 className=\"text-3xl font-bold text-center\">Rooms Hub</h1>\r\n \r\n-        {/* Rooms List */}\r\n-        <AnimatePresence mode=\"popLayout\">\r\n-          {rooms.length === 0 ? (\r\n-            <motion.p initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"text-center text-neutral-600 dark:text-neutral-300\">\r\n-              No rooms available. Create one to get started!\r\n-            </motion.p>\r\n-          ) : (\r\n-            <motion.div layout className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-5\">\r\n-              {rooms.map((room) => (\r\n-                <motion.div key={room.id} layout initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} className=\"bg-white dark:bg-neutral-900 p-5 rounded-xl shadow-md border border-neutral-200 dark:border-neutral-800 flex flex-col justify-between\">\r\n-                  <div>\r\n-                    <h2 className=\"text-xl font-semibold text-neutral-900 dark:text-white truncate\">{room.name}</h2>\r\n-                    <p className=\"text-sm text-neutral-600 dark:text-neutral-300 mt-1\">Topic: {room.topic}</p>\r\n-                    {room.description && <p className=\"text-xs mt-2 text-neutral-500 dark:text-neutral-400 line-clamp-2\">{room.description}</p>}\r\n-                  </div>\r\n+      {/* Room Creation */}\r\n+      <div className=\"bg-gray-100 dark:bg-neutral-800 p-4 rounded-lg shadow\">\r\n+        <h2 className=\"text-xl font-semibold mb-3\">Create a Room</h2>\r\n+        <input\r\n+          type=\"text\"\r\n+          placeholder=\"Room Name\"\r\n+          value={newRoom.name}\r\n+          onChange={(e) => setNewRoom({ ...newRoom, name: e.target.value })}\r\n+          className=\"w-full p-2 mb-2 rounded border\"\r\n+        />\r\n+        <input\r\n+          type=\"text\"\r\n+          placeholder=\"Topic\"\r\n+          value={newRoom.topic}\r\n+          onChange={(e) => setNewRoom({ ...newRoom, topic: e.target.value })}\r\n+          className=\"w-full p-2 mb-2 rounded border\"\r\n+        />\r\n+        <input\r\n+          type=\"text\"\r\n+          placeholder=\"Description (optional)\"\r\n+          value={newRoom.description}\r\n+          onChange={(e) => setNewRoom({ ...newRoom, description: e.target.value })}\r\n+          className=\"w-full p-2 mb-2 rounded border\"\r\n+        />\r\n+        <input\r\n+          type=\"password\"\r\n+          placeholder=\"Password (optional)\"\r\n+          value={newRoom.password}\r\n+          onChange={(e) => setNewRoom({ ...newRoom, password: e.target.value })}\r\n+          className=\"w-full p-2 mb-2 rounded border\"\r\n+        />\r\n+        <button\r\n+          onClick={handleCreateRoom}\r\n+          className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50\"\r\n+        >\r\n+          Create Room\r\n+        </button>\r\n+      </div>\r\n \r\n-                  <div className=\"flex items-center justify-between mt-4\">\r\n-                    <span className=\"text-sm text-neutral-700 dark:text-neutral-300\">\r\n-                      {room.users?.length || 0} {room.users?.length === 1 ? \"user\" : \"users\"}\r\n-                    </span>\r\n-                    <button onClick={() => handleJoinRoom(room)} className=\"px-3 py-1 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm shadow-sm transition-colors\">\r\n-                      Join{room.hasPassword ? \" 🔒\" : \"\"}\r\n-                    </button>\r\n-                  </div>\r\n-                </motion.div>\r\n-              ))}\r\n-            </motion.div>\r\n-          )}\r\n-        </AnimatePresence>\r\n+      {/* Room List */}\r\n+      <div className=\"bg-gray-50 dark:bg-neutral-900 p-4 rounded-lg shadow\">\r\n+        <h2 className=\"text-xl font-semibold mb-3\">Available Rooms</h2>\r\n+        {rooms.length === 0 ? (\r\n+          <p>No rooms yet. Create one above!</p>\r\n+        ) : (\r\n+          <ul className=\"space-y-2\">\r\n+            {rooms.map((room) => (\r\n+              <li\r\n+                key={room.id}\r\n+                className=\"p-3 bg-white dark:bg-gray-800 rounded flex justify-between items-center shadow hover:shadow-md cursor-pointer\"\r\n+              >\r\n+                <div>\r\n+                  <h3 className=\"font-bold\">{room.name}</h3>\r\n+                  <p className=\"text-sm\">{room.topic}</p>\r\n+                  {room.description && <p className=\"text-xs text-gray-500 dark:text-gray-400\">{room.description}</p>}\r\n+                </div>\r\n+                <button\r\n+                  onClick={() => joinRoom(room.id)}\r\n+                  className=\"bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600\"\r\n+                >\r\n+                  Join\r\n+                </button>\r\n+              </li>\r\n+            ))}\r\n+          </ul>\r\n+        )}\r\n       </div>\r\n-\r\n-      {/* Modal + Toast... (same as before) */}\r\n-    </main>\r\n+    </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1760261889454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \"use client\";\r\n \r\n import React, { useEffect, useState } from \"react\";\r\n import { useRouter } from \"next/navigation\";\r\n-import { connectRoomSocket, disconnectRoomSocket } from \"../../features/RoomChat/services/roomSocketService\";\r\n+import { connectRoomSocket, disconnectRoomSocket } from \"../features/RoomChat/services/roomSocketService\";\r\n \r\n interface Room {\r\n   id: string;\r\n   name: string;\r\n"
                },
                {
                    "date": 1760262011497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   // -----------------------------\r\n   // Connect to /rooms namespace\r\n   // -----------------------------\r\n   useEffect(() => {\r\n-    const s = connectRoomSocket(\"/rooms\");\r\n+    const s = connectRoomSocket();\r\n     setSocket(s);\r\n \r\n     s.on(\"connected\", () => console.log(\"✅ Connected to /rooms namespace\"));\r\n     s.on(\"rooms\", (list: Room[]) => setRooms(list));\r\n"
                },
                {
                    "date": 1760262450415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,147 +0,0 @@\n-\"use client\";\r\n-\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { useRouter } from \"next/navigation\";\r\n-import { connectRoomSocket, disconnectRoomSocket } from \"../features/RoomChat/services/roomSocketService\";\r\n-\r\n-interface Room {\r\n-  id: string;\r\n-  name: string;\r\n-  topic: string;\r\n-  description?: string;\r\n-  hasPassword?: boolean;\r\n-  users?: { socketId: string }[];\r\n-}\r\n-\r\n-export default function RoomsPage() {\r\n-  const router = useRouter();\r\n-  const [rooms, setRooms] = useState<Room[]>([]);\r\n-  const [socket, setSocket] = useState<any>(null);\r\n-\r\n-  const [newRoom, setNewRoom] = useState({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n-\r\n-  // -----------------------------\r\n-  // Connect to /rooms namespace\r\n-  // -----------------------------\r\n-  useEffect(() => {\r\n-    const s = connectRoomSocket();\r\n-    setSocket(s);\r\n-\r\n-    s.on(\"connected\", () => console.log(\"✅ Connected to /rooms namespace\"));\r\n-    s.on(\"rooms\", (list: Room[]) => setRooms(list));\r\n-\r\n-    return () => {\r\n-      disconnectRoomSocket();\r\n-      setSocket(null);\r\n-    };\r\n-  }, []);\r\n-\r\n-  // -----------------------------\r\n-  // Create Room\r\n-  // -----------------------------\r\n-  const handleCreateRoom = () => {\r\n-    if (!newRoom.name || !newRoom.topic) return alert(\"Name & Topic are required\");\r\n-    socket.emit(\"create-room\", newRoom);\r\n-    setNewRoom({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!socket) return;\r\n-\r\n-    socket.on(\"room-created\", (room: Room) => {\r\n-      setRooms((prev) => [...prev, room]);\r\n-      // Automatically join new room\r\n-      router.push(`/rooms/${room.id}`);\r\n-    });\r\n-\r\n-    socket.on(\"create-room-error\", (err: { message: string }) => {\r\n-      alert(\"Error creating room: \" + err.message);\r\n-    });\r\n-\r\n-    return () => {\r\n-      socket.off(\"room-created\");\r\n-      socket.off(\"create-room-error\");\r\n-    };\r\n-  }, [socket, router]);\r\n-\r\n-  // -----------------------------\r\n-  // Join Room\r\n-  // -----------------------------\r\n-  const joinRoom = (roomId: string) => {\r\n-    router.push(`/rooms/${roomId}`);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"p-6 max-w-5xl mx-auto flex flex-col gap-6\">\r\n-      <h1 className=\"text-3xl font-bold text-center\">Rooms Hub</h1>\r\n-\r\n-      {/* Room Creation */}\r\n-      <div className=\"bg-gray-100 dark:bg-neutral-800 p-4 rounded-lg shadow\">\r\n-        <h2 className=\"text-xl font-semibold mb-3\">Create a Room</h2>\r\n-        <input\r\n-          type=\"text\"\r\n-          placeholder=\"Room Name\"\r\n-          value={newRoom.name}\r\n-          onChange={(e) => setNewRoom({ ...newRoom, name: e.target.value })}\r\n-          className=\"w-full p-2 mb-2 rounded border\"\r\n-        />\r\n-        <input\r\n-          type=\"text\"\r\n-          placeholder=\"Topic\"\r\n-          value={newRoom.topic}\r\n-          onChange={(e) => setNewRoom({ ...newRoom, topic: e.target.value })}\r\n-          className=\"w-full p-2 mb-2 rounded border\"\r\n-        />\r\n-        <input\r\n-          type=\"text\"\r\n-          placeholder=\"Description (optional)\"\r\n-          value={newRoom.description}\r\n-          onChange={(e) => setNewRoom({ ...newRoom, description: e.target.value })}\r\n-          className=\"w-full p-2 mb-2 rounded border\"\r\n-        />\r\n-        <input\r\n-          type=\"password\"\r\n-          placeholder=\"Password (optional)\"\r\n-          value={newRoom.password}\r\n-          onChange={(e) => setNewRoom({ ...newRoom, password: e.target.value })}\r\n-          className=\"w-full p-2 mb-2 rounded border\"\r\n-        />\r\n-        <button\r\n-          onClick={handleCreateRoom}\r\n-          className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50\"\r\n-        >\r\n-          Create Room\r\n-        </button>\r\n-      </div>\r\n-\r\n-      {/* Room List */}\r\n-      <div className=\"bg-gray-50 dark:bg-neutral-900 p-4 rounded-lg shadow\">\r\n-        <h2 className=\"text-xl font-semibold mb-3\">Available Rooms</h2>\r\n-        {rooms.length === 0 ? (\r\n-          <p>No rooms yet. Create one above!</p>\r\n-        ) : (\r\n-          <ul className=\"space-y-2\">\r\n-            {rooms.map((room) => (\r\n-              <li\r\n-                key={room.id}\r\n-                className=\"p-3 bg-white dark:bg-gray-800 rounded flex justify-between items-center shadow hover:shadow-md cursor-pointer\"\r\n-              >\r\n-                <div>\r\n-                  <h3 className=\"font-bold\">{room.name}</h3>\r\n-                  <p className=\"text-sm\">{room.topic}</p>\r\n-                  {room.description && <p className=\"text-xs text-gray-500 dark:text-gray-400\">{room.description}</p>}\r\n-                </div>\r\n-                <button\r\n-                  onClick={() => joinRoom(room.id)}\r\n-                  className=\"bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600\"\r\n-                >\r\n-                  Join\r\n-                </button>\r\n-              </li>\r\n-            ))}\r\n-          </ul>\r\n-        )}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760262495257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,147 @@\n-\n+\"use client\";\r\n+\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { useRouter } from \"next/navigation\";\r\n+import { connectRoomSocket, disconnectRoomSocket } from \"../features/RoomChat/services/roomSocketService\";\r\n+\r\n+interface Room {\r\n+  id: string;\r\n+  name: string;\r\n+  topic: string;\r\n+  description?: string;\r\n+  hasPassword?: boolean;\r\n+  users?: { socketId: string }[];\r\n+}\r\n+\r\n+export default function RoomsPage() {\r\n+  const router = useRouter();\r\n+  const [rooms, setRooms] = useState<Room[]>([]);\r\n+  const [socket, setSocket] = useState<any>(null);\r\n+\r\n+  const [newRoom, setNewRoom] = useState({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n+\r\n+  // -----------------------------\r\n+  // Connect to /rooms namespace\r\n+  // -----------------------------\r\n+  useEffect(() => {\r\n+    const s = connectRoomSocket();\r\n+    setSocket(s);\r\n+\r\n+    s.on(\"connected\", () => console.log(\"✅ Connected to /rooms namespace\"));\r\n+    s.on(\"rooms\", (list: Room[]) => setRooms(list));\r\n+\r\n+    return () => {\r\n+      disconnectRoomSocket();\r\n+      setSocket(null);\r\n+    };\r\n+  }, []);\r\n+\r\n+  // -----------------------------\r\n+  // Create Room\r\n+  // -----------------------------\r\n+  const handleCreateRoom = () => {\r\n+    if (!newRoom.name || !newRoom.topic) return alert(\"Name & Topic are required\");\r\n+    socket.emit(\"create-room\", newRoom);\r\n+    setNewRoom({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!socket) return;\r\n+\r\n+    socket.on(\"room-created\", (room: Room) => {\r\n+      setRooms((prev) => [...prev, room]);\r\n+      // Automatically join new room\r\n+      router.push(`/rooms/${room.id}`);\r\n+    });\r\n+\r\n+    socket.on(\"create-room-error\", (err: { message: string }) => {\r\n+      alert(\"Error creating room: \" + err.message);\r\n+    });\r\n+\r\n+    return () => {\r\n+      socket.off(\"room-created\");\r\n+      socket.off(\"create-room-error\");\r\n+    };\r\n+  }, [socket, router]);\r\n+\r\n+  // -----------------------------\r\n+  // Join Room\r\n+  // -----------------------------\r\n+  const joinRoom = (roomId: string) => {\r\n+    router.push(`/rooms/${roomId}`);\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"p-6 max-w-5xl mx-auto flex flex-col gap-6\">\r\n+      <h1 className=\"text-3xl font-bold text-center\">Rooms Hub</h1>\r\n+\r\n+      {/* Room Creation */}\r\n+      <div className=\"bg-gray-100 dark:bg-neutral-800 p-4 rounded-lg shadow\">\r\n+        <h2 className=\"text-xl font-semibold mb-3\">Create a Room</h2>\r\n+        <input\r\n+          type=\"text\"\r\n+          placeholder=\"Room Name\"\r\n+          value={newRoom.name}\r\n+          onChange={(e) => setNewRoom({ ...newRoom, name: e.target.value })}\r\n+          className=\"w-full p-2 mb-2 rounded border\"\r\n+        />\r\n+        <input\r\n+          type=\"text\"\r\n+          placeholder=\"Topic\"\r\n+          value={newRoom.topic}\r\n+          onChange={(e) => setNewRoom({ ...newRoom, topic: e.target.value })}\r\n+          className=\"w-full p-2 mb-2 rounded border\"\r\n+        />\r\n+        <input\r\n+          type=\"text\"\r\n+          placeholder=\"Description (optional)\"\r\n+          value={newRoom.description}\r\n+          onChange={(e) => setNewRoom({ ...newRoom, description: e.target.value })}\r\n+          className=\"w-full p-2 mb-2 rounded border\"\r\n+        />\r\n+        <input\r\n+          type=\"password\"\r\n+          placeholder=\"Password (optional)\"\r\n+          value={newRoom.password}\r\n+          onChange={(e) => setNewRoom({ ...newRoom, password: e.target.value })}\r\n+          className=\"w-full p-2 mb-2 rounded border\"\r\n+        />\r\n+        <button\r\n+          onClick={handleCreateRoom}\r\n+          className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50\"\r\n+        >\r\n+          Create Room\r\n+        </button>\r\n+      </div>\r\n+\r\n+      {/* Room List */}\r\n+      <div className=\"bg-gray-50 dark:bg-neutral-900 p-4 rounded-lg shadow\">\r\n+        <h2 className=\"text-xl font-semibold mb-3\">Available Rooms</h2>\r\n+        {rooms.length === 0 ? (\r\n+          <p>No rooms yet. Create one above!</p>\r\n+        ) : (\r\n+          <ul className=\"space-y-2\">\r\n+            {rooms.map((room) => (\r\n+              <li\r\n+                key={room.id}\r\n+                className=\"p-3 bg-white dark:bg-gray-800 rounded flex justify-between items-center shadow hover:shadow-md cursor-pointer\"\r\n+              >\r\n+                <div>\r\n+                  <h3 className=\"font-bold\">{room.name}</h3>\r\n+                  <p className=\"text-sm\">{room.topic}</p>\r\n+                  {room.description && <p className=\"text-xs text-gray-500 dark:text-gray-400\">{room.description}</p>}\r\n+                </div>\r\n+                <button\r\n+                  onClick={() => joinRoom(room.id)}\r\n+                  className=\"bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600\"\r\n+                >\r\n+                  Join\r\n+                </button>\r\n+              </li>\r\n+            ))}\r\n+          </ul>\r\n+        )}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1760262632620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,146 +2,95 @@\n \r\n import React, { useEffect, useState } from \"react\";\r\n import { useRouter } from \"next/navigation\";\r\n import { connectRoomSocket, disconnectRoomSocket } from \"../features/RoomChat/services/roomSocketService\";\r\n+import { Button } from \"../components/common/Button\";\r\n \r\n interface Room {\r\n   id: string;\r\n   name: string;\r\n   topic: string;\r\n   description?: string;\r\n-  hasPassword?: boolean;\r\n-  users?: { socketId: string }[];\r\n+  users?: { socketId: string; userInfo: any }[];\r\n }\r\n \r\n export default function RoomsPage() {\r\n   const router = useRouter();\r\n   const [rooms, setRooms] = useState<Room[]>([]);\r\n   const [socket, setSocket] = useState<any>(null);\r\n+  const [roomName, setRoomName] = useState(\"\");\r\n+  const [roomTopic, setRoomTopic] = useState(\"\");\r\n \r\n-  const [newRoom, setNewRoom] = useState({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n-\r\n-  // -----------------------------\r\n-  // Connect to /rooms namespace\r\n-  // -----------------------------\r\n   useEffect(() => {\r\n     const s = connectRoomSocket();\r\n     setSocket(s);\r\n \r\n-    s.on(\"connected\", () => console.log(\"✅ Connected to /rooms namespace\"));\r\n-    s.on(\"rooms\", (list: Room[]) => setRooms(list));\r\n+    // Get all rooms\r\n+    s.on(\"rooms\", (data: Room[]) => setRooms(data));\r\n \r\n+    // Fetch rooms from server\r\n+    s.emit(\"get-rooms\");\r\n+\r\n     return () => {\r\n       disconnectRoomSocket();\r\n-      setSocket(null);\r\n     };\r\n   }, []);\r\n \r\n-  // -----------------------------\r\n-  // Create Room\r\n-  // -----------------------------\r\n-  const handleCreateRoom = () => {\r\n-    if (!newRoom.name || !newRoom.topic) return alert(\"Name & Topic are required\");\r\n-    socket.emit(\"create-room\", newRoom);\r\n-    setNewRoom({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n+  const createRoom = () => {\r\n+    if (!roomName || !roomTopic) return alert(\"Please enter name and topic\");\r\n+    socket.emit(\"create-room\", { name: roomName, topic: roomTopic });\r\n+    setRoomName(\"\");\r\n+    setRoomTopic(\"\");\r\n   };\r\n \r\n-  useEffect(() => {\r\n-    if (!socket) return;\r\n-\r\n-    socket.on(\"room-created\", (room: Room) => {\r\n-      setRooms((prev) => [...prev, room]);\r\n-      // Automatically join new room\r\n-      router.push(`/rooms/${room.id}`);\r\n-    });\r\n-\r\n-    socket.on(\"create-room-error\", (err: { message: string }) => {\r\n-      alert(\"Error creating room: \" + err.message);\r\n-    });\r\n-\r\n-    return () => {\r\n-      socket.off(\"room-created\");\r\n-      socket.off(\"create-room-error\");\r\n-    };\r\n-  }, [socket, router]);\r\n-\r\n-  // -----------------------------\r\n-  // Join Room\r\n-  // -----------------------------\r\n-  const joinRoom = (roomId: string) => {\r\n-    router.push(`/rooms/${roomId}`);\r\n+  const joinRoom = (id: string) => {\r\n+    router.push(`/rooms/${id}`);\r\n   };\r\n \r\n   return (\r\n-    <div className=\"p-6 max-w-5xl mx-auto flex flex-col gap-6\">\r\n-      <h1 className=\"text-3xl font-bold text-center\">Rooms Hub</h1>\r\n+    <div className=\"p-6 min-h-screen bg-neutral-50 dark:bg-neutral-900\">\r\n+      <h1 className=\"text-2xl font-bold mb-6\">Rooms Dashboard</h1>\r\n \r\n-      {/* Room Creation */}\r\n-      <div className=\"bg-gray-100 dark:bg-neutral-800 p-4 rounded-lg shadow\">\r\n-        <h2 className=\"text-xl font-semibold mb-3\">Create a Room</h2>\r\n+      {/* Create Room */}\r\n+      <div className=\"flex flex-col sm:flex-row gap-2 mb-6\">\r\n         <input\r\n           type=\"text\"\r\n           placeholder=\"Room Name\"\r\n-          value={newRoom.name}\r\n-          onChange={(e) => setNewRoom({ ...newRoom, name: e.target.value })}\r\n-          className=\"w-full p-2 mb-2 rounded border\"\r\n+          value={roomName}\r\n+          onChange={(e) => setRoomName(e.target.value)}\r\n+          className=\"p-2 border rounded flex-1\"\r\n         />\r\n         <input\r\n           type=\"text\"\r\n-          placeholder=\"Topic\"\r\n-          value={newRoom.topic}\r\n-          onChange={(e) => setNewRoom({ ...newRoom, topic: e.target.value })}\r\n-          className=\"w-full p-2 mb-2 rounded border\"\r\n+          placeholder=\"Room Topic\"\r\n+          value={roomTopic}\r\n+          onChange={(e) => setRoomTopic(e.target.value)}\r\n+          className=\"p-2 border rounded flex-1\"\r\n         />\r\n-        <input\r\n-          type=\"text\"\r\n-          placeholder=\"Description (optional)\"\r\n-          value={newRoom.description}\r\n-          onChange={(e) => setNewRoom({ ...newRoom, description: e.target.value })}\r\n-          className=\"w-full p-2 mb-2 rounded border\"\r\n-        />\r\n-        <input\r\n-          type=\"password\"\r\n-          placeholder=\"Password (optional)\"\r\n-          value={newRoom.password}\r\n-          onChange={(e) => setNewRoom({ ...newRoom, password: e.target.value })}\r\n-          className=\"w-full p-2 mb-2 rounded border\"\r\n-        />\r\n-        <button\r\n-          onClick={handleCreateRoom}\r\n-          className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50\"\r\n-        >\r\n-          Create Room\r\n-        </button>\r\n+        <Button onClick={createRoom}>Create Room</Button>\r\n       </div>\r\n \r\n-      {/* Room List */}\r\n-      <div className=\"bg-gray-50 dark:bg-neutral-900 p-4 rounded-lg shadow\">\r\n-        <h2 className=\"text-xl font-semibold mb-3\">Available Rooms</h2>\r\n-        {rooms.length === 0 ? (\r\n-          <p>No rooms yet. Create one above!</p>\r\n-        ) : (\r\n-          <ul className=\"space-y-2\">\r\n-            {rooms.map((room) => (\r\n-              <li\r\n-                key={room.id}\r\n-                className=\"p-3 bg-white dark:bg-gray-800 rounded flex justify-between items-center shadow hover:shadow-md cursor-pointer\"\r\n-              >\r\n-                <div>\r\n-                  <h3 className=\"font-bold\">{room.name}</h3>\r\n-                  <p className=\"text-sm\">{room.topic}</p>\r\n-                  {room.description && <p className=\"text-xs text-gray-500 dark:text-gray-400\">{room.description}</p>}\r\n-                </div>\r\n-                <button\r\n-                  onClick={() => joinRoom(room.id)}\r\n-                  className=\"bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600\"\r\n-                >\r\n-                  Join\r\n-                </button>\r\n-              </li>\r\n-            ))}\r\n-          </ul>\r\n-        )}\r\n-      </div>\r\n+      {/* List of Rooms */}\r\n+      {rooms.length === 0 ? (\r\n+        <p>No rooms available yet.</p>\r\n+      ) : (\r\n+        <div className=\"grid gap-4\">\r\n+          {rooms.map((room) => (\r\n+            <div\r\n+              key={room.id}\r\n+              className=\"p-4 border rounded flex justify-between items-center bg-white dark:bg-neutral-800 shadow\"\r\n+            >\r\n+              <div>\r\n+                <h2 className=\"font-semibold\">{room.name}</h2>\r\n+                <p className=\"text-sm text-gray-600 dark:text-gray-300\">{room.topic}</p>\r\n+                <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n+                  {room.users?.length ?? 0} users\r\n+                </p>\r\n+              </div>\r\n+              <Button onClick={() => joinRoom(room.id)}>Join</Button>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      )}\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1760262724901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,96 +1,192 @@\n \"use client\";\r\n \r\n-import React, { useEffect, useState } from \"react\";\r\n+import { useEffect, useState, useCallback, useMemo } from \"react\";\r\n+import { motion, AnimatePresence } from \"framer-motion\";\r\n import { useRouter } from \"next/navigation\";\r\n-import { connectRoomSocket, disconnectRoomSocket } from \"../features/RoomChat/services/roomSocketService\";\r\n-import { Button } from \"../components/common/Button\";\r\n+import { db } from \"@/lib/firebaseConfig\";\r\n+import { collection, onSnapshot, query, orderBy } from \"firebase/firestore\";\r\n+import { connectRoomSocket, createRoom as createRoomSocket } from \"../features/RoomChat/services/roomSocketService\";\r\n \r\n+interface UserInfo {\r\n+  name?: string;\r\n+  age?: string;\r\n+  gender?: string;\r\n+  country?: string;\r\n+}\r\n+\r\n interface Room {\r\n   id: string;\r\n   name: string;\r\n   topic: string;\r\n   description?: string;\r\n-  users?: { socketId: string; userInfo: any }[];\r\n+  users: { socketId: string; userInfo: UserInfo }[];\r\n+  hasPassword: boolean;\r\n+  password?: string | null;\r\n+  createdAt?: any;\r\n }\r\n \r\n export default function RoomsPage() {\r\n   const router = useRouter();\r\n   const [rooms, setRooms] = useState<Room[]>([]);\r\n-  const [socket, setSocket] = useState<any>(null);\r\n-  const [roomName, setRoomName] = useState(\"\");\r\n-  const [roomTopic, setRoomTopic] = useState(\"\");\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [isCreating, setIsCreating] = useState(false);\r\n+  const [toast, setToast] = useState<string | null>(null);\r\n+  const [form, setForm] = useState({\r\n+    name: \"\",\r\n+    topic: \"\",\r\n+    description: \"\",\r\n+    password: \"\",\r\n+  });\r\n \r\n+  const roomsCollection = useMemo(() => collection(db, \"rooms\"), []);\r\n+  const socket = useMemo(() => connectRoomSocket(), []);\r\n+\r\n+  // -------------------------\r\n+  // Load rooms from Firestore + Socket\r\n+  // -------------------------\r\n   useEffect(() => {\r\n-    const s = connectRoomSocket();\r\n-    setSocket(s);\r\n+    const q = query(roomsCollection, orderBy(\"createdAt\", \"desc\"));\r\n+    const unsubscribeFirestore = onSnapshot(q, (snapshot) => {\r\n+      const fetchedRooms = snapshot.docs.map((doc) => ({\r\n+        id: doc.id,\r\n+        ...doc.data(),\r\n+      })) as Room[];\r\n+      setRooms(fetchedRooms);\r\n+    });\r\n \r\n-    // Get all rooms\r\n-    s.on(\"rooms\", (data: Room[]) => setRooms(data));\r\n+    // Dynamic room updates from socket\r\n+    socket.on(\"new-room\", (room: Room) => {\r\n+      setRooms((prev) => [room, ...prev]);\r\n+    });\r\n \r\n-    // Fetch rooms from server\r\n-    s.emit(\"get-rooms\");\r\n+    // Update users count dynamically\r\n+    socket.on(\"rooms-users-count\", ({ roomId, count }: { roomId: string; count: number }) => {\r\n+      setRooms((prev) =>\r\n+        prev.map((r) =>\r\n+          r.id === roomId ? { ...r, users: new Array(count).fill({}) } : r\r\n+        )\r\n+      );\r\n+    });\r\n \r\n+    socket.on(\"connected\", () => console.log(\"🟢 Room socket connected\"));\r\n+    socket.on(\"disconnect\", (reason) => console.warn(\"🔴 Disconnected:\", reason));\r\n+\r\n     return () => {\r\n-      disconnectRoomSocket();\r\n+      unsubscribeFirestore();\r\n+      socket.off(\"new-room\");\r\n+      socket.off(\"rooms-users-count\");\r\n+      socket.off(\"connected\");\r\n+      socket.off(\"disconnect\");\r\n     };\r\n-  }, []);\r\n+  }, [roomsCollection, socket]);\r\n \r\n-  const createRoom = () => {\r\n-    if (!roomName || !roomTopic) return alert(\"Please enter name and topic\");\r\n-    socket.emit(\"create-room\", { name: roomName, topic: roomTopic });\r\n-    setRoomName(\"\");\r\n-    setRoomTopic(\"\");\r\n-  };\r\n+  // -------------------------\r\n+  // Create Room\r\n+  // -------------------------\r\n+  const handleCreateRoom = useCallback(async () => {\r\n+    if (!form.name.trim() || !form.topic.trim()) {\r\n+      alert(\"Room name and topic are required\");\r\n+      return;\r\n+    }\r\n \r\n-  const joinRoom = (id: string) => {\r\n-    router.push(`/rooms/${id}`);\r\n-  };\r\n+    setIsCreating(true);\r\n \r\n+    const newRoom = {\r\n+      name: form.name.trim(),\r\n+      topic: form.topic.trim(),\r\n+      description: form.description.trim(),\r\n+      hasPassword: !!form.password,\r\n+      password: form.password || null,\r\n+    };\r\n+\r\n+    try {\r\n+      await createRoomSocket(newRoom); // <- Firebase + Socket handled inside\r\n+      setForm({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n+      setShowModal(false);\r\n+      setToast(\"Room created successfully!\");\r\n+      setTimeout(() => setToast(null), 2000);\r\n+    } catch (err) {\r\n+      console.error(\"❌ Error creating room:\", err);\r\n+      alert(\"Failed to create room. Try again.\");\r\n+    } finally {\r\n+      setIsCreating(false);\r\n+    }\r\n+  }, [form]);\r\n+\r\n+  // -------------------------\r\n+  // Join Room\r\n+  // -------------------------\r\n+  const handleJoinRoom = useCallback(\r\n+    (room: Room) => {\r\n+      if (room.hasPassword) {\r\n+        const pass = prompt(\"Enter room password:\");\r\n+        if (!pass || pass !== room.password) {\r\n+          alert(\"Incorrect password\");\r\n+          return;\r\n+        }\r\n+      }\r\n+\r\n+      const userInfoStr = localStorage.getItem(\"user-info\");\r\n+      let userInfo: UserInfo = userInfoStr\r\n+        ? JSON.parse(userInfoStr)\r\n+        : {\r\n+            name: \"Guest \" + Math.floor(Math.random() * 1000),\r\n+            gender: \"Unknown\",\r\n+            country: \"Unknown\",\r\n+            age: \"N/A\",\r\n+          };\r\n+\r\n+      localStorage.setItem(\"user-info\", JSON.stringify(userInfo));\r\n+      router.push(`/rooms/${room.id}`);\r\n+    },\r\n+    [router]\r\n+  );\r\n+\r\n   return (\r\n-    <div className=\"p-6 min-h-screen bg-neutral-50 dark:bg-neutral-900\">\r\n-      <h1 className=\"text-2xl font-bold mb-6\">Rooms Dashboard</h1>\r\n+    <main className=\"min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100 dark:from-neutral-900 dark:to-neutral-800 p-6\">\r\n+      <div className=\"max-w-5xl mx-auto\">\r\n+        <div className=\"flex items-center justify-between mb-6\">\r\n+          <h1 className=\"text-3xl font-bold text-neutral-800 dark:text-white\">👥 Join a Room</h1>\r\n+          <button\r\n+            onClick={() => setShowModal(true)}\r\n+            className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg shadow-md transition-colors\"\r\n+          >\r\n+            ➕ Create Room\r\n+          </button>\r\n+        </div>\r\n \r\n-      {/* Create Room */}\r\n-      <div className=\"flex flex-col sm:flex-row gap-2 mb-6\">\r\n-        <input\r\n-          type=\"text\"\r\n-          placeholder=\"Room Name\"\r\n-          value={roomName}\r\n-          onChange={(e) => setRoomName(e.target.value)}\r\n-          className=\"p-2 border rounded flex-1\"\r\n-        />\r\n-        <input\r\n-          type=\"text\"\r\n-          placeholder=\"Room Topic\"\r\n-          value={roomTopic}\r\n-          onChange={(e) => setRoomTopic(e.target.value)}\r\n-          className=\"p-2 border rounded flex-1\"\r\n-        />\r\n-        <Button onClick={createRoom}>Create Room</Button>\r\n+        {/* Rooms List */}\r\n+        <AnimatePresence mode=\"popLayout\">\r\n+          {rooms.length === 0 ? (\r\n+            <motion.p initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"text-center text-neutral-600 dark:text-neutral-300\">\r\n+              No rooms available. Create one to get started!\r\n+            </motion.p>\r\n+          ) : (\r\n+            <motion.div layout className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-5\">\r\n+              {rooms.map((room) => (\r\n+                <motion.div key={room.id} layout initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} className=\"bg-white dark:bg-neutral-900 p-5 rounded-xl shadow-md border border-neutral-200 dark:border-neutral-800 flex flex-col justify-between\">\r\n+                  <div>\r\n+                    <h2 className=\"text-xl font-semibold text-neutral-900 dark:text-white truncate\">{room.name}</h2>\r\n+                    <p className=\"text-sm text-neutral-600 dark:text-neutral-300 mt-1\">Topic: {room.topic}</p>\r\n+                    {room.description && <p className=\"text-xs mt-2 text-neutral-500 dark:text-neutral-400 line-clamp-2\">{room.description}</p>}\r\n+                  </div>\r\n+\r\n+                  <div className=\"flex items-center justify-between mt-4\">\r\n+                    <span className=\"text-sm text-neutral-700 dark:text-neutral-300\">\r\n+                      {room.users?.length || 0} {room.users?.length === 1 ? \"user\" : \"users\"}\r\n+                    </span>\r\n+                    <button onClick={() => handleJoinRoom(room)} className=\"px-3 py-1 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm shadow-sm transition-colors\">\r\n+                      Join{room.hasPassword ? \" 🔒\" : \"\"}\r\n+                    </button>\r\n+                  </div>\r\n+                </motion.div>\r\n+              ))}\r\n+            </motion.div>\r\n+          )}\r\n+        </AnimatePresence>\r\n       </div>\r\n \r\n-      {/* List of Rooms */}\r\n-      {rooms.length === 0 ? (\r\n-        <p>No rooms available yet.</p>\r\n-      ) : (\r\n-        <div className=\"grid gap-4\">\r\n-          {rooms.map((room) => (\r\n-            <div\r\n-              key={room.id}\r\n-              className=\"p-4 border rounded flex justify-between items-center bg-white dark:bg-neutral-800 shadow\"\r\n-            >\r\n-              <div>\r\n-                <h2 className=\"font-semibold\">{room.name}</h2>\r\n-                <p className=\"text-sm text-gray-600 dark:text-gray-300\">{room.topic}</p>\r\n-                <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n-                  {room.users?.length ?? 0} users\r\n-                </p>\r\n-              </div>\r\n-              <Button onClick={() => joinRoom(room.id)}>Join</Button>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n+      {/* Modal + Toast... (same as before) */}\r\n+    </main>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1760267554205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,192 +1,11 @@\n-\"use client\";\r\n+// src/app/rooms/page.tsx\r\n+import React from \"react\";\r\n+import RoomLobby from \"../../../features/RoomSystem/components/RoomLobby\";\r\n \r\n-import { useEffect, useState, useCallback, useMemo } from \"react\";\r\n-import { motion, AnimatePresence } from \"framer-motion\";\r\n-import { useRouter } from \"next/navigation\";\r\n-import { db } from \"@/lib/firebaseConfig\";\r\n-import { collection, onSnapshot, query, orderBy } from \"firebase/firestore\";\r\n-import { connectRoomSocket, createRoom as createRoomSocket } from \"../features/RoomChat/services/roomSocketService\";\r\n-\r\n-interface UserInfo {\r\n-  name?: string;\r\n-  age?: string;\r\n-  gender?: string;\r\n-  country?: string;\r\n-}\r\n-\r\n-interface Room {\r\n-  id: string;\r\n-  name: string;\r\n-  topic: string;\r\n-  description?: string;\r\n-  users: { socketId: string; userInfo: UserInfo }[];\r\n-  hasPassword: boolean;\r\n-  password?: string | null;\r\n-  createdAt?: any;\r\n-}\r\n-\r\n export default function RoomsPage() {\r\n-  const router = useRouter();\r\n-  const [rooms, setRooms] = useState<Room[]>([]);\r\n-  const [showModal, setShowModal] = useState(false);\r\n-  const [isCreating, setIsCreating] = useState(false);\r\n-  const [toast, setToast] = useState<string | null>(null);\r\n-  const [form, setForm] = useState({\r\n-    name: \"\",\r\n-    topic: \"\",\r\n-    description: \"\",\r\n-    password: \"\",\r\n-  });\r\n-\r\n-  const roomsCollection = useMemo(() => collection(db, \"rooms\"), []);\r\n-  const socket = useMemo(() => connectRoomSocket(), []);\r\n-\r\n-  // -------------------------\r\n-  // Load rooms from Firestore + Socket\r\n-  // -------------------------\r\n-  useEffect(() => {\r\n-    const q = query(roomsCollection, orderBy(\"createdAt\", \"desc\"));\r\n-    const unsubscribeFirestore = onSnapshot(q, (snapshot) => {\r\n-      const fetchedRooms = snapshot.docs.map((doc) => ({\r\n-        id: doc.id,\r\n-        ...doc.data(),\r\n-      })) as Room[];\r\n-      setRooms(fetchedRooms);\r\n-    });\r\n-\r\n-    // Dynamic room updates from socket\r\n-    socket.on(\"new-room\", (room: Room) => {\r\n-      setRooms((prev) => [room, ...prev]);\r\n-    });\r\n-\r\n-    // Update users count dynamically\r\n-    socket.on(\"rooms-users-count\", ({ roomId, count }: { roomId: string; count: number }) => {\r\n-      setRooms((prev) =>\r\n-        prev.map((r) =>\r\n-          r.id === roomId ? { ...r, users: new Array(count).fill({}) } : r\r\n-        )\r\n-      );\r\n-    });\r\n-\r\n-    socket.on(\"connected\", () => console.log(\"🟢 Room socket connected\"));\r\n-    socket.on(\"disconnect\", (reason) => console.warn(\"🔴 Disconnected:\", reason));\r\n-\r\n-    return () => {\r\n-      unsubscribeFirestore();\r\n-      socket.off(\"new-room\");\r\n-      socket.off(\"rooms-users-count\");\r\n-      socket.off(\"connected\");\r\n-      socket.off(\"disconnect\");\r\n-    };\r\n-  }, [roomsCollection, socket]);\r\n-\r\n-  // -------------------------\r\n-  // Create Room\r\n-  // -------------------------\r\n-  const handleCreateRoom = useCallback(async () => {\r\n-    if (!form.name.trim() || !form.topic.trim()) {\r\n-      alert(\"Room name and topic are required\");\r\n-      return;\r\n-    }\r\n-\r\n-    setIsCreating(true);\r\n-\r\n-    const newRoom = {\r\n-      name: form.name.trim(),\r\n-      topic: form.topic.trim(),\r\n-      description: form.description.trim(),\r\n-      hasPassword: !!form.password,\r\n-      password: form.password || null,\r\n-    };\r\n-\r\n-    try {\r\n-      await createRoomSocket(newRoom); // <- Firebase + Socket handled inside\r\n-      setForm({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n-      setShowModal(false);\r\n-      setToast(\"Room created successfully!\");\r\n-      setTimeout(() => setToast(null), 2000);\r\n-    } catch (err) {\r\n-      console.error(\"❌ Error creating room:\", err);\r\n-      alert(\"Failed to create room. Try again.\");\r\n-    } finally {\r\n-      setIsCreating(false);\r\n-    }\r\n-  }, [form]);\r\n-\r\n-  // -------------------------\r\n-  // Join Room\r\n-  // -------------------------\r\n-  const handleJoinRoom = useCallback(\r\n-    (room: Room) => {\r\n-      if (room.hasPassword) {\r\n-        const pass = prompt(\"Enter room password:\");\r\n-        if (!pass || pass !== room.password) {\r\n-          alert(\"Incorrect password\");\r\n-          return;\r\n-        }\r\n-      }\r\n-\r\n-      const userInfoStr = localStorage.getItem(\"user-info\");\r\n-      let userInfo: UserInfo = userInfoStr\r\n-        ? JSON.parse(userInfoStr)\r\n-        : {\r\n-            name: \"Guest \" + Math.floor(Math.random() * 1000),\r\n-            gender: \"Unknown\",\r\n-            country: \"Unknown\",\r\n-            age: \"N/A\",\r\n-          };\r\n-\r\n-      localStorage.setItem(\"user-info\", JSON.stringify(userInfo));\r\n-      router.push(`/rooms/${room.id}`);\r\n-    },\r\n-    [router]\r\n-  );\r\n-\r\n   return (\r\n-    <main className=\"min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100 dark:from-neutral-900 dark:to-neutral-800 p-6\">\r\n-      <div className=\"max-w-5xl mx-auto\">\r\n-        <div className=\"flex items-center justify-between mb-6\">\r\n-          <h1 className=\"text-3xl font-bold text-neutral-800 dark:text-white\">👥 Join a Room</h1>\r\n-          <button\r\n-            onClick={() => setShowModal(true)}\r\n-            className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg shadow-md transition-colors\"\r\n-          >\r\n-            ➕ Create Room\r\n-          </button>\r\n-        </div>\r\n-\r\n-        {/* Rooms List */}\r\n-        <AnimatePresence mode=\"popLayout\">\r\n-          {rooms.length === 0 ? (\r\n-            <motion.p initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"text-center text-neutral-600 dark:text-neutral-300\">\r\n-              No rooms available. Create one to get started!\r\n-            </motion.p>\r\n-          ) : (\r\n-            <motion.div layout className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-5\">\r\n-              {rooms.map((room) => (\r\n-                <motion.div key={room.id} layout initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} className=\"bg-white dark:bg-neutral-900 p-5 rounded-xl shadow-md border border-neutral-200 dark:border-neutral-800 flex flex-col justify-between\">\r\n-                  <div>\r\n-                    <h2 className=\"text-xl font-semibold text-neutral-900 dark:text-white truncate\">{room.name}</h2>\r\n-                    <p className=\"text-sm text-neutral-600 dark:text-neutral-300 mt-1\">Topic: {room.topic}</p>\r\n-                    {room.description && <p className=\"text-xs mt-2 text-neutral-500 dark:text-neutral-400 line-clamp-2\">{room.description}</p>}\r\n-                  </div>\r\n-\r\n-                  <div className=\"flex items-center justify-between mt-4\">\r\n-                    <span className=\"text-sm text-neutral-700 dark:text-neutral-300\">\r\n-                      {room.users?.length || 0} {room.users?.length === 1 ? \"user\" : \"users\"}\r\n-                    </span>\r\n-                    <button onClick={() => handleJoinRoom(room)} className=\"px-3 py-1 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm shadow-sm transition-colors\">\r\n-                      Join{room.hasPassword ? \" 🔒\" : \"\"}\r\n-                    </button>\r\n-                  </div>\r\n-                </motion.div>\r\n-              ))}\r\n-            </motion.div>\r\n-          )}\r\n-        </AnimatePresence>\r\n-      </div>\r\n-\r\n-      {/* Modal + Toast... (same as before) */}\r\n+    <main className=\"p-6\">\r\n+      <RoomLobby />\r\n     </main>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1760267919674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n // src/app/rooms/page.tsx\r\n import React from \"react\";\r\n-import RoomLobby from \"../../../features/RoomSystem/components/RoomLobby\";\r\n+import RoomLobby from \"../../../features/RoomChat/components/RoomLobby\";\r\n \r\n export default function RoomsPage() {\r\n   return (\r\n     <main className=\"p-6\">\r\n"
                },
                {
                    "date": 1760269192157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,63 @@\n-// src/app/rooms/page.tsx\r\n-import React from \"react\";\r\n+\"use client\";\r\n+\r\n+import React, { useEffect, useState } from \"react\";\r\n import RoomLobby from \"../../../features/RoomChat/components/RoomLobby\";\r\n+import { useRoomSocket } from \"../../../features/RoomChat/hooks/useRoomSocket\";\r\n+import { fetchRooms } from \"../../../features/RoomChat/services/roomService\";\r\n \r\n export default function RoomsPage() {\r\n+  const { rooms: socketRooms, connected } = useRoomSocket();\r\n+  const [rooms, setRooms] = useState(socketRooms);\r\n+\r\n+  // Sync socket rooms with local state\r\n+  useEffect(() => {\r\n+    setRooms(socketRooms);\r\n+  }, [socketRooms]);\r\n+\r\n+  // Fetch initial rooms via REST as fallback\r\n+  useEffect(() => {\r\n+    fetchRooms()\r\n+      .then((r) => setRooms(r))\r\n+      .catch(() => {\r\n+        console.warn(\"Failed to fetch rooms via REST.\");\r\n+      });\r\n+  }, []);\r\n+\r\n   return (\r\n-    <main className=\"p-6\">\r\n+    <div className=\"p-6\">\r\n+      <h1 className=\"text-2xl font-bold mb-4\">\r\n+        Rooms Lobby {connected ? \"🟢 Online\" : \"🔴 Offline\"}\r\n+      </h1>\r\n+\r\n+      {/* Lobby UI */}\r\n       <RoomLobby />\r\n-    </main>\r\n+\r\n+      <div className=\"mt-6\">\r\n+        <h2 className=\"text-xl font-semibold mb-2\">Available Rooms</h2>\r\n+        {rooms.length ? (\r\n+          <ul className=\"space-y-2\">\r\n+            {rooms.map((room) => (\r\n+              <li\r\n+                key={room.id}\r\n+                className=\"border rounded p-3 flex justify-between items-center\"\r\n+              >\r\n+                <div>\r\n+                  <div className=\"font-semibold\">{room.name}</div>\r\n+                  <div className=\"text-sm text-gray-500\">{room.topic}</div>\r\n+                </div>\r\n+                <a\r\n+                  className=\"text-blue-600 text-sm font-medium\"\r\n+                  href={`/rooms/${room.id}`}\r\n+                >\r\n+                  Join\r\n+                </a>\r\n+              </li>\r\n+            ))}\r\n+          </ul>\r\n+        ) : (\r\n+          <div className=\"text-gray-500\">No rooms available.</div>\r\n+        )}\r\n+      </div>\r\n+    </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1760274002792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,31 @@\n \"use client\";\r\n \r\n import React, { useEffect, useState } from \"react\";\r\n+import Link from \"next/link\";\r\n import RoomLobby from \"../../../features/RoomChat/components/RoomLobby\";\r\n import { useRoomSocket } from \"../../../features/RoomChat/hooks/useRoomSocket\";\r\n import { fetchRooms } from \"../../../features/RoomChat/services/roomService\";\r\n \r\n export default function RoomsPage() {\r\n   const { rooms: socketRooms, connected } = useRoomSocket();\r\n   const [rooms, setRooms] = useState(socketRooms);\r\n \r\n-  // Sync socket rooms with local state\r\n+  // Merge socket rooms with current state\r\n   useEffect(() => {\r\n-    setRooms(socketRooms);\r\n+    setRooms((prev) => {\r\n+      const merged = [...socketRooms];\r\n+      prev.forEach((r) => {\r\n+        if (!merged.find((s) => s.id === r.id)) merged.push(r);\r\n+      });\r\n+      return merged;\r\n+    });\r\n   }, [socketRooms]);\r\n \r\n   // Fetch initial rooms via REST as fallback\r\n   useEffect(() => {\r\n     fetchRooms()\r\n-      .then((r) => setRooms(r))\r\n+      .then((r) => setRooms((prev) => [...prev, ...r.filter((room) => !prev.find((p) => p.id === room.id))]))\r\n       .catch(() => {\r\n         console.warn(\"Failed to fetch rooms via REST.\");\r\n       });\r\n   }, []);\r\n@@ -28,10 +35,9 @@\n       <h1 className=\"text-2xl font-bold mb-4\">\r\n         Rooms Lobby {connected ? \"🟢 Online\" : \"🔴 Offline\"}\r\n       </h1>\r\n \r\n-      {/* Lobby UI */}\r\n-      <RoomLobby />\r\n+      <RoomLobby rooms={rooms} connected={connected} />\r\n \r\n       <div className=\"mt-6\">\r\n         <h2 className=\"text-xl font-semibold mb-2\">Available Rooms</h2>\r\n         {rooms.length ? (\r\n@@ -42,16 +48,18 @@\n                 className=\"border rounded p-3 flex justify-between items-center\"\r\n               >\r\n                 <div>\r\n                   <div className=\"font-semibold\">{room.name}</div>\r\n-                  <div className=\"text-sm text-gray-500\">{room.topic}</div>\r\n+                  <div className=\"text-sm text-gray-500\">\r\n+                    {room.topic} • {room.users?.length || 0} users\r\n+                  </div>\r\n                 </div>\r\n-                <a\r\n+                <Link\r\n                   className=\"text-blue-600 text-sm font-medium\"\r\n                   href={`/rooms/${room.id}`}\r\n                 >\r\n                   Join\r\n-                </a>\r\n+                </Link>\r\n               </li>\r\n             ))}\r\n           </ul>\r\n         ) : (\r\n"
                },
                {
                    "date": 1760279894391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,28 +4,37 @@\n import Link from \"next/link\";\r\n import RoomLobby from \"../../../features/RoomChat/components/RoomLobby\";\r\n import { useRoomSocket } from \"../../../features/RoomChat/hooks/useRoomSocket\";\r\n import { fetchRooms } from \"../../../features/RoomChat/services/roomService\";\r\n+import type { Room } from \"../../../features/RoomChat/utils/roomTypes\";\r\n \r\n export default function RoomsPage() {\r\n   const { rooms: socketRooms, connected } = useRoomSocket();\r\n-  const [rooms, setRooms] = useState(socketRooms);\r\n+  const [rooms, setRooms] = useState<Room[]>([]);\r\n \r\n-  // Merge socket rooms with current state\r\n+  // --- Merge socket rooms with existing state ---\r\n   useEffect(() => {\r\n     setRooms((prev) => {\r\n-      const merged = [...socketRooms];\r\n+      const merged: Room[] = [...socketRooms];\r\n+\r\n+      // Add previous rooms that socket did not provide\r\n       prev.forEach((r) => {\r\n         if (!merged.find((s) => s.id === r.id)) merged.push(r);\r\n       });\r\n+\r\n       return merged;\r\n     });\r\n   }, [socketRooms]);\r\n \r\n-  // Fetch initial rooms via REST as fallback\r\n+  // --- Fetch initial rooms from Firestore / REST as fallback ---\r\n   useEffect(() => {\r\n     fetchRooms()\r\n-      .then((r) => setRooms((prev) => [...prev, ...r.filter((room) => !prev.find((p) => p.id === room.id))]))\r\n+      .then((fetchedRooms) => {\r\n+        setRooms((prev) => [\r\n+          ...prev,\r\n+          ...fetchedRooms.filter((room) => !prev.find((r) => r.id === room.id)),\r\n+        ]);\r\n+      })\r\n       .catch(() => {\r\n         console.warn(\"Failed to fetch rooms via REST.\");\r\n       });\r\n   }, []);\r\n@@ -39,9 +48,9 @@\n       <RoomLobby rooms={rooms} connected={connected} />\r\n \r\n       <div className=\"mt-6\">\r\n         <h2 className=\"text-xl font-semibold mb-2\">Available Rooms</h2>\r\n-        {rooms.length ? (\r\n+        {rooms.length > 0 ? (\r\n           <ul className=\"space-y-2\">\r\n             {rooms.map((room) => (\r\n               <li\r\n                 key={room.id}\r\n@@ -53,10 +62,10 @@\n                     {room.topic} • {room.users?.length || 0} users\r\n                   </div>\r\n                 </div>\r\n                 <Link\r\n+                  href={`/rooms/${room.id}`}\r\n                   className=\"text-blue-600 text-sm font-medium\"\r\n-                  href={`/rooms/${room.id}`}\r\n                 >\r\n                   Join\r\n                 </Link>\r\n               </li>\r\n"
                },
                {
                    "date": 1760280335654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n           <ul className=\"space-y-2\">\r\n             {rooms.map((room) => (\r\n               <li\r\n                 key={room.id}\r\n-                className=\"border rounded p-3 flex justify-between items-center\"\r\n+                className=\"border rounded p-3 flex justify-between items-center hover:shadow-sm transition\"\r\n               >\r\n                 <div>\r\n                   <div className=\"font-semibold\">{room.name}</div>\r\n                   <div className=\"text-sm text-gray-500\">\r\n"
                }
            ],
            "date": 1758888366382,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { io, Socket } from \"socket.io-client\";\r\nimport { motion } from \"framer-motion\";\r\n\r\ntype Room = {\r\n  id: string;\r\n  name: string;\r\n  topic: string;\r\n  description: string;\r\n  userCount: number;\r\n  hasPassword: boolean;\r\n};\r\n\r\nlet socket: Socket | null = null;\r\n\r\nexport default function RoomsPage() {\r\n  const [rooms, setRooms] = useState<Room[]>([]);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [form, setForm] = useState({\r\n    name: \"\",\r\n    topic: \"\",\r\n    description: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Connect to your signaling server (adjust URL if needed)\r\n    socket = io(process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\", {\r\n      transports: [\"websocket\"],\r\n    });\r\n\r\n    socket.emit(\"list-rooms\");\r\n\r\n    socket.on(\"rooms\", (data: Room[]) => setRooms(data));\r\n\r\n    socket.on(\"room-created\", (newRoom: Room) => {\r\n      setRooms((prev) => [...prev, newRoom]);\r\n    });\r\n\r\n    return () => {\r\n      socket?.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  const handleCreateRoom = () => {\r\n    if (!form.name || !form.topic) {\r\n      alert(\"Room name and topic are required\");\r\n      return;\r\n    }\r\n    socket?.emit(\"create-room\", {\r\n      ...form,\r\n      password: form.password || null,\r\n    });\r\n    setForm({ name: \"\", topic: \"\", description: \"\", password: \"\" });\r\n    setShowModal(false);\r\n  };\r\n\r\n  const handleJoinRoom = (room: Room) => {\r\n    if (room.hasPassword) {\r\n      const pass = prompt(\"Enter room password\");\r\n      if (!pass) return;\r\n      socket?.emit(\"join-room\", { roomId: room.id, password: pass });\r\n    } else {\r\n      socket?.emit(\"join-room\", { roomId: room.id });\r\n    }\r\n    // Redirect to dedicated room page\r\n    window.location.href = `/rooms/${room.id}`;\r\n  };\r\n\r\n  return (\r\n    <main className=\"min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100 dark:from-neutral-900 dark:to-neutral-800 p-6\">\r\n      <div className=\"max-w-4xl mx-auto\">\r\n        <div className=\"flex items-center justify-between mb-6\">\r\n          <h1 className=\"text-3xl font-bold text-neutral-800 dark:text-white\">\r\n            👥 Join a Room\r\n          </h1>\r\n          <button\r\n            onClick={() => setShowModal(true)}\r\n            className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg shadow-md\"\r\n          >\r\n            ➕ Create Room\r\n          </button>\r\n        </div>\r\n\r\n        {rooms.length === 0 ? (\r\n          <p className=\"text-center text-neutral-600 dark:text-neutral-300\">\r\n            No rooms available. Create one to get started!\r\n          </p>\r\n        ) : (\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            {rooms.map((room) => (\r\n              <motion.div\r\n                key={room.id}\r\n                initial={{ opacity: 0, y: 10 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                className=\"bg-white dark:bg-neutral-900 p-4 rounded-xl shadow-md flex flex-col justify-between\"\r\n              >\r\n                <div>\r\n                  <h2 className=\"text-xl font-semibold text-neutral-900 dark:text-white\">\r\n                    {room.name}\r\n                  </h2>\r\n                  <p className=\"text-sm text-neutral-600 dark:text-neutral-300\">\r\n                    Topic: {room.topic}\r\n                  </p>\r\n                  <p className=\"text-xs mt-1 text-neutral-500 dark:text-neutral-400 line-clamp-2\">\r\n                    {room.description || \"No description\"}\r\n                  </p>\r\n                </div>\r\n                <div className=\"flex items-center justify-between mt-4\">\r\n                  <span className=\"text-sm text-neutral-700 dark:text-neutral-300\">\r\n                    {room.userCount} {room.userCount === 1 ? \"user\" : \"users\"}\r\n                  </span>\r\n                  <button\r\n                    onClick={() => handleJoinRoom(room)}\r\n                    className=\"px-3 py-1 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm shadow-sm\"\r\n                  >\r\n                    Join\r\n                    {room.hasPassword ? \" 🔒\" : \"\"}\r\n                  </button>\r\n                </div>\r\n              </motion.div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Create Room Modal */}\r\n      {showModal && (\r\n        <div className=\"fixed inset-0 flex items-center justify-center bg-black/50 z-50\">\r\n          <div className=\"bg-white dark:bg-neutral-900 p-6 rounded-xl shadow-xl w-full max-w-md\">\r\n            <h2 className=\"text-xl font-bold mb-4 text-neutral-900 dark:text-white\">\r\n              Create a Room\r\n            </h2>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Room Name\"\r\n              className=\"w-full mb-3 px-4 py-2 rounded-md border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-800 text-neutral-900 dark:text-white\"\r\n              value={form.name}\r\n              onChange={(e) => setForm({ ...form, name: e.target.value })}\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Topic\"\r\n              className=\"w-full mb-3 px-4 py-2 rounded-md border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-800 text-neutral-900 dark:text-white\"\r\n              value={form.topic}\r\n              onChange={(e) => setForm({ ...form, topic: e.target.value })}\r\n            />\r\n            <textarea\r\n              placeholder=\"Description (optional)\"\r\n              className=\"w-full mb-3 px-4 py-2 rounded-md border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-800 text-neutral-900 dark:text-white\"\r\n              value={form.description}\r\n              onChange={(e) => setForm({ ...form, description: e.target.value })}\r\n            />\r\n            <input\r\n              type=\"password\"\r\n              placeholder=\"Password (optional)\"\r\n              className=\"w-full mb-4 px-4 py-2 rounded-md border border-neutral-300 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-800 text-neutral-900 dark:text-white\"\r\n              value={form.password}\r\n              onChange={(e) => setForm({ ...form, password: e.target.value })}\r\n            />\r\n\r\n            <div className=\"flex justify-end gap-3\">\r\n              <button\r\n                onClick={() => setShowModal(false)}\r\n                className=\"px-4 py-2 bg-neutral-300 dark:bg-neutral-700 text-neutral-900 dark:text-white rounded-md\"\r\n              >\r\n                Cancel\r\n              </button>\r\n              <button\r\n                onClick={handleCreateRoom}\r\n                className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-md shadow-md\"\r\n              >\r\n                Create\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </main>\r\n  );\r\n}\r\n"
        }
    ]
}