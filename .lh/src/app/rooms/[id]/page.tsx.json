{
    "sourceFile": "src/app/rooms/[id]/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1758888488063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758888523818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   text: string;\r\n }\r\n \r\n export default function RoomPage() {\r\n-  const { id } = useParams<{ id: string }>();\r\n+  const { id } = useParams() as { id: string };\r\n   const socketRef = useRef<Socket | null>(null);\r\n   const localVideoRef = useRef<HTMLVideoElement>(null);\r\n \r\n   const [room, setRoom] = useState<RoomInfo | null>(null);\r\n"
                },
                {
                    "date": 1758889481708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,9 @@\n import { useParams } from \"next/navigation\";\r\n import io, { Socket } from \"socket.io-client\";\r\n \r\n // ‚ö°Ô∏è Adjust to your signaling server endpoint\r\n-const SOCKET_URL =\r\n-  process.env.NEXT_PUBLIC_SOCKET_URL || \"http://localhost:3001\";\r\n+const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"http://localhost:3001\";\r\n \r\n interface RoomInfo {\r\n   id: string;\r\n   name: string;\r\n@@ -31,11 +30,14 @@\n   const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [peers, setPeers] = useState<{ [peerId: string]: MediaStream }>({});\r\n \r\n+  // Store peer connections in a ref to persist across renders\r\n+  const peerConnections = useRef<{ [peerId: string]: RTCPeerConnection }>({});\r\n+\r\n   // üü¢ Join Room on mount\r\n   useEffect(() => {\r\n-    const socket = io(SOCKET_URL);\r\n+    const socket = io(SOCKET_URL, { transports: [\"websocket\"] });\r\n     socketRef.current = socket;\r\n \r\n     socket.emit(\"join-room\", { roomId: id });\r\n \r\n@@ -48,18 +50,16 @@\n     );\r\n \r\n     // ‚úÖ New user joins (start WebRTC)\r\n     socket.on(\"user-joined\", async ({ userId }: { userId: string }) => {\r\n-      if (!localVideoRef.current) return;\r\n+      if (!localVideoRef.current?.srcObject) return;\r\n \r\n-      const pc = createPeerConnection(socket, userId);\r\n+      const pc = createPeerConnection(userId);\r\n \r\n-      // Add local stream to connection\r\n-      if (localVideoRef.current.srcObject) {\r\n-        (localVideoRef.current.srcObject as MediaStream)\r\n-          .getTracks()\r\n-          .forEach((track) => pc.addTrack(track));\r\n-      }\r\n+      // Add local stream tracks\r\n+      (localVideoRef.current.srcObject as MediaStream)\r\n+        .getTracks()\r\n+        .forEach((track) => pc.addTrack(track));\r\n \r\n       const offer = await pc.createOffer();\r\n       await pc.setLocalDescription(offer);\r\n       socket.emit(\"room-offer\", { roomId: id, offer, to: userId });\r\n@@ -68,9 +68,10 @@\n     // ‚úÖ Handle incoming offer\r\n     socket.on(\r\n       \"room-offer\",\r\n       async ({ from, offer }: { from: string; offer: RTCSessionDescriptionInit }) => {\r\n-        const pc = createPeerConnection(socket, from);\r\n+        const pc = createPeerConnection(from);\r\n+\r\n         await pc.setRemoteDescription(new RTCSessionDescription(offer));\r\n \r\n         if (localVideoRef.current?.srcObject) {\r\n           (localVideoRef.current.srcObject as MediaStream)\r\n@@ -87,39 +88,40 @@\n     // ‚úÖ Handle answer\r\n     socket.on(\r\n       \"room-answer\",\r\n       async ({ from, answer }: { from: string; answer: RTCSessionDescriptionInit }) => {\r\n-        const pc = peerConnections[from];\r\n+        const pc = peerConnections.current[from];\r\n         if (pc) await pc.setRemoteDescription(new RTCSessionDescription(answer));\r\n       }\r\n     );\r\n \r\n     // ‚úÖ Handle ICE candidates\r\n     socket.on(\r\n       \"room-ice\",\r\n       ({ from, candidate }: { from: string; candidate: RTCIceCandidateInit }) => {\r\n-        const pc = peerConnections[from];\r\n+        const pc = peerConnections.current[from];\r\n         if (pc) pc.addIceCandidate(new RTCIceCandidate(candidate));\r\n       }\r\n     );\r\n \r\n     // ‚úÖ User left\r\n     socket.on(\"user-left\", ({ userId }: { userId: string }) => {\r\n-      const pc = peerConnections[userId];\r\n+      const pc = peerConnections.current[userId];\r\n       if (pc) pc.close();\r\n-      delete peerConnections[userId];\r\n+      delete peerConnections.current[userId];\r\n+\r\n       setPeers((prev) => {\r\n         const updated = { ...prev };\r\n         delete updated[userId];\r\n         return updated;\r\n       });\r\n     });\r\n \r\n-    // üî¥ Leave room on unmount\r\n     return () => {\r\n       socket.emit(\"leave-room\", { roomId: id });\r\n       socket.disconnect();\r\n-      Object.values(peerConnections).forEach((pc) => pc.close());\r\n+      Object.values(peerConnections.current).forEach((pc) => pc.close());\r\n+      peerConnections.current = {};\r\n     };\r\n   }, [id]);\r\n \r\n   // üé• Start local camera\r\n@@ -129,11 +131,9 @@\n         const stream = await navigator.mediaDevices.getUserMedia({\r\n           video: true,\r\n           audio: true,\r\n         });\r\n-        if (localVideoRef.current) {\r\n-          localVideoRef.current.srcObject = stream;\r\n-        }\r\n+        if (localVideoRef.current) localVideoRef.current.srcObject = stream;\r\n       } catch (err) {\r\n         console.error(\"Camera error\", err);\r\n       }\r\n     })();\r\n@@ -149,29 +149,25 @@\n     setInput(\"\");\r\n   };\r\n \r\n   // ======= WebRTC Helper =======\r\n-  const peerConnections: { [peerId: string]: RTCPeerConnection } = {};\r\n-  const createPeerConnection = (socket: Socket, peerId: string) => {\r\n+  const createPeerConnection = (peerId: string) => {\r\n+    const socket = socketRef.current!;\r\n     const pc = new RTCPeerConnection({\r\n       iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }],\r\n     });\r\n \r\n     pc.onicecandidate = (e) => {\r\n       if (e.candidate) {\r\n-        socket.emit(\"room-ice\", {\r\n-          roomId: id,\r\n-          candidate: e.candidate,\r\n-          to: peerId,\r\n-        });\r\n+        socket.emit(\"room-ice\", { roomId: id, candidate: e.candidate, to: peerId });\r\n       }\r\n     };\r\n \r\n     pc.ontrack = (e) => {\r\n       setPeers((prev) => ({ ...prev, [peerId]: e.streams[0] }));\r\n     };\r\n \r\n-    peerConnections[peerId] = pc;\r\n+    peerConnections.current[peerId] = pc;\r\n     return pc;\r\n   };\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1758889992103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { useParams } from \"next/navigation\";\r\n import io, { Socket } from \"socket.io-client\";\r\n \r\n // ‚ö°Ô∏è Adjust to your signaling server endpoint\r\n-const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"http://localhost:3001\";\r\n+const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"https://connectify-z9gv.onrender.com/\";\r\n \r\n interface RoomInfo {\r\n   id: string;\r\n   name: string;\r\n"
                },
                {
                    "date": 1758893048299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,19 @@\n \"use client\";\r\n \r\n import React, { useEffect, useRef, useState } from \"react\";\r\n import { useParams } from \"next/navigation\";\r\n-import io, { Socket } from \"socket.io-client\";\r\n+import { io, Socket } from \"socket.io-client\";\r\n \r\n-// ‚ö°Ô∏è Adjust to your signaling server endpoint\r\n-const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || \"https://connectify-z9gv.onrender.com/\";\r\n+// ‚ö° Adjust to your signaling server endpoint\r\n+const SOCKET_URL =\r\n+  process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n \r\n interface RoomInfo {\r\n   id: string;\r\n   name: string;\r\n   topic: string;\r\n-  description: string;\r\n+  description?: string;\r\n   users: string[];\r\n }\r\n \r\n interface ChatMessage {\r\n@@ -30,86 +31,66 @@\n   const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n   const [input, setInput] = useState(\"\");\r\n   const [peers, setPeers] = useState<{ [peerId: string]: MediaStream }>({});\r\n \r\n-  // Store peer connections in a ref to persist across renders\r\n   const peerConnections = useRef<{ [peerId: string]: RTCPeerConnection }>({});\r\n \r\n-  // üü¢ Join Room on mount\r\n+  // üü¢ Connect to room and handle WebRTC\r\n   useEffect(() => {\r\n     const socket = io(SOCKET_URL, { transports: [\"websocket\"] });\r\n     socketRef.current = socket;\r\n \r\n     socket.emit(\"join-room\", { roomId: id });\r\n \r\n-    // ‚úÖ Room info updates\r\n     socket.on(\"room-update\", (data: RoomInfo) => setRoom(data));\r\n \r\n-    // ‚úÖ Chat messages\r\n     socket.on(\"room-message\", (msg: ChatMessage) =>\r\n       setMessages((prev) => [...prev, msg])\r\n     );\r\n \r\n-    // ‚úÖ New user joins (start WebRTC)\r\n     socket.on(\"user-joined\", async ({ userId }: { userId: string }) => {\r\n       if (!localVideoRef.current?.srcObject) return;\r\n \r\n       const pc = createPeerConnection(userId);\r\n+      (localVideoRef.current.srcObject as MediaStream).getTracks().forEach((t) => pc.addTrack(t));\r\n \r\n-      // Add local stream tracks\r\n-      (localVideoRef.current.srcObject as MediaStream)\r\n-        .getTracks()\r\n-        .forEach((track) => pc.addTrack(track));\r\n-\r\n       const offer = await pc.createOffer();\r\n       await pc.setLocalDescription(offer);\r\n       socket.emit(\"room-offer\", { roomId: id, offer, to: userId });\r\n     });\r\n \r\n-    // ‚úÖ Handle incoming offer\r\n     socket.on(\r\n       \"room-offer\",\r\n       async ({ from, offer }: { from: string; offer: RTCSessionDescriptionInit }) => {\r\n         const pc = createPeerConnection(from);\r\n-\r\n         await pc.setRemoteDescription(new RTCSessionDescription(offer));\r\n-\r\n-        if (localVideoRef.current?.srcObject) {\r\n-          (localVideoRef.current.srcObject as MediaStream)\r\n-            .getTracks()\r\n-            .forEach((track) => pc.addTrack(track));\r\n-        }\r\n-\r\n+        (localVideoRef.current?.srcObject as MediaStream)?.getTracks().forEach((t) => pc.addTrack(t));\r\n         const answer = await pc.createAnswer();\r\n         await pc.setLocalDescription(answer);\r\n         socket.emit(\"room-answer\", { roomId: id, answer, to: from });\r\n       }\r\n     );\r\n \r\n-    // ‚úÖ Handle answer\r\n     socket.on(\r\n       \"room-answer\",\r\n       async ({ from, answer }: { from: string; answer: RTCSessionDescriptionInit }) => {\r\n         const pc = peerConnections.current[from];\r\n         if (pc) await pc.setRemoteDescription(new RTCSessionDescription(answer));\r\n       }\r\n     );\r\n \r\n-    // ‚úÖ Handle ICE candidates\r\n     socket.on(\r\n       \"room-ice\",\r\n       ({ from, candidate }: { from: string; candidate: RTCIceCandidateInit }) => {\r\n         const pc = peerConnections.current[from];\r\n         if (pc) pc.addIceCandidate(new RTCIceCandidate(candidate));\r\n       }\r\n     );\r\n \r\n-    // ‚úÖ User left\r\n     socket.on(\"user-left\", ({ userId }: { userId: string }) => {\r\n       const pc = peerConnections.current[userId];\r\n       if (pc) pc.close();\r\n       delete peerConnections.current[userId];\r\n-\r\n       setPeers((prev) => {\r\n         const updated = { ...prev };\r\n         delete updated[userId];\r\n         return updated;\r\n@@ -123,9 +104,9 @@\n       peerConnections.current = {};\r\n     };\r\n   }, [id]);\r\n \r\n-  // üé• Start local camera\r\n+  // üé• Start local video/audio\r\n   useEffect(() => {\r\n     (async () => {\r\n       try {\r\n         const stream = await navigator.mediaDevices.getUserMedia({\r\n@@ -133,39 +114,30 @@\n           audio: true,\r\n         });\r\n         if (localVideoRef.current) localVideoRef.current.srcObject = stream;\r\n       } catch (err) {\r\n-        console.error(\"Camera error\", err);\r\n+        console.error(\"Camera error:\", err);\r\n       }\r\n     })();\r\n   }, []);\r\n \r\n   // üí¨ Send chat message\r\n   const sendMessage = () => {\r\n     if (!input.trim() || !socketRef.current) return;\r\n-    socketRef.current.emit(\"room-message\", {\r\n-      roomId: id,\r\n-      text: input.trim(),\r\n-    });\r\n+    socketRef.current.emit(\"room-message\", { roomId: id, text: input.trim() });\r\n     setInput(\"\");\r\n   };\r\n \r\n-  // ======= WebRTC Helper =======\r\n+  // ===== WebRTC helper =====\r\n   const createPeerConnection = (peerId: string) => {\r\n     const socket = socketRef.current!;\r\n-    const pc = new RTCPeerConnection({\r\n-      iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }],\r\n-    });\r\n+    const pc = new RTCPeerConnection({ iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }] });\r\n \r\n     pc.onicecandidate = (e) => {\r\n-      if (e.candidate) {\r\n-        socket.emit(\"room-ice\", { roomId: id, candidate: e.candidate, to: peerId });\r\n-      }\r\n+      if (e.candidate) socket.emit(\"room-ice\", { roomId: id, candidate: e.candidate, to: peerId });\r\n     };\r\n \r\n-    pc.ontrack = (e) => {\r\n-      setPeers((prev) => ({ ...prev, [peerId]: e.streams[0] }));\r\n-    };\r\n+    pc.ontrack = (e) => setPeers((prev) => ({ ...prev, [peerId]: e.streams[0] }));\r\n \r\n     peerConnections.current[peerId] = pc;\r\n     return pc;\r\n   };\r\n@@ -176,11 +148,9 @@\n         <div className=\"bg-gray-100 p-4 rounded-lg shadow\">\r\n           <h1 className=\"text-2xl font-bold\">{room.name}</h1>\r\n           <p className=\"text-sm text-gray-700\">{room.topic}</p>\r\n           <p className=\"text-sm text-gray-500\">{room.description}</p>\r\n-          <p className=\"mt-2 text-sm font-medium\">\r\n-            Users in Room: {room.users.length}\r\n-          </p>\r\n+          <p className=\"mt-2 text-sm font-medium\">Users: {room.users.length}</p>\r\n         </div>\r\n       ) : (\r\n         <p>Loading room...</p>\r\n       )}\r\n@@ -215,12 +185,9 @@\n             value={input}\r\n             onChange={(e) => setInput(e.target.value)}\r\n             onKeyDown={(e) => e.key === \"Enter\" && sendMessage()}\r\n           />\r\n-          <button\r\n-            onClick={sendMessage}\r\n-            className=\"bg-blue-500 text-white px-4 py-2 rounded\"\r\n-          >\r\n+          <button onClick={sendMessage} className=\"bg-blue-500 text-white px-4 py-2 rounded\">\r\n             Send\r\n           </button>\r\n         </div>\r\n       </div>\r\n@@ -233,13 +200,6 @@\n   const ref = useRef<HTMLVideoElement>(null);\r\n   useEffect(() => {\r\n     if (ref.current) ref.current.srcObject = stream;\r\n   }, [stream]);\r\n-  return (\r\n-    <video\r\n-      ref={ref}\r\n-      autoPlay\r\n-      playsInline\r\n-      className=\"w-full h-48 bg-black rounded-lg\"\r\n-    />\r\n-  );\r\n+  return <video ref={ref} autoPlay playsInline className=\"w-full h-48 bg-black rounded-lg\" />;\r\n }\r\n"
                },
                {
                    "date": 1758893226832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,11 +3,10 @@\n import React, { useEffect, useRef, useState } from \"react\";\r\n import { useParams } from \"next/navigation\";\r\n import { io, Socket } from \"socket.io-client\";\r\n \r\n-// ‚ö° Adjust to your signaling server endpoint\r\n-const SOCKET_URL =\r\n-  process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n+// Signaling server URL\r\n+const SOCKET_URL = process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n \r\n interface RoomInfo {\r\n   id: string;\r\n   name: string;\r\n@@ -33,14 +32,14 @@\n   const [peers, setPeers] = useState<{ [peerId: string]: MediaStream }>({});\r\n \r\n   const peerConnections = useRef<{ [peerId: string]: RTCPeerConnection }>({});\r\n \r\n-  // üü¢ Connect to room and handle WebRTC\r\n+  // Connect to room & handle WebRTC\r\n   useEffect(() => {\r\n     const socket = io(SOCKET_URL, { transports: [\"websocket\"] });\r\n     socketRef.current = socket;\r\n \r\n-    socket.emit(\"join-room\", { roomId: id });\r\n+    socket.emit(\"join-room-dynamic\", { roomId: id });\r\n \r\n     socket.on(\"room-update\", (data: RoomInfo) => setRoom(data));\r\n \r\n     socket.on(\"room-message\", (msg: ChatMessage) =>\r\n@@ -50,9 +49,11 @@\n     socket.on(\"user-joined\", async ({ userId }: { userId: string }) => {\r\n       if (!localVideoRef.current?.srcObject) return;\r\n \r\n       const pc = createPeerConnection(userId);\r\n-      (localVideoRef.current.srcObject as MediaStream).getTracks().forEach((t) => pc.addTrack(t));\r\n+      (localVideoRef.current.srcObject as MediaStream)\r\n+        .getTracks()\r\n+        .forEach((t) => pc.addTrack(t));\r\n \r\n       const offer = await pc.createOffer();\r\n       await pc.setLocalDescription(offer);\r\n       socket.emit(\"room-offer\", { roomId: id, offer, to: userId });\r\n@@ -62,9 +63,11 @@\n       \"room-offer\",\r\n       async ({ from, offer }: { from: string; offer: RTCSessionDescriptionInit }) => {\r\n         const pc = createPeerConnection(from);\r\n         await pc.setRemoteDescription(new RTCSessionDescription(offer));\r\n-        (localVideoRef.current?.srcObject as MediaStream)?.getTracks().forEach((t) => pc.addTrack(t));\r\n+        (localVideoRef.current?.srcObject as MediaStream)\r\n+          ?.getTracks()\r\n+          .forEach((t) => pc.addTrack(t));\r\n         const answer = await pc.createAnswer();\r\n         await pc.setLocalDescription(answer);\r\n         socket.emit(\"room-answer\", { roomId: id, answer, to: from });\r\n       }\r\n@@ -104,9 +107,9 @@\n       peerConnections.current = {};\r\n     };\r\n   }, [id]);\r\n \r\n-  // üé• Start local video/audio\r\n+  // Start local camera & mic\r\n   useEffect(() => {\r\n     (async () => {\r\n       try {\r\n         const stream = await navigator.mediaDevices.getUserMedia({\r\n@@ -119,16 +122,16 @@\n       }\r\n     })();\r\n   }, []);\r\n \r\n-  // üí¨ Send chat message\r\n+  // Send chat message\r\n   const sendMessage = () => {\r\n     if (!input.trim() || !socketRef.current) return;\r\n     socketRef.current.emit(\"room-message\", { roomId: id, text: input.trim() });\r\n     setInput(\"\");\r\n   };\r\n \r\n-  // ===== WebRTC helper =====\r\n+  // Create peer connection\r\n   const createPeerConnection = (peerId: string) => {\r\n     const socket = socketRef.current!;\r\n     const pc = new RTCPeerConnection({ iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }] });\r\n \r\n@@ -194,9 +197,9 @@\n     </div>\r\n   );\r\n }\r\n \r\n-// ‚úÖ Component for remote streams\r\n+// Remote video component\r\n function RemoteVideo({ stream }: { stream: MediaStream }) {\r\n   const ref = useRef<HTMLVideoElement>(null);\r\n   useEffect(() => {\r\n     if (ref.current) ref.current.srcObject = stream;\r\n"
                },
                {
                    "date": 1758899353979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,11 @@\n \r\n import React, { useEffect, useRef, useState } from \"react\";\r\n import { useParams } from \"next/navigation\";\r\n import { io, Socket } from \"socket.io-client\";\r\n+import LocalVideo from \"../../../../features/RoomChat/components/LocalVideo\";\r\n+import RemoteVideo from \"../../../../features/RoomChat/components/RemoteVideo\";\r\n+import ChatBox from \"../../../../features/RoomChat/components/ChatBox\";\r\n \r\n // Signaling server URL\r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n \r\n@@ -14,82 +17,86 @@\n   description?: string;\r\n   users: string[];\r\n }\r\n \r\n-interface ChatMessage {\r\n-  id: string;\r\n-  user: string;\r\n-  text: string;\r\n+interface UserInfo {\r\n+  name: string;\r\n+  age: string;\r\n+  gender: string;\r\n+  country: string;\r\n }\r\n \r\n export default function RoomPage() {\r\n   const { id } = useParams() as { id: string };\r\n   const socketRef = useRef<Socket | null>(null);\r\n-  const localVideoRef = useRef<HTMLVideoElement>(null);\r\n+  const localStreamRef = useRef<MediaStream | null>(null);\r\n \r\n   const [room, setRoom] = useState<RoomInfo | null>(null);\r\n-  const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n-  const [input, setInput] = useState(\"\");\r\n   const [peers, setPeers] = useState<{ [peerId: string]: MediaStream }>({});\r\n \r\n   const peerConnections = useRef<{ [peerId: string]: RTCPeerConnection }>({});\r\n \r\n+  const userInfo: UserInfo = JSON.parse(localStorage.getItem(\"user-info\") || \"{}\");\r\n+\r\n+  // Start local camera & mic\r\n+  useEffect(() => {\r\n+    (async () => {\r\n+      try {\r\n+        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n+        localStreamRef.current = stream;\r\n+      } catch (err) {\r\n+        console.error(\"Camera error:\", err);\r\n+      }\r\n+    })();\r\n+  }, []);\r\n+\r\n   // Connect to room & handle WebRTC\r\n   useEffect(() => {\r\n+    if (!localStreamRef.current) return;\r\n+\r\n     const socket = io(SOCKET_URL, { transports: [\"websocket\"] });\r\n     socketRef.current = socket;\r\n \r\n-    socket.emit(\"join-room-dynamic\", { roomId: id });\r\n+    // Join room\r\n+    socket.emit(\"join-room-dynamic\", { roomId: id, userInfo });\r\n \r\n     socket.on(\"room-update\", (data: RoomInfo) => setRoom(data));\r\n \r\n-    socket.on(\"room-message\", (msg: ChatMessage) =>\r\n-      setMessages((prev) => [...prev, msg])\r\n-    );\r\n-\r\n+    // When a new user joins, create a peer connection and send offer\r\n     socket.on(\"user-joined\", async ({ userId }: { userId: string }) => {\r\n-      if (!localVideoRef.current?.srcObject) return;\r\n-\r\n+      if (!localStreamRef.current) return;\r\n       const pc = createPeerConnection(userId);\r\n-      (localVideoRef.current.srcObject as MediaStream)\r\n-        .getTracks()\r\n-        .forEach((t) => pc.addTrack(t));\r\n+      localStreamRef.current.getTracks().forEach((t) => pc.addTrack(t));\r\n \r\n       const offer = await pc.createOffer();\r\n       await pc.setLocalDescription(offer);\r\n       socket.emit(\"room-offer\", { roomId: id, offer, to: userId });\r\n     });\r\n \r\n-    socket.on(\r\n-      \"room-offer\",\r\n-      async ({ from, offer }: { from: string; offer: RTCSessionDescriptionInit }) => {\r\n-        const pc = createPeerConnection(from);\r\n-        await pc.setRemoteDescription(new RTCSessionDescription(offer));\r\n-        (localVideoRef.current?.srcObject as MediaStream)\r\n-          ?.getTracks()\r\n-          .forEach((t) => pc.addTrack(t));\r\n-        const answer = await pc.createAnswer();\r\n-        await pc.setLocalDescription(answer);\r\n-        socket.emit(\"room-answer\", { roomId: id, answer, to: from });\r\n-      }\r\n-    );\r\n+    // Receive offer from another peer\r\n+    socket.on(\"room-offer\", async ({ from, offer }: { from: string; offer: RTCSessionDescriptionInit }) => {\r\n+      if (!localStreamRef.current) return;\r\n+      const pc = createPeerConnection(from);\r\n+      await pc.setRemoteDescription(new RTCSessionDescription(offer));\r\n+      localStreamRef.current.getTracks().forEach((t) => pc.addTrack(t));\r\n+      const answer = await pc.createAnswer();\r\n+      await pc.setLocalDescription(answer);\r\n+      socket.emit(\"room-answer\", { roomId: id, answer, to: from });\r\n+    });\r\n \r\n-    socket.on(\r\n-      \"room-answer\",\r\n-      async ({ from, answer }: { from: string; answer: RTCSessionDescriptionInit }) => {\r\n-        const pc = peerConnections.current[from];\r\n-        if (pc) await pc.setRemoteDescription(new RTCSessionDescription(answer));\r\n-      }\r\n-    );\r\n+    // Receive answer\r\n+    socket.on(\"room-answer\", async ({ from, answer }: { from: string; answer: RTCSessionDescriptionInit }) => {\r\n+      const pc = peerConnections.current[from];\r\n+      if (pc) await pc.setRemoteDescription(new RTCSessionDescription(answer));\r\n+    });\r\n \r\n-    socket.on(\r\n-      \"room-ice\",\r\n-      ({ from, candidate }: { from: string; candidate: RTCIceCandidateInit }) => {\r\n-        const pc = peerConnections.current[from];\r\n-        if (pc) pc.addIceCandidate(new RTCIceCandidate(candidate));\r\n-      }\r\n-    );\r\n+    // ICE candidates\r\n+    socket.on(\"room-ice\", ({ from, candidate }: { from: string; candidate: RTCIceCandidateInit }) => {\r\n+      const pc = peerConnections.current[from];\r\n+      if (pc) pc.addIceCandidate(new RTCIceCandidate(candidate));\r\n+    });\r\n \r\n+    // Handle user leaving\r\n     socket.on(\"user-left\", ({ userId }: { userId: string }) => {\r\n       const pc = peerConnections.current[userId];\r\n       if (pc) pc.close();\r\n       delete peerConnections.current[userId];\r\n@@ -105,33 +112,11 @@\n       socket.disconnect();\r\n       Object.values(peerConnections.current).forEach((pc) => pc.close());\r\n       peerConnections.current = {};\r\n     };\r\n-  }, [id]);\r\n+  }, [id, userInfo]);\r\n \r\n-  // Start local camera & mic\r\n-  useEffect(() => {\r\n-    (async () => {\r\n-      try {\r\n-        const stream = await navigator.mediaDevices.getUserMedia({\r\n-          video: true,\r\n-          audio: true,\r\n-        });\r\n-        if (localVideoRef.current) localVideoRef.current.srcObject = stream;\r\n-      } catch (err) {\r\n-        console.error(\"Camera error:\", err);\r\n-      }\r\n-    })();\r\n-  }, []);\r\n-\r\n-  // Send chat message\r\n-  const sendMessage = () => {\r\n-    if (!input.trim() || !socketRef.current) return;\r\n-    socketRef.current.emit(\"room-message\", { roomId: id, text: input.trim() });\r\n-    setInput(\"\");\r\n-  };\r\n-\r\n-  // Create peer connection\r\n+  // Create peer connection helper\r\n   const createPeerConnection = (peerId: string) => {\r\n     const socket = socketRef.current!;\r\n     const pc = new RTCPeerConnection({ iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }] });\r\n \r\n@@ -144,65 +129,31 @@\n     peerConnections.current[peerId] = pc;\r\n     return pc;\r\n   };\r\n \r\n+  if (!localStreamRef.current) return <p>Loading camera...</p>;\r\n+\r\n   return (\r\n     <div className=\"p-4 space-y-4\">\r\n-      {room ? (\r\n+      {/* Room info */}\r\n+      {room && (\r\n         <div className=\"bg-gray-100 p-4 rounded-lg shadow\">\r\n           <h1 className=\"text-2xl font-bold\">{room.name}</h1>\r\n           <p className=\"text-sm text-gray-700\">{room.topic}</p>\r\n           <p className=\"text-sm text-gray-500\">{room.description}</p>\r\n           <p className=\"mt-2 text-sm font-medium\">Users: {room.users.length}</p>\r\n         </div>\r\n-      ) : (\r\n-        <p>Loading room...</p>\r\n       )}\r\n \r\n       {/* Video Grid */}\r\n       <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\r\n-        <video\r\n-          ref={localVideoRef}\r\n-          autoPlay\r\n-          playsInline\r\n-          muted\r\n-          className=\"w-full h-48 bg-black rounded-lg\"\r\n-        />\r\n+        <LocalVideo stream={localStreamRef.current} label={userInfo.name} />\r\n         {Object.entries(peers).map(([peerId, stream]) => (\r\n-          <RemoteVideo key={peerId} stream={stream} />\r\n+          <RemoteVideo key={peerId} stream={stream} label={peerId} />\r\n         ))}\r\n       </div>\r\n \r\n-      {/* Chat */}\r\n-      <div className=\"bg-white p-4 rounded-lg shadow max-w-lg\">\r\n-        <div className=\"h-48 overflow-y-auto mb-2 border p-2\">\r\n-          {messages.map((m) => (\r\n-            <p key={m.id}>\r\n-              <strong>{m.user}:</strong> {m.text}\r\n-            </p>\r\n-          ))}\r\n-        </div>\r\n-        <div className=\"flex gap-2\">\r\n-          <input\r\n-            className=\"flex-1 border p-2 rounded\"\r\n-            placeholder=\"Type a message...\"\r\n-            value={input}\r\n-            onChange={(e) => setInput(e.target.value)}\r\n-            onKeyDown={(e) => e.key === \"Enter\" && sendMessage()}\r\n-          />\r\n-          <button onClick={sendMessage} className=\"bg-blue-500 text-white px-4 py-2 rounded\">\r\n-            Send\r\n-          </button>\r\n-        </div>\r\n-      </div>\r\n+      {/* Chat Box */}\r\n+      {socketRef.current && <ChatBox socket={socketRef.current} roomId={id} userName={userInfo.name} />}\r\n     </div>\r\n   );\r\n }\r\n-\r\n-// Remote video component\r\n-function RemoteVideo({ stream }: { stream: MediaStream }) {\r\n-  const ref = useRef<HTMLVideoElement>(null);\r\n-  useEffect(() => {\r\n-    if (ref.current) ref.current.srcObject = stream;\r\n-  }, [stream]);\r\n-  return <video ref={ref} autoPlay playsInline className=\"w-full h-48 bg-black rounded-lg\" />;\r\n-}\r\n"
                },
                {
                    "date": 1758899925089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n import LocalVideo from \"../../../../features/RoomChat/components/LocalVideo\";\r\n import RemoteVideo from \"../../../../features/RoomChat/components/RemoteVideo\";\r\n import ChatBox from \"../../../../features/RoomChat/components/ChatBox\";\r\n \r\n-// Signaling server URL\r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n \r\n interface RoomInfo {\r\n   id: string;\r\n@@ -42,8 +41,10 @@\n     (async () => {\r\n       try {\r\n         const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n         localStreamRef.current = stream;\r\n+        // Force re-render\r\n+        setPeers((prev) => ({ ...prev }));\r\n       } catch (err) {\r\n         console.error(\"Camera error:\", err);\r\n       }\r\n     })();\r\n@@ -60,46 +61,45 @@\n     socket.emit(\"join-room-dynamic\", { roomId: id, userInfo });\r\n \r\n     socket.on(\"room-update\", (data: RoomInfo) => setRoom(data));\r\n \r\n-    // When a new user joins, create a peer connection and send offer\r\n-    socket.on(\"user-joined\", async ({ userId }: { userId: string }) => {\r\n+    socket.on(\"user-joined\", async ({ userId, userName }: { userId: string; userName: string }) => {\r\n       if (!localStreamRef.current) return;\r\n-      const pc = createPeerConnection(userId);\r\n+\r\n+      const pc = createPeerConnection(userId, userName);\r\n       localStreamRef.current.getTracks().forEach((t) => pc.addTrack(t));\r\n \r\n       const offer = await pc.createOffer();\r\n       await pc.setLocalDescription(offer);\r\n       socket.emit(\"room-offer\", { roomId: id, offer, to: userId });\r\n     });\r\n \r\n-    // Receive offer from another peer\r\n-    socket.on(\"room-offer\", async ({ from, offer }: { from: string; offer: RTCSessionDescriptionInit }) => {\r\n-      if (!localStreamRef.current) return;\r\n-      const pc = createPeerConnection(from);\r\n-      await pc.setRemoteDescription(new RTCSessionDescription(offer));\r\n-      localStreamRef.current.getTracks().forEach((t) => pc.addTrack(t));\r\n-      const answer = await pc.createAnswer();\r\n-      await pc.setLocalDescription(answer);\r\n-      socket.emit(\"room-answer\", { roomId: id, answer, to: from });\r\n-    });\r\n+    socket.on(\r\n+      \"room-offer\",\r\n+      async ({ from, offer, name }: { from: string; offer: RTCSessionDescriptionInit; name: string }) => {\r\n+        if (!localStreamRef.current) return;\r\n+        const pc = createPeerConnection(from, name);\r\n+        await pc.setRemoteDescription(new RTCSessionDescription(offer));\r\n+        localStreamRef.current.getTracks().forEach((t) => pc.addTrack(t));\r\n+        const answer = await pc.createAnswer();\r\n+        await pc.setLocalDescription(answer);\r\n+        socket.emit(\"room-answer\", { roomId: id, answer, to: from });\r\n+      }\r\n+    );\r\n \r\n-    // Receive answer\r\n     socket.on(\"room-answer\", async ({ from, answer }: { from: string; answer: RTCSessionDescriptionInit }) => {\r\n-      const pc = peerConnections.current[from];\r\n+      const pc = peerConnections.current[from]?.pc;\r\n       if (pc) await pc.setRemoteDescription(new RTCSessionDescription(answer));\r\n     });\r\n \r\n-    // ICE candidates\r\n     socket.on(\"room-ice\", ({ from, candidate }: { from: string; candidate: RTCIceCandidateInit }) => {\r\n-      const pc = peerConnections.current[from];\r\n+      const pc = peerConnections.current[from]?.pc;\r\n       if (pc) pc.addIceCandidate(new RTCIceCandidate(candidate));\r\n     });\r\n \r\n-    // Handle user leaving\r\n     socket.on(\"user-left\", ({ userId }: { userId: string }) => {\r\n-      const pc = peerConnections.current[userId];\r\n-      if (pc) pc.close();\r\n+      const pcData = peerConnections.current[userId];\r\n+      if (pcData) pcData.pc.close();\r\n       delete peerConnections.current[userId];\r\n       setPeers((prev) => {\r\n         const updated = { ...prev };\r\n         delete updated[userId];\r\n@@ -109,30 +109,42 @@\n \r\n     return () => {\r\n       socket.emit(\"leave-room\", { roomId: id });\r\n       socket.disconnect();\r\n-      Object.values(peerConnections.current).forEach((pc) => pc.close());\r\n+      Object.values(peerConnections.current).forEach((p) => p.pc.close());\r\n       peerConnections.current = {};\r\n     };\r\n   }, [id, userInfo]);\r\n \r\n-  // Create peer connection helper\r\n-  const createPeerConnection = (peerId: string) => {\r\n+  const createPeerConnection = (peerId: string, name: string) => {\r\n     const socket = socketRef.current!;\r\n     const pc = new RTCPeerConnection({ iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }] });\r\n \r\n     pc.onicecandidate = (e) => {\r\n       if (e.candidate) socket.emit(\"room-ice\", { roomId: id, candidate: e.candidate, to: peerId });\r\n     };\r\n \r\n-    pc.ontrack = (e) => setPeers((prev) => ({ ...prev, [peerId]: e.streams[0] }));\r\n+    pc.ontrack = (e) =>\r\n+      setPeers((prev) => ({\r\n+        ...prev,\r\n+        [peerId]: e.streams[0],\r\n+      }));\r\n \r\n-    peerConnections.current[peerId] = pc;\r\n+    peerConnections.current[peerId] = { pc, name };\r\n     return pc;\r\n   };\r\n \r\n   if (!localStreamRef.current) return <p>Loading camera...</p>;\r\n \r\n+  const totalUsers = Object.keys(peers).length + 1;\r\n+  const getGridCols = () => {\r\n+    if (totalUsers <= 1) return \"grid-cols-1\";\r\n+    if (totalUsers === 2) return \"grid-cols-2\";\r\n+    if (totalUsers <= 4) return \"grid-cols-2 md:grid-cols-2\";\r\n+    if (totalUsers <= 6) return \"grid-cols-2 md:grid-cols-3\";\r\n+    return \"grid-cols-2 md:grid-cols-3 lg:grid-cols-4\";\r\n+  };\r\n+\r\n   return (\r\n     <div className=\"p-4 space-y-4\">\r\n       {/* Room info */}\r\n       {room && (\r\n@@ -144,16 +156,17 @@\n         </div>\r\n       )}\r\n \r\n       {/* Video Grid */}\r\n-      <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\r\n+      <div className={`grid ${getGridCols()} gap-4`}>\r\n         <LocalVideo stream={localStreamRef.current} label={userInfo.name} />\r\n-        {Object.entries(peers).map(([peerId, stream]) => (\r\n-          <RemoteVideo key={peerId} stream={stream} label={peerId} />\r\n-        ))}\r\n+        {Object.entries(peers).map(([peerId, stream]) => {\r\n+          const name = peerConnections.current[peerId]?.name || peerId;\r\n+          return <RemoteVideo key={peerId} stream={stream} label={name} />;\r\n+        })}\r\n       </div>\r\n \r\n-      {/* Chat Box */}\r\n+      {/* Chat */}\r\n       {socketRef.current && <ChatBox socket={socketRef.current} roomId={id} userName={userInfo.name} />}\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1758900042103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,10 @@\n \r\n   const [room, setRoom] = useState<RoomInfo | null>(null);\r\n   const [peers, setPeers] = useState<{ [peerId: string]: MediaStream }>({});\r\n \r\n-  const peerConnections = useRef<{ [peerId: string]: RTCPeerConnection }>({});\r\n+  // Store peer connections with name for labels\r\n+  const peerConnections = useRef<{ [peerId: string]: { pc: RTCPeerConnection; name: string } }>({});\r\n \r\n   const userInfo: UserInfo = JSON.parse(localStorage.getItem(\"user-info\") || \"{}\");\r\n \r\n   // Start local camera & mic\r\n@@ -41,10 +42,9 @@\n     (async () => {\r\n       try {\r\n         const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n         localStreamRef.current = stream;\r\n-        // Force re-render\r\n-        setPeers((prev) => ({ ...prev }));\r\n+        setPeers((prev) => ({ ...prev })); // Force re-render\r\n       } catch (err) {\r\n         console.error(\"Camera error:\", err);\r\n       }\r\n     })();\r\n@@ -56,18 +56,18 @@\n \r\n     const socket = io(SOCKET_URL, { transports: [\"websocket\"] });\r\n     socketRef.current = socket;\r\n \r\n-    // Join room\r\n+    // Join room with user info\r\n     socket.emit(\"join-room-dynamic\", { roomId: id, userInfo });\r\n \r\n     socket.on(\"room-update\", (data: RoomInfo) => setRoom(data));\r\n \r\n     socket.on(\"user-joined\", async ({ userId, userName }: { userId: string; userName: string }) => {\r\n       if (!localStreamRef.current) return;\r\n \r\n       const pc = createPeerConnection(userId, userName);\r\n-      localStreamRef.current.getTracks().forEach((t) => pc.addTrack(t));\r\n+      localStreamRef.current.getTracks().forEach((track) => pc.addTrack(track));\r\n \r\n       const offer = await pc.createOffer();\r\n       await pc.setLocalDescription(offer);\r\n       socket.emit(\"room-offer\", { roomId: id, offer, to: userId });\r\n@@ -76,11 +76,13 @@\n     socket.on(\r\n       \"room-offer\",\r\n       async ({ from, offer, name }: { from: string; offer: RTCSessionDescriptionInit; name: string }) => {\r\n         if (!localStreamRef.current) return;\r\n+\r\n         const pc = createPeerConnection(from, name);\r\n         await pc.setRemoteDescription(new RTCSessionDescription(offer));\r\n-        localStreamRef.current.getTracks().forEach((t) => pc.addTrack(t));\r\n+        localStreamRef.current.getTracks().forEach((track) => pc.addTrack(track));\r\n+\r\n         const answer = await pc.createAnswer();\r\n         await pc.setLocalDescription(answer);\r\n         socket.emit(\"room-answer\", { roomId: id, answer, to: from });\r\n       }\r\n@@ -134,39 +136,42 @@\n   };\r\n \r\n   if (!localStreamRef.current) return <p>Loading camera...</p>;\r\n \r\n+  // Responsive grid columns\r\n   const totalUsers = Object.keys(peers).length + 1;\r\n   const getGridCols = () => {\r\n-    if (totalUsers <= 1) return \"grid-cols-1\";\r\n+    if (totalUsers === 1) return \"grid-cols-1\";\r\n     if (totalUsers === 2) return \"grid-cols-2\";\r\n     if (totalUsers <= 4) return \"grid-cols-2 md:grid-cols-2\";\r\n     if (totalUsers <= 6) return \"grid-cols-2 md:grid-cols-3\";\r\n     return \"grid-cols-2 md:grid-cols-3 lg:grid-cols-4\";\r\n   };\r\n \r\n   return (\r\n-    <div className=\"p-4 space-y-4\">\r\n-      {/* Room info */}\r\n-      {room && (\r\n-        <div className=\"bg-gray-100 p-4 rounded-lg shadow\">\r\n-          <h1 className=\"text-2xl font-bold\">{room.name}</h1>\r\n-          <p className=\"text-sm text-gray-700\">{room.topic}</p>\r\n-          <p className=\"text-sm text-gray-500\">{room.description}</p>\r\n-          <p className=\"mt-2 text-sm font-medium\">Users: {room.users.length}</p>\r\n-        </div>\r\n-      )}\r\n-\r\n+    <div className=\"flex flex-col md:flex-row gap-4 p-4 min-h-screen\">\r\n       {/* Video Grid */}\r\n-      <div className={`grid ${getGridCols()} gap-4`}>\r\n+      <div className={`flex-1 grid ${getGridCols()} gap-4`}>\r\n         <LocalVideo stream={localStreamRef.current} label={userInfo.name} />\r\n         {Object.entries(peers).map(([peerId, stream]) => {\r\n           const name = peerConnections.current[peerId]?.name || peerId;\r\n           return <RemoteVideo key={peerId} stream={stream} label={name} />;\r\n         })}\r\n       </div>\r\n \r\n       {/* Chat */}\r\n-      {socketRef.current && <ChatBox socket={socketRef.current} roomId={id} userName={userInfo.name} />}\r\n+      <div className=\"md:w-80 flex-shrink-0\">\r\n+        {socketRef.current && <ChatBox socket={socketRef.current} roomId={id} userName={userInfo.name} />}\r\n+      </div>\r\n+\r\n+      {/* Room Info */}\r\n+      {room && (\r\n+        <div className=\"md:w-64 p-4 bg-gray-100 dark:bg-neutral-800 rounded-lg shadow flex-shrink-0\">\r\n+          <h2 className=\"text-lg font-bold\">{room.name}</h2>\r\n+          <p className=\"text-sm text-gray-700 dark:text-gray-300\">{room.topic}</p>\r\n+          <p className=\"text-sm text-gray-500 dark:text-gray-400\">{room.description}</p>\r\n+          <p className=\"mt-2 text-sm font-medium\">Users: {room.users.length}</p>\r\n+        </div>\r\n+      )}\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1758902632049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,14 +8,19 @@\n import ChatBox from \"../../../../features/RoomChat/components/ChatBox\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n \r\n+interface RoomUser {\r\n+  id: string;\r\n+  userInfo: UserInfo;\r\n+}\r\n+\r\n interface RoomInfo {\r\n   id: string;\r\n   name: string;\r\n   topic: string;\r\n   description?: string;\r\n-  users: string[];\r\n+  users: RoomUser[];\r\n }\r\n \r\n interface UserInfo {\r\n   name: string;\r\n@@ -31,9 +36,8 @@\n \r\n   const [room, setRoom] = useState<RoomInfo | null>(null);\r\n   const [peers, setPeers] = useState<{ [peerId: string]: MediaStream }>({});\r\n \r\n-  // Store peer connections with name for labels\r\n   const peerConnections = useRef<{ [peerId: string]: { pc: RTCPeerConnection; name: string } }>({});\r\n \r\n   const userInfo: UserInfo = JSON.parse(localStorage.getItem(\"user-info\") || \"{}\");\r\n \r\n@@ -42,9 +46,9 @@\n     (async () => {\r\n       try {\r\n         const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n         localStreamRef.current = stream;\r\n-        setPeers((prev) => ({ ...prev })); // Force re-render\r\n+        setPeers((prev) => ({ ...prev }));\r\n       } catch (err) {\r\n         console.error(\"Camera error:\", err);\r\n       }\r\n     })();\r\n@@ -59,19 +63,19 @@\n \r\n     // Join room with user info\r\n     socket.emit(\"join-room-dynamic\", { roomId: id, userInfo });\r\n \r\n-    socket.on(\"room-update\", (data: RoomInfo) => setRoom(data));\r\n+    // Update room info\r\n+    socket.on(\"room-update\", async (data: RoomInfo) => {\r\n+      setRoom(data);\r\n \r\n-    socket.on(\"user-joined\", async ({ userId, userName }: { userId: string; userName: string }) => {\r\n-      if (!localStreamRef.current) return;\r\n-\r\n-      const pc = createPeerConnection(userId, userName);\r\n-      localStreamRef.current.getTracks().forEach((track) => pc.addTrack(track));\r\n-\r\n-      const offer = await pc.createOffer();\r\n-      await pc.setLocalDescription(offer);\r\n-      socket.emit(\"room-offer\", { roomId: id, offer, to: userId });\r\n+      // Create peer connections for new users\r\n+      for (const user of data.users) {\r\n+        if (user.id === socket.id) continue;\r\n+        if (!peerConnections.current[user.id]) {\r\n+          await createOfferToPeer(user.id, user.userInfo.name);\r\n+        }\r\n+      }\r\n     });\r\n \r\n     socket.on(\r\n       \"room-offer\",\r\n@@ -134,11 +138,22 @@\n     peerConnections.current[peerId] = { pc, name };\r\n     return pc;\r\n   };\r\n \r\n+  const createOfferToPeer = async (peerId: string, name: string) => {\r\n+    if (!localStreamRef.current || peerConnections.current[peerId]) return;\r\n+\r\n+    const pc = createPeerConnection(peerId, name);\r\n+    localStreamRef.current.getTracks().forEach((track) => pc.addTrack(track));\r\n+\r\n+    const offer = await pc.createOffer();\r\n+    await pc.setLocalDescription(offer);\r\n+\r\n+    socketRef.current?.emit(\"room-offer\", { roomId: id, offer, to: peerId });\r\n+  };\r\n+\r\n   if (!localStreamRef.current) return <p>Loading camera...</p>;\r\n \r\n-  // Responsive grid columns\r\n   const totalUsers = Object.keys(peers).length + 1;\r\n   const getGridCols = () => {\r\n     if (totalUsers === 1) return \"grid-cols-1\";\r\n     if (totalUsers === 2) return \"grid-cols-2\";\r\n@@ -148,23 +163,20 @@\n   };\r\n \r\n   return (\r\n     <div className=\"flex flex-col md:flex-row gap-4 p-4 min-h-screen\">\r\n-      {/* Video Grid */}\r\n       <div className={`flex-1 grid ${getGridCols()} gap-4`}>\r\n         <LocalVideo stream={localStreamRef.current} label={userInfo.name} />\r\n         {Object.entries(peers).map(([peerId, stream]) => {\r\n           const name = peerConnections.current[peerId]?.name || peerId;\r\n           return <RemoteVideo key={peerId} stream={stream} label={name} />;\r\n         })}\r\n       </div>\r\n \r\n-      {/* Chat */}\r\n       <div className=\"md:w-80 flex-shrink-0\">\r\n         {socketRef.current && <ChatBox socket={socketRef.current} roomId={id} userName={userInfo.name} />}\r\n       </div>\r\n \r\n-      {/* Room Info */}\r\n       {room && (\r\n         <div className=\"md:w-64 p-4 bg-gray-100 dark:bg-neutral-800 rounded-lg shadow flex-shrink-0\">\r\n           <h2 className=\"text-lg font-bold\">{room.name}</h2>\r\n           <p className=\"text-sm text-gray-700 dark:text-gray-300\">{room.topic}</p>\r\n"
                },
                {
                    "date": 1758906386073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,15 @@\n import ChatBox from \"../../../../features/RoomChat/components/ChatBox\";\r\n \r\n const SOCKET_URL = process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n \r\n+interface UserInfo {\r\n+  name: string;\r\n+  age: string;\r\n+  gender: string;\r\n+  country: string;\r\n+}\r\n+\r\n interface RoomUser {\r\n   id: string;\r\n   userInfo: UserInfo;\r\n }\r\n@@ -21,15 +28,8 @@\n   description?: string;\r\n   users: RoomUser[];\r\n }\r\n \r\n-interface UserInfo {\r\n-  name: string;\r\n-  age: string;\r\n-  gender: string;\r\n-  country: string;\r\n-}\r\n-\r\n export default function RoomPage() {\r\n   const { id } = useParams() as { id: string };\r\n   const socketRef = useRef<Socket | null>(null);\r\n   const localStreamRef = useRef<MediaStream | null>(null);\r\n@@ -46,38 +46,39 @@\n     (async () => {\r\n       try {\r\n         const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n         localStreamRef.current = stream;\r\n-        setPeers((prev) => ({ ...prev }));\r\n+        setPeers((prev) => ({ ...prev })); // force re-render\r\n       } catch (err) {\r\n         console.error(\"Camera error:\", err);\r\n       }\r\n     })();\r\n   }, []);\r\n \r\n-  // Connect to room & handle WebRTC\r\n+  // Connect to socket & handle WebRTC\r\n   useEffect(() => {\r\n     if (!localStreamRef.current) return;\r\n \r\n     const socket = io(SOCKET_URL, { transports: [\"websocket\"] });\r\n     socketRef.current = socket;\r\n \r\n-    // Join room with user info\r\n+    // Join room\r\n     socket.emit(\"join-room-dynamic\", { roomId: id, userInfo });\r\n \r\n-    // Update room info\r\n+    // Room update\r\n     socket.on(\"room-update\", async (data: RoomInfo) => {\r\n+      if (!data?.users) return;\r\n       setRoom(data);\r\n \r\n-      // Create peer connections for new users\r\n       for (const user of data.users) {\r\n         if (user.id === socket.id) continue;\r\n         if (!peerConnections.current[user.id]) {\r\n           await createOfferToPeer(user.id, user.userInfo.name);\r\n         }\r\n       }\r\n     });\r\n \r\n+    // Offer received\r\n     socket.on(\r\n       \"room-offer\",\r\n       async ({ from, offer, name }: { from: string; offer: RTCSessionDescriptionInit; name: string }) => {\r\n         if (!localStreamRef.current) return;\r\n@@ -91,18 +92,21 @@\n         socket.emit(\"room-answer\", { roomId: id, answer, to: from });\r\n       }\r\n     );\r\n \r\n+    // Answer received\r\n     socket.on(\"room-answer\", async ({ from, answer }: { from: string; answer: RTCSessionDescriptionInit }) => {\r\n       const pc = peerConnections.current[from]?.pc;\r\n       if (pc) await pc.setRemoteDescription(new RTCSessionDescription(answer));\r\n     });\r\n \r\n+    // ICE candidate\r\n     socket.on(\"room-ice\", ({ from, candidate }: { from: string; candidate: RTCIceCandidateInit }) => {\r\n       const pc = peerConnections.current[from]?.pc;\r\n-      if (pc) pc.addIceCandidate(new RTCIceCandidate(candidate));\r\n+      if (pc && candidate) pc.addIceCandidate(new RTCIceCandidate(candidate));\r\n     });\r\n \r\n+    // User left\r\n     socket.on(\"user-left\", ({ userId }: { userId: string }) => {\r\n       const pcData = peerConnections.current[userId];\r\n       if (pcData) pcData.pc.close();\r\n       delete peerConnections.current[userId];\r\n@@ -121,20 +125,21 @@\n     };\r\n   }, [id, userInfo]);\r\n \r\n   const createPeerConnection = (peerId: string, name: string) => {\r\n+    if (peerConnections.current[peerId]) return peerConnections.current[peerId].pc;\r\n+\r\n     const socket = socketRef.current!;\r\n     const pc = new RTCPeerConnection({ iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }] });\r\n \r\n     pc.onicecandidate = (e) => {\r\n       if (e.candidate) socket.emit(\"room-ice\", { roomId: id, candidate: e.candidate, to: peerId });\r\n     };\r\n \r\n-    pc.ontrack = (e) =>\r\n-      setPeers((prev) => ({\r\n-        ...prev,\r\n-        [peerId]: e.streams[0],\r\n-      }));\r\n+    pc.ontrack = (e) => {\r\n+      if (!e.streams[0]) return;\r\n+      setPeers((prev) => ({ ...prev, [peerId]: e.streams[0] }));\r\n+    };\r\n \r\n     peerConnections.current[peerId] = { pc, name };\r\n     return pc;\r\n   };\r\n@@ -164,22 +169,23 @@\n \r\n   return (\r\n     <div className=\"flex flex-col md:flex-row gap-4 p-4 min-h-screen\">\r\n       <div className={`flex-1 grid ${getGridCols()} gap-4`}>\r\n-        <LocalVideo stream={localStreamRef.current} label={userInfo.name} />\r\n+        <LocalVideo stream={localStreamRef.current} label={userInfo.name || \"You\"} />\r\n         {Object.entries(peers).map(([peerId, stream]) => {\r\n-          const name = peerConnections.current[peerId]?.name || peerId;\r\n+          const name = peerConnections.current[peerId]?.name || \"Stranger\";\r\n+          if (!stream) return null;\r\n           return <RemoteVideo key={peerId} stream={stream} label={name} />;\r\n         })}\r\n       </div>\r\n \r\n       <div className=\"md:w-80 flex-shrink-0\">\r\n-        {socketRef.current && <ChatBox socket={socketRef.current} roomId={id} userName={userInfo.name} />}\r\n+        {socketRef.current && <ChatBox socket={socketRef.current} roomId={id} userName={userInfo.name || \"You\"} />}\r\n       </div>\r\n \r\n       {room && (\r\n         <div className=\"md:w-64 p-4 bg-gray-100 dark:bg-neutral-800 rounded-lg shadow flex-shrink-0\">\r\n-          <h2 className=\"text-lg font-bold\">{room.name}</h2>\r\n+          <h2 className=\"text-lg font-bold\">{room.name || \"Room\"}</h2>\r\n           <p className=\"text-sm text-gray-700 dark:text-gray-300\">{room.topic}</p>\r\n           <p className=\"text-sm text-gray-500 dark:text-gray-400\">{room.description}</p>\r\n           <p className=\"mt-2 text-sm font-medium\">Users: {room.users.length}</p>\r\n         </div>\r\n"
                },
                {
                    "date": 1760156505117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,22 @@\n \"use client\";\r\n \r\n import React, { useEffect, useRef, useState } from \"react\";\r\n import { useParams } from \"next/navigation\";\r\n-import { io, Socket } from \"socket.io-client\";\r\n import LocalVideo from \"../../../../features/RoomChat/components/LocalVideo\";\r\n import RemoteVideo from \"../../../../features/RoomChat/components/RemoteVideo\";\r\n import ChatBox from \"../../../../features/RoomChat/components/ChatBox\";\r\n+import { connectRoomSocket, disconnectRoomSocket } from \"../../../../features/RoomChat/services/roomSocketService\";\r\n \r\n-const SOCKET_URL = process.env.NEXT_PUBLIC_SIGNALING_URL || \"http://localhost:3001\";\r\n-\r\n interface UserInfo {\r\n   name: string;\r\n   age: string;\r\n   gender: string;\r\n   country: string;\r\n }\r\n \r\n interface RoomUser {\r\n-  id: string;\r\n+  socketId: string;\r\n   userInfo: UserInfo;\r\n }\r\n \r\n interface RoomInfo {\r\n@@ -30,78 +28,64 @@\n }\r\n \r\n export default function RoomPage() {\r\n   const { id } = useParams() as { id: string };\r\n-  const socketRef = useRef<Socket | null>(null);\r\n+  const socketRef = useRef<any>(null);\r\n   const localStreamRef = useRef<MediaStream | null>(null);\r\n-\r\n+  const peerConnections = useRef<{ [peerId: string]: { pc: RTCPeerConnection; name: string } }>({});\r\n   const [room, setRoom] = useState<RoomInfo | null>(null);\r\n   const [peers, setPeers] = useState<{ [peerId: string]: MediaStream }>({});\r\n \r\n-  const peerConnections = useRef<{ [peerId: string]: { pc: RTCPeerConnection; name: string } }>({});\r\n-\r\n   const userInfo: UserInfo = JSON.parse(localStorage.getItem(\"user-info\") || \"{}\");\r\n \r\n-  // Start local camera & mic\r\n+  // Start camera & mic\r\n   useEffect(() => {\r\n     (async () => {\r\n       try {\r\n         const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n         localStreamRef.current = stream;\r\n-        setPeers((prev) => ({ ...prev })); // force re-render\r\n+        setPeers((prev) => ({ ...prev })); // force render\r\n       } catch (err) {\r\n         console.error(\"Camera error:\", err);\r\n       }\r\n     })();\r\n   }, []);\r\n \r\n-  // Connect to socket & handle WebRTC\r\n+  // Connect to /rooms socket and handle WebRTC\r\n   useEffect(() => {\r\n     if (!localStreamRef.current) return;\r\n \r\n-    const socket = io(SOCKET_URL, { transports: [\"websocket\"] });\r\n+    const socket = connectRoomSocket();\r\n     socketRef.current = socket;\r\n \r\n     // Join room\r\n-    socket.emit(\"join-room-dynamic\", { roomId: id, userInfo });\r\n+    socket.emit(\"join-room\", { roomId: id, user: userInfo });\r\n \r\n     // Room update\r\n-    socket.on(\"room-update\", async (data: RoomInfo) => {\r\n-      if (!data?.users) return;\r\n-      setRoom(data);\r\n+    socket.on(\"user-joined\", (user: RoomUser) => {\r\n+      if (user.socketId === socket.id) return;\r\n+      createOfferToPeer(user.socketId, user.userInfo.name);\r\n+    });\r\n \r\n-      for (const user of data.users) {\r\n-        if (user.id === socket.id) continue;\r\n-        if (!peerConnections.current[user.id]) {\r\n-          await createOfferToPeer(user.id, user.userInfo.name);\r\n-        }\r\n-      }\r\n+    // Receive offer\r\n+    socket.on(\"room-offer\", async ({ from, offer, name }) => {\r\n+      if (!localStreamRef.current) return;\r\n+      const pc = createPeerConnection(from, name);\r\n+      await pc.setRemoteDescription(new RTCSessionDescription(offer));\r\n+      localStreamRef.current.getTracks().forEach((track) => pc.addTrack(track));\r\n+      const answer = await pc.createAnswer();\r\n+      await pc.setLocalDescription(answer);\r\n+      socket.emit(\"room-answer\", { roomId: id, answer, to: from });\r\n     });\r\n \r\n-    // Offer received\r\n-    socket.on(\r\n-      \"room-offer\",\r\n-      async ({ from, offer, name }: { from: string; offer: RTCSessionDescriptionInit; name: string }) => {\r\n-        if (!localStreamRef.current) return;\r\n-\r\n-        const pc = createPeerConnection(from, name);\r\n-        await pc.setRemoteDescription(new RTCSessionDescription(offer));\r\n-        localStreamRef.current.getTracks().forEach((track) => pc.addTrack(track));\r\n-\r\n-        const answer = await pc.createAnswer();\r\n-        await pc.setLocalDescription(answer);\r\n-        socket.emit(\"room-answer\", { roomId: id, answer, to: from });\r\n-      }\r\n-    );\r\n-\r\n-    // Answer received\r\n-    socket.on(\"room-answer\", async ({ from, answer }: { from: string; answer: RTCSessionDescriptionInit }) => {\r\n+    // Receive answer\r\n+    socket.on(\"room-answer\", async ({ from, answer }) => {\r\n       const pc = peerConnections.current[from]?.pc;\r\n       if (pc) await pc.setRemoteDescription(new RTCSessionDescription(answer));\r\n     });\r\n \r\n-    // ICE candidate\r\n-    socket.on(\"room-ice\", ({ from, candidate }: { from: string; candidate: RTCIceCandidateInit }) => {\r\n+    // Receive ICE\r\n+    socket.on(\"room-ice\", ({ from, candidate }) => {\r\n       const pc = peerConnections.current[from]?.pc;\r\n       if (pc && candidate) pc.addIceCandidate(new RTCIceCandidate(candidate));\r\n     });\r\n \r\n@@ -117,19 +101,19 @@\n       });\r\n     });\r\n \r\n     return () => {\r\n-      socket.emit(\"leave-room\", { roomId: id });\r\n-      socket.disconnect();\r\n+      socket.emit(\"leave-room\", { roomId: id, userId: socket.id });\r\n       Object.values(peerConnections.current).forEach((p) => p.pc.close());\r\n       peerConnections.current = {};\r\n+      disconnectRoomSocket();\r\n     };\r\n   }, [id, userInfo]);\r\n \r\n   const createPeerConnection = (peerId: string, name: string) => {\r\n     if (peerConnections.current[peerId]) return peerConnections.current[peerId].pc;\r\n \r\n-    const socket = socketRef.current!;\r\n+    const socket = socketRef.current;\r\n     const pc = new RTCPeerConnection({ iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }] });\r\n \r\n     pc.onicecandidate = (e) => {\r\n       if (e.candidate) socket.emit(\"room-ice\", { roomId: id, candidate: e.candidate, to: peerId });\r\n"
                }
            ],
            "date": 1758888488063,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useParams } from \"next/navigation\";\r\nimport io, { Socket } from \"socket.io-client\";\r\n\r\n// ‚ö°Ô∏è Adjust to your signaling server endpoint\r\nconst SOCKET_URL =\r\n  process.env.NEXT_PUBLIC_SOCKET_URL || \"http://localhost:3001\";\r\n\r\ninterface RoomInfo {\r\n  id: string;\r\n  name: string;\r\n  topic: string;\r\n  description: string;\r\n  users: string[];\r\n}\r\n\r\ninterface ChatMessage {\r\n  id: string;\r\n  user: string;\r\n  text: string;\r\n}\r\n\r\nexport default function RoomPage() {\r\n  const { id } = useParams<{ id: string }>();\r\n  const socketRef = useRef<Socket | null>(null);\r\n  const localVideoRef = useRef<HTMLVideoElement>(null);\r\n\r\n  const [room, setRoom] = useState<RoomInfo | null>(null);\r\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [peers, setPeers] = useState<{ [peerId: string]: MediaStream }>({});\r\n\r\n  // üü¢ Join Room on mount\r\n  useEffect(() => {\r\n    const socket = io(SOCKET_URL);\r\n    socketRef.current = socket;\r\n\r\n    socket.emit(\"join-room\", { roomId: id });\r\n\r\n    // ‚úÖ Room info updates\r\n    socket.on(\"room-update\", (data: RoomInfo) => setRoom(data));\r\n\r\n    // ‚úÖ Chat messages\r\n    socket.on(\"room-message\", (msg: ChatMessage) =>\r\n      setMessages((prev) => [...prev, msg])\r\n    );\r\n\r\n    // ‚úÖ New user joins (start WebRTC)\r\n    socket.on(\"user-joined\", async ({ userId }: { userId: string }) => {\r\n      if (!localVideoRef.current) return;\r\n\r\n      const pc = createPeerConnection(socket, userId);\r\n\r\n      // Add local stream to connection\r\n      if (localVideoRef.current.srcObject) {\r\n        (localVideoRef.current.srcObject as MediaStream)\r\n          .getTracks()\r\n          .forEach((track) => pc.addTrack(track));\r\n      }\r\n\r\n      const offer = await pc.createOffer();\r\n      await pc.setLocalDescription(offer);\r\n      socket.emit(\"room-offer\", { roomId: id, offer, to: userId });\r\n    });\r\n\r\n    // ‚úÖ Handle incoming offer\r\n    socket.on(\r\n      \"room-offer\",\r\n      async ({ from, offer }: { from: string; offer: RTCSessionDescriptionInit }) => {\r\n        const pc = createPeerConnection(socket, from);\r\n        await pc.setRemoteDescription(new RTCSessionDescription(offer));\r\n\r\n        if (localVideoRef.current?.srcObject) {\r\n          (localVideoRef.current.srcObject as MediaStream)\r\n            .getTracks()\r\n            .forEach((track) => pc.addTrack(track));\r\n        }\r\n\r\n        const answer = await pc.createAnswer();\r\n        await pc.setLocalDescription(answer);\r\n        socket.emit(\"room-answer\", { roomId: id, answer, to: from });\r\n      }\r\n    );\r\n\r\n    // ‚úÖ Handle answer\r\n    socket.on(\r\n      \"room-answer\",\r\n      async ({ from, answer }: { from: string; answer: RTCSessionDescriptionInit }) => {\r\n        const pc = peerConnections[from];\r\n        if (pc) await pc.setRemoteDescription(new RTCSessionDescription(answer));\r\n      }\r\n    );\r\n\r\n    // ‚úÖ Handle ICE candidates\r\n    socket.on(\r\n      \"room-ice\",\r\n      ({ from, candidate }: { from: string; candidate: RTCIceCandidateInit }) => {\r\n        const pc = peerConnections[from];\r\n        if (pc) pc.addIceCandidate(new RTCIceCandidate(candidate));\r\n      }\r\n    );\r\n\r\n    // ‚úÖ User left\r\n    socket.on(\"user-left\", ({ userId }: { userId: string }) => {\r\n      const pc = peerConnections[userId];\r\n      if (pc) pc.close();\r\n      delete peerConnections[userId];\r\n      setPeers((prev) => {\r\n        const updated = { ...prev };\r\n        delete updated[userId];\r\n        return updated;\r\n      });\r\n    });\r\n\r\n    // üî¥ Leave room on unmount\r\n    return () => {\r\n      socket.emit(\"leave-room\", { roomId: id });\r\n      socket.disconnect();\r\n      Object.values(peerConnections).forEach((pc) => pc.close());\r\n    };\r\n  }, [id]);\r\n\r\n  // üé• Start local camera\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia({\r\n          video: true,\r\n          audio: true,\r\n        });\r\n        if (localVideoRef.current) {\r\n          localVideoRef.current.srcObject = stream;\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Camera error\", err);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  // üí¨ Send chat message\r\n  const sendMessage = () => {\r\n    if (!input.trim() || !socketRef.current) return;\r\n    socketRef.current.emit(\"room-message\", {\r\n      roomId: id,\r\n      text: input.trim(),\r\n    });\r\n    setInput(\"\");\r\n  };\r\n\r\n  // ======= WebRTC Helper =======\r\n  const peerConnections: { [peerId: string]: RTCPeerConnection } = {};\r\n  const createPeerConnection = (socket: Socket, peerId: string) => {\r\n    const pc = new RTCPeerConnection({\r\n      iceServers: [{ urls: \"stun:stun.l.google.com:19302\" }],\r\n    });\r\n\r\n    pc.onicecandidate = (e) => {\r\n      if (e.candidate) {\r\n        socket.emit(\"room-ice\", {\r\n          roomId: id,\r\n          candidate: e.candidate,\r\n          to: peerId,\r\n        });\r\n      }\r\n    };\r\n\r\n    pc.ontrack = (e) => {\r\n      setPeers((prev) => ({ ...prev, [peerId]: e.streams[0] }));\r\n    };\r\n\r\n    peerConnections[peerId] = pc;\r\n    return pc;\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4 space-y-4\">\r\n      {room ? (\r\n        <div className=\"bg-gray-100 p-4 rounded-lg shadow\">\r\n          <h1 className=\"text-2xl font-bold\">{room.name}</h1>\r\n          <p className=\"text-sm text-gray-700\">{room.topic}</p>\r\n          <p className=\"text-sm text-gray-500\">{room.description}</p>\r\n          <p className=\"mt-2 text-sm font-medium\">\r\n            Users in Room: {room.users.length}\r\n          </p>\r\n        </div>\r\n      ) : (\r\n        <p>Loading room...</p>\r\n      )}\r\n\r\n      {/* Video Grid */}\r\n      <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\r\n        <video\r\n          ref={localVideoRef}\r\n          autoPlay\r\n          playsInline\r\n          muted\r\n          className=\"w-full h-48 bg-black rounded-lg\"\r\n        />\r\n        {Object.entries(peers).map(([peerId, stream]) => (\r\n          <RemoteVideo key={peerId} stream={stream} />\r\n        ))}\r\n      </div>\r\n\r\n      {/* Chat */}\r\n      <div className=\"bg-white p-4 rounded-lg shadow max-w-lg\">\r\n        <div className=\"h-48 overflow-y-auto mb-2 border p-2\">\r\n          {messages.map((m) => (\r\n            <p key={m.id}>\r\n              <strong>{m.user}:</strong> {m.text}\r\n            </p>\r\n          ))}\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          <input\r\n            className=\"flex-1 border p-2 rounded\"\r\n            placeholder=\"Type a message...\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onKeyDown={(e) => e.key === \"Enter\" && sendMessage()}\r\n          />\r\n          <button\r\n            onClick={sendMessage}\r\n            className=\"bg-blue-500 text-white px-4 py-2 rounded\"\r\n          >\r\n            Send\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// ‚úÖ Component for remote streams\r\nfunction RemoteVideo({ stream }: { stream: MediaStream }) {\r\n  const ref = useRef<HTMLVideoElement>(null);\r\n  useEffect(() => {\r\n    if (ref.current) ref.current.srcObject = stream;\r\n  }, [stream]);\r\n  return (\r\n    <video\r\n      ref={ref}\r\n      autoPlay\r\n      playsInline\r\n      className=\"w-full h-48 bg-black rounded-lg\"\r\n    />\r\n  );\r\n}\r\n"
        }
    ]
}