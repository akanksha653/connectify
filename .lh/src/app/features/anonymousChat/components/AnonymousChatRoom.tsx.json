{
    "sourceFile": "src/app/features/anonymousChat/components/AnonymousChatRoom.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1760250127296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760250145370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,11 +5,11 @@\n import { ref, get, set } from \"firebase/database\";\r\n import { database } from \"@/lib/firebaseConfig\";\r\n import useWebRTC from \"../hooks/useWebRTC\";\r\n import useSocket from \"../hooks/useSocket\";\r\n-import LocalVideo from \"../../../../../components/video/LocalVideo\";\r\n-import RemoteVideo from \"../../../../../components/video/RemoteVideo\";\r\n-import ChatBox from \"../../../../../components/chat/ChatBox\";\r\n+import LocalVideo from \"../../../components/video/LocalVideo\";\r\n+import RemoteVideo from \"../../../components/video/RemoteVideo\";\r\n+import ChatBox from \"../../../components/chat/ChatBox\";\r\n import FindingPartner from \"./FindingPartner\";\r\n import IdleMessage from \"./IdleMessage\";\r\n import ControlBar from \"./ControlBar\";\r\n import { useSoundPlayer } from \"../hooks/useSoundPlayer\";\r\n"
                }
            ],
            "date": 1760250127296,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { ref, get, set } from \"firebase/database\";\r\nimport { database } from \"@/lib/firebaseConfig\";\r\nimport useWebRTC from \"../hooks/useWebRTC\";\r\nimport useSocket from \"../hooks/useSocket\";\r\nimport LocalVideo from \"../../../../../components/video/LocalVideo\";\r\nimport RemoteVideo from \"../../../../../components/video/RemoteVideo\";\r\nimport ChatBox from \"../../../../../components/chat/ChatBox\";\r\nimport FindingPartner from \"./FindingPartner\";\r\nimport IdleMessage from \"./IdleMessage\";\r\nimport ControlBar from \"./ControlBar\";\r\nimport { useSoundPlayer } from \"../hooks/useSoundPlayer\";\r\nimport { UserInfo } from \"@/types/user\";\r\nimport { useAuth } from \"../../../auth/authContext\";\r\n\r\nexport default function AnonymousChatRoom() {\r\n  const router = useRouter();\r\n  const { userId: authUserId, loading: authLoading } = useAuth();\r\n\r\n  const [userId, setUserId] = useState<string | null>(null);\r\n  const [userInfo, setUserInfo] = useState<UserInfo | null>(null);\r\n  const [partnerInfo, setPartnerInfo] = useState<UserInfo | null>(null);\r\n  const [roomId, setRoomId] = useState<string | null>(null);\r\n  const [isOfferer, setIsOfferer] = useState<boolean | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [sessionStarted, setSessionStarted] = useState(false);\r\n  const [lastAction, setLastAction] = useState<\"skipped\" | \"left\" | null>(null);\r\n  const [soundOn, setSoundOn] = useState(true);\r\n  const [micMuted, setMicMuted] = useState(false);\r\n  const [genderFilter, setGenderFilter] = useState(\"\");\r\n  const [countryFilter, setCountryFilter] = useState(\"\");\r\n\r\n  const socket = useSocket();\r\n  const { localStream, remoteStream } = useWebRTC({\r\n    roomId,\r\n    isOfferer,\r\n    isStarted: sessionStarted,\r\n    socket,\r\n  });\r\n\r\n  const { matchSoundRef, leaveSoundRef, playSound } = useSoundPlayer(soundOn);\r\n\r\n  // -------------------------\r\n  // Stable userId\r\n  // -------------------------\r\n  useEffect(() => {\r\n    const id =\r\n      authUserId || localStorage.getItem(\"userId\") || crypto.randomUUID();\r\n    localStorage.setItem(\"userId\", id);\r\n    setUserId(id);\r\n  }, [authUserId]);\r\n\r\n  // -------------------------\r\n  // Redirect unauthenticated\r\n  // -------------------------\r\n  useEffect(() => {\r\n    if (!authLoading && !authUserId) router.replace(\"/auth\");\r\n  }, [authLoading, authUserId, router]);\r\n\r\n  // -------------------------\r\n  // Fetch current user info\r\n  // -------------------------\r\n  useEffect(() => {\r\n    if (!userId) return;\r\n\r\n    const fetchUserInfo = async () => {\r\n      try {\r\n        const userRef = ref(database, `users/${userId}`);\r\n        const snapshot = await get(userRef);\r\n        if (!snapshot.exists()) {\r\n          router.replace(\"/auth\");\r\n          return;\r\n        }\r\n\r\n        const data = snapshot.val();\r\n        setUserInfo({\r\n          uid: userId,\r\n          name: data.name || \"Anonymous\",\r\n          age: data.age || \"\",\r\n          gender: data.gender || \"\",\r\n          country: data.country || \"\",\r\n          email: data.email || \"\",\r\n        });\r\n      } catch (err) {\r\n        console.error(\"Error fetching user info:\", err);\r\n        router.replace(\"/auth\");\r\n      }\r\n    };\r\n\r\n    fetchUserInfo();\r\n  }, [userId, router]);\r\n\r\n  // -------------------------\r\n  // Mute/unmute microphone\r\n  // -------------------------\r\n  useEffect(() => {\r\n    if (!localStream) return;\r\n    localStream.getAudioTracks().forEach((track) => {\r\n      track.enabled = !micMuted;\r\n    });\r\n  }, [micMuted, localStream]);\r\n\r\n  // -------------------------\r\n  // Chat control handlers\r\n  // -------------------------\r\n  const handleStart = () => {\r\n    if (sessionStarted || !userInfo) return;\r\n    setLoading(true);\r\n    setSessionStarted(true);\r\n\r\n    socket?.emit(\"start-looking\", {\r\n      name: userInfo.name,\r\n      age: userInfo.age,\r\n      gender: userInfo.gender,\r\n      country: userInfo.country,\r\n      filterGender: genderFilter,\r\n      filterCountry: countryFilter,\r\n    });\r\n  };\r\n\r\n  const handleStop = () => {\r\n    if (roomId) socket?.emit(\"leave-room\", roomId);\r\n    setRoomId(null);\r\n    setIsOfferer(null);\r\n    setSessionStarted(false);\r\n    setLoading(false);\r\n    setPartnerInfo(null);\r\n  };\r\n\r\n  const handleSkip = () => {\r\n    handleStop();\r\n    handleStart();\r\n    setLastAction(\"skipped\");\r\n  };\r\n\r\n  // -------------------------\r\n  // Listen for match & setup room\r\n  // -------------------------\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n\r\n    const handleMatched = async (data: any) => {\r\n      console.log(\"âœ… Matched event:\", data);\r\n      const {\r\n        roomId,\r\n        partnerId,\r\n        isOfferer,\r\n        partnerName,\r\n        partnerAge,\r\n        partnerCountry,\r\n      } = data;\r\n\r\n      setRoomId(roomId);\r\n      setIsOfferer(isOfferer);\r\n      socket.emit(\"join-room\", roomId);\r\n\r\n      const info = {\r\n        uid: partnerId,\r\n        name: partnerName || \"Stranger\",\r\n        age: partnerAge || \"\",\r\n        gender: \"\",\r\n        country: partnerCountry || \"\",\r\n        email: \"\",\r\n      };\r\n      setPartnerInfo(info);\r\n\r\n      const roomRef = ref(database, `rooms/${roomId}`);\r\n      await set(roomRef, {\r\n        createdAt: new Date().toISOString(),\r\n        messages: {},\r\n      });\r\n\r\n      socket.emit(\"chat-connected\", { roomId });\r\n\r\n      setLoading(false);\r\n      playSound(\"match\");\r\n    };\r\n\r\n    const handlePartnerLeft = () => {\r\n      setRoomId(null);\r\n      setIsOfferer(null);\r\n      setPartnerInfo(null);\r\n      setSessionStarted(false);\r\n      setLoading(false);\r\n      setLastAction(\"left\");\r\n      playSound(\"leave\");\r\n    };\r\n\r\n    socket.on(\"matched\", handleMatched);\r\n    socket.on(\"partner-left\", handlePartnerLeft);\r\n\r\n    return () => {\r\n      socket.off(\"matched\", handleMatched);\r\n      socket.off(\"partner-left\", handlePartnerLeft);\r\n    };\r\n  }, [socket, playSound]);\r\n\r\n  // -------------------------\r\n  // Render\r\n  // -------------------------\r\n  if (authLoading || !userInfo || !userId) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center bg-neutral-100 dark:bg-neutral-900\">\r\n        <p className=\"text-lg text-neutral-700 dark:text-neutral-300\">\r\n          Loading user info...\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"h-[calc(100vh-56px)]\">\r\n      {/* ðŸ”Š Sounds */}\r\n      <audio ref={matchSoundRef} src=\"/sounds/match.mp3\" preload=\"auto\" />\r\n      <audio ref={leaveSoundRef} src=\"/sounds/leave.mp3\" preload=\"auto\" />\r\n\r\n      <div className=\"flex flex-col md:flex-row w-full h-full overflow-hidden bg-neutral-100 dark:bg-neutral-900\">\r\n        {/* ðŸŽ¥ Video Section */}\r\n        <div className=\"flex-1 flex items-center justify-center p-3 bg-black relative overflow-hidden h-[66vh] md:h-full\">\r\n          {!sessionStarted ? (\r\n            <div className=\"text-white text-lg sm:text-xl font-semibold text-center\">\r\n              Click Start to begin searching\r\n            </div>\r\n          ) : loading ? (\r\n            <FindingPartner />\r\n          ) : (\r\n            <>\r\n              <RemoteVideo stream={remoteStream} />\r\n              <div className=\"absolute top-4 right-4 w-32 h-32 rounded overflow-hidden border-2 border-white shadow-lg\">\r\n                {localStream ? (\r\n                  <LocalVideo stream={localStream} />\r\n                ) : (\r\n                  <div className=\"text-white text-sm p-2\">\r\n                    Loading camera...\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n\r\n        {/* ðŸ’¬ Chat Section */}\r\n        <div className=\"w-full md:w-[420px] flex flex-col border-t md:border-l border-neutral-300 dark:border-neutral-700 bg-white dark:bg-neutral-900 h-[34vh] md:h-full\">\r\n          <div className=\"flex-1 min-h-0 overflow-hidden relative\">\r\n            {roomId && partnerInfo ? (\r\n              <ChatBox\r\n                socket={socket}\r\n                roomId={roomId}\r\n                userId={userId}\r\n                soundOn={soundOn}\r\n                partnerName={partnerInfo.name}\r\n                partnerAge={partnerInfo.age}\r\n                partnerCountry={partnerInfo.country}\r\n              />\r\n            ) : sessionStarted && loading ? (\r\n              <FindingPartner />\r\n            ) : sessionStarted ? (\r\n              <p className=\"text-center text-gray-400 mt-4\">Connecting...</p>\r\n            ) : (\r\n              <IdleMessage lastAction={lastAction} />\r\n            )}\r\n          </div>\r\n\r\n          {/* ðŸŽ® Controls */}\r\n          <ControlBar\r\n            userInfo={userInfo}\r\n            soundOn={soundOn}\r\n            setSoundOn={setSoundOn}\r\n            micMuted={micMuted}\r\n            setMicMuted={setMicMuted}\r\n            genderFilter={genderFilter}\r\n            setGenderFilter={setGenderFilter}\r\n            countryFilter={countryFilter}\r\n            setCountryFilter={setCountryFilter}\r\n            sessionStarted={sessionStarted}\r\n            loading={loading}\r\n            handleStart={handleStart}\r\n            handleStop={handleStop}\r\n            handleSkip={handleSkip}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}