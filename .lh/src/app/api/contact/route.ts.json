{
    "sourceFile": "src/app/api/contact/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1760122877060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760124051474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,33 +1,31 @@\n // app/api/contact/route.ts\r\n-import { NextResponse } from \"next/server\";\r\n+import { NextRequest, NextResponse } from \"next/server\";\r\n+import sgMail from \"@sendgrid/mail\";\r\n \r\n-export async function POST(req: Request) {\r\n+sgMail.setApiKey(process.env.SENDGRID_API_KEY!);\r\n+const RECEIVER_EMAIL = \"your-email@example.com\";\r\n+\r\n+export async function POST(req: NextRequest) {\r\n   try {\r\n-    const body = await req.json();\r\n-    const { name, email, message } = body;\r\n+    const { name, email, message } = await req.json();\r\n \r\n     if (!name || !email || !message) {\r\n-      return NextResponse.json({ message: \"Missing required fields\" }, { status: 400 });\r\n+      return NextResponse.json({ message: \"Missing fields\" }, { status: 400 });\r\n     }\r\n \r\n-    // Call your Firebase function\r\n-    const functionUrl = `https://YOUR_PROJECT_ID.cloudfunctions.net/submitContactForm`;\r\n-\r\n-    const res = await fetch(functionUrl, {\r\n-      method: \"POST\",\r\n-      headers: { \"Content-Type\": \"application/json\" },\r\n-      body: JSON.stringify({ name, email, message }),\r\n+    await sgMail.send({\r\n+      to: RECEIVER_EMAIL,\r\n+      from: \"no-reply@connectify.com\",\r\n+      subject: `New Contact Form Submission from ${name}`,\r\n+      text: `Name: ${name}\\nEmail: ${email}\\nMessage: ${message}`,\r\n+      html: `<p><strong>Name:</strong> ${name}</p>\r\n+             <p><strong>Email:</strong> ${email}</p>\r\n+             <p><strong>Message:</strong><br/>${message}</p>`,\r\n     });\r\n \r\n-    const data = await res.json();\r\n-\r\n-    if (!res.ok) {\r\n-      return NextResponse.json({ message: data.message || \"Failed to send message\" }, { status: 500 });\r\n-    }\r\n-\r\n-    return NextResponse.json({ message: \"Message sent successfully\", id: data.id });\r\n-  } catch (error: any) {\r\n-    console.error(\"API error:\", error);\r\n-    return NextResponse.json({ message: \"Internal server error\", error: error.message }, { status: 500 });\r\n+    return NextResponse.json({ message: \"Message sent successfully\" });\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    return NextResponse.json({ message: \"Internal server error\" }, { status: 500 });\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1760124144945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,27 @@\n // app/api/contact/route.ts\r\n import { NextRequest, NextResponse } from \"next/server\";\r\n+import { initializeApp, getApps } from \"firebase/app\";\r\n+import { getFirestore, collection, addDoc, serverTimestamp } from \"firebase/firestore\";\r\n import sgMail from \"@sendgrid/mail\";\r\n \r\n+// Initialize Firebase (only once)\r\n+const firebaseConfig = {\r\n+  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\r\n+  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\r\n+  databaseURL: process.env.NEXT_PUBLIC_FIREBASE_DATABASE_URL,\r\n+  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\r\n+  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\r\n+  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\r\n+  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\r\n+};\r\n+\r\n+if (!getApps().length) initializeApp(firebaseConfig);\r\n+const db = getFirestore();\r\n+\r\n+// Setup SendGrid\r\n sgMail.setApiKey(process.env.SENDGRID_API_KEY!);\r\n-const RECEIVER_EMAIL = \"your-email@example.com\";\r\n+const RECEIVER_EMAIL = \"your-email@example.com\"; // Replace with your email\r\n \r\n export async function POST(req: NextRequest) {\r\n   try {\r\n     const { name, email, message } = await req.json();\r\n@@ -12,11 +29,20 @@\n     if (!name || !email || !message) {\r\n       return NextResponse.json({ message: \"Missing fields\" }, { status: 400 });\r\n     }\r\n \r\n+    // Save to Firestore\r\n+    await addDoc(collection(db, \"contactMessages\"), {\r\n+      name,\r\n+      email,\r\n+      message,\r\n+      timestamp: serverTimestamp(),\r\n+    });\r\n+\r\n+    // Send email via SendGrid\r\n     await sgMail.send({\r\n       to: RECEIVER_EMAIL,\r\n-      from: \"no-reply@connectify.com\",\r\n+      from: \"no-reply@connectify.com\", // Must be verified in SendGrid\r\n       subject: `New Contact Form Submission from ${name}`,\r\n       text: `Name: ${name}\\nEmail: ${email}\\nMessage: ${message}`,\r\n       html: `<p><strong>Name:</strong> ${name}</p>\r\n              <p><strong>Email:</strong> ${email}</p>\r\n"
                },
                {
                    "date": 1760124350166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n const db = getFirestore();\r\n \r\n // Setup SendGrid\r\n sgMail.setApiKey(process.env.SENDGRID_API_KEY!);\r\n-const RECEIVER_EMAIL = \"your-email@example.com\"; // Replace with your email\r\n+const RECEIVER_EMAIL = \"connectify.hub.in@gmail.com\"; // Replace with your email\r\n \r\n export async function POST(req: NextRequest) {\r\n   try {\r\n     const { name, email, message } = await req.json();\r\n"
                },
                {
                    "date": 1760144422073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,79 @@\n };\r\n \r\n if (!getApps().length) initializeApp(firebaseConfig);\r\n const db = getFirestore();\r\n+// app/api/contact/route.ts\r\n+import { NextRequest, NextResponse } from \"next/server\";\r\n+import { initializeApp, getApps } from \"firebase/app\";\r\n+import { getFirestore, collection, addDoc, serverTimestamp } from \"firebase/firestore\";\r\n+import sgMail from \"@sendgrid/mail\";\r\n \r\n+// ========================\r\n+// 🔥 Initialize Firebase\r\n+// ========================\r\n+const firebaseConfig = {\r\n+  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\r\n+  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\r\n+  databaseURL: process.env.NEXT_PUBLIC_FIREBASE_DATABASE_URL,\r\n+  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\r\n+  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\r\n+  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\r\n+  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\r\n+};\r\n+\r\n+if (!getApps().length) initializeApp(firebaseConfig);\r\n+const db = getFirestore();\r\n+\r\n+// ========================\r\n+// 📧 Setup SendGrid\r\n+// ========================\r\n+const SENDGRID_API_KEY = process.env.SENDGRID_API_KEY!;\r\n+const EMAIL_TO = process.env.EMAIL_TO!;\r\n+const EMAIL_FROM = process.env.EMAIL_FROM!; // must be verified sender\r\n+sgMail.setApiKey(SENDGRID_API_KEY);\r\n+\r\n+// ========================\r\n+// 📩 POST Handler\r\n+// ========================\r\n+export async function POST(req: NextRequest) {\r\n+  try {\r\n+    const { name, email, message } = await req.json();\r\n+\r\n+    if (!name || !email || !message) {\r\n+      return NextResponse.json({ message: \"Missing required fields\" }, { status: 400 });\r\n+    }\r\n+\r\n+    // Save message to Firestore\r\n+    await addDoc(collection(db, \"contactMessages\"), {\r\n+      name,\r\n+      email,\r\n+      message,\r\n+      timestamp: serverTimestamp(),\r\n+    });\r\n+\r\n+    // Send email via SendGrid\r\n+    await sgMail.send({\r\n+      to: EMAIL_TO,\r\n+      from: EMAIL_FROM, // ✅ must be verified in SendGrid\r\n+      subject: `📩 New Contact Form Submission from ${name}`,\r\n+      text: `Name: ${name}\\nEmail: ${email}\\nMessage: ${message}`,\r\n+      html: `\r\n+        <h2>New Message from Contact Form</h2>\r\n+        <p><strong>Name:</strong> ${name}</p>\r\n+        <p><strong>Email:</strong> ${email}</p>\r\n+        <p><strong>Message:</strong></p>\r\n+        <p>${message}</p>\r\n+      `,\r\n+    });\r\n+\r\n+    return NextResponse.json({ message: \"Message sent successfully ✅\" });\r\n+  } catch (err: any) {\r\n+    console.error(\"SendGrid or Firestore error:\", err);\r\n+    return NextResponse.json({ message: \"Internal server error\" }, { status: 500 });\r\n+  }\r\n+}\r\n+\r\n // Setup SendGrid\r\n sgMail.setApiKey(process.env.SENDGRID_API_KEY!);\r\n const RECEIVER_EMAIL = \"connectify.hub.in@gmail.com\"; // Replace with your email\r\n \r\n"
                },
                {
                    "date": 1760144432688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,27 +3,8 @@\n import { initializeApp, getApps } from \"firebase/app\";\r\n import { getFirestore, collection, addDoc, serverTimestamp } from \"firebase/firestore\";\r\n import sgMail from \"@sendgrid/mail\";\r\n \r\n-// Initialize Firebase (only once)\r\n-const firebaseConfig = {\r\n-  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\r\n-  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\r\n-  databaseURL: process.env.NEXT_PUBLIC_FIREBASE_DATABASE_URL,\r\n-  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\r\n-  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\r\n-  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\r\n-  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\r\n-};\r\n-\r\n-if (!getApps().length) initializeApp(firebaseConfig);\r\n-const db = getFirestore();\r\n-// app/api/contact/route.ts\r\n-import { NextRequest, NextResponse } from \"next/server\";\r\n-import { initializeApp, getApps } from \"firebase/app\";\r\n-import { getFirestore, collection, addDoc, serverTimestamp } from \"firebase/firestore\";\r\n-import sgMail from \"@sendgrid/mail\";\r\n-\r\n // ========================\r\n // 🔥 Initialize Firebase\r\n // ========================\r\n const firebaseConfig = {\r\n@@ -86,42 +67,4 @@\n     console.error(\"SendGrid or Firestore error:\", err);\r\n     return NextResponse.json({ message: \"Internal server error\" }, { status: 500 });\r\n   }\r\n }\r\n-\r\n-// Setup SendGrid\r\n-sgMail.setApiKey(process.env.SENDGRID_API_KEY!);\r\n-const RECEIVER_EMAIL = \"connectify.hub.in@gmail.com\"; // Replace with your email\r\n-\r\n-export async function POST(req: NextRequest) {\r\n-  try {\r\n-    const { name, email, message } = await req.json();\r\n-\r\n-    if (!name || !email || !message) {\r\n-      return NextResponse.json({ message: \"Missing fields\" }, { status: 400 });\r\n-    }\r\n-\r\n-    // Save to Firestore\r\n-    await addDoc(collection(db, \"contactMessages\"), {\r\n-      name,\r\n-      email,\r\n-      message,\r\n-      timestamp: serverTimestamp(),\r\n-    });\r\n-\r\n-    // Send email via SendGrid\r\n-    await sgMail.send({\r\n-      to: RECEIVER_EMAIL,\r\n-      from: \"no-reply@connectify.com\", // Must be verified in SendGrid\r\n-      subject: `New Contact Form Submission from ${name}`,\r\n-      text: `Name: ${name}\\nEmail: ${email}\\nMessage: ${message}`,\r\n-      html: `<p><strong>Name:</strong> ${name}</p>\r\n-             <p><strong>Email:</strong> ${email}</p>\r\n-             <p><strong>Message:</strong><br/>${message}</p>`,\r\n-    });\r\n-\r\n-    return NextResponse.json({ message: \"Message sent successfully\" });\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    return NextResponse.json({ message: \"Internal server error\" }, { status: 500 });\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1760145493213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-// app/api/contact/route.ts\r\n import { NextRequest, NextResponse } from \"next/server\";\r\n import { initializeApp, getApps } from \"firebase/app\";\r\n import { getFirestore, collection, addDoc, serverTimestamp } from \"firebase/firestore\";\r\n import sgMail from \"@sendgrid/mail\";\r\n@@ -22,13 +21,18 @@\n \r\n // ========================\r\n // 📧 Setup SendGrid\r\n // ========================\r\n-const SENDGRID_API_KEY = process.env.SENDGRID_API_KEY!;\r\n-const EMAIL_TO = process.env.EMAIL_TO!;\r\n-const EMAIL_FROM = process.env.EMAIL_FROM!; // must be verified sender\r\n-sgMail.setApiKey(SENDGRID_API_KEY);\r\n+const SENDGRID_API_KEY = process.env.SENDGRID_API_KEY;\r\n+const EMAIL_TO = process.env.EMAIL_TO;\r\n+const EMAIL_FROM = process.env.EMAIL_FROM;\r\n \r\n+if (!SENDGRID_API_KEY || !EMAIL_FROM || !EMAIL_TO) {\r\n+  console.error(\"❌ Missing required environment variables for SendGrid\");\r\n+}\r\n+\r\n+sgMail.setApiKey(SENDGRID_API_KEY!);\r\n+\r\n // ========================\r\n // 📩 POST Handler\r\n // ========================\r\n export async function POST(req: NextRequest) {\r\n@@ -47,11 +51,11 @@\n       timestamp: serverTimestamp(),\r\n     });\r\n \r\n     // Send email via SendGrid\r\n-    await sgMail.send({\r\n-      to: EMAIL_TO,\r\n-      from: EMAIL_FROM, // ✅ must be verified in SendGrid\r\n+    const msg = {\r\n+      to: EMAIL_TO!,\r\n+      from: EMAIL_FROM!, // ✅ must be verified sender\r\n       subject: `📩 New Contact Form Submission from ${name}`,\r\n       text: `Name: ${name}\\nEmail: ${email}\\nMessage: ${message}`,\r\n       html: `\r\n         <h2>New Message from Contact Form</h2>\r\n@@ -59,12 +63,23 @@\n         <p><strong>Email:</strong> ${email}</p>\r\n         <p><strong>Message:</strong></p>\r\n         <p>${message}</p>\r\n       `,\r\n-    });\r\n+    };\r\n \r\n+    await sgMail.send(msg);\r\n+    console.log(\"✅ Email sent successfully\");\r\n+\r\n     return NextResponse.json({ message: \"Message sent successfully ✅\" });\r\n-  } catch (err: any) {\r\n-    console.error(\"SendGrid or Firestore error:\", err);\r\n-    return NextResponse.json({ message: \"Internal server error\" }, { status: 500 });\r\n+  } catch (error: any) {\r\n+    // Log detailed SendGrid error if available\r\n+    console.error(\"❌ SendGrid or Firestore error:\", error?.response?.body || error);\r\n+\r\n+    return NextResponse.json(\r\n+      {\r\n+        message: \"Internal server error\",\r\n+        error: error?.response?.body?.errors?.[0]?.message || error.message || \"Unknown error\",\r\n+      },\r\n+      { status: 500 }\r\n+    );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1760145852698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,15 @@\n   messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\r\n   appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\r\n };\r\n \r\n-if (!getApps().length) initializeApp(firebaseConfig);\r\n+if (!getApps().length) {\r\n+  console.log(\"⚙️ Initializing Firebase app...\");\r\n+  initializeApp(firebaseConfig);\r\n+} else {\r\n+  console.log(\"✅ Firebase already initialized\");\r\n+}\r\n+\r\n const db = getFirestore();\r\n \r\n // ========================\r\n // 📧 Setup SendGrid\r\n@@ -26,59 +32,89 @@\n const EMAIL_TO = process.env.EMAIL_TO;\r\n const EMAIL_FROM = process.env.EMAIL_FROM;\r\n \r\n if (!SENDGRID_API_KEY || !EMAIL_FROM || !EMAIL_TO) {\r\n-  console.error(\"❌ Missing required environment variables for SendGrid\");\r\n+  console.error(\"❌ Missing required environment variables for SendGrid:\", {\r\n+    SENDGRID_API_KEY: !!SENDGRID_API_KEY,\r\n+    EMAIL_FROM,\r\n+    EMAIL_TO,\r\n+  });\r\n+} else {\r\n+  console.log(\"✅ SendGrid environment variables loaded\");\r\n }\r\n \r\n-sgMail.setApiKey(SENDGRID_API_KEY!);\r\n+sgMail.setApiKey(SENDGRID_API_KEY || \"\");\r\n \r\n // ========================\r\n // 📩 POST Handler\r\n // ========================\r\n export async function POST(req: NextRequest) {\r\n+  console.log(\"📩 Received contact form submission\");\r\n+\r\n   try {\r\n     const { name, email, message } = await req.json();\r\n \r\n+    // Step 1: Validate input\r\n     if (!name || !email || !message) {\r\n+      console.warn(\"⚠️ Missing required fields:\", { name, email, message });\r\n       return NextResponse.json({ message: \"Missing required fields\" }, { status: 400 });\r\n     }\r\n \r\n-    // Save message to Firestore\r\n-    await addDoc(collection(db, \"contactMessages\"), {\r\n-      name,\r\n-      email,\r\n-      message,\r\n-      timestamp: serverTimestamp(),\r\n-    });\r\n+    console.log(\"📝 Valid data received:\", { name, email });\r\n \r\n-    // Send email via SendGrid\r\n+    // Step 2: Save message to Firestore\r\n+    try {\r\n+      const docRef = await addDoc(collection(db, \"contactMessages\"), {\r\n+        name,\r\n+        email,\r\n+        message,\r\n+        timestamp: serverTimestamp(),\r\n+      });\r\n+      console.log(\"✅ Message saved to Firestore:\", docRef.id);\r\n+    } catch (firebaseErr: any) {\r\n+      console.error(\"🔥 Firestore save failed:\", firebaseErr);\r\n+      // Continue — still try to send email\r\n+    }\r\n+\r\n+    // Step 3: Send email via SendGrid\r\n     const msg = {\r\n       to: EMAIL_TO!,\r\n-      from: EMAIL_FROM!, // ✅ must be verified sender\r\n+      from: EMAIL_FROM!, // must be verified in SendGrid\r\n       subject: `📩 New Contact Form Submission from ${name}`,\r\n       text: `Name: ${name}\\nEmail: ${email}\\nMessage: ${message}`,\r\n       html: `\r\n-        <h2>New Message from Contact Form</h2>\r\n+        <h2>📬 New Message from Contact Form</h2>\r\n         <p><strong>Name:</strong> ${name}</p>\r\n         <p><strong>Email:</strong> ${email}</p>\r\n         <p><strong>Message:</strong></p>\r\n         <p>${message}</p>\r\n       `,\r\n     };\r\n \r\n-    await sgMail.send(msg);\r\n-    console.log(\"✅ Email sent successfully\");\r\n+    try {\r\n+      const response = await sgMail.send(msg);\r\n+      console.log(\"✅ Email sent successfully via SendGrid\", response[0].statusCode);\r\n+    } catch (sgErr: any) {\r\n+      console.error(\"📮 SendGrid email error:\", sgErr?.response?.body || sgErr);\r\n+      return NextResponse.json(\r\n+        {\r\n+          message: \"Failed to send email\",\r\n+          error: sgErr?.response?.body?.errors?.[0]?.message || sgErr.message,\r\n+        },\r\n+        { status: 500 }\r\n+      );\r\n+    }\r\n \r\n+    // Step 4: Final success\r\n+    console.log(\"🎉 Contact form processed successfully\");\r\n     return NextResponse.json({ message: \"Message sent successfully ✅\" });\r\n-  } catch (error: any) {\r\n-    // Log detailed SendGrid error if available\r\n-    console.error(\"❌ SendGrid or Firestore error:\", error?.response?.body || error);\r\n \r\n+  } catch (err: any) {\r\n+    console.error(\"❌ Unexpected server error:\", err);\r\n     return NextResponse.json(\r\n       {\r\n         message: \"Internal server error\",\r\n-        error: error?.response?.body?.errors?.[0]?.message || error.message || \"Unknown error\",\r\n+        error: err?.message || \"Unknown error\",\r\n       },\r\n       { status: 500 }\r\n     );\r\n   }\r\n"
                }
            ],
            "date": 1760122877060,
            "name": "Commit-0",
            "content": "// app/api/contact/route.ts\r\nimport { NextResponse } from \"next/server\";\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const body = await req.json();\r\n    const { name, email, message } = body;\r\n\r\n    if (!name || !email || !message) {\r\n      return NextResponse.json({ message: \"Missing required fields\" }, { status: 400 });\r\n    }\r\n\r\n    // Call your Firebase function\r\n    const functionUrl = `https://YOUR_PROJECT_ID.cloudfunctions.net/submitContactForm`;\r\n\r\n    const res = await fetch(functionUrl, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ name, email, message }),\r\n    });\r\n\r\n    const data = await res.json();\r\n\r\n    if (!res.ok) {\r\n      return NextResponse.json({ message: data.message || \"Failed to send message\" }, { status: 500 });\r\n    }\r\n\r\n    return NextResponse.json({ message: \"Message sent successfully\", id: data.id });\r\n  } catch (error: any) {\r\n    console.error(\"API error:\", error);\r\n    return NextResponse.json({ message: \"Internal server error\", error: error.message }, { status: 500 });\r\n  }\r\n}\r\n"
        }
    ]
}