{
    "sourceFile": "functions/src/index.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1760121920638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760122528129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,32 @@\n-import { onRequest } from \"firebase-functions/https\";\n-import * as admin from \"firebase-admin\";\n+/**\n+ * Import function triggers from their respective submodules:\n+ *\n+ * import {onCall} from \"firebase-functions/v2/https\";\n+ * import {onDocumentWritten} from \"firebase-functions/v2/firestore\";\n+ *\n+ * See a full list of supported triggers at https://firebase.google.com/docs/functions\n+ */\n+\n+import {setGlobalOptions} from \"firebase-functions\";\n+import {onRequest} from \"firebase-functions/https\";\n import * as logger from \"firebase-functions/logger\";\n-import sgMail from \"@sendgrid/mail\";\n \n-// Initialize Firebase Admin SDK\n-admin.initializeApp();\n+// Start writing functions\n+// https://firebase.google.com/docs/functions/typescript\n \n-// Configure SendGrid API Key (set in Firebase env variables)\n-sgMail.setApiKey(process.env.SENDGRID_API_KEY!);\n+// For cost control, you can set the maximum number of containers that can be\n+// running at the same time. This helps mitigate the impact of unexpected\n+// traffic spikes by instead downgrading performance. This limit is a\n+// per-function limit. You can override the limit for each function using the\n+// `maxInstances` option in the function's options, e.g.\n+// `onRequest({ maxInstances: 5 }, (req, res) => { ... })`.\n+// NOTE: setGlobalOptions does not apply to functions using the v1 API. V1\n+// functions should each use functions.runWith({ maxInstances: 10 }) instead.\n+// In the v1 API, each function can only serve one request per container, so\n+// this will be the maximum concurrent request count.\n+setGlobalOptions({ maxInstances: 10 });\n \n-// Function to save contact form data and send notification email\n-export const submitContactForm = onRequest(async (req, res) => {\n-  try {\n-    if (req.method !== \"POST\") {\n-      return res.status(405).send(\"Method Not Allowed\");\n-    }\n-\n-    const { name, email, message } = req.body;\n-\n-    if (!name || !email || !message) {\n-      return res.status(400).send(\"All fields are required\");\n-    }\n-\n-    // Save to Firebase Realtime Database\n-    const newRef = admin.database().ref(\"contacts\").push();\n-    await newRef.set({ name, email, message, timestamp: Date.now() });\n-\n-    // Send email notification\n-    const msg = {\n-      to: \"connectify.hub.in@gmail.com\", // your email\n-      from: \"no-reply@connectify.com\",\n-      subject: \"New Contact Form Submission\",\n-      text: `You have a new message from ${name} (${email}):\\n\\n${message}`,\n-      html: `<p>You have a new message from <strong>${name}</strong> (${email}):</p><p>${message}</p>`,\n-    };\n-\n-    await sgMail.send(msg);\n-\n-    logger.info(\"Contact form submitted and email sent\", { name, email });\n-\n-    res.status(200).send({ success: true, message: \"Form submitted successfully\" });\n-  } catch (err) {\n-    logger.error(\"Error submitting contact form\", err);\n-    res.status(500).send({ success: false, message: \"Internal Server Error\" });\n-  }\n-});\n+// export const helloWorld = onRequest((request, response) => {\n+//   logger.info(\"Hello logs!\", {structuredData: true});\n+//   response.send(\"Hello from Firebase!\");\n+// });\n"
                },
                {
                    "date": 1760122623706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,32 +1,47 @@\n-/**\n- * Import function triggers from their respective submodules:\n- *\n- * import {onCall} from \"firebase-functions/v2/https\";\n- * import {onDocumentWritten} from \"firebase-functions/v2/firestore\";\n- *\n- * See a full list of supported triggers at https://firebase.google.com/docs/functions\n- */\n-\n-import {setGlobalOptions} from \"firebase-functions\";\n-import {onRequest} from \"firebase-functions/https\";\n+import { onRequest } from \"firebase-functions/https\";\n+import * as admin from \"firebase-admin\";\n import * as logger from \"firebase-functions/logger\";\n+import sgMail from \"@sendgrid/mail\";\n \n-// Start writing functions\n-// https://firebase.google.com/docs/functions/typescript\n+// Initialize Firebase Admin SDK\n+admin.initializeApp();\n \n-// For cost control, you can set the maximum number of containers that can be\n-// running at the same time. This helps mitigate the impact of unexpected\n-// traffic spikes by instead downgrading performance. This limit is a\n-// per-function limit. You can override the limit for each function using the\n-// `maxInstances` option in the function's options, e.g.\n-// `onRequest({ maxInstances: 5 }, (req, res) => { ... })`.\n-// NOTE: setGlobalOptions does not apply to functions using the v1 API. V1\n-// functions should each use functions.runWith({ maxInstances: 10 }) instead.\n-// In the v1 API, each function can only serve one request per container, so\n-// this will be the maximum concurrent request count.\n-setGlobalOptions({ maxInstances: 10 });\n+// Configure SendGrid API Key (set in Firebase env variables)\n+sgMail.setApiKey(process.env.SENDGRID_API_KEY!);\n \n-// export const helloWorld = onRequest((request, response) => {\n-//   logger.info(\"Hello logs!\", {structuredData: true});\n-//   response.send(\"Hello from Firebase!\");\n-// });\n+// Function to save contact form data and send notification email\n+export const submitContactForm = onRequest(async (req, res) => {\n+  try {\n+    if (req.method !== \"POST\") {\n+      return res.status(405).send(\"Method Not Allowed\");\n+    }\n+\n+    const { name, email, message } = req.body;\n+\n+    if (!name || !email || !message) {\n+      return res.status(400).send(\"All fields are required\");\n+    }\n+\n+    // Save to Firebase Realtime Database\n+    const newRef = admin.database().ref(\"contacts\").push();\n+    await newRef.set({ name, email, message, timestamp: Date.now() });\n+\n+    // Send email notification\n+    const msg = {\n+      to: \"connectify.hub.in@gmail.com\", // your email\n+      from: \"no-reply@connectify.com\",\n+      subject: \"New Contact Form Submission\",\n+      text: `You have a new message from ${name} (${email}):\\n\\n${message}`,\n+      html: `<p>You have a new message from <strong>${name}</strong> (${email}):</p><p>${message}</p>`,\n+    };\n+\n+    await sgMail.send(msg);\n+\n+    logger.info(\"Contact form submitted and email sent\", { name, email });\n+\n+    res.status(200).send({ success: true, message: \"Form submitted successfully\" });\n+  } catch (err) {\n+    logger.error(\"Error submitting contact form\", err);\n+    res.status(500).send({ success: false, message: \"Internal Server Error\" });\n+  }\n+});\n"
                },
                {
                    "date": 1760122752229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,55 @@\n-import { onRequest } from \"firebase-functions/https\";\n+import * as functions from \"firebase-functions\";\n import * as admin from \"firebase-admin\";\n-import * as logger from \"firebase-functions/logger\";\n import sgMail from \"@sendgrid/mail\";\n \n-// Initialize Firebase Admin SDK\n+// Initialize Firebase Admin\n admin.initializeApp();\n+const db = admin.firestore();\n \n-// Configure SendGrid API Key (set in Firebase env variables)\n-sgMail.setApiKey(process.env.SENDGRID_API_KEY!);\n+// Get SendGrid API key from Firebase config\n+const SENDGRID_API_KEY = functions.config().sendgrid.key;\n+sgMail.setApiKey(SENDGRID_API_KEY);\n \n-// Function to save contact form data and send notification email\n-export const submitContactForm = onRequest(async (req, res) => {\n+// Your email address to receive messages\n+const RECEIVER_EMAIL = \"your-email@example.com\";\n+\n+// HTTPS function to handle contact form submission\n+export const submitContactForm = functions.https.onRequest(async (req, res) => {\n   try {\n     if (req.method !== \"POST\") {\n-      return res.status(405).send(\"Method Not Allowed\");\n+      return res.status(405).send({ message: \"Method not allowed\" });\n     }\n \n     const { name, email, message } = req.body;\n \n     if (!name || !email || !message) {\n-      return res.status(400).send(\"All fields are required\");\n+      return res.status(400).send({ message: \"Missing required fields\" });\n     }\n \n-    // Save to Firebase Realtime Database\n-    const newRef = admin.database().ref(\"contacts\").push();\n-    await newRef.set({ name, email, message, timestamp: Date.now() });\n+    // Save to Firestore\n+    const docRef = await db.collection(\"contactMessages\").add({\n+      name,\n+      email,\n+      message,\n+      createdAt: admin.firestore.FieldValue.serverTimestamp(),\n+    });\n \n-    // Send email notification\n+    // Send email notification via SendGrid\n     const msg = {\n-      to: \"connectify.hub.in@gmail.com\", // your email\n-      from: \"no-reply@connectify.com\",\n-      subject: \"New Contact Form Submission\",\n-      text: `You have a new message from ${name} (${email}):\\n\\n${message}`,\n-      html: `<p>You have a new message from <strong>${name}</strong> (${email}):</p><p>${message}</p>`,\n+      to: RECEIVER_EMAIL,\n+      from: \"no-reply@connectify.com\", // Verified sender in SendGrid\n+      subject: `New Contact Form Submission from ${name}`,\n+      text: `Name: ${name}\\nEmail: ${email}\\nMessage: ${message}`,\n+      html: `<p><strong>Name:</strong> ${name}</p>\n+             <p><strong>Email:</strong> ${email}</p>\n+             <p><strong>Message:</strong><br/>${message}</p>`,\n     };\n \n     await sgMail.send(msg);\n \n-    logger.info(\"Contact form submitted and email sent\", { name, email });\n-\n-    res.status(200).send({ success: true, message: \"Form submitted successfully\" });\n-  } catch (err) {\n-    logger.error(\"Error submitting contact form\", err);\n-    res.status(500).send({ success: false, message: \"Internal Server Error\" });\n+    return res.status(200).send({ message: \"Message submitted successfully\", id: docRef.id });\n+  } catch (error: any) {\n+    console.error(\"Error submitting contact form:\", error);\n+    return res.status(500).send({ message: \"Internal server error\", error: error.message });\n   }\n });\n"
                },
                {
                    "date": 1760123150836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,30 @@\n import * as functions from \"firebase-functions\";\n import * as admin from \"firebase-admin\";\n import sgMail from \"@sendgrid/mail\";\n \n-// Initialize Firebase Admin\n admin.initializeApp();\n const db = admin.firestore();\n \n // Get SendGrid API key from Firebase config\n+// Make sure you ran: firebase functions:config:set sendgrid.key=\"YOUR_SENDGRID_KEY\"\n const SENDGRID_API_KEY = functions.config().sendgrid.key;\n sgMail.setApiKey(SENDGRID_API_KEY);\n \n // Your email address to receive messages\n const RECEIVER_EMAIL = \"your-email@example.com\";\n \n-// HTTPS function to handle contact form submission\n+// HTTPS function\n export const submitContactForm = functions.https.onRequest(async (req, res) => {\n+  if (req.method !== \"POST\") {\n+    return res.status(405).json({ message: \"Method not allowed\" });\n+  }\n+\n   try {\n-    if (req.method !== \"POST\") {\n-      return res.status(405).send({ message: \"Method not allowed\" });\n-    }\n-\n     const { name, email, message } = req.body;\n \n     if (!name || !email || !message) {\n-      return res.status(400).send({ message: \"Missing required fields\" });\n+      return res.status(400).json({ message: \"Missing required fields\" });\n     }\n \n     // Save to Firestore\n     const docRef = await db.collection(\"contactMessages\").add({\n@@ -33,12 +33,12 @@\n       message,\n       createdAt: admin.firestore.FieldValue.serverTimestamp(),\n     });\n \n-    // Send email notification via SendGrid\n+    // Send email via SendGrid\n     const msg = {\n       to: RECEIVER_EMAIL,\n-      from: \"no-reply@connectify.com\", // Verified sender in SendGrid\n+      from: \"no-reply@connectify.com\", // Must be verified in SendGrid\n       subject: `New Contact Form Submission from ${name}`,\n       text: `Name: ${name}\\nEmail: ${email}\\nMessage: ${message}`,\n       html: `<p><strong>Name:</strong> ${name}</p>\n              <p><strong>Email:</strong> ${email}</p>\n@@ -46,10 +46,10 @@\n     };\n \n     await sgMail.send(msg);\n \n-    return res.status(200).send({ message: \"Message submitted successfully\", id: docRef.id });\n+    return res.status(200).json({ message: \"Message submitted successfully\", id: docRef.id });\n   } catch (error: any) {\n     console.error(\"Error submitting contact form:\", error);\n-    return res.status(500).send({ message: \"Internal server error\", error: error.message });\n+    return res.status(500).json({ message: \"Internal server error\", error: error.message });\n   }\n });\n"
                },
                {
                    "date": 1760123172506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,8 @@\n admin.initializeApp();\n const db = admin.firestore();\n \n // Get SendGrid API key from Firebase config\n-// Make sure you ran: firebase functions:config:set sendgrid.key=\"YOUR_SENDGRID_KEY\"\n const SENDGRID_API_KEY = functions.config().sendgrid.key;\n sgMail.setApiKey(SENDGRID_API_KEY);\n \n // Your email address to receive messages\n"
                },
                {
                    "date": 1760123241114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,16 +14,18 @@\n \n // HTTPS function\n export const submitContactForm = functions.https.onRequest(async (req, res) => {\n   if (req.method !== \"POST\") {\n-    return res.status(405).json({ message: \"Method not allowed\" });\n+    res.status(405).json({message: \"Method not allowed\"});\n+    return;\n   }\n \n   try {\n     const { name, email, message } = req.body;\n \n     if (!name || !email || !message) {\n-      return res.status(400).json({ message: \"Missing required fields\" });\n+      res.status(400).json({message: \"Missing required fields\"});\n+      return;\n     }\n \n     // Save to Firestore\n     const docRef = await db.collection(\"contactMessages\").add({\n@@ -45,10 +47,16 @@\n     };\n \n     await sgMail.send(msg);\n \n-    return res.status(200).json({ message: \"Message submitted successfully\", id: docRef.id });\n-  } catch (error: any) {\n+    res.status(200).json({\n+      message: \"Message submitted successfully\",\n+      id: docRef.id\n+    });\n+  } catch (error: unknown) {\n     console.error(\"Error submitting contact form:\", error);\n-    return res.status(500).json({ message: \"Internal server error\", error: error.message });\n+    res.status(500).json({\n+      message: \"Internal server error\",\n+      error: error instanceof Error ? error.message : String(error)\n+    });\n   }\n });\n"
                },
                {
                    "date": 1760123294972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,27 +4,37 @@\n \n admin.initializeApp();\n const db = admin.firestore();\n \n-// Get SendGrid API key from Firebase config\n+// ✅ Make sure you set SendGrid key in Firebase config:\n+// firebase functions:config:set sendgrid.key=\"YOUR_SENDGRID_API_KEY\"\n const SENDGRID_API_KEY = functions.config().sendgrid.key;\n sgMail.setApiKey(SENDGRID_API_KEY);\n \n-// Your email address to receive messages\n+// Your email address to receive contact form submissions\n const RECEIVER_EMAIL = \"your-email@example.com\";\n \n+// Type for request body\n+interface ContactFormBody {\n+  name: string;\n+  email: string;\n+  message: string;\n+}\n+\n // HTTPS function\n export const submitContactForm = functions.https.onRequest(async (req, res) => {\n   if (req.method !== \"POST\") {\n-    res.status(405).json({message: \"Method not allowed\"});\n+    res.status(405).json({ message: \"Method not allowed\" });\n     return;\n   }\n \n   try {\n-    const { name, email, message } = req.body;\n+    const body: ContactFormBody = req.body;\n \n+    const { name, email, message } = body;\n+\n     if (!name || !email || !message) {\n-      res.status(400).json({message: \"Missing required fields\"});\n+      res.status(400).json({ message: \"Missing required fields\" });\n       return;\n     }\n \n     // Save to Firestore\n@@ -49,14 +59,14 @@\n     await sgMail.send(msg);\n \n     res.status(200).json({\n       message: \"Message submitted successfully\",\n-      id: docRef.id\n+      id: docRef.id,\n     });\n-  } catch (error: unknown) {\n+  } catch (error) {\n     console.error(\"Error submitting contact form:\", error);\n     res.status(500).json({\n       message: \"Internal server error\",\n-      error: error instanceof Error ? error.message : String(error)\n+      error: error instanceof Error ? error.message : String(error),\n     });\n   }\n });\n"
                },
                {
                    "date": 1760123347891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,72 +1,73 @@\n import * as functions from \"firebase-functions\";\n import * as admin from \"firebase-admin\";\n import sgMail from \"@sendgrid/mail\";\n+import { Request, Response } from \"express\"; // ✅ Import Express types\n \n admin.initializeApp();\n const db = admin.firestore();\n \n-// ✅ Make sure you set SendGrid key in Firebase config:\n+// Set SendGrid key in Firebase config:\n // firebase functions:config:set sendgrid.key=\"YOUR_SENDGRID_API_KEY\"\n const SENDGRID_API_KEY = functions.config().sendgrid.key;\n sgMail.setApiKey(SENDGRID_API_KEY);\n \n-// Your email address to receive contact form submissions\n const RECEIVER_EMAIL = \"your-email@example.com\";\n \n-// Type for request body\n interface ContactFormBody {\n   name: string;\n   email: string;\n   message: string;\n }\n \n // HTTPS function\n-export const submitContactForm = functions.https.onRequest(async (req, res) => {\n-  if (req.method !== \"POST\") {\n-    res.status(405).json({ message: \"Method not allowed\" });\n-    return;\n-  }\n+export const submitContactForm = functions.https.onRequest(\n+  async (req: Request, res: Response) => { // ✅ Use Express types\n+    if (req.method !== \"POST\") {\n+      res.status(405).json({ message: \"Method not allowed\" });\n+      return;\n+    }\n \n-  try {\n-    const body: ContactFormBody = req.body;\n+    try {\n+      const body = req.body as ContactFormBody; // ✅ Cast req.body\n \n-    const { name, email, message } = body;\n+      const { name, email, message } = body;\n \n-    if (!name || !email || !message) {\n-      res.status(400).json({ message: \"Missing required fields\" });\n-      return;\n-    }\n+      if (!name || !email || !message) {\n+        res.status(400).json({ message: \"Missing required fields\" });\n+        return;\n+      }\n \n-    // Save to Firestore\n-    const docRef = await db.collection(\"contactMessages\").add({\n-      name,\n-      email,\n-      message,\n-      createdAt: admin.firestore.FieldValue.serverTimestamp(),\n-    });\n+      // Save to Firestore\n+      const docRef = await db.collection(\"contactMessages\").add({\n+        name,\n+        email,\n+        message,\n+        createdAt: admin.firestore.FieldValue.serverTimestamp(),\n+      });\n \n-    // Send email via SendGrid\n-    const msg = {\n-      to: RECEIVER_EMAIL,\n-      from: \"no-reply@connectify.com\", // Must be verified in SendGrid\n-      subject: `New Contact Form Submission from ${name}`,\n-      text: `Name: ${name}\\nEmail: ${email}\\nMessage: ${message}`,\n-      html: `<p><strong>Name:</strong> ${name}</p>\n-             <p><strong>Email:</strong> ${email}</p>\n-             <p><strong>Message:</strong><br/>${message}</p>`,\n-    };\n+      // Send email via SendGrid\n+      const msg = {\n+        to: RECEIVER_EMAIL,\n+        from: \"no-reply@connectify.com\", // Must be verified in SendGrid\n+        subject: `New Contact Form Submission from ${name}`,\n+        text: `Name: ${name}\\nEmail: ${email}\\nMessage: ${message}`,\n+        html: `<p><strong>Name:</strong> ${name}</p>\n+               <p><strong>Email:</strong> ${email}</p>\n+               <p><strong>Message:</strong><br/>${message}</p>`,\n+      };\n \n-    await sgMail.send(msg);\n+      await sgMail.send(msg);\n \n-    res.status(200).json({\n-      message: \"Message submitted successfully\",\n-      id: docRef.id,\n-    });\n-  } catch (error) {\n-    console.error(\"Error submitting contact form:\", error);\n-    res.status(500).json({\n-      message: \"Internal server error\",\n-      error: error instanceof Error ? error.message : String(error),\n-    });\n+      res.status(200).json({\n+        message: \"Message submitted successfully\",\n+        id: docRef.id,\n+      });\n+    } catch (error) {\n+      console.error(\"Error submitting contact form:\", error);\n+      res.status(500).json({\n+        message: \"Internal server error\",\n+        error: error instanceof Error ? error.message : String(error),\n+      });\n+    }\n   }\n-});\n+);\n"
                },
                {
                    "date": 1760123383806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,12 @@\n import * as functions from \"firebase-functions\";\n import * as admin from \"firebase-admin\";\n import sgMail from \"@sendgrid/mail\";\n-import { Request, Response } from \"express\"; // ✅ Import Express types\n \n admin.initializeApp();\n const db = admin.firestore();\n \n-// Set SendGrid key in Firebase config:\n+// Set SendGrid key in Firebase config\n // firebase functions:config:set sendgrid.key=\"YOUR_SENDGRID_API_KEY\"\n const SENDGRID_API_KEY = functions.config().sendgrid.key;\n sgMail.setApiKey(SENDGRID_API_KEY);\n \n@@ -18,18 +17,17 @@\n   email: string;\n   message: string;\n }\n \n-// HTTPS function\n export const submitContactForm = functions.https.onRequest(\n-  async (req: Request, res: Response) => { // ✅ Use Express types\n+  async (req, res) => {\n     if (req.method !== \"POST\") {\n       res.status(405).json({ message: \"Method not allowed\" });\n       return;\n     }\n \n     try {\n-      const body = req.body as ContactFormBody; // ✅ Cast req.body\n+      const body = req.body as ContactFormBody;\n \n       const { name, email, message } = body;\n \n       if (!name || !email || !message) {\n"
                },
                {
                    "date": 1760123489511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,53 +1,57 @@\n+// functions/src/index.ts\n import * as functions from \"firebase-functions\";\n import * as admin from \"firebase-admin\";\n import sgMail from \"@sendgrid/mail\";\n \n+// Initialize Firebase Admin\n admin.initializeApp();\n const db = admin.firestore();\n \n-// Set SendGrid key in Firebase config\n-// firebase functions:config:set sendgrid.key=\"YOUR_SENDGRID_API_KEY\"\n+// Get SendGrid API key from Firebase environment config\n const SENDGRID_API_KEY = functions.config().sendgrid.key;\n sgMail.setApiKey(SENDGRID_API_KEY);\n \n+// Receiver email for contact form notifications\n const RECEIVER_EMAIL = \"your-email@example.com\";\n \n+// Type for the request body\n interface ContactFormBody {\n   name: string;\n   email: string;\n   message: string;\n }\n \n+// HTTPS function to handle contact form submissions\n export const submitContactForm = functions.https.onRequest(\n   async (req, res) => {\n     if (req.method !== \"POST\") {\n       res.status(405).json({ message: \"Method not allowed\" });\n       return;\n     }\n \n     try {\n+      // Ensure req.body is typed\n       const body = req.body as ContactFormBody;\n-\n       const { name, email, message } = body;\n \n       if (!name || !email || !message) {\n         res.status(400).json({ message: \"Missing required fields\" });\n         return;\n       }\n \n-      // Save to Firestore\n+      // Save message to Firestore\n       const docRef = await db.collection(\"contactMessages\").add({\n         name,\n         email,\n         message,\n         createdAt: admin.firestore.FieldValue.serverTimestamp(),\n       });\n \n-      // Send email via SendGrid\n+      // Send email notification via SendGrid\n       const msg = {\n         to: RECEIVER_EMAIL,\n-        from: \"no-reply@connectify.com\", // Must be verified in SendGrid\n+        from: \"no-reply@connectify.com\", // must be verified in SendGrid\n         subject: `New Contact Form Submission from ${name}`,\n         text: `Name: ${name}\\nEmail: ${email}\\nMessage: ${message}`,\n         html: `<p><strong>Name:</strong> ${name}</p>\n                <p><strong>Email:</strong> ${email}</p>\n@@ -59,9 +63,9 @@\n       res.status(200).json({\n         message: \"Message submitted successfully\",\n         id: docRef.id,\n       });\n-    } catch (error) {\n+    } catch (error: unknown) {\n       console.error(\"Error submitting contact form:\", error);\n       res.status(500).json({\n         message: \"Internal server error\",\n         error: error instanceof Error ? error.message : String(error),\n"
                },
                {
                    "date": 1760123503852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,76 @@\n+// functions/src/index.ts\n+import * as functions from \"firebase-functions\";\n+import * as admin from \"firebase-admin\";\n+import sgMail from \"@sendgrid/mail\";\n+\n+// Initialize Firebase Admin\n+admin.initializeApp();\n+const db = admin.firestore();\n+\n+// Get SendGrid API key from Firebase environment config\n+const SENDGRID_API_KEY = functions.config().sendgrid.key;\n+sgMail.setApiKey(SENDGRID_API_KEY);\n+\n+// Receiver email for contact form notifications\n+const RECEIVER_EMAIL = \"your-email@example.com\";\n+\n+// Type for the request body\n+interface ContactFormBody {\n+  name: string;\n+  email: string;\n+  message: string;\n+}\n+\n+// HTTPS function to handle contact form submissions\n+export const submitContactForm = functions.https.onRequest(\n+  async (req, res) => {\n+    if (req.method !== \"POST\") {\n+      res.status(405).json({ message: \"Method not allowed\" });\n+      return;\n+    }\n+\n+    try {\n+      // Ensure req.body is typed\n+      const body = req.body as ContactFormBody;\n+      const { name, email, message } = body;\n+\n+      if (!name || !email || !message) {\n+        res.status(400).json({ message: \"Missing required fields\" });\n+        return;\n+      }\n+\n+      // Save message to Firestore\n+      const docRef = await db.collection(\"contactMessages\").add({\n+        name,\n+        email,\n+        message,\n+        createdAt: admin.firestore.FieldValue.serverTimestamp(),\n+      });\n+\n+      // Send email notification via SendGrid\n+      const msg = {\n+        to: RECEIVER_EMAIL,\n+        from: \"no-reply@connectify.com\", // must be verified in SendGrid\n+        subject: `New Contact Form Submission from ${name}`,\n+        text: `Name: ${name}\\nEmail: ${email}\\nMessage: ${message}`,\n+        html: `<p><strong>Name:</strong> ${name}</p>\n+               <p><strong>Email:</strong> ${email}</p>\n+               <p><strong>Message:</strong><br/>${message}</p>`,\n+      };\n+\n+      await sgMail.send(msg);\n+\n+      res.status(200).json({\n+        message: \"Message submitted successfully\",\n+        id: docRef.id,\n+      });\n+    } catch (error: unknown) {\n+      console.error(\"Error submitting contact form:\", error);\n+      res.status(500).json({\n+        message: \"Internal server error\",\n+        error: error instanceof Error ? error.message : String(error),\n+      });\n+    }\n+  }\n+);\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1760123545386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,70 +1,65 @@\n-// functions/src/index.ts\n import * as functions from \"firebase-functions\";\n import * as admin from \"firebase-admin\";\n import sgMail from \"@sendgrid/mail\";\n \n // Initialize Firebase Admin\n admin.initializeApp();\n const db = admin.firestore();\n \n-// Get SendGrid API key from Firebase environment config\n+// Set SendGrid API key from Firebase config\n const SENDGRID_API_KEY = functions.config().sendgrid.key;\n sgMail.setApiKey(SENDGRID_API_KEY);\n \n-// Receiver email for contact form notifications\n+// Email to receive contact messages\n const RECEIVER_EMAIL = \"your-email@example.com\";\n \n-// Type for the request body\n+// Type for request body\n interface ContactFormBody {\n   name: string;\n   email: string;\n   message: string;\n }\n \n-// HTTPS function to handle contact form submissions\n export const submitContactForm = functions.https.onRequest(\n   async (req, res) => {\n+    // Only allow POST\n     if (req.method !== \"POST\") {\n       res.status(405).json({ message: \"Method not allowed\" });\n       return;\n     }\n \n     try {\n-      // Ensure req.body is typed\n-      const body = req.body as ContactFormBody;\n+      // Parse body safely\n+      const body: ContactFormBody = typeof req.body === \"string\" ? JSON.parse(req.body) : req.body;\n+\n       const { name, email, message } = body;\n \n       if (!name || !email || !message) {\n         res.status(400).json({ message: \"Missing required fields\" });\n         return;\n       }\n \n-      // Save message to Firestore\n+      // Save to Firestore\n       const docRef = await db.collection(\"contactMessages\").add({\n         name,\n         email,\n         message,\n         createdAt: admin.firestore.FieldValue.serverTimestamp(),\n       });\n \n-      // Send email notification via SendGrid\n-      const msg = {\n+      // Send email via SendGrid\n+      await sgMail.send({\n         to: RECEIVER_EMAIL,\n-        from: \"no-reply@connectify.com\", // must be verified in SendGrid\n+        from: \"no-reply@connectify.com\", // Verified sender\n         subject: `New Contact Form Submission from ${name}`,\n         text: `Name: ${name}\\nEmail: ${email}\\nMessage: ${message}`,\n         html: `<p><strong>Name:</strong> ${name}</p>\n                <p><strong>Email:</strong> ${email}</p>\n                <p><strong>Message:</strong><br/>${message}</p>`,\n-      };\n+      });\n \n-      await sgMail.send(msg);\n-\n-      res.status(200).json({\n-        message: \"Message submitted successfully\",\n-        id: docRef.id,\n-      });\n+      res.status(200).json({ message: \"Message submitted successfully\", id: docRef.id });\n     } catch (error: unknown) {\n       console.error(\"Error submitting contact form:\", error);\n       res.status(500).json({\n         message: \"Internal server error\",\n@@ -72,80 +67,4 @@\n       });\n     }\n   }\n );\n- \n-// functions/src/index.ts\n-import * as functions from \"firebase-functions\";\n-import * as admin from \"firebase-admin\";\n-import sgMail from \"@sendgrid/mail\";\n-\n-// Initialize Firebase Admin\n-admin.initializeApp();\n-const db = admin.firestore();\n-\n-// Get SendGrid API key from Firebase environment config\n-const SENDGRID_API_KEY = functions.config().sendgrid.key;\n-sgMail.setApiKey(SENDGRID_API_KEY);\n-\n-// Receiver email for contact form notifications\n-const RECEIVER_EMAIL = \"your-email@example.com\";\n-\n-// Type for the request body\n-interface ContactFormBody {\n-  name: string;\n-  email: string;\n-  message: string;\n-}\n-\n-// HTTPS function to handle contact form submissions\n-export const submitContactForm = functions.https.onRequest(\n-  async (req, res) => {\n-    if (req.method !== \"POST\") {\n-      res.status(405).json({ message: \"Method not allowed\" });\n-      return;\n-    }\n-\n-    try {\n-      // Ensure req.body is typed\n-      const body = req.body as ContactFormBody;\n-      const { name, email, message } = body;\n-\n-      if (!name || !email || !message) {\n-        res.status(400).json({ message: \"Missing required fields\" });\n-        return;\n-      }\n-\n-      // Save message to Firestore\n-      const docRef = await db.collection(\"contactMessages\").add({\n-        name,\n-        email,\n-        message,\n-        createdAt: admin.firestore.FieldValue.serverTimestamp(),\n-      });\n-\n-      // Send email notification via SendGrid\n-      const msg = {\n-        to: RECEIVER_EMAIL,\n-        from: \"no-reply@connectify.com\", // must be verified in SendGrid\n-        subject: `New Contact Form Submission from ${name}`,\n-        text: `Name: ${name}\\nEmail: ${email}\\nMessage: ${message}`,\n-        html: `<p><strong>Name:</strong> ${name}</p>\n-               <p><strong>Email:</strong> ${email}</p>\n-               <p><strong>Message:</strong><br/>${message}</p>`,\n-      };\n-\n-      await sgMail.send(msg);\n-\n-      res.status(200).json({\n-        message: \"Message submitted successfully\",\n-        id: docRef.id,\n-      });\n-    } catch (error: unknown) {\n-      console.error(\"Error submitting contact form:\", error);\n-      res.status(500).json({\n-        message: \"Internal server error\",\n-        error: error instanceof Error ? error.message : String(error),\n-      });\n-    }\n-  }\n-);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760123596857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,65 +1,70 @@\n+// functions/src/index.ts\n import * as functions from \"firebase-functions\";\n import * as admin from \"firebase-admin\";\n import sgMail from \"@sendgrid/mail\";\n \n // Initialize Firebase Admin\n admin.initializeApp();\n const db = admin.firestore();\n \n-// Set SendGrid API key from Firebase config\n+// Get SendGrid API key from Firebase environment config\n const SENDGRID_API_KEY = functions.config().sendgrid.key;\n sgMail.setApiKey(SENDGRID_API_KEY);\n \n-// Email to receive contact messages\n+// Receiver email for contact form notifications\n const RECEIVER_EMAIL = \"your-email@example.com\";\n \n-// Type for request body\n+// Type for the request body\n interface ContactFormBody {\n   name: string;\n   email: string;\n   message: string;\n }\n \n+// HTTPS function to handle contact form submissions\n export const submitContactForm = functions.https.onRequest(\n   async (req, res) => {\n-    // Only allow POST\n     if (req.method !== \"POST\") {\n-      res.status(405).json({ message: \"Method not allowed\" });\n+      res.status(405).json({message: \"Method not allowed\"});\n       return;\n     }\n \n     try {\n-      // Parse body safely\n-      const body: ContactFormBody = typeof req.body === \"string\" ? JSON.parse(req.body) : req.body;\n+      // Ensure req.body is typed\n+      const body = req.body as ContactFormBody;\n+      const {name, email, message} = body;\n \n-      const { name, email, message } = body;\n-\n       if (!name || !email || !message) {\n-        res.status(400).json({ message: \"Missing required fields\" });\n+        res.status(400).json({message: \"Missing required fields\"});\n         return;\n       }\n \n-      // Save to Firestore\n+      // Save message to Firestore\n       const docRef = await db.collection(\"contactMessages\").add({\n         name,\n         email,\n         message,\n         createdAt: admin.firestore.FieldValue.serverTimestamp(),\n       });\n \n-      // Send email via SendGrid\n-      await sgMail.send({\n+      // Send email notification via SendGrid\n+      const msg = {\n         to: RECEIVER_EMAIL,\n-        from: \"no-reply@connectify.com\", // Verified sender\n+        from: \"no-reply@connectify.com\", // must be verified in SendGrid\n         subject: `New Contact Form Submission from ${name}`,\n         text: `Name: ${name}\\nEmail: ${email}\\nMessage: ${message}`,\n         html: `<p><strong>Name:</strong> ${name}</p>\n                <p><strong>Email:</strong> ${email}</p>\n                <p><strong>Message:</strong><br/>${message}</p>`,\n+      };\n+\n+      await sgMail.send(msg);\n+\n+      res.status(200).json({\n+        message: \"Message submitted successfully\",\n+        id: docRef.id,\n       });\n-\n-      res.status(200).json({ message: \"Message submitted successfully\", id: docRef.id });\n     } catch (error: unknown) {\n       console.error(\"Error submitting contact form:\", error);\n       res.status(500).json({\n         message: \"Internal server error\",\n"
                }
            ],
            "date": 1760121920638,
            "name": "Commit-0",
            "content": "import { onRequest } from \"firebase-functions/https\";\nimport * as admin from \"firebase-admin\";\nimport * as logger from \"firebase-functions/logger\";\nimport sgMail from \"@sendgrid/mail\";\n\n// Initialize Firebase Admin SDK\nadmin.initializeApp();\n\n// Configure SendGrid API Key (set in Firebase env variables)\nsgMail.setApiKey(process.env.SENDGRID_API_KEY!);\n\n// Function to save contact form data and send notification email\nexport const submitContactForm = onRequest(async (req, res) => {\n  try {\n    if (req.method !== \"POST\") {\n      return res.status(405).send(\"Method Not Allowed\");\n    }\n\n    const { name, email, message } = req.body;\n\n    if (!name || !email || !message) {\n      return res.status(400).send(\"All fields are required\");\n    }\n\n    // Save to Firebase Realtime Database\n    const newRef = admin.database().ref(\"contacts\").push();\n    await newRef.set({ name, email, message, timestamp: Date.now() });\n\n    // Send email notification\n    const msg = {\n      to: \"connectify.hub.in@gmail.com\", // your email\n      from: \"no-reply@connectify.com\",\n      subject: \"New Contact Form Submission\",\n      text: `You have a new message from ${name} (${email}):\\n\\n${message}`,\n      html: `<p>You have a new message from <strong>${name}</strong> (${email}):</p><p>${message}</p>`,\n    };\n\n    await sgMail.send(msg);\n\n    logger.info(\"Contact form submitted and email sent\", { name, email });\n\n    res.status(200).send({ success: true, message: \"Form submitted successfully\" });\n  } catch (err) {\n    logger.error(\"Error submitting contact form\", err);\n    res.status(500).send({ success: false, message: \"Internal Server Error\" });\n  }\n});\n"
        }
    ]
}